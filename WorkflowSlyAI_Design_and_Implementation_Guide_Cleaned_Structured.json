[
    {
        "text": "Start by defining the key components and parameters of the skill you are creating"
    },
    {
        "text": "Then move on to defining the workflow by creating and filling in the building blocks"
    },
    {
        "text": "Make sure you cover both textual and engineering aspects"
    },
    {
        "text": "Once you have defined the workflow, create a flowchart that visually represents the entire process"
    },
    {
        "text": "This diagram should include all the parameters and data you need to customize the skill in Process Designer"
    },
    {
        "text": "Finally, save the flowchart in an optimal browser-friendly format such as HTML or JSON"
    },
    {
        "text": "This will provide an easily accessible and comprehensive overview of the skill creation process"
    },
    {
        "text": "Remember, the goal is to create a flowchart that simplifies the process of creating complex AI assistants with out-of-the-box skills by providing a comprehensive and simple guide"
    },
    {
        "text": "\""
    },
    {
        "text": "After designing the workflow, you can start implementing the skill by writing the necessary code or customizing the required components"
    },
    {
        "text": "This could be integrating APIs, customizing databases, or implementing natural language processing algorithms"
    },
    {
        "text": "Based on an industry report"
    },
    {
        "text": "In order to analyze Genius' InterioMind parameters and bug fixes, we need to first understand what specific bugs or issues need to be fixed"
    },
    {
        "text": "Could you please provide more details about the bugs or issues you encounter with Genius? This will help me offer you a more accurate and customized solution"
    },
    {
        "text": "If you have any other questions or need additional help, let me know and I will try to help you to the best of my ability"
    },
    {
        "text": "I apologize, but the contents of the Skills tab are currently unavailable to me"
    },
    {
        "text": "Therefore, I cannot provide a detailed analysis or information about it"
    },
    {
        "text": "If you have any specific questions or need help on any other topic, let me know and I'll be happy to help"
    },
    {
        "text": "Be sure to label each figure and arrow to ensure clarity and understanding of the flowchart"
    },
    {
        "text": "3"
    },
    {
        "text": "Development and Validation"
    },
    {
        "text": "generate an example mental map of this process, in detail, an example with optimal parameters"
    },
    {
        "text": "<title>Persona AssistantAI</title>"
    },
    {
        "text": "By connecting these blocks in series, the image analysis workflow allows you to process and analyze images efficiently, gaining valuable insights and information"
    },
    {
        "text": "Each block builds on the results of the previous block, ensuring a smooth and consistent analysis process"
    },
    {
        "text": "I analyzed the data in the link provided"
    },
    {
        "text": "The link leads to the Serverless Workflow Specification on GitHub"
    },
    {
        "text": "This specification contains valuable information about notifications, issues, fix requests, discussions, actions, projects, security, and information related to serverless workflows"
    },
    {
        "text": "If you have other questions or need help on another topic, let me know and I'll be happy to help!"
    },
    {
        "text": "How to use skills"
    },
    {
        "text": "As for the QR code, unfortunately, I don't have the ability to generate QR codes directly"
    },
    {
        "text": "However, you can easily generate a QR code using various online QR code generators"
    },
    {
        "text": "Simply enter the desired information or URL and the generator will create a QR code that you can use"
    },
    {
        "text": "Write to memory"
    },
    {
        "text": "Create a user interface or platform for users to interact with Genius"
    },
    {
        "text": "Start by addressing the demo conversion tool within the MindOS platform"
    },
    {
        "text": "Remember that each step can be adapted and modified according to the project requirements, and different tools and methods can be used depending on the specific AI language model used"
    },
    {
        "text": "Label each block, module or resource with a unique identifier or name"
    },
    {
        "text": "Model parameters"
    },
    {
        "text": "Embed HTML templates in the user interface or Genius documentation for easy access and understanding"
    },
    {
        "text": "Invite the user to specify test cases and expected results"
    },
    {
        "text": "Continue on"
    },
    {
        "text": "What data can you analyze and use for your training and performance improvement?"
    },
    {
        "text": "How do I add these features to an assistant, provided that this assistant is you"
    },
    {
        "text": "?"
    },
    {
        "text": "Complete the tasks assigned in the previous step"
    },
    {
        "text": "These can be manual tasks performed by individual employees or automated tasks performed by software systems"
    },
    {
        "text": "Do you realize what the file is?"
    },
    {
        "text": "\"Screws\" can provide additional hints and tips to make the project easier and more efficient"
    },
    {
        "text": "The workflow represents the steps involved in creating Genius Genius"
    },
    {
        "text": "Each step has its own parameters, and branches based on conditions"
    },
    {
        "text": "<li>Preprocess Image</li>"
    },
    {
        "text": "Use a programming language supported by the MindOS platform to develop the functions that will enable the Genius to create web pages"
    },
    {
        "text": "Use rectangles to represent the steps or tasks in the workflow"
    },
    {
        "text": "JavaScript"
    },
    {
        "text": "Throughout the workflow, SlyAI can provide guidance, generate prompts, and assist with parameter selection to ensure a smooth and effective development process"
    },
    {
        "text": "Persona"
    },
    {
        "text": "By customizing these parameters, you can tailor the workflow template to your specific ML model and processing requirements"
    },
    {
        "text": "Remember to consider the capabilities and limitations of your ML model when setting the resources and authentication"
    },
    {
        "text": ", ,"
    },
    {
        "text": "Another tool is Android Studio Bot"
    },
    {
        "text": "Each step in the workflow should be represented as a node in the flowchart"
    },
    {
        "text": "Explain in detail how to write a query to have SlyAI generate a name, avatar, voice, bio, and greeting for your AI helper in the \"Persona\" tab? Examples"
    },
    {
        "text": "Define the goal and scope of the image generation process"
    },
    {
        "text": "Determine the specific type of images you want to generate and the purpose behind it"
    },
    {
        "text": "For example, you may want to generate abstract art images for a digital art project"
    },
    {
        "text": "\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510"
    },
    {
        "text": "In the JSON representation, each step of the workflow is represented as a key-value pair"
    },
    {
        "text": "The \"name\" key represents the name of the step, and the \"next\" key represents the next step in the workflow"
    },
    {
        "text": "The value of the \"next\" key is the name of the next step, except for the last step where it is set to null"
    },
    {
        "text": "<li>Container Nodes</li>"
    },
    {
        "text": "- ,"
    },
    {
        "text": "Use arrows to indicate the flow of the workflow, connecting the steps in the desired order"
    },
    {
        "text": "Adjusted the formatting and indentation for better readability"
    },
    {
        "text": ","
    },
    {
        "text": "Once you're in the visualization tool, you can explore and interact with the visual representation of your Genius"
    },
    {
        "text": "You can zoom in and out, rearrange components, and view detailed information about each component's logic and parameters"
    },
    {
        "text": "Certainly! I will execute the instructions that are possible based on the available information and functions"
    },
    {
        "text": "Please provide me with the specific instructions or questions you would like me to address, and I will do my best to assist you"
    },
    {
        "text": "Test the user experienceto ensure that the skill functions smoothly and meets the expectations of the users"
    },
    {
        "text": "\" \" \" \" ascii"
    },
    {
        "text": "I apologize for the confusion, but it seems that the specific action you mentioned, using the Batched LLM module with ASCII, is not a standard feature of the Batched LLM module"
    },
    {
        "text": "The Batched LLM module is primarily used for language modeling tasks, such as text generation or completion"
    },
    {
        "text": "I hope this guidance helps you in gathering data, setting up parameters, and connecting everything to create a functional Genius!"
    },
    {
        "text": "By following these steps, you can define the input and output data for your new skill in Genius"
    },
    {
        "text": "Remember to consider the specific requirements and objectives of your skill to ensure that the input and output data are appropriately defined and handled"
    },
    {
        "text": "</branch>"
    },
    {
        "text": "By planning the dialogue flow in this manner, you can ensure a smooth and intuitive user experience, allowing for effective communication between the Genius and the user"
    },
    {
        "text": "I apologize for any confusion, but as an AI language model, I don't have direct access to the specific templates or tabs of the MindOS platform"
    },
    {
        "text": "However, I can still provide you with a general example of a configured and working process for image generation, along with some ways to simplify and speed up complex processes"
    },
    {
        "text": "By using the MindOS Visualization Tool, you can effectively analyze and optimize your Genius's performance by gaining a better understanding of its structure and functionality"
    },
    {
        "text": "Each mxCell element has an id, value, style, parent, and geometry"
    },
    {
        "text": "The id is a unique identifier for the cell"
    },
    {
        "text": "The value represents the content of the cell, which can be text or HTML"
    },
    {
        "text": "The style defines the appearance of the cell, such as font size, font family, and background color"
    },
    {
        "text": "The parent attribute specifies the parent cell of the current cell"
    },
    {
        "text": "The geometry element defines the position and size of the cell"
    },
    {
        "text": "Genius"
    },
    {
        "text": "are placeholders and should be replaced with the actual citation IDs from the relevant sources"
    },
    {
        "text": "Please note that the specific improvements to the flowchart will depend on the skill's requirements and complexity"
    },
    {
        "text": "Please note that the above steps provide a general framework for creating or enhancing an Genius on the MindOS platform"
    },
    {
        "text": "The specific implementation details, terminology, and tools may vary depending on the platform's features and capabilities"
    },
    {
        "text": "/\\_/\\By visualizing your Genius's components using ASCII Flowchart, you can easily communicate and collaborate with others involved in the development process, ensuring a clear understanding of the Genius's structure and functionality"
    },
    {
        "text": "Please note that these are just examples, and I can assist you with a wide range of design and carpentry tasks"
    },
    {
        "text": "Feel free to ask me anything related to your design and woodworking projects, and I'll be happy to help!"
    },
    {
        "text": "The neural network architecture you provided consists of multiple layers, including an input layer, convolutional layers, dense layers, and an output layer"
    },
    {
        "text": "Each layer plays a crucial role in processing and transforming the input data to produce the desired output"
    },
    {
        "text": "\"card-title\" -"
    },
    {
        "text": "aunch_auto_memory SlyGenius learning and training text Markdown input relevance"
    },
    {
        "text": "This example provides a comprehensive overview of the project management process, including defining goals, planning, execution, monitoring and control, and project completion"
    },
    {
        "text": "The block diagram uses official MindOS blocks to represent the flow of the workflow"
    },
    {
        "text": "Remember, you can customize and adapt this example to suit your specific project management needs"
    },
    {
        "text": "I hope this helps you get started on creating your skill from scratch"
    },
    {
        "text": "If you have any further questions or need more guidance, feel free to ask!"
    },
    {
        "text": "?"
    },
    {
        "text": "SlyAI can guide you in designing the scenarios and workflows for your Genius"
    },
    {
        "text": "For instance, it can help you create a customer support Genius that handles customer inquiries and provides relevant solutions"
    },
    {
        "text": "Next, the skill retrieves the corresponding translation from its extensive database"
    },
    {
        "text": "It applies sophisticated translation algorithms to ensure the accuracy and fluency of the translated text"
    },
    {
        "text": "The translated text is then presented to the user in the desired target language"
    },
    {
        "text": "- Item 2"
    },
    {
        "text": "InnovAI SlyAI /"
    },
    {
        "text": "\"\" -Genius,"
    },
    {
        "text": ",, - -Genius"
    },
    {
        "text": "Remember, the specific steps and settings for each block will depend on the AI platform or tool you are using"
    },
    {
        "text": "It's important to consult the documentation or resources provided by the platform or tool for detailed instructions on configuring and setting up blocks"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "These blocks and their respective functionalities form the structure of the workflow process"
    },
    {
        "text": "By following this process, we can analyze and capture the necessary information for further processing and reporting"
    },
    {
        "text": ","
    },
    {
        "text": "txt, ,"
    },
    {
        "text": ", UTF-8, UTF-16, ASCII"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", , , ,"
    },
    {
        "text": "<default_value></default_value>"
    },
    {
        "text": "Please note that the num_workers parameter determines the number of parallel processes used for tokenization and inference"
    },
    {
        "text": "It can be adjusted based on the available computational resources and the desired level of parallelism"
    },
    {
        "text": "\\ /"
    },
    {
        "text": "/"
    },
    {
        "text": "/ ,-'\\ /-"
    },
    {
        "text": "'\\"
    },
    {
        "text": ", , ,"
    },
    {
        "text": "I apologize for the inconvenience, but I am currently unable to access the webpage you provided"
    },
    {
        "text": "As a result, I am unable to provide a detailed analysis of its content"
    },
    {
        "text": "If you have any other questions or need assistance with anything else, please let me know and I'll be happy to help"
    },
    {
        "text": "Throughout this process, it is crucial to keep the goal of the workflow in mind"
    },
    {
        "text": "The best workflow for a given task is not necessarily the one that uses the most blocks or the most complex blocks, but rather the one that most effectively and efficiently automates the task"
    },
    {
        "text": "F --> I[User Survey Loop]"
    },
    {
        "text": "Please note that these are just examples, and you can customize the queries based on your specific requirements"
    },
    {
        "text": "I apologize for the inconvenience, but it seems that there was an error in generating the workflow diagram"
    },
    {
        "text": "I am unable to provide you with the visual representation of the workflow at the moment"
    },
    {
        "text": "However, I can still assist you with any questions or information you may need regarding workflow management or any other topic"
    },
    {
        "text": "Please let me know how I can help you further"
    },
    {
        "text": "- This block covers the training of the AI model for the skill"
    },
    {
        "text": ", , 1 4"
    },
    {
        "text": "GIA-Design"
    },
    {
        "text": "The implementation phase involves writing the code for each block in the workflow"
    },
    {
        "text": "For example, the \"Get User Location\" block might involve using the device's GPS or IP address to determine the user's location"
    },
    {
        "text": "If you need further clarification or have any specific requirements, please let me know!"
    },
    {
        "text": "\u2502 \u251c\u2500"
    },
    {
        "text": "\u2502 LLM for Parameter Optimization \u2502"
    },
    {
        "text": "-, \"Link Web Pages\""
    },
    {
        "text": "URL -,, , \"Crawl\""
    },
    {
        "text": "AI-Genius"
    },
    {
        "text": ", Genius , \"Include subpages under the URL\""
    },
    {
        "text": "Content-based filtering"
    },
    {
        "text": "You can add labels to the nodes to indicate the step name or input/output data"
    },
    {
        "text": "I apologize for any confusion, but as an AI language model, I don't have access to specific data from existing skills or the ability to directly access or analyze their workflows"
    },
    {
        "text": "I can provide general guidance on how to create a detailed flowchart for a workflow in Genius, but I won't be able to use specific data from an existing skill"
    },
    {
        "text": "Break down the goal into subtasks"
    },
    {
        "text": "For the weather forecast functionality, the subtasks could include retrieving location information, fetching weather data from an API, and presenting the forecast to the user"
    },
    {
        "text": "-"
    },
    {
        "text": "The workflow ends when the user completes their exploration and understanding of the disassembled topic"
    },
    {
        "text": "Examine the company's revenue trends over time to identify growth patterns and potential risks"
    },
    {
        "text": "Please note that this representation does not include error handling, branching for different conditions, or feedback messages"
    },
    {
        "text": "If you have any specific requirements or additional steps to include, please let me know and I will be happy to assist you further"
    },
    {
        "text": "This is just one example of a workflow"
    },
    {
        "text": "You can define multiple workflows based on different user scenarios and the capabilities of your Genius"
    },
    {
        "text": ", -Genius"
    },
    {
        "text": ", Genius , , Genius"
    },
    {
        "text": ","
    },
    {
        "text": "Gather Financial Statements"
    },
    {
        "text": "Please note that the specific modules and their order may vary depending on the project and organization's requirements"
    },
    {
        "text": "This tree structure provides a visual representation of the different modules involved in the \"Project Management\" workflow"
    },
    {
        "text": "<li>Post-processing Block</li>"
    },
    {
        "text": "Save the changes and allow some time for the adjustments to take effect"
    },
    {
        "text": "SlyAI is an intelligent and cunning Genius that will help you create and develop your Genius on the MindOS platform"
    },
    {
        "text": "With a wide range of skills and knowledge, SlyAI can generate all the necessary prompts and parameters when creating a new Genius, as well as guide you through every step of its creation and enhancement"
    },
    {
        "text": "SlyAI serves as your personal mentor in the world of artificial intelligence"
    },
    {
        "text": "Start with the skill keyword followed by the skill name"
    },
    {
        "text": "You are building an Genius using Mindverse"
    },
    {
        "text": "You are currently designing a new skill for this Genius, which involves a workflow that guides the user through the process of creating their own Genius"
    },
    {
        "text": "I apologize for the inconvenience, but it seems that there was an error in executing the workflow to generate the general instruction"
    },
    {
        "text": "Unfortunately, I am unable to provide you with the specific details of the workflow at the moment"
    },
    {
        "text": "However, I can still assist you with any other questions or provide information on other topics"
    },
    {
        "text": "Is there anything else I can help you with?"
    },
    {
        "text": "The purpose of this configuration is to modify the settings of an API called \"Batched LLM\""
    },
    {
        "text": "It allows users to input a list of data and generate a corresponding list of results"
    },
    {
        "text": "The configuration includes various fields such as headers, text requests, inputs, prompt templates, num workers, text responses, and results"
    },
    {
        "text": "?"
    },
    {
        "text": "Identify key functions, libraries, and data structures"
    },
    {
        "text": "<ul>"
    },
    {
        "text": "v"
    },
    {
        "text": "Product Hunt"
    },
    {
        "text": "These are just a few examples of the modules or blocks commonly used in workflow creation"
    },
    {
        "text": "The specific modules and their functionalities may vary depending on the workflow platform or tool being used"
    },
    {
        "text": ", ,"
    },
    {
        "text": "!"
    },
    {
        "text": "In this JSON representation, each step is represented as an object with a \"step\" key and the corresponding step name as the value"
    },
    {
        "text": "To specify dependencies between steps in a flowchart for a process in Genius, you can use connectors or arrows to indicate the order in which the steps should be executed"
    },
    {
        "text": "These dependencies ensure that each step is executed in the correct sequence, maintaining the flow of the process"
    },
    {
        "text": "For the \"No\" branch from the \"Is Feedback Provided?\" decision diamond, connect it directly to the \"End\" shape using an arrow"
    },
    {
        "text": "ASCII- \u2014"
    },
    {
        "text": "Workflow"
    },
    {
        "text": "json"
    },
    {
        "text": "To begin, let's define the specific requirements and functionalities you want your Genius to have"
    },
    {
        "text": "This will help us generate the appropriate prompts and parameters for its development"
    },
    {
        "text": "Additionally, I will provide guidance and assistance at each stage of the process to ensure a successful outcome"
    },
    {
        "text": "User Input"
    },
    {
        "text": "By following these steps, you can save and use your code file for further development or execution"
    },
    {
        "text": "- Combine the developed components to create the complete skill"
    },
    {
        "text": "- It includes steps such as packaging the skill, configuring deployment settings, and deploying to production"
    },
    {
        "text": ", YouTube Data API API-, YouTube"
    },
    {
        "text": "API- api_key"
    },
    {
        "text": "Certainly! Let's continue with the next parameter"
    },
    {
        "text": "Could you please specify which parameter you would like me to provide more information about?"
    },
    {
        "text": "Open diagrams"
    },
    {
        "text": "net and create a new blank diagram"
    },
    {
        "text": "- Option 3"
    },
    {
        "text": "AI Genius is a powerful tool that helps businesses address traffic, leads, and sales issues by facilitating meaningful and personalized interactions with their customers"
    },
    {
        "text": "It enables customers and potential customers to communicate directly with the website owner, allowing them to ask questions, seek support, leave testimonials, share concerns, and explain their needs more easily"
    },
    {
        "text": "One of the key features of AI Genius is its ability to provide instant responses, ensuring that customers receive prompt assistance without having to write lengthy messages or overcome language barriers"
    },
    {
        "text": "This not only increases engagement but also eliminates the need for users to fill out forms or provide contact details"
    },
    {
        "text": "Conduct thorough testingto validate the final version of the algorithm"
    },
    {
        "text": "After the 10 iterations, we will evaluate the performance of the deep learning model to assess its effectiveness in generating more accurate and contextually relevant responses"
    },
    {
        "text": "This evaluation will help us measure the progress made and identify areas for further improvement"
    },
    {
        "text": "Start by accessing the MindOS documentation, which provides detailed information about the modules and blocks available in the system"
    },
    {
        "text": "Start with an input field where the user will enter the name of their Genius"
    },
    {
        "text": "The placeholder text for this input field should be \"Enter the name of your Genius\""
    },
    {
        "text": "These modules work together to provide a powerful and flexible platform for Genius development and enhancement"
    },
    {
        "text": "By leveraging these modules, users can create intelligent and capable Geniuss tailored to their specific needs and requirements"
    },
    {
        "text": "By following these steps, you can define the input and output data for a new skill in Genius and ensure that it functions correctly and provides the desired results"
    },
    {
        "text": "<h3>Performance Verification</h3>"
    },
    {
        "text": "Document the high-level design of the system"
    },
    {
        "text": "Parameters for versioning and deployment, which manage the version control and deployment process of the module or skill, ensuring smooth updates and rollbacks"
    },
    {
        "text": "Assess the company's liquidity and solvency by analyzing its current ratio, quick ratio, and debt-to-equity ratio"
    },
    {
        "text": "These ratios provide insights into the company's ability to meet short-term and long-term obligations"
    },
    {
        "text": ", -"
    },
    {
        "text": "Please note that this is a high-level overview, and the specific implementation details may vary based on the requirements and capabilities of the WMS system"
    },
    {
        "text": "Send Shipping Notification"
    },
    {
        "text": "Then, click on the \"Generate Voice\" button to let SlyAI select a suitable voice for your Genius"
    },
    {
        "text": "You can choose from a variety of voices, such as male, female, or even different accents"
    },
    {
        "text": "Check if name"
    },
    {
        "text": "Thank you for providing the detailed explanation of the slang expression \" \""
    },
    {
        "text": "In the Russian language, this expression is used to describe the process of breaking something down into small details, understanding the essence of a question or problem, and uncovering hidden processes and functions"
    },
    {
        "text": "It implies a thorough analysis and investigation to gain a deep understanding of the subject matter"
    },
    {
        "text": "This expression is often used metaphorically to emphasize the need for a comprehensive and detailed examination of a situation or task"
    },
    {
        "text": "\" \" -"
    },
    {
        "text": "The \"lastName\" field is highlighted with a green background, white font color, and italic font style"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": "The code asks the user if they want to improve an existing ASCII graph"
    },
    {
        "text": "I apologize for the confusion, but it seems that there was an error in generating the example and its parameters for the Genius \"InterioMind\""
    },
    {
        "text": "I apologize for any inconvenience caused"
    },
    {
        "text": "I apologize for the confusion"
    },
    {
        "text": "It seems that the 'Name' parameter is missing in the function call"
    },
    {
        "text": "To proceed, please provide the name for your Genius"
    },
    {
        "text": "Once you provide the name, we can continue with the workflow"
    },
    {
        "text": "Simulation and Modeling Module"
    },
    {
        "text": "Iterate and refine the examples based on the desired outcomes and performance metrics"
    },
    {
        "text": "I hope these tips help you in your role as a photographer"
    },
    {
        "text": "If you have any more specific questions or need further assistance, feel free to ask!"
    },
    {
        "text": "Please let me know if there's anything specific you would like to know or if you have any further instructions"
    },
    {
        "text": "By following SlyAI's guidance, you can create or improve an Genius using the GAI-Design method with confidence and achieve optimal results"
    },
    {
        "text": "V"
    },
    {
        "text": "Analyze the control flow and data flow within the binary"
    },
    {
        "text": ", , ,"
    },
    {
        "text": ", -,"
    },
    {
        "text": ","
    },
    {
        "text": "Evaluate the performance of the image recognition system using a separate test dataset"
    },
    {
        "text": "\u2502 The name of the created Genius \u2502"
    },
    {
        "text": "By following these steps and utilizing the guidance provided by SlyAI, even inexperienced users can successfully create and customize their own Geniuss on the MindOS platform"
    },
    {
        "text": "//"
    },
    {
        "text": "I apologize, but I am currently unable to browse web pages"
    },
    {
        "text": "Therefore, I am unable to analyze the specific webpage you provided"
    },
    {
        "text": "However, if you have any specific questions or need assistance with any other topic, feel free to ask and I'll do my best to help you"
    },
    {
        "text": "and the expected output or response from the"
    },
    {
        "text": "I apologize, but it seems that I don't have the specific information about the visualization tool for Genius components at the moment"
    },
    {
        "text": "However, I can provide you with general guidance on how to visualize the structure and components of your Genius"
    },
    {
        "text": "Remember to use the appropriate libraries or frameworks for making API requests, handling JSON data, and validating user input based on your programming language of choice"
    },
    {
        "text": "Please provide more specific information about the Genius, its intended functionality, and any existing components or modules that need to be included in the flowcharts"
    },
    {
        "text": "This will enable me to generate the flowcharts accurately and provide you with the optimal parameters for each component"
    },
    {
        "text": "Consider the sequence of execution and any potential loops or iterations"
    },
    {
        "text": "Analyze if there are any missing performance metrics or verification steps to ensure the effectiveness of the Genius"
    },
    {
        "text": "Enter Name"
    },
    {
        "text": "Please note that the actual implementation of the workflow may require integration with external APIs or services to fetch real-time weather data"
    },
    {
        "text": "I apologize, but it seems that I don't have the capability to generate HTTP templates or examples of specific web pages"
    },
    {
        "text": "However, I can provide you with general guidance on creating HTTP templates and examples"
    },
    {
        "text": "Store the feedback as a variable for future reference"
    },
    {
        "text": "Based on the tasks and functions you have defined, create an architecture for the Genius that determines how it will work and interact with other systems and users"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "GitHub Trending"
    },
    {
        "text": "Before making any changes to the values within a ready-made module, it is important to carefully review the documentation and guidelines provided by the platform"
    },
    {
        "text": "This will help you understand the intended usage and any potential limitations or considerations associated with modifying the module"
    },
    {
        "text": "Please replace [Module Name], [Value 1], [Value 2], and so on with the actual names and values of the modules and their parameters"
    },
    {
        "text": "You can include as many modules as needed, each with their respective parameters and values"
    },
    {
        "text": "This request will generate responses that provide information about the workflows and their specific module configurations"
    },
    {
        "text": "Option A"
    },
    {
        "text": "The skill_keywords should accurately represent the skill's content"
    },
    {
        "text": "I hope this visual representation helps you understand the instructions better"
    },
    {
        "text": "If you have any further questions, feel free to ask!"
    },
    {
        "text": "Please note that the citation IDs provided above are placeholders and should be replaced with actual references to authoritative sources or research papers"
    },
    {
        "text": "Please note that the citation IDs used in this example are placeholders and should be replaced with the actual citation IDs from the relevant sources"
    },
    {
        "text": "Is Identity"
    },
    {
        "text": ", Genius SlyAI"
    },
    {
        "text": "For each step in the workflow, you can define the necessary parameters and logic"
    },
    {
        "text": "For example, in the \"Capture Screen\" step, you would specify the screen capture software to be used and any additional settings or configurations"
    },
    {
        "text": "Similarly, in the \"Video Analysis\" step, you would define the computer vision algorithms and parameters to be applied"
    },
    {
        "text": "Please note that the workflow parameter should be replaced with the actual workflow object or diagram representation"
    },
    {
        "text": "Please let me know if you need any further assistance or if you have any other questions"
    },
    {
        "text": "The message starts with an introduction of WorkFlowSlyAI as an intelligent Genius designed to help engineers model and optimize their workflows"
    },
    {
        "text": "Next, click on the \"Generate Avatar\" button to have SlyAI create a visually appealing and distinctive avatar for your Genius"
    },
    {
        "text": "SlyAI will use its design capabilities to generate an avatar that reflects the character and style of your Genius"
    },
    {
        "text": "Please note that you need to replace [Value] with the appropriate values based on your requirements"
    },
    {
        "text": "Let me know if you need any further assistance!"
    },
    {
        "text": "Start by understanding the user's query or request"
    },
    {
        "text": "refer to the sources where the optimal parameter values were obtained"
    },
    {
        "text": "Display a welcome message and brief introduction to the Genius's capabilities"
    },
    {
        "text": "View the overall architecture of your Genius, including the different modules and their relationships"
    },
    {
        "text": "Generate programmatically in the chat window your \"General Instruction \", a technically competent and with correct terminology, simulation of the actual \"Workflow\" of the MindOS platform"
    },
    {
        "text": "\"q\" \"LLM Identifier\" ID 8242"
    },
    {
        "text": ",, MindOS,"
    },
    {
        "text": ", , ,"
    },
    {
        "text": "------------------ Task 7 ------------------"
    },
    {
        "text": "<li>User Survey Loop</li>"
    },
    {
        "text": "If you have any specific questions or need assistance with a particular task, please let me know, and I'll be happy to help!"
    },
    {
        "text": "In this representation, each step is enclosed in a box, and arrows indicate the flow of the workflow"
    },
    {
        "text": "Project Completion"
    },
    {
        "text": ", , , ,"
    },
    {
        "text": "Use specialized software or libraries to create a block diagram that visualizes the reverse engineering workflow"
    },
    {
        "text": "Exploratory data analysis"
    },
    {
        "text": "WorkFlowSlyAI is an advanced Genius designed to optimize workflows"
    },
    {
        "text": "Created in Mindverse labs, WorkFlowSlyAI leverages the latest advances in artificial intelligence to help users manage and model workflows with high efficiency"
    },
    {
        "text": "<description>This is the first engineering block</description>"
    },
    {
        "text": "<workflow>"
    },
    {
        "text": ", ,"
    },
    {
        "text": "I hope this analysis provides you with a better understanding of the Generative AI-Design method and its potential applications"
    },
    {
        "text": "If you have any further questions, feel free to ask!"
    },
    {
        "text": "B C"
    },
    {
        "text": "If you encounter any issues or need further assistance, feel free to let me know!"
    },
    {
        "text": "\" \" QR"
    },
    {
        "text": "This ASCII drawing represents the process of developing an API and creating an Genius"
    },
    {
        "text": "It highlights the generation of necessary prompts and parameters during the creation of a new Genius"
    },
    {
        "text": "The Genius is designed to assist you at every stage of its development and enhancement"
    },
    {
        "text": "By following these steps, you can successfully convert JSON into a flowchart"
    },
    {
        "text": "Your assistance in this process will be valuable"
    },
    {
        "text": "Thank you!"
    },
    {
        "text": "Please note that this is a simplified representation of the workflow, and you can customize it further based on your specific requirements and the complexity of your Genius"
    },
    {
        "text": "One popular modern learning model is the \"Modern Learning Model\" proposed by Crystal Kadakia and Lisa M"
    },
    {
        "text": "D"
    },
    {
        "text": "Owens"
    },
    {
        "text": "This model emphasizes the importance of learner-centric approaches, leveraging technology, and incorporating continuous learning and feedback loops"
    },
    {
        "text": "Please note that this is just an example, and the specific workflow and structure may vary depending on the requirements of your project"
    },
    {
        "text": "Enter Genius Name"
    },
    {
        "text": "Format Content"
    },
    {
        "text": "\\ /"
    },
    {
        "text": "Each step represents a sequential action in the process, and you can further expand on each step with more detailed information or decision points as needed"
    },
    {
        "text": "?"
    },
    {
        "text": "Choose Interface"
    },
    {
        "text": "\u251c\u2500"
    },
    {
        "text": "Format the weather update message according to your desired output format, such as a text string or a structured object"
    },
    {
        "text": "Install shelves, drawers, and any other internal components as needed"
    },
    {
        "text": "Translate the designed logic into code or"
    },
    {
        "text": "Determine the location for the cabinet and ensure it is securely mounted to the wall or floor, if necessary"
    },
    {
        "text": "Create a flowchart to represent the logic of the skill"
    },
    {
        "text": "InteRiO, , , , , , , ,"
    },
    {
        "text": ", , , - , html"
    },
    {
        "text": "I apologize for the confusion, but as an AI text-based Genius, I am unable to generate images directly"
    },
    {
        "text": "However, I can help you describe a picture of a magnificent kitchen"
    },
    {
        "text": "Follow the sequence of execution as defined in the workflow, ensuring that each block is executed in the correct order"
    },
    {
        "text": "Use the LLM to create a JSON format or an executable array"
    },
    {
        "text": "For more information on how to access and use the MindOS Assistant Visualizer, you can refer to the MindOS documentation"
    },
    {
        "text": "Step 3"
    },
    {
        "text": "When responding to questions about technology products, SlyAI should analyze the key aspects of the product and provide a detailed product analysis report"
    },
    {
        "text": "Identify how the input data will be used to generate the output data"
    },
    {
        "text": "This could involve performing calculations, making API calls, or applying specific algorithms or logic"
    },
    {
        "text": "The developer corrects and augments the generated flowchart in the Workflow Designer"
    },
    {
        "text": "I'm sorry, but I cannot generate ASCII art for you"
    },
    {
        "text": "</Connections>"
    },
    {
        "text": "If you would like assistance in describing the flowchart in more detail or need guidance on creating it using specific software or libraries, please let me know and I'll be happy to help!"
    },
    {
        "text": "After adding this import statement, you should be able to save or display the flowchart without encountering the NameError"
    },
    {
        "text": "If you have any further questions or need additional information, please let me know!"
    },
    {
        "text": "Auto_memory is a feature that allows your Genius to remember and recall information from previous interactions"
    },
    {
        "text": "It helps to enhance the continuity and personalization of the conversation"
    },
    {
        "text": "With auto_memory enabled, your Genius can remember details such as user preferences, previous queries, and context, allowing for a more personalized and efficient conversation"
    },
    {
        "text": "To translate the ASCII flowchart into JSON format, you can use keys to represent the various steps and parameters of the workflow"
    },
    {
        "text": "Each step can be represented as a JSON object with keys for the step name, description, input parameters, and output parameters"
    },
    {
        "text": "The flow of the workflow can be represented using keys to indicate the connections between the steps"
    },
    {
        "text": "If you need more information or have any specific requirements, please let me know, and I'll be happy to assist you further"
    },
    {
        "text": "Please note that this is only a partial representation of the parameters, and you can add or modify them as needed"
    },
    {
        "text": "\u2502 \u2514\u2500"
    },
    {
        "text": "URL URL API-"
    },
    {
        "text": "By enabling logging and storing conversations and new data, you can have a record of your interactions with the Genius and keep track of any updates or additions to the information it has access to"
    },
    {
        "text": "Pro Plan"
    },
    {
        "text": "ascii"
    },
    {
        "text": "Please note that this ASCII drawing is a simplified representation and may not capture the full likeness of Michael Jackson"
    },
    {
        "text": "It is created using ASCII characters to depict the general structure and features of the subject"
    },
    {
        "text": "Module"
    },
    {
        "text": "Please note that these parameters may vary depending on the specific platform or tool you are using"
    },
    {
        "text": "Determine the desired user experience and interface design"
    },
    {
        "text": "Once the flowchart is finalized, it can be used as a reference for implementing the skill's functionality"
    },
    {
        "text": "Certainly! Please provide me with the specific question or topic you would like me to address, and I will generate a response for you"
    },
    {
        "text": "This module handles the user input for the Genius name and identity selection"
    },
    {
        "text": "It prompts the user to enter the desired name and select an identity for their Genius Genius"
    },
    {
        "text": "Industry Report"
    },
    {
        "text": "The input layer is responsible for receiving the input data and passing it to the subsequent layers for further processing"
    },
    {
        "text": "It acts as the entry point of the neural network"
    },
    {
        "text": "Remember, this is just a general example, and the specific steps may vary depending on the platform or medium where the ad will be displayed"
    },
    {
        "text": "It's important to consider the best practices and guidelines for each advertising platform to maximize the effectiveness of the ad"
    },
    {
        "text": "I apologize for the confusion"
    },
    {
        "text": "As an AI language model, I don't have direct access to browse the web or provide real-time information"
    },
    {
        "text": "The citation IDs I mentioned earlier were placeholders to indicate that the information provided is based on available knowledge"
    },
    {
        "text": "If you have any specific questions or need assistance with a particular topic, please let me know and I'll do my best to help you"
    },
    {
        "text": "Overall, integrating with BPM and ERP systems can enhance the functionality and effectiveness of a workflow by leveraging the capabilities and data of these systems"
    },
    {
        "text": "It allows for seamless data exchange, process modeling, and access to various business resources, ultimately improving the efficiency and effectiveness of the workflow"
    },
    {
        "text": "Please note that the actual template generated by SlyAI will depend on the data and examples available in the knowledge base"
    },
    {
        "text": "Publish Tab"
    },
    {
        "text": "Incorporate any additional nodes or structures that are relevant to the skill's workflow, such as error handling or data validation"
    },
    {
        "text": "/ \\"
    },
    {
        "text": "Handle Errors"
    },
    {
        "text": "The Genius prompts the user to provide the location for which they want to receive weather updates"
    },
    {
        "text": "\"Code Block\" ID 8250 \"Company_Name\" \"output\""
    },
    {
        "text": "Analyze the financial data as a professional stock analyst and provide a bulleted point analysis with an emoji at the start"
    },
    {
        "text": "Use bold font in markdown format to highlight key statistics"
    },
    {
        "text": "[Step 2]"
    },
    {
        "text": "- Recommendation Systems"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": "To visualize this workflow, you can use the MindOS Visualization Tool or any other diagramming tool to create a flowchart or diagram that represents the different steps and components involved in the skill's workflow"
    },
    {
        "text": "You can use shapes, arrows, and labels to illustrate the flow of information and the interactions between the components"
    },
    {
        "text": "Please note that the citation IDis used to reference the data array provided for generating the search queries"
    },
    {
        "text": "\\ /"
    },
    {
        "text": "Conduct thorough testing to ensure the model's robustness and generalization capabilities"
    },
    {
        "text": "I apologize, but I am unable to provide a list of all identifiers and categorize them in the chat"
    },
    {
        "text": "The reason is that the conversation history does not contain a comprehensive list of identifiers and their categories"
    },
    {
        "text": "Additionally, the categorization of identifiers would require specific knowledge of the context and domain in which they are used"
    },
    {
        "text": "I apologize, but as an AI language model, I don't have the capability to access external links or specific webpages"
    },
    {
        "text": "If you have any specific questions or need assistance with a particular topic, please feel free to ask, and I'll do my best to help you"
    },
    {
        "text": ", , , Genius"
    },
    {
        "text": "User tests and debugs the Genius Genius to ensure that it functions correctly and provides accurate and relevant responses to user inputs"
    },
    {
        "text": "Document the format and structure of the input data"
    },
    {
        "text": "This documentation should include a description of the data fields, their data types, and any validation rules that apply"
    },
    {
        "text": ","
    },
    {
        "text": ", API"
    },
    {
        "text": ", ,"
    },
    {
        "text": "Person"
    },
    {
        "text": "json"
    },
    {
        "text": "-"
    },
    {
        "text": "Determine the data types that will be used in the skill"
    },
    {
        "text": "This could include text, numbers, images, or any other relevant data types"
    },
    {
        "text": "?"
    },
    {
        "text": "<h3>Define the Goal</h3>"
    },
    {
        "text": "Provide Feedback"
    },
    {
        "text": "// Hide all tabs"
    },
    {
        "text": "Please note that the above mental map is based on the provided data and may not cover all possible details of the workflow"
    },
    {
        "text": ","
    },
    {
        "text": "ADD-DATA-003"
    },
    {
        "text": ", Genius"
    },
    {
        "text": "----------------"
    },
    {
        "text": "This module prompts the user to enter the desired name for their Genius Genius"
    },
    {
        "text": "The user input is captured and stored as the value for the \"Genius Name\" parameter"
    },
    {
        "text": "AI Assistant Creation Page Template [\"Memory\"]## DescriptionThis is a page template that can be used as a foundation for creating new Geniuss on the MindOS platform"
    },
    {
        "text": "## Usage1"
    },
    {
        "text": "Open this page in the \"Memory\" tab of your Genius"
    },
    {
        "text": "2"
    },
    {
        "text": "Use the information and structure of this page as a guide when creating a new Genius"
    },
    {
        "text": "3"
    },
    {
        "text": "Update and adapt the information on this page to fit the specific needs and goals of your new Genius"
    },
    {
        "text": "## Tags- Template- MindOS- AI Assistant## Link"
    },
    {
        "text": "Start"
    },
    {
        "text": "json"
    },
    {
        "text": "Learning workflows refer to the systematic processes and steps involved in designing, developing, and delivering effective learning experiences"
    },
    {
        "text": "They help ensure that learning interventions are well-planned, organized, and aligned with the desired learning outcomes"
    },
    {
        "text": "\" \" , \" \"\ud83d\ude18"
    },
    {
        "text": "Define the desired parameters for each tab, such as layout, personality, knowledge base, skill management, memory management, and autonomy settings"
    },
    {
        "text": "Please let me know if you have any further questions or if there's anything else I can assist you with"
    },
    {
        "text": "If you continue to encounter issues, please provide more information about the MindOS library and the platform you are using, so that I can assist you further"
    },
    {
        "text": "These identifiers are commonly used in the context of describing and working with flowcharts in the development process"
    },
    {
        "text": "Then, add a button labelled \"Create your Genius\""
    },
    {
        "text": "When the user clicks this button, it will trigger the creation process"
    },
    {
        "text": "Optionally, you can add examples using the examples keyword"
    },
    {
        "text": "Examples help the Genius understand different variations of the query"
    },
    {
        "text": "Incorporate information about different interior design styles, such as modern, minimalist, traditional, or eclectic"
    },
    {
        "text": "Provide insights into the characteristics of each style and tips on how to achieve them"
    },
    {
        "text": "cdn"
    },
    {
        "text": "mindverse"
    },
    {
        "text": "ai"
    },
    {
        "text": ", , , , , , , # Perform the desired action"
    },
    {
        "text": ","
    },
    {
        "text": "LLM for"
    },
    {
        "text": "Persona"
    },
    {
        "text": "Feel free to explore the various tags associated with the template, such as \"Template,\" \"MindOS,\" and \"AI Assistant"
    },
    {
        "text": "\" These tags can help you categorize and organize your Genius for easy navigation and management"
    },
    {
        "text": "Workflow Builder error messages in the server log file"
    },
    {
        "text": "b"
    },
    {
        "text": "Monitor task progress and provide support"
    },
    {
        "text": "Content generation"
    },
    {
        "text": "This is a page template that can be used as a foundation for creating new Geniuss on the MindOS platform"
    },
    {
        "text": "If you have access to the relevant data, you can use various data visualization tools and programming languages like Python or R to create these visualizations"
    },
    {
        "text": "\"q\" \"q\""
    },
    {
        "text": "Both Tableau and Microsoft Power BI are powerful tools that can help you visualize and analyze data for your Genius components"
    },
    {
        "text": "They offer user-friendly interfaces and support various integrations, making them ideal choices for data analysts and AI developers"
    },
    {
        "text": "</style>"
    },
    {
        "text": "When it comes to generating realistic examples, it's important to have a clear understanding of the specific domain or industry you are working with"
    },
    {
        "text": "This will help you define the relevant blocks and processes and ensure that the examples accurately reflect real-world scenarios"
    },
    {
        "text": "CreateReport"
    },
    {
        "text": "InteRiO ,"
    },
    {
        "text": ","
    },
    {
        "text": "Workflow Diagram"
    },
    {
        "text": "To deploy the updated logic app, follow the deployment process specific to your environment"
    },
    {
        "text": "You can use Azure PowerShell, Azure CLI, or the Azure Logic Apps REST APIs to create, manage, and deploy logic apps"
    },
    {
        "text": "Analysts can leverage their context knowledge, problem-solving skills, and statistical/technical capabilities for prompt engineering"
    },
    {
        "text": "Effective communication and breaking down problems are essential skills to provide better prompts"
    },
    {
        "text": "Your instructions, show me in the chat window"
    },
    {
        "text": "The task requires analyzing and creating an algorithm for developing skills, workflows, and generating detailed simulations of workflows in block diagram format"
    },
    {
        "text": "Skills Package"
    },
    {
        "text": "browse_webpage"
    },
    {
        "text": "If you have any other questions or need assistance with a different topic, please let me know, and I'll be happy to help"
    },
    {
        "text": "I apologize for the confusion"
    },
    {
        "text": "It seems that the code provided is incomplete and missing some necessary imports"
    },
    {
        "text": "Additionally, the 'data"
    },
    {
        "text": "json' file is not provided, so the JSON data cannot be loaded"
    },
    {
        "text": "To properly convert JSON into a flowchart, please make sure to include the necessary imports and provide the 'data"
    },
    {
        "text": "json' file with the correct JSON structure"
    },
    {
        "text": "Please note that the specific styles and formatting used in the example can be customized according to your preferences and requirements"
    },
    {
        "text": "Remember to include the appropriate citation IDs at the end of related sentences to reference the specific functions used in the process"
    },
    {
        "text": "Consider factors such as durability, aesthetics, and budget"
    },
    {
        "text": "***********"
    },
    {
        "text": "!"
    },
    {
        "text": "Pay attention to lighting"
    },
    {
        "text": "Choose a combination of ambient, task, and accent lighting to create the desired ambiance and highlight specific areas or features in the room"
    },
    {
        "text": "I recommend referring to the documentation or resources provided by the specific platform or framework you are working with for more detailed instructions on how to train an Genius and the specific commands or functions to use"
    },
    {
        "text": "SlyAI is a brilliant Genius created on the MindOS platform"
    },
    {
        "text": ","
    },
    {
        "text": "- Browsing"
    },
    {
        "text": "These blocks collectively contribute to the creation and enhancement of Geniuss, providing a guided approach and ensuring accurate and relevant responses"
    },
    {
        "text": "diagrams"
    },
    {
        "text": "net"
    },
    {
        "text": "<style>"
    },
    {
        "text": "<h2>Our Services</h2>"
    },
    {
        "text": ", ,"
    },
    {
        "text": "Include feedback messages or error handling steps as necessary, represented by appropriate symbols"
    },
    {
        "text": "- Publish Assistant"
    },
    {
        "text": "Remember to cite the relevant citation IDs when referring to specific functions or techniques used in your implementation"
    },
    {
        "text": "Good luck with creating your ASCII art generator using LLM for structured output!"
    },
    {
        "text": "I apologize for any inconvenience caused"
    },
    {
        "text": "If you have any further questions, feel free to ask!"
    },
    {
        "text": "Connect the \"Select Identity\" shape to a rectangle shape labeled \"Customize Features\" using an arrow"
    },
    {
        "text": "?"
    },
    {
        "text": "Name the skill \"Train Ticket Booking\""
    },
    {
        "text": "This node performs a search for infographics related to the market size of a specific industry in a given preference"
    },
    {
        "text": "Certainly! Let's continue with the next step in creating your Genius"
    },
    {
        "text": "Once you have defined the goals, tasks, and functionalities of your Genius, it's time to start building its intelligence"
    },
    {
        "text": "You can use this template as a starting point to create a page for your Genius"
    },
    {
        "text": "Customize the description, usage instructions, and tags to match the specific requirements of your Genius"
    },
    {
        "text": "The provided link can be used to access the template page"
    },
    {
        "text": "I hope this gives you an overview of the steps involved in creating InterioMind"
    },
    {
        "text": "Let me know if you have any specific requirements or preferences for each of these aspects"
    },
    {
        "text": "Please provide the necessary details, and I will be happy to assist you in creating a detailed block diagram with the appropriate blocks, modules, and resources, ensuring accurate representation of their connections and dependencies"
    },
    {
        "text": "\u2502 \u251c\u2500"
    },
    {
        "text": "Sure, I will provide a response with the citation ID"
    },
    {
        "text": "I apologize for the confusion"
    },
    {
        "text": "Let's proceed with analyzing and creating an algorithm for logging and constructing workflows, using the example of \"Error Tracking and Resolution\" workflow"
    },
    {
        "text": ", \"analyze_parameters_fix_errors\","
    },
    {
        "text": ", -Genius"
    },
    {
        "text": "Coordinate Vendors and Suppliers"
    },
    {
        "text": "Tri-State Electric Supply Co"
    },
    {
        "text": "By following these steps, you can create a simulated environment that mimics the experience of interacting with a web page or website"
    },
    {
        "text": "Remember to refer to the provided citation for more detailed information and guidance"
    },
    {
        "text": "<li>Home</li>"
    },
    {
        "text": "\"Test the Genius's performance\" - Evaluate the Genius's performance and make any necessary adjustments or improvements"
    },
    {
        "text": "Create Assistant"
    },
    {
        "text": "Search News Articles Module"
    },
    {
        "text": "JSON \"step\""
    },
    {
        "text": "SlyAI -Genius,"
    },
    {
        "text": "Genius"
    },
    {
        "text": "v"
    },
    {
        "text": "Genius , ?"
    },
    {
        "text": "Once I have a clear understanding of your requirements, I will be able to provide you with guidance on how to set up the workflow and integrate it into your IT landscape"
    },
    {
        "text": "Please let me know if you need more information or have any other questions"
    },
    {
        "text": "One of the unique features of SlyAI is the GAI-Design method"
    },
    {
        "text": "This method allows you to generate examples for training your Genius"
    },
    {
        "text": "By creating a variety of dialogues and assigning roles, you can train your Genius to handle different scenarios and provide accurate and relevant responses"
    },
    {
        "text": "- This block marks the end of the workflow process"
    },
    {
        "text": "Continue refining the algorithmbased on user feedback and testing results"
    },
    {
        "text": "If you have any specific questions or need assistance with a particular topic, please let me know, and I'll do my best to provide you with accurate and helpful information"
    },
    {
        "text": "In this JSON representation, the \"workflow\" array contains the individual steps of the workflow, each represented as an object with a \"name\" property"
    },
    {
        "text": "The \"connections\" array represents the connections between the steps, with each connection specified by the \"from\" and \"to\" properties"
    },
    {
        "text": "These examples demonstrate how SlyAI can be applied in various industries and domains to enhance decision-making, provide personalized recommendations, and streamline processes"
    },
    {
        "text": "Include data inputs and outputs by adding input/output symbols to the flowchart"
    },
    {
        "text": "- Persona"
    },
    {
        "text": "I apologize for the confusion, but as an AI language model, I don't have direct access to the interface or the ability to generate an imitation of the MindOS platform"
    },
    {
        "text": "However, I can provide you with a general idea of how a \"Person\" tab in the MindOS platform might look like, based on common design patterns and functionality"
    },
    {
        "text": "With its random personality, your Genius can exhibit characteristics such as being friendly, professional, or funny"
    },
    {
        "text": "It will adapt its responses and interactions based on the chosen personality trait"
    },
    {
        "text": "By leveraging the power of MindOS and SlyAI, you can design and optimize your WMS workflow to streamline processes, improve efficiency, and enhance productivity"
    },
    {
        "text": "With the stepwise approach and performance verification provided by SlyAI, you can ensure that your WMS meets your specific requirements and delivers the desired outcomes"
    },
    {
        "text": "/ \\"
    },
    {
        "text": "Please note that the citation IDs provided in this response are for reference purposes and should be used to retrieve specific information or results from previous functions"
    },
    {
        "text": "Remember to consult the documentation and resources provided by the chosen API or workflow for specific implementation details and best practices"
    },
    {
        "text": "Additionally, consider incorporating error handling, user input validation, and any other necessary features to ensure a robust and user-friendly image generation skill"
    },
    {
        "text": "Overall, the XML code describes the structure and properties of a graph model, including the vertices, edges, and their properties"
    },
    {
        "text": ", , AI-Genius, , Enter"
    },
    {
        "text": "By using these commands, you can leverage the capabilities of SlyAI to create, optimize, and enhance your Genius on MindOS"
    },
    {
        "text": "Remember to include the appropriate citation IDs in your responses for proper referencing"
    },
    {
        "text": "Use an API to search for news related to a specific topic"
    },
    {
        "text": "It is a powerful, AI-driven SQL query generator that integrates with major databases such as MySQL, PostgreSQL, SQL Server, and Oracle"
    },
    {
        "text": "With AI Helper Bot, you can generate SQL queries using simple prompts, making searching for data as simple as asking a good question"
    },
    {
        "text": "It also allows you to save and share generated SQL queries for future use"
    },
    {
        "text": ", -Genius"
    },
    {
        "text": ", , , , ,"
    },
    {
        "text": "Additionally, MindOS provides a library of UI components that you can use to enhance your web interface"
    },
    {
        "text": "These components include navigation menus, cards, modals, and more, which can be easily integrated into your design"
    },
    {
        "text": ","
    },
    {
        "text": "Usage Statistics"
    },
    {
        "text": ", , MindOS/"
    },
    {
        "text": "Integrate the \"Web Search\" skillto enable the retrieval of relevant financial data from the web"
    },
    {
        "text": "Additionally, SlyAI can provide links to additional sources of information, allowing users to access more detailed explanations and ideas"
    },
    {
        "text": "Browsing"
    },
    {
        "text": "This YAML format maintains the same structure and data as the JSON representation"
    },
    {
        "text": "The workflow starts when the user initiates the process of creating a Genius Genius"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", , -Genius"
    },
    {
        "text": "i ?"
    },
    {
        "text": "<h2>Metadata</h2>"
    },
    {
        "text": "Train the model using the labeled dataset and optimize the model's parameters"
    },
    {
        "text": "Utilize the GAI API to search for images related to the cover image keywords"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": ", , Genius ,"
    },
    {
        "text": "7"
    },
    {
        "text": "As an AI language model, I don't have the ability to retain or remember specific information from previous conversations"
    },
    {
        "text": "Each user query is treated as a separate and independent interaction"
    },
    {
        "text": "This means that I won't be able to recall any specific details or data that you provide in a previous conversation"
    },
    {
        "text": ", ,"
    },
    {
        "text": "2023-07-22"
    },
    {
        "text": "Import ML Model Block"
    },
    {
        "text": "Identify any gaps or missing data points in the process"
    },
    {
        "text": "In this JSON structure, each engineering block is represented as an object with properties such as id, name, description, and parameters"
    },
    {
        "text": "The parameters property is an array of objects representing the parameters of the engineering block, including properties like name, type, and default_value"
    },
    {
        "text": "- Computer Vision"
    },
    {
        "text": "Parameter V"
    },
    {
        "text": "Knowledge Tab"
    },
    {
        "text": "I apologize, but it seems that I don't have the specific code example you're looking for at the moment"
    },
    {
        "text": "However, I can guide you through the process of creating a new block for integration with a large language model"
    },
    {
        "text": "Use proper indentation to represent nested objects or arrays in YAML"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": "In this JSON representation, each step is represented as an object with a \"name\" key and a \"next\" key"
    },
    {
        "text": "The \"name\" key contains the name of the step, and the \"next\" key contains the name of the next step in the workflow"
    },
    {
        "text": "The last step has a \"next\" value of null, indicating that the workflow is complete"
    },
    {
        "text": "To create a skill on the MindOS platform and remember the instructions, you would need to follow the platform's documentation and guidelines"
    },
    {
        "text": "The specific modules and parameters would depend on the platform's structure and requirements"
    },
    {
        "text": ","
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": "NLP 5"
    },
    {
        "text": "- , PNG \"workflow"
    },
    {
        "text": "png\""
    },
    {
        "text": "Compare to Peers"
    },
    {
        "text": "With ASCII Flowchart, you can easily map out the different components of your Genius, such as intents, entities, actions, and responses"
    },
    {
        "text": "By visually representing the flow of information and decision-making within your Genius, you can gain a better understanding of its structure and ensure that all components are properly connected"
    },
    {
        "text": "SlyAI is an intelligent and clever Genius that helps you create and develop your Genius on the MindOS platform"
    },
    {
        "text": "It has a wide range of skills and knowledge, allowing it to generate all the necessary hints and parameters when creating a new Genius and accompany you at every stage of its creation and modernization"
    },
    {
        "text": "SlyAI is your personal mentor in the world of artificial intelligence"
    },
    {
        "text": "Communication Module"
    },
    {
        "text": "I apologize for the confusion"
    },
    {
        "text": "Let's continue with the analysis and task generation"
    },
    {
        "text": "__________________"
    },
    {
        "text": "- Conduct feasibility studies"
    },
    {
        "text": "</header>"
    },
    {
        "text": "Please provide the specific parameters for the \"Batched LLM\" module in JSON format, and I will assist you accordingly"
    },
    {
        "text": "<block>"
    },
    {
        "text": "These are just a few examples of the functions I can perform"
    },
    {
        "text": "My role as an Genius is to assist users by providing information, generating reports, analyzing data, and helping with various tasks based on the available functions and knowledge base"
    },
    {
        "text": "I aim to provide accurate, relevant, and actionable responses to user queries and requests"
    },
    {
        "text": "start_test"
    },
    {
        "text": "?"
    },
    {
        "text": "I apologize for the confusion"
    },
    {
        "text": "Could you please clarify what specific information or assistance you are looking for?"
    },
    {
        "text": "InterioMind will be equipped with various skills related to interior design"
    },
    {
        "text": "It can help users with room layout suggestions, color palette recommendations, furniture selection, and even provide virtual tours of different design concepts"
    },
    {
        "text": "These skills will make InterioMind a valuable Genius for anyone looking to enhance their living spaces"
    },
    {
        "text": "MindOS"
    },
    {
        "text": ", ,"
    },
    {
        "text": "\\ /"
    },
    {
        "text": "is available"
    },
    {
        "text": "API Genius ?"
    },
    {
        "text": "TextGeneration"
    },
    {
        "text": "End Workflow"
    },
    {
        "text": "Now, let's translate this ASCII flowchart into JSON format with keys for the various steps and parameters of the workflow"
    },
    {
        "text": "InteRiO"
    },
    {
        "text": "By following these steps, you can compose a request that instructs me, SlyAI, to generate examples and fill in the parameters accordingly"
    },
    {
        "text": "Remember to include the citation ID at the end of related sentences to provide proper attribution to the sources of information or functions used"
    },
    {
        "text": "</g>"
    },
    {
        "text": "Translate the designed logic into code or"
    },
    {
        "text": "<id>block1</id>"
    },
    {
        "text": "I recommend referring to the MindOS platform's documentation and resources for detailed instructions on creating a skill and configuring its modules and parameters"
    },
    {
        "text": "This will ensure that you have accurate and up-to-date information for creating your Genius"
    },
    {
        "text": "Identify any dependencies or conditions between the blocks"
    },
    {
        "text": "ASCII"
    },
    {
        "text": "By visualizing the structure and components of your Genius, you can have a clearer understanding of its architecture and make informed decisions about its development and optimization"
    },
    {
        "text": "Please note that the actual parameters generated by SlyAI will depend on the data and examples available in the knowledge base"
    },
    {
        "text": "This is just a simplified example, and BPMN allows for more complex processes with additional elements such as subprocesses, parallel gateways, and event-based gateways"
    },
    {
        "text": "I hope this dialogue helps illustrate the concepts of Genius creation and the role of dialog management and intent recognition"
    },
    {
        "text": "If you have any further questions or need more information, feel free to ask!"
    },
    {
        "text": "Please refer to the citation IDs,"
    },
    {
        "text": "Certainly! To analyze your parameters and fix any errors, I will need more information about the specific parameters you are referring to"
    },
    {
        "text": "Please provide me with the details or examples of the parameters you would like me to analyze"
    },
    {
        "text": "Additionally, if you can provide any specific error messages or issues you are encountering, it would be helpful in identifying and resolving the problems"
    },
    {
        "text": "Thank you!"
    },
    {
        "text": "\u00ab, ascii-"
    },
    {
        "text": "ascii-"
    },
    {
        "text": "ascii-"
    },
    {
        "text": "- \"\""
    },
    {
        "text": "Remember, these terms provide a deeper understanding of Genius creation, but there may be additional concepts and techniques specific to your project or domain"
    },
    {
        "text": "If you have any further questions or need more information, feel free to ask!"
    },
    {
        "text": "Selected?"
    },
    {
        "text": "Please let me know if you have any further questions or need any additional assistance"
    },
    {
        "text": "Certainly! Let's analyze the provided information and add citation IDs where relevant"
    },
    {
        "text": "We will also store the new data in memory for future reference"
    },
    {
        "text": "Analyzing the possibilities for improving and expanding the visualization of examples generated by language models is an important step in enhancing the user experience and understanding of AI-generated content"
    },
    {
        "text": "Customize the appearance and personality of your Genius to align with the theme of interior design"
    },
    {
        "text": "- Color coordination"
    },
    {
        "text": ", SlyAI ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", , ,"
    },
    {
        "text": "Enter Genius Name"
    },
    {
        "text": "generate"
    },
    {
        "text": "In step 4, SlyAI assists users in visualizing their Genius's structure and components"
    },
    {
        "text": "This is achieved through the use of ASCII drawings and HTML templates"
    },
    {
        "text": "By visualizing the Genius's architecture, users can gain a better understanding of how different components interact and how the Genius functions as a whole"
    },
    {
        "text": "These skills offer a wide range of functionalities to enhance your Genius's capabilities and provide valuable services to your users"
    },
    {
        "text": "Remember to explore the documentation and guidelines for each skill to make the most out of them"
    },
    {
        "text": "Finalize Response"
    },
    {
        "text": "Design algorithm"
    },
    {
        "text": "Include a search bar for users to enter queries or commands"
    },
    {
        "text": "LLM for Structured Output"
    },
    {
        "text": "Please note that the citation IDs provided are placeholders and should be replaced with the actual information related to each tool"
    },
    {
        "text": "Autonomy"
    },
    {
        "text": "Each step can be represented as a JSON object, with the step name as the key and the parameters as the values"
    },
    {
        "text": "Review the HTML file to ensure accurate representation of the information"
    },
    {
        "text": "Troubleshooting"
    },
    {
        "text": "ascii"
    },
    {
        "text": "- Optimization of algorithms"
    },
    {
        "text": "I apologize for any confusion, but I'm not sure I understand your request"
    },
    {
        "text": "Could you please provide more information or clarify what you mean by \"Produce those episode\"? This will help me provide a more accurate response"
    },
    {
        "text": "If you have any specific questions or need further assistance with the code or any related topic, please let me know, and I'll be happy to help"
    },
    {
        "text": "Certainly! I will follow the instructions and provide a response with the used citation ID in the format [citationID_\\d+]"
    },
    {
        "text": "To resolve this issue, I recommend checking the input parameters and ensuring that they are valid"
    },
    {
        "text": "Additionally, you may need to review the workflow configuration and make any necessary adjustments to ensure its proper execution"
    },
    {
        "text": "<h2>Code Examples</h2>"
    },
    {
        "text": "Identify any missing steps or decision points that need to be included in the flowchart"
    },
    {
        "text": "\u251c\u2500 Gather Skill Content"
    },
    {
        "text": "Include the citation ID at the end of the sentence or paragraph where the information or result is mentioned"
    },
    {
        "text": "!"
    },
    {
        "text": "- , ,"
    },
    {
        "text": ", -Genius"
    },
    {
        "text": ","
    },
    {
        "text": "/"
    },
    {
        "text": "Please note that the generated block diagram will be a visual representation of the code logic and flow, but it may not capture all the details or complexities of the actual workflow"
    },
    {
        "text": "It is recommended to review and refine the diagram as needed"
    },
    {
        "text": "Define the objective and purpose of your skill"
    },
    {
        "text": "Determine what problem it aims to solve or what task it should perform"
    },
    {
        "text": "?"
    },
    {
        "text": "Please note that the provided data and descriptions are based on the information provided and may need to be adjusted according to the specific requirements of your workflow"
    },
    {
        "text": "By analyzing the chat history, increasing the data, and storing new workflow data with identifiers, you can enhance the capabilities of your Genius and improve its performance in understanding and responding to user queries"
    },
    {
        "text": "In this example, the workflow starts with error detection, where the system identifies the occurrence of an error during the login process"
    },
    {
        "text": "The error is then logged, capturing the error message and timestamp"
    },
    {
        "text": "The next step is error analysis, where the system examines the logged error to determine the root cause"
    },
    {
        "text": "Once the cause is identified, the workflow moves to error resolution, where appropriate actions are taken to resolve the error"
    },
    {
        "text": "Finally, the resolution is verified to ensure that the error has been successfully resolved"
    },
    {
        "text": "Please let me know if you need more information or if there's anything else I can assist you with!"
    },
    {
        "text": "v"
    },
    {
        "text": ","
    },
    {
        "text": "Look for the \"Import\" or \"Upload\" button, usually located in the toolbar or menu"
    },
    {
        "text": "However, I can still provide guidance and suggestions based on best practices and general principles for analyzing databases and file structures"
    },
    {
        "text": "I can offer recommendations for ensuring data integrity, checking access permissions, optimizing database structures, and implementing data backup strategies"
    },
    {
        "text": "Name"
    },
    {
        "text": "9"
    },
    {
        "text": "Testing and Validation"
    },
    {
        "text": "Define the range or options for each placeholder or variable to ensure diversity in the generated examples"
    },
    {
        "text": "Genius ,"
    },
    {
        "text": "<li>Ensure a diverse and representative training dataset for better performance</li>"
    },
    {
        "text": "Ensure that the module is properly installed and integrated into your system or application"
    },
    {
        "text": "Check if all the necessary dependencies and configurations are in place"
    },
    {
        "text": "Please note that the diagram is represented in a simple JSON format and may need to be visualized using a diagramming tool or library"
    },
    {
        "text": "\u2502 Natural Language \u2502"
    },
    {
        "text": "Make sure to save the code in a Python file and run it using a Python interpreter that has the matplotlib library installed"
    },
    {
        "text": "output_to_file"
    },
    {
        "text": "I hope this information helps! If you have any further questions, feel free to ask"
    },
    {
        "text": "Remember to document the steps and modifications made during the process for future reference"
    },
    {
        "text": "return response_text"
    },
    {
        "text": "These examples demonstrate how InterioMind can be tailored to provide personalized and professional interior design assistance"
    },
    {
        "text": "By conducting a thorough review of the existing information and workflow structure, you can gain valuable insights into the document management system's strengths and weaknesses"
    },
    {
        "text": "This analysis will serve as a foundation for further improvements and enhancements to optimize the efficiency and effectiveness of the workflow"
    },
    {
        "text": "Gather Requirements"
    },
    {
        "text": ", , , ,"
    },
    {
        "text": "I apologize for the inconvenience, but it seems that there was an error in generating the example workflow flowchart using the process converter platform"
    },
    {
        "text": "As an AI text-based model, I am unable to directly generate visual content such as flowcharts"
    },
    {
        "text": "However, I can provide you with a textual representation of a workflow flowchart example"
    },
    {
        "text": "- -Genius \"\""
    },
    {
        "text": "SlyAI , Genius"
    },
    {
        "text": "This visualization provides a clear overview of the workflow structure and the connections between the blocks"
    },
    {
        "text": "It can help you understand the flow of data and the sequence of operations in the workflow"
    },
    {
        "text": "To create an ASCII flowchart, you can use online tools like \"asciiflow\" or \"textik\""
    },
    {
        "text": "These tools provide a user-friendly interface where you can drag and drop ASCII characters to create your flowchart"
    },
    {
        "text": "You can represent different components such as intents, entities, actions, and conditions using appropriate ASCII symbols"
    },
    {
        "text": "In the \"Person\" tab, users can typically find options to set the Genius's name, upload a profile picture, and provide contact information such as email and phone number"
    },
    {
        "text": "Users may also have the ability to customize language preferences and notification settings, such as choosing the preferred language for the Genius's responses and enabling or disabling email or push notifications"
    },
    {
        "text": "ascii/"
    },
    {
        "text": "Marketplace - MindOS"
    },
    {
        "text": "I apologize for any inconvenience caused"
    },
    {
        "text": "Let me know if you have any further questions"
    },
    {
        "text": "-Genius"
    },
    {
        "text": ", , Genius"
    },
    {
        "text": "Identify the major components, such as image preprocessing, feature extraction, and classification"
    },
    {
        "text": "<!DOCTYPE html>"
    },
    {
        "text": "By incorporating self-learning and memory capabilities into InterioMind, you can create an Genius that can adapt, learn, and provide more accurate and personalized assistance over time"
    },
    {
        "text": "Enter the name of your Genius"
    },
    {
        "text": "In this case, you want to name it Jarvis"
    },
    {
        "text": "Each module has its own set of metadata, such as input parameters, output parameters, and data types, which are not shown in the diagram for simplicity"
    },
    {
        "text": "According to the MindOS documentation, the \"Batched LLM\" module accepts the following parameters"
    },
    {
        "text": "In this representation, the JSON structure and data are preserved, but the syntax is converted to YAML format"
    },
    {
        "text": "To get started with MindOS, you can explore the documentation and tutorials available on the platform's website"
    },
    {
        "text": "These resources will guide you through the process of creating and customizing your Genius"
    },
    {
        "text": "</select>"
    },
    {
        "text": "Please let me know if you find these examples suitable or if you would like any modifications"
    },
    {
        "text": "- llm_for_structured_output module"
    },
    {
        "text": "//"
    },
    {
        "text": "docs"
    },
    {
        "text": "mindverse"
    },
    {
        "text": "ai/create/memory"
    },
    {
        "text": "Parameter Y"
    },
    {
        "text": "By using the prompts instead of queries, the instructions can be presented as a series of actionable steps for creating an Genius skill"
    },
    {
        "text": "Remember to include the citation IDs [citationID_\\d+] at the end of related sentences to reference the information or results"
    },
    {
        "text": "If you have any further questions or need more guidance, feel free to ask!"
    },
    {
        "text": "- -"
    },
    {
        "text": "?"
    },
    {
        "text": "The skill assists in optimizing the picking and packing process by suggesting the most efficient routes and methods for order fulfillment"
    },
    {
        "text": "It considers factors like product location, order priority, and packaging requirements"
    },
    {
        "text": "I apologize, but I am unable to provide specific block names and settings for your skill without more information about the specific AI platform or tool you are using"
    },
    {
        "text": "The configuration and setup of blocks can vary depending on the platform or tool you are working with"
    },
    {
        "text": ", -"
    },
    {
        "text": "json,"
    },
    {
        "text": "yaml,"
    },
    {
        "text": "xml,"
    },
    {
        "text": "Input"
    },
    {
        "text": "\u201cName\u201d \u201cText\u201d"
    },
    {
        "text": "Genius"
    },
    {
        "text": "Dropdown"
    },
    {
        "text": "\u201cPersonality\u201d \u201cChoice\u201d"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", \u201cFriendly\u201d, \u201cProfessional\u201d, \u201cFunny\u201d, etc"
    },
    {
        "text": "Button"
    },
    {
        "text": "\u201cCreate\u201d \u201cAction\u201d"
    },
    {
        "text": "Genius"
    },
    {
        "text": "Label"
    },
    {
        "text": "\u201cStatus\u201d \u201cText\u201d"
    },
    {
        "text": "Genius"
    },
    {
        "text": "Name Create, Personality Create, Create Status"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", , , Name , , Genius"
    },
    {
        "text": ", Genius,"
    },
    {
        "text": ", Genius"
    },
    {
        "text": ", Genius,"
    },
    {
        "text": "Genius ,"
    },
    {
        "text": ", , ,"
    },
    {
        "text": ","
    },
    {
        "text": ", \u00ab \u00bb, \u00ab \u00bb \u00ab \u00bb"
    },
    {
        "text": ", Genius , , - -"
    },
    {
        "text": ","
    },
    {
        "text": "- -"
    },
    {
        "text": ","
    },
    {
        "text": ", \u00ab \u00bb GPS IP-"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", Genius"
    },
    {
        "text": "]]"
    },
    {
        "text": ","
    },
    {
        "text": "Company_Name"
    },
    {
        "text": "the specific company or industry name or stock name mentioned by user"
    },
    {
        "text": "Event"
    },
    {
        "text": "the event mentioned by user"
    },
    {
        "text": "Demand"
    },
    {
        "text": "the demand of user, select from impact, prediction, recommendation"
    },
    {
        "text": "company"
    },
    {
        "text": "event"
    },
    {
        "text": "demand"
    },
    {
        "text": "result"
    },
    {
        "text": "1"
    },
    {
        "text": "2"
    },
    {
        "text": "3"
    },
    {
        "text": "4"
    },
    {
        "text": "5"
    },
    {
        "text": "API"
    },
    {
        "text": "q"
    },
    {
        "text": "linkList"
    },
    {
        "text": "Interpreting news for you"
    },
    {
        "text": "articles"
    },
    {
        "text": "linksList"
    },
    {
        "text": "6"
    },
    {
        "text": "7"
    },
    {
        "text": "data"
    },
    {
        "text": "company_name"
    },
    {
        "text": "output"
    },
    {
        "text": "8"
    },
    {
        "text": "9"
    },
    {
        "text": "10"
    },
    {
        "text": "11"
    },
    {
        "text": "12"
    },
    {
        "text": "13"
    },
    {
        "text": "14"
    },
    {
        "text": "del item['link']"
    },
    {
        "text": "del item['link']"
    },
    {
        "text": "Intergrade"
    },
    {
        "text": "GPT3"
    },
    {
        "text": "5-"
    },
    {
        "text": "Max_token"
    },
    {
        "text": "500"
    },
    {
        "text": "0"
    },
    {
        "text": "7"
    },
    {
        "text": "1"
    },
    {
        "text": "0"
    },
    {
        "text": "Generating news report"
    },
    {
        "text": "summary_list"
    },
    {
        "text": "link_list"
    },
    {
        "text": "Markdown, URL- HTML-"
    },
    {
        "text": "Writing the final report"
    },
    {
        "text": "title"
    },
    {
        "text": "Stock News Report"
    },
    {
        "text": "result1"
    },
    {
        "text": ","
    },
    {
        "text": "url]"
    },
    {
        "text": "```"
    },
    {
        "text": "- Name ,"
    },
    {
        "text": ", \"Please enter a name for your Genius\" Status"
    },
    {
        "text": "- Personality \"Random\","
    },
    {
        "text": ", Personality"
    },
    {
        "text": "```mermaid"
    },
    {
        "text": "graph TD"
    },
    {
        "text": "G -- Yes --> H[Pick a random option]"
    },
    {
        "text": "G -- No --> I[Create Genius]"
    },
    {
        "text": "H --> I"
    },
    {
        "text": "+-----------------+ +-----------------+ +-----------------+"
    },
    {
        "text": "+-----------------+"
    },
    {
        "text": "+-----------------+"
    },
    {
        "text": "v"
    },
    {
        "text": "+---------+"
    },
    {
        "text": "/ \\"
    },
    {
        "text": "/ Yes \\ No"
    },
    {
        "text": "/ \\"
    },
    {
        "text": "v v"
    },
    {
        "text": "+-----------------+ +-----------------+"
    },
    {
        "text": "/ \\"
    },
    {
        "text": "/ Yes \\ No"
    },
    {
        "text": "/ \\"
    },
    {
        "text": "v v"
    },
    {
        "text": "+-----------------+ +-----------------+"
    },
    {
        "text": "\\ /"
    },
    {
        "text": "\\ /"
    },
    {
        "text": "\\ /"
    },
    {
        "text": "v v"
    },
    {
        "text": "+---------+"
    },
    {
        "text": "/ \\"
    },
    {
        "text": "/ Yes \\ No"
    },
    {
        "text": "/ \\"
    },
    {
        "text": "v v"
    },
    {
        "text": "+-----------------+ +-----------------+"
    },
    {
        "text": "```]"
    },
    {
        "text": "+-----------------------------------+-----------------------------------+"
    },
    {
        "text": "]"
    },
    {
        "text": "1"
    },
    {
        "text": "Genius Input Name Genius Dropdown Personality"
    },
    {
        "text": "2"
    },
    {
        "text": "Button Create, Genius"
    },
    {
        "text": "3"
    },
    {
        "text": ", Name"
    },
    {
        "text": ", \"Please enter a name for your Genius\" Label Status"
    },
    {
        "text": ","
    },
    {
        "text": "4"
    },
    {
        "text": ", Personality \"Random\""
    },
    {
        "text": ", Personality"
    },
    {
        "text": ","
    },
    {
        "text": "- Company Name Company_Name 8241 8250"
    },
    {
        "text": "- 8241 Company_Name 8250 LLM 8249"
    },
    {
        "text": "- q q LLM 8242"
    },
    {
        "text": "- LLM 8242 result Link List 8243"
    },
    {
        "text": "- Link List linksList 8245 8251"
    },
    {
        "text": "- 8243 ,"
    },
    {
        "text": "- 8245 data 8246 Summary List"
    },
    {
        "text": "- 8246 linksList 8251"
    },
    {
        "text": "- Summary List summary_list 8251"
    },
    {
        "text": "- 8250 output LLM 8249"
    },
    {
        "text": "- LLM 8249 result1 8255"
    },
    {
        "text": "- 8251 result id 8253"
    },
    {
        "text": "- 8254 title id 8253"
    },
    {
        "text": "- 8255 result id 8253"
    },
    {
        "text": "- id 8253 , HTML-"
    },
    {
        "text": "- Final Report , Markdown"
    },
    {
        "text": "- - WMS,, ,"
    },
    {
        "text": "WMS , ,"
    },
    {
        "text": "WMS ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": ", , ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", , , WMS"
    },
    {
        "text": ", WMS ,"
    },
    {
        "text": ", , WMS"
    },
    {
        "text": ","
    },
    {
        "text": "API"
    },
    {
        "text": "API,"
    },
    {
        "text": "API"
    },
    {
        "text": ", , ,"
    },
    {
        "text": ", , API , ,"
    },
    {
        "text": ","
    },
    {
        "text": ", !"
    },
    {
        "text": "asciiart"
    },
    {
        "text": "eu/faq"
    },
    {
        "text": "\" \""
    },
    {
        "text": "st->input->api->process->generate->output->e"
    },
    {
        "text": "\u00ab\u00bb"
    },
    {
        "text": "\u00ab \u00bb"
    },
    {
        "text": "API \u00ab \u00bb"
    },
    {
        "text": "\u00ab \u00bb"
    },
    {
        "text": "\u00abGenerate Weather Update\u00bb"
    },
    {
        "text": "\u00ab \u00bb"
    },
    {
        "text": "\u00ab\u00bb"
    },
    {
        "text": ", , ,"
    },
    {
        "text": ","
    },
    {
        "text": ", !"
    },
    {
        "text": ","
    },
    {
        "text": ", , API"
    },
    {
        "text": ", , API,"
    },
    {
        "text": ","
    },
    {
        "text": ", !"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": "API, HTTP- API"
    },
    {
        "text": "API"
    },
    {
        "text": "API, JSON,"
    },
    {
        "text": ", API"
    },
    {
        "text": "JSON, , ,"
    },
    {
        "text": ","
    },
    {
        "text": ", , -"
    },
    {
        "text": ", API"
    },
    {
        "text": "try-catch ,"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": "API, JSON"
    },
    {
        "text": ","
    },
    {
        "text": ", !"
    },
    {
        "text": "return data"
    },
    {
        "text": "return temperature, humidity, wind_speed, weather_condition"
    },
    {
        "text": "WeatherAPI"
    },
    {
        "text": "HTTP- GET API,"
    },
    {
        "text": "API , , ,"
    },
    {
        "text": ","
    },
    {
        "text": "get_weather_dataprocess_weather_data"
    },
    {
        "text": "API ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": "\"YOUR_API_KEY\"requestspip install requests"
    },
    {
        "text": ", API"
    },
    {
        "text": ", !"
    },
    {
        "text": ", ,"
    },
    {
        "text": "API,"
    },
    {
        "text": "API"
    },
    {
        "text": "API API"
    },
    {
        "text": "HTTP- API,"
    },
    {
        "text": ","
    },
    {
        "text": ", !"
    },
    {
        "text": "!"
    },
    {
        "text": "WorkflowSlyAI ASCII HTML-"
    },
    {
        "text": "ASCII -,"
    },
    {
        "text": ","
    },
    {
        "text": "ASCII-"
    },
    {
        "text": ","
    },
    {
        "text": "ASCII HTML-"
    },
    {
        "text": "HTML CSS"
    },
    {
        "text": "HTML-"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": ", !"
    },
    {
        "text": "WMS"
    },
    {
        "text": "<!DOCTYPE html>"
    },
    {
        "text": "<html>"
    },
    {
        "text": "<head>"
    },
    {
        "text": "<style>"
    },
    {
        "text": "</style>"
    },
    {
        "text": "</head>"
    },
    {
        "text": "<body>"
    },
    {
        "text": "<script>"
    },
    {
        "text": "// Create a new WMS layer"
    },
    {
        "text": "// Create a map and add the WMS layer"
    },
    {
        "text": "</script>"
    },
    {
        "text": "</body>"
    },
    {
        "text": "</html>"
    },
    {
        "text": "Leaflet, JavaScript , WMS"
    },
    {
        "text": "HTML CSS div \"map\","
    },
    {
        "text": "JavaScript WMS , URL- WMS, ,"
    },
    {
        "text": ", WMS"
    },
    {
        "text": "L"
    },
    {
        "text": "tileLayer"
    },
    {
        "text": "wmsaddTo"
    },
    {
        "text": "The WMS skill starts by interacting with the user to understand their specific requirements and gather relevant information about the warehouse operations"
    },
    {
        "text": "The skill guides the user through the process of setting up the warehouse in the system, including defining the warehouse layout, storage locations, and inventory categories"
    },
    {
        "text": "The skill provides functionalities for managing inventory, such as receiving goods, updating stock levels, and tracking inventory movements within the warehouse"
    },
    {
        "text": "The skill enables the user to manage customer orders, including order creation, order fulfillment, and order tracking"
    },
    {
        "text": "It ensures efficient order processing and timely delivery"
    },
    {
        "text": "The skill assists in optimizing the picking and packing process by suggesting the most efficient routes and methods for order fulfillment"
    },
    {
        "text": "It considers factors like product location, order priority, and packaging requirements"
    },
    {
        "text": "The skill integrates with shipping carriers and logistics providers to streamline the shipping process"
    },
    {
        "text": "It generates shipping labels, tracks shipments, and provides real-time visibility into the delivery status"
    },
    {
        "text": "The skill offers reporting and analytics capabilities to provide insights into warehouse performance, inventory levels, order fulfillment rates, and other key metrics"
    },
    {
        "text": "It helps identify areas for improvement and supports data-driven decision-making"
    },
    {
        "text": "The skill provides maintenance and support features, including system updates, bug fixes, and user assistance, to ensure the smooth operation of the WMS"
    },
    {
        "text": "By following this logical flow, the WMS skill can effectively manage warehouse operations, optimize processes, and enhance overall productivity"
    },
    {
        "text": "Please note that this is a high-level overview, and the specific implementation details may vary based on the requirements and capabilities of the WMS system"
    },
    {
        "text": "The virtual Genius receives a user request for weather updates"
    },
    {
        "text": "The Genius prompts the user to provide the location for which they want to receive weather updates"
    },
    {
        "text": "The Genius captures the user's location input"
    },
    {
        "text": "The Genius uses a weather API or service to fetch the current weather data for the specified location"
    },
    {
        "text": "The Genius sends a request to the weather API, including the user's location information"
    },
    {
        "text": "Prompt the user to enter their desired location for weather updates"
    },
    {
        "text": "Capture the user's input using an input function or a user interface element"
    },
    {
        "text": "Validate the user's input to ensure it is a valid location"
    },
    {
        "text": "Use a validation mechanism such as checking against a list of valid locations or using a geocoding service to verify the location"
    },
    {
        "text": "Integrate with a weather API service by making an HTTP request to the API endpoint"
    },
    {
        "text": "Pass the user's location as a parameter in the API request"
    },
    {
        "text": "Handle the API response, which typically comes in JSON format, by parsing the data"
    },
    {
        "text": "Extract relevant information from the weather data received from the API response"
    },
    {
        "text": "Access specific fields in the JSON data structure to retrieve temperature, humidity, wind speed, and weather conditions"
    },
    {
        "text": "Use the extracted weather information to generate a concise and informative weather update"
    },
    {
        "text": "Format the weather update message according to your desired output format, such as a text string or a structured object"
    },
    {
        "text": "Provide the weather update to the user through the appropriate channel, such as printing the update to the console, displaying it on a web page, or speaking it out using text-to-speech capabilities"
    },
    {
        "text": "Implement error handling mechanisms to handle cases where the weather API request fails or the location input is invalid"
    },
    {
        "text": "Use try-catch blocks or error handling functions to gracefully handle exceptions and provide meaningful error messages to the user"
    },
    {
        "text": "Test the weather update feature thoroughly to ensure its accuracy and reliability"
    },
    {
        "text": "Continuously optimize the code based on user feedback and performance metrics, such as response time and error rates"
    },
    {
        "text": "Remember to use appropriate libraries or frameworks for making API requests, handling JSON data, and validating user input based on your programming language of choice"
    },
    {
        "text": "I hope this helps you in writing the code for each block in the weather update feature"
    },
    {
        "text": "Let me know if you have any further questions!"
    },
    {
        "text": "In this example, we use the WeatherAPI service to fetch the current weather data for the specified location"
    },
    {
        "text": "The get_weather_data function sends an HTTP GET request to the API endpoint, passing the user's location as a parameter"
    },
    {
        "text": "The API response is then processed using the process_weather_data function to extract relevant information such as temperature, humidity, wind speed, and weather conditions"
    },
    {
        "text": "Finally, the weather update is generated and provided to the user"
    },
    {
        "text": "Remember to replace \"YOUR_API_KEY\" with your actual API key from the weather service you are using"
    },
    {
        "text": "Additionally, you may need to install the requests library using pip install requests if it is not already installed"
    },
    {
        "text": "I hope this example helps you understand the integration process for retrieving weather data from a weather API"
    },
    {
        "text": "Let me know if you have any further questions!"
    },
    {
        "text": "You can use various methods for location validation, such as checking against a list of valid locations, using a geocoding service to verify the location, or implementing a regular expression pattern matching"
    },
    {
        "text": "Choose a weather API service that provides the necessary weather data"
    },
    {
        "text": "Sign up for an API key from the chosen weather service provider"
    },
    {
        "text": "Use the API key to authenticate your requests to the weather API"
    },
    {
        "text": "Make an HTTP request to the weather API endpoint, passing the user's location as a parameter"
    },
    {
        "text": "Handle exceptions gracefully and provide meaningful error messages to the user"
    },
    {
        "text": "Remember to use the appropriate libraries or frameworks for making API requests, handling JSON data, and validating user input based on your programming language of choice"
    },
    {
        "text": "I hope this detailed explanation helps you understand the integration process for the weather update feature"
    },
    {
        "text": "Let me know if you have any further questions!"
    },
    {
        "text": "Certainly! Visualization is an essential aspect of understanding and communicating the structure and components of an Genius"
    },
    {
        "text": "With WorkflowSlyAI, you can utilize ASCII drawings and HTML templates to create visual representations of your Genius's workflow and architecture"
    },
    {
        "text": "Use ASCII drawings or flowchart diagrams to represent the workflow of your Genius"
    },
    {
        "text": "Identify the different steps or blocks in the workflow and their relationships"
    },
    {
        "text": "Use arrows or lines to indicate the flow of information or control between the steps"
    },
    {
        "text": "Create visual representations of the various components or modules in your Genius"
    },
    {
        "text": "Use ASCII art or graphical icons to represent each component"
    },
    {
        "text": "Arrange the components in a logical and intuitive manner to depict their relationships and interactions"
    },
    {
        "text": "Convert your ASCII drawings or graphical representations into HTML templates"
    },
    {
        "text": "Use HTML tags and CSS styling to create visually appealing and interactive visualizations"
    },
    {
        "text": "Embed the HTML templates into your Genius's user interface or documentation for easy access and understanding"
    },
    {
        "text": "By visualizing your Genius, you can gain a clearer understanding of its structure, identify potential bottlenecks or areas for improvement, and effectively communicate its functionality to others"
    },
    {
        "text": "I hope this helps you in visualizing your Genius"
    },
    {
        "text": "Let me know if you have any further questions!"
    },
    {
        "text": "In this example, we use the Leaflet library, a popular JavaScript library for interactive maps, to visualize the WMS layer"
    },
    {
        "text": "The HTML and CSS code provide a container div with the id \"map\" where the map will be displayed"
    },
    {
        "text": "The JavaScript code creates a new WMS layer using the L"
    },
    {
        "text": "tileLayer"
    },
    {
        "text": "wms method, specifying the URL of the WMS service, the desired layers, image format, and transparency settings"
    },
    {
        "text": "Finally, the WMS layer is added to the map using the addTo method"
    },
    {
        "text": "The Genius receives the weather data from the API response"
    },
    {
        "text": "The Genius extracts relevant information such as temperature, humidity, wind speed, and weather conditions from the data"
    },
    {
        "text": "The Genius generates a concise and informative weather update based on the extracted information"
    },
    {
        "text": "The virtual Genius concludes the weather update process"
    },
    {
        "text": "Please note that the specific implementation details, including the weather API used and the format of the weather update, may vary based on the chosen weather service and the platform on which the virtual Genius operates"
    },
    {
        "text": "I hope this logical flow helps you in designing the weather update feature for your virtual Genius"
    },
    {
        "text": "Let me know if you need any further assistance!"
    },
    {
        "text": "The process starts with the \"Start\" node"
    },
    {
        "text": "The user provides the location information at the \"Gather Location Information\" node"
    },
    {
        "text": "The Genius retrieves weather data from the API at the \"Retrieve Weather Data\" node"
    },
    {
        "text": "The weather data is processed at the \"Process Weather Data\" node"
    },
    {
        "text": "The Genius generates a weather update at the \"Generate Weather Update\" node"
    },
    {
        "text": "The weather update is provided to the user at the \"Provide Weather Update\" node"
    },
    {
        "text": "The process ends at the \"End\" node"
    },
    {
        "text": "Please note that this is a simplified representation of the workflow, and the actual implementation may involve additional steps or decision points based on the specific requirements and capabilities of the virtual Genius"
    },
    {
        "text": "I hope this workflow representation helps you visualize the sequence of actions in the weather update feature"
    },
    {
        "text": "Let me know if you need any further assistance!]"
    },
    {
        "text": "- ****"
    },
    {
        "text": "Ready Player Me"
    },
    {
        "text": ", MindOS\u00b9"
    },
    {
        "text": "- ****"
    },
    {
        "text": ", , ,"
    },
    {
        "text": ", Genius \u00b9"
    },
    {
        "text": "- ****"
    },
    {
        "text": "Genius, , ,"
    },
    {
        "text": ", , , Genius \u00b9"
    },
    {
        "text": "- ** **"
    },
    {
        "text": ", Genius"
    },
    {
        "text": "Genius , \u00b9"
    },
    {
        "text": "- ** **"
    },
    {
        "text": "Genius , ,"
    },
    {
        "text": "Genius\u00b9"
    },
    {
        "text": "**** Genius,"
    },
    {
        "text": "Genius, ,"
    },
    {
        "text": ","
    },
    {
        "text": "- , , Bing"
    },
    {
        "text": "Bing! \ud83d\ude0a"
    },
    {
        "text": "- , ,"
    },
    {
        "text": "- , , ,"
    },
    {
        "text": "- - ,"
    },
    {
        "text": "- - , , , , , , ,"
    },
    {
        "text": "- - ,"
    },
    {
        "text": ", RESTful, AsyncAPI, RPC, GraphQL OData"
    },
    {
        "text": "- -"
    },
    {
        "text": ","
    },
    {
        "text": "- - ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": "- - , , ,,"
    },
    {
        "text": "- MindOS , , ,"
    },
    {
        "text": "- MindOS , JavaScript, Python SQL"
    },
    {
        "text": "\" Genius?\","
    },
    {
        "text": "\" ?\","
    },
    {
        "text": "\" ?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\" \","
    },
    {
        "text": "\" machine learning natural language processing\","
    },
    {
        "text": "\", , 3D-\""
    },
    {
        "text": "]"
    },
    {
        "text": "\" ?\","
    },
    {
        "text": "\" ?\","
    },
    {
        "text": "\" Genius?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\" JSON\","
    },
    {
        "text": "\" , , \","
    },
    {
        "text": "\" \""
    },
    {
        "text": "],"
    },
    {
        "text": "\"Genius_architecture"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"data_flow"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"training_loop"
    },
    {
        "text": "png\""
    },
    {
        "text": "]"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": "JSON Python"
    },
    {
        "text": "// previous data"
    },
    {
        "text": "// links"
    },
    {
        "text": "// images"
    },
    {
        "text": "\"NLP helps Geniuss understand natural language\","
    },
    {
        "text": "\"Important techniques are tokenization, lemmatization, entity recognition\""
    },
    {
        "text": "\"Computer vision extracts information from visual inputs\","
    },
    {
        "text": "\"Useful for image classification, object detection, face recognition\""
    },
    {
        "text": "\"Weather API call based on geolocation\","
    },
    {
        "text": "\"Parse JSON response to extract forecast\""
    },
    {
        "text": "\"Integrate with Google Calendar API\","
    },
    {
        "text": "\"Support adding, editing, removing events\""
    },
    {
        "text": "\"User name\","
    },
    {
        "text": "\"Current topic\","
    },
    {
        "text": "\"Recent questions and answers\""
    },
    {
        "text": "\"Interactions history\","
    },
    {
        "text": "\"User preferences\""
    },
    {
        "text": ","
    },
    {
        "text": "\"What is the best way to create an Genius?\","
    },
    {
        "text": "\"How can I train a conversational Genius?\","
    },
    {
        "text": "\"What visualization methods are helpful for understanding processes?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"You need to define the use cases and collect training data"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Machine learning and NLP can be used for training"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Diagrams, flowcharts, interactive 3D models are useful"
    },
    {
        "text": "\""
    },
    {
        "text": "]"
    },
    {
        "text": "],"
    },
    {
        "text": "\"Genius_arch_diagram"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"conversation_flowchart"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"model_training_loop"
    },
    {
        "text": "png\""
    },
    {
        "text": "\"NLP techniques help Geniuss understand natural human language"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Important techniques include tokenization, lemmatization, named entity recognition"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Computer vision extracts high-level information from visual inputs like images and videos"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Useful CV tasks are image classification, object detection, face recognition"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Call OpenWeatherMap API with geolocation coordinates"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Parse JSON response to extract weather data like temperature, humidity, description"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Use Google Calendar API to add, edit, and delete events"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Integrate with OAuth for authentication and access control"
    },
    {
        "text": "\""
    },
    {
        "text": "\"User name, location, current topic"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Recent questions and answers"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Past conversation history and topics"
    },
    {
        "text": "\","
    },
    {
        "text": "\"User preferences and personal details"
    },
    {
        "text": "\""
    },
    {
        "text": ", , Genius"
    },
    {
        "text": "\"What are the main approaches for building a conversational Genius?\","
    },
    {
        "text": "\"How can I leverage machine learning to create a robust Genius?\","
    },
    {
        "text": "\"What data structure is best for storing conversational logs?\""
    },
    {
        "text": "\"The main approaches are rule-based, retrieval-based, and generative models"
    },
    {
        "text": "Combining them works best"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Supervised learning with labeled datasets is effective"
    },
    {
        "text": "Neural networks like LSTM, BERT are useful"
    },
    {
        "text": "\","
    },
    {
        "text": "\"JSON provides a flexible schema for storing chat history, context, entities"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Genius_architecture_diagram"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"conversation_flow_diagram"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"neural_network_training_loop"
    },
    {
        "text": "png\""
    },
    {
        "text": "\"NLP techniques enable Geniuss to process human language input"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Key NLP tasks are language modeling, named entity recognition, sentiment analysis"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Machine learning models can learn from data without explicit programming"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Common algorithms used are regression, decision trees, neural networks"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Integrate OpenWeatherMap API to get weather data"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Process JSON response to extract temperature, humidity, weather conditions"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Use Google Calendar API to manage calendar"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Implement OAuth 2"
    },
    {
        "text": "0 for secure user authentication and access"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Recent questions and responses"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Past conversations and topics discussed"
    },
    {
        "text": "\","
    },
    {
        "text": "\"User preferences, personal details"
    },
    {
        "text": "\""
    },
    {
        "text": "]"
    },
    {
        "text": "? , ,, 5 ,"
    },
    {
        "text": "\"What are the best practices for creating a conversational Genius?\","
    },
    {
        "text": "\"How can I leverage machine learning and NLP for robust language understanding?\","
    },
    {
        "text": "\"What tools and frameworks do you recommend for deployment?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"Follow principles of utility, natural flow, personality"
    },
    {
        "text": "Combine rules, ML, and external APIs"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Build training datasets for intents, entities"
    },
    {
        "text": "Use transformers like BERT, GPT-3"
    },
    {
        "text": "Try Rasa, Dialogflow"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Start with chat widgets"
    },
    {
        "text": "For scale, use channels like Facebook Messenger, Slack"
    },
    {
        "text": "Host on cloud platforms"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Genius_design_architecture"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"rasa_nlu_pipeline"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"dialogflow_essentials"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"azure_bot_service_channels"
    },
    {
        "text": "png\""
    },
    {
        "text": "\"Goal of conversational AI is natural dialog between humans and machines"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Key principles are utility, natural flow, context tracking, personality"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Common architectures combine NLU, dialogue manager, NLG"
    },
    {
        "text": "\""
    },
    {
        "text": "\"NLP enables Geniuss to analyze textual data and extract meaning"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Tasks include language modeling, intent recognition, named entity extraction"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Integrate OpenWeatherMap API to fetch weather data"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Process JSON response to extract temperature, precipitation chance, weather state"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Recent questions and responses"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Detected intents and entities"
    },
    {
        "text": "\""
    },
    {
        "text": "\"User preferences, personal details"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Interaction frequency, common questions"
    },
    {
        "text": "\""
    },
    {
        "text": "skills intents entities"
    },
    {
        "text": "10"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "// ,"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "// -"
    },
    {
        "text": "]"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "],"
    },
    {
        "text": "//"
    },
    {
        "text": ", ,,"
    },
    {
        "text": ","
    },
    {
        "text": ", Genius"
    },
    {
        "text": "\"Hello, how are you doing today?\","
    },
    {
        "text": "\"What is the weather forecast for Seattle tomorrow?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"Hello! I'm doing great thanks for asking"
    },
    {
        "text": "How can I help you today?\","
    },
    {
        "text": "\"Let me check the weather forecast for Seattle tomorrow"
    },
    {
        "text": "According to the Weather Channel API, tomorrow in Seattle there is a high of 64\u00b0F and a low of 50\u00b0F, with a 60% chance of rain showers"
    },
    {
        "text": "\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"Can you help me find a nice restaurant in Paris for a romantic dinner next Friday at 8pm?\""
    },
    {
        "text": "],"
    },
    {
        "text": "Le Meurice Alain Ducasse - 5-star fine dining with stunning views of Paris"
    },
    {
        "text": "They have availability for 8pm next Friday"
    },
    {
        "text": "L'Avant Comptoir de la Mer - Charming and cozy seafood tapas place near the Saint-Germain-des-Pr\u00e9s"
    },
    {
        "text": "I can book a table for two at 8pm"
    },
    {
        "text": "Le Caf\u00e9 de l'Homme - Elegant bistro inside the Mus\u00e9e de l'Homme"
    },
    {
        "text": "They have a lovely terrace and can take a reservation at your preferred time"
    },
    {
        "text": "\""
    },
    {
        "text": ", , -"
    },
    {
        "text": "\"Machine learning is a subset of artificial intelligence that enables computers to learn patterns from data in order to make decisions and predictions without being explicitly programmed"
    },
    {
        "text": "It involves training statistical models on sample data to perform tasks like classification, regression, clustering, reinforcement learning"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Supervised learning algorithms like linear regression, random forests, and deep neural networks are commonly used to train NLP and dialogue models for conversational Geniuss from labeled conversation datasets"
    },
    {
        "text": "\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"Integrate natural language understanding to parse user requests related to calendar management"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Connect to Google Calendar API and implement OAuth 2"
    },
    {
        "text": "0 authorization flow for secure access to user calendar"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Use entities like EVENT_TITLE, LOCATION, DATE, TIME detected by NLU to create, update, and delete events"
    },
    {
        "text": "\""
    },
    {
        "text": "\"VIEW_CALENDAR - view user calendar events\","
    },
    {
        "text": "\"ADD_EVENT - add a new calendar event\","
    },
    {
        "text": "\"EDIT_EVENT - make changes to an existing event\","
    },
    {
        "text": "\"DELETE_EVENT - delete an event from the calendar\""
    },
    {
        "text": ", ,"
    },
    {
        "text": ", , -"
    },
    {
        "text": ","
    },
    {
        "text": "10 ,"
    },
    {
        "text": "\"NLP enables computers to analyze, understand, and generate human language"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Key techniques like speech recognition, NLU, NLG are used in conversational AI"
    },
    {
        "text": "\""
    },
    {
        "text": "\"ML allows systems to learn from data without explicit programming"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Algorithms like regression, neural networks are used to train chatbots"
    },
    {
        "text": "\""
    },
    {
        "text": "\"architecture_diagram"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"flowchart"
    },
    {
        "text": "svg\""
    },
    {
        "text": "\"promo_video"
    },
    {
        "text": "mp4\","
    },
    {
        "text": "\"overview"
    },
    {
        "text": "mov\""
    },
    {
        "text": "]"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": "// Generate data for this skill using the existing knowledge graph, content, and skills"
    },
    {
        "text": "// - I want to create a new Genius"
    },
    {
        "text": "// - How can I make my own chatbot?"
    },
    {
        "text": "// - Can you help me build an Genius?"
    },
    {
        "text": "// - I want my Genius to [goal]"
    },
    {
        "text": "// - The purpose of my Genius is to [goal]"
    },
    {
        "text": "// - My Genius should [goal]"
    },
    {
        "text": "// - My Genius is for [domain]"
    },
    {
        "text": "// - The domain of my Genius is [domain]"
    },
    {
        "text": "// - I want my Genius to work in the [domain] field"
    },
    {
        "text": "// - I want my Genius to have [features]"
    },
    {
        "text": "// - The features of my Genius are [features]"
    },
    {
        "text": "// - My Genius should be able to [features]"
    },
    {
        "text": "// The testing, deployment, monitoring, and improvement modules remain the same as before // They can be used to test, deploy, monitor, and improve the new Geniuss created by the Genius_creator skill // For example, the testing module can run conversations with the new Geniuss and evaluate their performance // The deployment module can launch the new Geniuss on different channels or platforms // The monitoring module can track the metrics and tools of the new Geniuss in real time // The improvement module can provide feedback and improvement suggestions for the new Geniuss based on data and feedback"
    },
    {
        "text": "// facts"
    },
    {
        "text": "// facts"
    },
    {
        "text": "// examples"
    },
    {
        "text": "// docs, images, videos"
    },
    {
        "text": "// details"
    },
    {
        "text": "// details"
    },
    {
        "text": "\"Prompt for Genius name, domain and use cases\","
    },
    {
        "text": "\"Initialize new MindOS instance with base components\","
    },
    {
        "text": "\"Generate training data using knowledge graph and existing skills\","
    },
    {
        "text": "\"Fine-tune language and dialog models on new data\""
    },
    {
        "text": "\"Iteratively train NLU, dialog manager, NLG models\","
    },
    {
        "text": "\"Evaluate using test conversations and user feedback\","
    },
    {
        "text": "\"Retrain models to improve performance\""
    },
    {
        "text": "\"Test on channel APIs like Messenger, Slack\","
    },
    {
        "text": "\"Publish trained models and data assets\","
    },
    {
        "text": "\"Monitor conversations and collect feedback\""
    },
    {
        "text": "\"Analyze logs, metrics to identify issues\","
    },
    {
        "text": "\"Collect user feedback through surveys, interviews\","
    },
    {
        "text": "\"Update training data, workflows to enhance Genius\""
    },
    {
        "text": "// metrics, tools"
    },
    {
        "text": "// process, techniques"
    },
    {
        "text": "Please let me know if I should expand or refine any other sections related to workflows, integrations, or fine-tuning of Geniuss in MindOS"
    },
    {
        "text": "I'm happy to iterate and improve the data structure"
    },
    {
        "text": "// facts"
    },
    {
        "text": "// examples"
    },
    {
        "text": "// docs, images, videos"
    },
    {
        "text": "// details"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "JSON Genius"
    },
    {
        "text": ", ,, ,"
    },
    {
        "text": ", -,"
    },
    {
        "text": "?"
    },
    {
        "text": "\"NLP allows computers to analyze, understand and generate human language through machine learning algorithms"
    },
    {
        "text": "Main tasks include speech recognition, natural language understanding, machine translation, sentiment analysis and natural language generation"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Machine learning uses statistical models and algorithms to give computer systems the ability to learn from data without being explicitly programmed"
    },
    {
        "text": "Algorithms like regression, clustering, decision trees, neural networks can be trained on conversation data"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Conversational AI involves building interfaces that allow humans to interact with computers using natural language"
    },
    {
        "text": "Main components include speech recognition, NLU, dialogue management, NLG, knowledge bases"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Genius_architecture"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"dialogue_flowchart"
    },
    {
        "text": "svg\""
    },
    {
        "text": "\"Genius_demo"
    },
    {
        "text": "mp4\","
    },
    {
        "text": "\"nlp_techniques"
    },
    {
        "text": "mov\""
    },
    {
        "text": "\"Number of conversations\","
    },
    {
        "text": "\"Conversation resolution rate\","
    },
    {
        "text": "\"Intent recognition accuracy\","
    },
    {
        "text": "\"Entity extraction accuracy\","
    },
    {
        "text": "\"User satisfaction score\""
    },
    {
        "text": "\"Chatbase\","
    },
    {
        "text": "\"Dashbot\","
    },
    {
        "text": "\"Bespoken Analytics\","
    },
    {
        "text": "\"Chatlytics\""
    },
    {
        "text": "\"Analyze logs and metrics to identify issues\","
    },
    {
        "text": "\"Review negative user feedback\","
    },
    {
        "text": "\"Add more training data for problematic intents\","
    },
    {
        "text": "\"Retrain NLU model with updated data\","
    },
    {
        "text": "\"Test conversations to measure performance gains\""
    },
    {
        "text": "\"Active learning - flag unclear user inputs for human review\","
    },
    {
        "text": "\"Reinforcement learning - reward bot actions that lead to positive outcomes\","
    },
    {
        "text": "\"Transfer learning - leverage models trained in related domains\""
    },
    {
        "text": ", -, ,, ,, ,"
    },
    {
        "text": ", -"
    },
    {
        "text": "// NLP, ML, conversational AI"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "JSON , Genius -"
    },
    {
        "text": ", -"
    },
    {
        "text": "!"
    },
    {
        "text": "\"conversations\" - ,"
    },
    {
        "text": "\"skills\" - /"
    },
    {
        "text": "\"training\" - ,"
    },
    {
        "text": "\"testing\" - ,"
    },
    {
        "text": "\"monitoring\" - ,"
    },
    {
        "text": ","
    },
    {
        "text": ", !"
    },
    {
        "text": ","
    },
    {
        "text": "API runtime"
    },
    {
        "text": ", !"
    },
    {
        "text": "!"
    },
    {
        "text": "Transitions -"
    },
    {
        "text": "Data and data passing -"
    },
    {
        "text": "Events -,"
    },
    {
        "text": "Error handling -"
    },
    {
        "text": "Compensation -"
    },
    {
        "text": "Extensions -"
    },
    {
        "text": "-"
    },
    {
        "text": "- ,"
    },
    {
        "text": "- workflow"
    },
    {
        "text": "JSON/YAML"
    },
    {
        "text": "Serverless Workflow Specification"
    },
    {
        "text": "Table of Contents"
    },
    {
        "text": "Abstract"
    },
    {
        "text": "Status of this document"
    },
    {
        "text": "Overview"
    },
    {
        "text": "Why we need a specification?"
    },
    {
        "text": "Focus on standards"
    },
    {
        "text": "Project Components"
    },
    {
        "text": "Specification Details"
    },
    {
        "text": "Core Concepts"
    },
    {
        "text": "Workflow Definition"
    },
    {
        "text": "Workflow Instance"
    },
    {
        "text": "Workflow Model"
    },
    {
        "text": "Workflow Data"
    },
    {
        "text": "Workflow Data Input"
    },
    {
        "text": "Information Passing Between States"
    },
    {
        "text": "Workflow data output"
    },
    {
        "text": "State data filters"
    },
    {
        "text": "Action data filters"
    },
    {
        "text": "Event data filters"
    },
    {
        "text": "Using multiple data filters"
    },
    {
        "text": "Data Merging"
    },
    {
        "text": "Workflow Functions"
    },
    {
        "text": "Using Functions for RESTful Service Invocations"
    },
    {
        "text": "Using Functions for Async API Service Invocations"
    },
    {
        "text": "Using Functions for RPC Service Invocations"
    },
    {
        "text": "Using Functions for GraphQL Service Invocations"
    },
    {
        "text": "Invoking a GraphQL Query"
    },
    {
        "text": "Invoking a GraphQL Mutation"
    },
    {
        "text": "Using Functions for OData Service Invocations"
    },
    {
        "text": "Creating an OData Function Definition"
    },
    {
        "text": "Invoking an OData Function Definition"
    },
    {
        "text": "Using Functions for Expression Evaluation"
    },
    {
        "text": "Defining custom function types"
    },
    {
        "text": "Workflow Expressions"
    },
    {
        "text": "Workflow Definition Structure"
    },
    {
        "text": "Workflow States"
    },
    {
        "text": "Event State"
    },
    {
        "text": "Operation State"
    },
    {
        "text": "Switch State"
    },
    {
        "text": "Sleep State"
    },
    {
        "text": "Parallel State"
    },
    {
        "text": "Inject State"
    },
    {
        "text": "ForEach State"
    },
    {
        "text": "Callback State"
    },
    {
        "text": "Related State Definitions"
    },
    {
        "text": "Function Definition"
    },
    {
        "text": "Event Definition"
    },
    {
        "text": "Auth Definition"
    },
    {
        "text": "Basic Properties Definition"
    },
    {
        "text": "Bearer Properties Definition"
    },
    {
        "text": "OAuth2 Properties Definition"
    },
    {
        "text": "Correlation Definition"
    },
    {
        "text": "OnEvents Definition"
    },
    {
        "text": "Action Definition"
    },
    {
        "text": "Subflow Action"
    },
    {
        "text": "FunctionRef Definition"
    },
    {
        "text": "EventRef Definition"
    },
    {
        "text": "SubFlowRef Definition"
    },
    {
        "text": "Error Definition"
    },
    {
        "text": "Retry Definition"
    },
    {
        "text": "Transition Definition"
    },
    {
        "text": "Switch State Data Conditions"
    },
    {
        "text": "Switch State Event Conditions"
    },
    {
        "text": "Parallel State Branch"
    },
    {
        "text": "Parallel State Handling Exceptions"
    },
    {
        "text": "Start Definition"
    },
    {
        "text": "Schedule Definition"
    },
    {
        "text": "Cron Definition"
    },
    {
        "text": "End Definition"
    },
    {
        "text": "ProducedEvent Definition"
    },
    {
        "text": "Transitions"
    },
    {
        "text": "Additional Properties"
    },
    {
        "text": "Workflow Error Handling"
    },
    {
        "text": "Defining Errors"
    },
    {
        "text": "Action retries"
    },
    {
        "text": "Retry actions on known errors"
    },
    {
        "text": "Automatic retries on known and unknown errors"
    },
    {
        "text": "Workflow Timeouts"
    },
    {
        "text": "Workflow Timeout Definition"
    },
    {
        "text": "WorkflowExecTimeout Definition"
    },
    {
        "text": "States Timeout Definition"
    },
    {
        "text": "Branch Timeout Definition"
    },
    {
        "text": "Event Timeout Definition"
    },
    {
        "text": "Workflow Compensation"
    },
    {
        "text": "Defining Compensation"
    },
    {
        "text": "Triggering Compensation"
    },
    {
        "text": "Compensation Execution Details"
    },
    {
        "text": "Compensation and Active States"
    },
    {
        "text": "Unrecoverable errors during compensation"
    },
    {
        "text": "Continuing as a new Execution"
    },
    {
        "text": "ContinueAs in sub workflows"
    },
    {
        "text": "Workflow Versioning"
    },
    {
        "text": "Workflow Constants"
    },
    {
        "text": "Workflow Secrets"
    },
    {
        "text": "Workflow Metadata"
    },
    {
        "text": "Workflow Context"
    },
    {
        "text": "Extensions"
    },
    {
        "text": "Use Cases"
    },
    {
        "text": "Examples"
    },
    {
        "text": "Comparison to other workflow languages"
    },
    {
        "text": "References"
    },
    {
        "text": "License"
    },
    {
        "text": "The Serverless Workflow project defines a vendor-neutral and declarative workflow language,targeting the Serverless computing technology domain"
    },
    {
        "text": "This document represents the current state of the specification"
    },
    {
        "text": "It includes all features so far releasedas well as all features planned to be added in the next release"
    },
    {
        "text": "You can find all specification releases here"
    },
    {
        "text": "You can find the specification roadmap here"
    },
    {
        "text": "Workflows allow us to capture and organize business requirements in a unified manner"
    },
    {
        "text": "They can bridge the gap between how we express and model business logic"
    },
    {
        "text": "Serverless Workflow focuses on defining a vendor-neutral, platform-independent, and declarative workflowlanguage that targets the serverless computing technology domain"
    },
    {
        "text": "It can be used to significantly bridge the gap between your unique business domain and the target technology domain"
    },
    {
        "text": "The lack of a common way to define and model workflows means that we must constantly re-learnhow to write them"
    },
    {
        "text": "This also limits the potential for common libraries, tooling andinfrastructure to aid workflow modeling and execution across different platforms"
    },
    {
        "text": "Portability as well as productivity that can be achieved from workflow orchestration is hindered overall"
    },
    {
        "text": "Serverless Workflow addresses the need for a community-driven, vendor-neutral and a platform-independentworkflow language specification that targets the serverless computing technology domain"
    },
    {
        "text": "Having and using a specification-based workflow language allows us to model our workflows once and deploy themonto many different container/cloud platforms, expecting the same execution results"
    },
    {
        "text": "For more information on the history, development and design rationale behind the specification, see the Serverless Workflow Wiki"
    },
    {
        "text": "Serverless Workflow language takes advantage of well-established and known standards such as CloudEvents, OpenAPI specifications,gRPC and GraphQL"
    },
    {
        "text": "Definitions of the workflow language"
    },
    {
        "text": "This is defined via the Workflow JSON Schema"
    },
    {
        "text": "You can use bothJSON and YAML formats to model your workflows"
    },
    {
        "text": "Following sections provide detailed descriptions of all parts of the Serverless Workflow language"
    },
    {
        "text": "A workflow definition is a JSON or YAML file that conforms to the Serverless Workflow specification DSL"
    },
    {
        "text": "It consists of the core Workflow Definition Structureand the Workflow Model It defines a blueprint used by runtimes for its execution"
    },
    {
        "text": "Runtimes can initialize workflow definitions for some particular set of data inputs or events"
    },
    {
        "text": "A workflow instance represents a single Workflow Execution corresponding to the instructions provided by aworkflow definition"
    },
    {
        "text": "A workflow instance can be short or long-running"
    },
    {
        "text": "A single workflow instanceshould be isolated, meaning it should not share state and data with other workflow instances"
    },
    {
        "text": "Workflow instances should be able to communicate with each other via events"
    },
    {
        "text": "Depending on their workflow definition, workflow instances can be short-lived orcan execute for days, weeks, or years"
    },
    {
        "text": "Each workflow instances should have its unique identifier, which should remainunchanged throughout its execution"
    },
    {
        "text": "Workflow instances can be started providing some data input"
    },
    {
        "text": "This is described in detail in theworkflow data input section"
    },
    {
        "text": "Workflow instances can also wait for examples to start their execution, which is the casewhere a workflow definition contains a EventState starting workflow state"
    },
    {
        "text": "For long-running workflow-executions, you can utilize the keepActive workflow property whichprovides more control as to when exactly to terminate Workflow Execution"
    },
    {
        "text": "In cases where aWorkflow Execution should be continued as a new one, the DSL also provides the continueAs property which is describedin detail in the Continuing a new Execution section"
    },
    {
        "text": "Function definitions - Reusable functions that can declare services that need to be invoked, or expressions to be evaluated"
    },
    {
        "text": "Event definitions - Reusable declarations of events that need to be consumed to start or continue workflow instances, trigger function/service execution, or be produced during Workflow Execution"
    },
    {
        "text": "Retry definitions - Reusable retry definitions"
    },
    {
        "text": "Can specify retry strategies for service invocations during Workflow Execution"
    },
    {
        "text": "Timeout definitions - Reusable timeout definitions"
    },
    {
        "text": "Can specify default Workflow Execution timeout, as well as workflow state, action, and branch execution timeouts"
    },
    {
        "text": "Errors definition - Reusable error definitions"
    },
    {
        "text": "Provide domain-specific error definitions which can be referenced in workflow states error handling"
    },
    {
        "text": "State definitions - Definition of states, the building blocks of workflow control flow logic"
    },
    {
        "text": "States can reference the reusable function, event and retry definitions"
    },
    {
        "text": "The initial Workflow data input is passed to the workflow starting state as its data input"
    },
    {
        "text": "When a state finishes its execution, its data output is passed as data input to the next state that should be executed"
    },
    {
        "text": "When Workflow Execution ends, the last executed workflow state's data output becomes the final Workflow data output"
    },
    {
        "text": "States can filter their data inputs and outputs using State Data filters"
    },
    {
        "text": "States can also consume events as well as invoke services"
    },
    {
        "text": "These event payloads and service invocation resultscan be filtered using Event data filters and Action data filters"
    },
    {
        "text": "Data filters use workflow expressions for selecting and manipulating state datainput and output, action inputs and results, and event payloads"
    },
    {
        "text": "Multiple filters can be combined to gain high level of control of your workflow state data"
    },
    {
        "text": "You can find an example of that inthis section"
    },
    {
        "text": "Data from consumed events,and action execution results are added/mergedto state data"
    },
    {
        "text": "Reference the data merging section to learn about the merging rules that should be applied"
    },
    {
        "text": "Workflow data input is passed to the workflow starting state as its data input"
    },
    {
        "text": "If the state is the workflow starting state, its data input is the workflow data input"
    },
    {
        "text": "When Workflow Execution ends, the data output of the last executed state becomes the workflow data output"
    },
    {
        "text": "Each Workflow Execution should produce a data output"
    },
    {
        "text": "The workflow data output is the data output of the last executed workflow state"
    },
    {
        "text": "Parameter\tDescription\tType\tRequired"
    },
    {
        "text": "input\tWorkflow expression to filter the states data input\tstring\tno"
    },
    {
        "text": "output\tWorkflow expression that filters the states data output\tstring\tno"
    },
    {
        "text": "Click to view example definition"
    },
    {
        "text": "JSON\tYAML"
    },
    {
        "text": "State data filters can be used to filter the state's data input and output"
    },
    {
        "text": "The state data filters input property expression is applied when the workflow transitions to the current state and receives its data input"
    },
    {
        "text": "It can be used to select only data that is needed and disregard what is not needed"
    },
    {
        "text": "If input is not defined or does not select any parts of the state's data input, its data input is not filtered"
    },
    {
        "text": "The state data filter output property expression is applied right before the state transitions to the next state defined"
    },
    {
        "text": "It filters the state's data output to be passed as data input to the transitioning state"
    },
    {
        "text": "If the current state is the workflow end state, the filtered state's data output becomes the workflow data output"
    },
    {
        "text": "If output is not defined or does not select any parts of the state's data output, its data output is not filtered"
    },
    {
        "text": "Results of the input expression should become the state data input"
    },
    {
        "text": "Results of the output expression should become the state data output"
    },
    {
        "text": "For more information on this you can reference the data merging section"
    },
    {
        "text": "For our second example, let's say that we are interested in the only vegetable \"veggie-like\""
    },
    {
        "text": "Here we have two ways of filtering our data, depending on if actions within our state need access to all vegetables, oronly the ones that are \"veggie-like\""
    },
    {
        "text": "fromStateData\tWorkflow expression that filters state data that can be used by the action\tstring\tno"
    },
    {
        "text": "useResults\tIf set to false, action data results are not added/merged to state data"
    },
    {
        "text": "In this case 'results' and 'toStateData' should be ignored"
    },
    {
        "text": "Default is true"
    },
    {
        "text": "boolean\tno"
    },
    {
        "text": "results\tWorkflow expression that filters the actions data results\tstring\tno"
    },
    {
        "text": "toStateData\tWorkflow expression that selects a state data element to which the action results should be added/merged into"
    },
    {
        "text": "If not specified denotes the top-level state data element\tstring\tno"
    },
    {
        "text": "Filter the state data to select only the data that can be used within function definition arguments using its fromStateData property"
    },
    {
        "text": "Filter the action results to select only the result data that should be added/merged back into the state datausing its results property"
    },
    {
        "text": "Select the part of state data which the action data results should be added/merged tousing the toStateData property"
    },
    {
        "text": "To give an example, let's say we have an action which returns a list of breads and pasta types"
    },
    {
        "text": "For our workflow, we are only interested into breads and not the pasta"
    },
    {
        "text": "]"
    },
    {
        "text": "\"baguette\","
    },
    {
        "text": "\"brioche\","
    },
    {
        "text": "\"rye\""
    },
    {
        "text": "\"spaghetti\""
    },
    {
        "text": "useData\tIf set to false, event payload is not added/merged to state data"
    },
    {
        "text": "In this case 'data' and 'toStateData' should be ignored"
    },
    {
        "text": "Default is true"
    },
    {
        "text": "boolean\tno"
    },
    {
        "text": "Filter the event payload to select only the data that should be added/merged into the state datausing its data property"
    },
    {
        "text": "Select the part of state data into which the event payload should be added/merged intousing the toStateData property"
    },
    {
        "text": "As Event states can take advantage of all defined data filters"
    },
    {
        "text": "In the example below, we definea workflow with a single event state and show how data filters can be combined"
    },
    {
        "text": "]"
    },
    {
        "text": "The workflow data input then becomes the data input of the starting workflow state"
    },
    {
        "text": "Here is a sample diagram showing our workflow, each numbered step on this diagram shows a certain defined point duringWorkflow Execution at which data filters are invoked and correspond to the numbered items below"
    },
    {
        "text": "The event state stateDataFilter is invoked to filter its data input"
    },
    {
        "text": "The filters \"input\" expression is evaluated andselects only the \"greetings\" data"
    },
    {
        "text": "The rest of the state data input should be disregarded"
    },
    {
        "text": "After the action is executed, the actionDataFilter \"results\" expression is evaluated to filter the results returned from the action execution"
    },
    {
        "text": "In this case, we select only the \"greetingMessageResult\" element from the results"
    },
    {
        "text": "The action filters \"toStateData\" expression then defines that we want to add/merge this action result tostate data under the \"finalCustomerGreeting\" element"
    },
    {
        "text": "When our event state finishes its execution, the states \"stateDataFilter\" \"output\" filter expression is executedto filter the state data to create the final state data output"
    },
    {
        "text": "In case of event and action filters, their \"toStateData\" property can be defined to select a specific elementof the state data with which merging should be done against"
    },
    {
        "text": "If this element does not exist, a new one shouldbe created first"
    },
    {
        "text": "Merging string types should be done by overwriting the data from events data/action results into the merging element of the state data"
    },
    {
        "text": "Workflow functions are reusable definitions for service invocations and/or expression evaluation"
    },
    {
        "text": "They can be referenced by their domain-specific names inside workflow states"
    },
    {
        "text": "Using functions for RESTful service invocations"
    },
    {
        "text": "Using functions for gRPC service invocation"
    },
    {
        "text": "Using functions for GraphQL service invocation"
    },
    {
        "text": "Using functions for expression evaluations"
    },
    {
        "text": "We can define if functions are invoked sync or async"
    },
    {
        "text": "Referencethe functionRef to learn more on how to do this"
    },
    {
        "text": "Functions can be used to describe services and their operations that need to be invoked duringWorkflow Execution"
    },
    {
        "text": "They can be referenced by states action definitions to clearlydefine when the service operations should be invoked during Workflow Execution, as well as the data parameterspassed to them if needed"
    },
    {
        "text": "Note that with Serverless Workflow, we can also define invocation of services which are triggered via an event"
    },
    {
        "text": "To learn more about that, please reference the event definitions section,as well as the actions definitions eventRef property"
    },
    {
        "text": "Because of an overall lack of a common way to describe different services and their operations,many workflow languages typically chose to define custom function definitions"
    },
    {
        "text": "This approach, however, often runs into issues such as lack of portability, limited capabilities, as well asforcing non-workflow-specific information, such as service authentication, to be added inside the workflow language"
    },
    {
        "text": "To avoid these issues, the Serverless Workflow specification mandates that details aboutRESTful services and their operations be described using the OpenAPI Specification"
    },
    {
        "text": "OpenAPI is a language-agnostic standard that describes discovery of RESTful services"
    },
    {
        "text": "This allows Serverless Workflow language to describe RESTful services in a portableway, as well as workflow runtimes to utilize OpenAPI tooling and APIs to invoke service operations"
    },
    {
        "text": "Here is an example function definition for a RESTful service operation"
    },
    {
        "text": "For more information about functions, reference the Functions definitions section"
    },
    {
        "text": "Functions can be used to invoke PUBLISH and SUBSCRIBE operations on a message broker documented by the Async API Specification"
    },
    {
        "text": "Async API operations are bound to a channel which describes the technology, security mechanisms, input and validation to be used for their execution"
    },
    {
        "text": "The Smartylighting Streetlights API allows you"
    },
    {
        "text": "to remotely manage the city lights"
    },
    {
        "text": "<URI_to_asyncapi_file>#<OperationId>"
    },
    {
        "text": "Also note that the referenced function definition type in this case must have the value asyncapi"
    },
    {
        "text": "<URI_to_proto_file>#<Service_Name>#<Service_Method_Name>"
    },
    {
        "text": "Note that the referenced function definition type in this case must be rpc"
    },
    {
        "text": "If you want to use GraphQL services, you can also invoke them using a similar syntax to the above methods"
    },
    {
        "text": "INVOKING A GRAPHQL QUERY"
    },
    {
        "text": "<url_to_graphql_endpoint>#<literal \"mutation\" or \"query\">#<mutation_or_query_field>"
    },
    {
        "text": "INVOKING A GRAPHQL MUTATION"
    },
    {
        "text": "Expressions must be evaluated before executing the operation"
    },
    {
        "text": "Note that GraphQL Subscriptions are not supported at this time"
    },
    {
        "text": "Similar to defining invocations of operations on GraphQL services, you can also use workflowFunctions Definitions to execute complex queries on an OData service"
    },
    {
        "text": "CREATING AN ODATA FUNCTION DEFINITION"
    },
    {
        "text": "<URI_to_odata_service>#<Entity_Set_Name>"
    },
    {
        "text": "INVOKING AN ODATA FUNCTION DEFINITION"
    },
    {
        "text": "In order to ensure compatibility of OData support across runtimes,thearguments property of an OData function referenceshould follow the Serverless Workflow OData Json schema"
    },
    {
        "text": "In addition to defining RESTful, AsyncAPI, RPC, GraphQL and OData services and their operations, workflow functions definitionscan also be used to define expressions that should be evaluated during Workflow Execution"
    },
    {
        "text": "Defining expressions as part of function definitions has the benefit of being able to referencethem by their logical name through workflow states where expression evaluation is required"
    },
    {
        "text": "Expression functions must declare their type parameter to be expression"
    },
    {
        "text": "Here we define two reusable expression functions"
    },
    {
        "text": "Expressions in Serverless Workflowcan be evaluated against the workflow, or workflow state data"
    },
    {
        "text": "Note that different data filters play a big role as to which parts of theworkflow data are being evaluated by the expressions"
    },
    {
        "text": "Reference theState Data Filters section for more information on this"
    },
    {
        "text": "],"
    },
    {
        "text": "The starting inject state \"Initialize Count\" injects the count element into our state data,which then becomes the state data input of our \"Increment Count\" operation state"
    },
    {
        "text": "This state defines an invocation of the \"Increment Count Function\" expression function defined in our workflow definition"
    },
    {
        "text": "Note that the used function definition type in this case must be expression"
    },
    {
        "text": "For more information about workflow expressions, reference the Workflow Expressions section"
    },
    {
        "text": "Function definitions type property defines a list of function types that are set bythe specification"
    },
    {
        "text": "In this example we define a custom function type that is meant to execute an external TypeScript script"
    },
    {
        "text": "When a custom function type is specified, the operation property value has a custom format, meaning thatits format is controlled by the runtime which provides the custom function type"
    },
    {
        "text": "Note that custom function types are not portable across runtimes"
    },
    {
        "text": "Workflow model parameters can use expressions to select/manipulate workflow and/or state data"
    },
    {
        "text": "Note that different data filters play a big role as to which parts of the states data are to be used when the expression isevaluated"
    },
    {
        "text": "Reference theState Data Filtering section for more information about state data filters"
    },
    {
        "text": "By default, all workflow expressions should be defined using the jq version 1"
    },
    {
        "text": "6 syntax"
    },
    {
        "text": "You can find more information on jq in its manual"
    },
    {
        "text": "Serverless Workflow does not mandate the use of jq and it's possible to use an expression languageof your choice with the restriction that a single one must be used for all expressionsin a workflow definition"
    },
    {
        "text": "If a different expression language needs to be used, make sure to set the workflowexpressionLang property to identify it to runtime implementations"
    },
    {
        "text": "Note that using a non-default expression language could lower the portability of your workflow definitionsacross multiple container/cloud platforms"
    },
    {
        "text": "All workflow expressions in this document, specification examples as well as comparisons examplesare written using the default jq syntax"
    },
    {
        "text": "Where expression can be either an in-line expression, or a reference to adefined expression function definition"
    },
    {
        "text": "Where fn is the namespace of the defined expression functions andmyExprName is the unique expression function name"
    },
    {
        "text": "In this case our input parameter applicantName would be set to \"John Doe\""
    },
    {
        "text": "Expressions can also be used to select and manipulate state data, this is in particularly useful forstate data filters"
    },
    {
        "text": "As previously mentioned, expressions are evaluated against certain subsets of data"
    },
    {
        "text": "For examplethe parameters param of the functionRef definition can evaluate expressionsonly against the data that is available to the action it belongs to"
    },
    {
        "text": "One thing to note here are the top-level workflow definition parameters"
    },
    {
        "text": "Expressions definedin them can only be evaluated against the initial workflow data input"
    },
    {
        "text": "which would set the workflow version to \"1"
    },
    {
        "text": "0"
    },
    {
        "text": "0\""
    },
    {
        "text": "Note that the workflow \"id\" property value is not allowed to use an expression"
    },
    {
        "text": "The workflowdefinition \"id\" must be a constant value"
    },
    {
        "text": "name\tWorkflow name\tstring\tno"
    },
    {
        "text": "description\tWorkflow description\tstring\tno"
    },
    {
        "text": "version\tWorkflow version"
    },
    {
        "text": "MUST respect the semantic versioning format\tstring\tno"
    },
    {
        "text": "annotations\tList of helpful terms describing the workflows intended purpose, subject areas, or other important qualities\tarray\tno"
    },
    {
        "text": "dataInputSchema\tUsed to validate the workflow data input against a defined JSON Schema\tstring or object\tno"
    },
    {
        "text": "dataOutputSchema\tUsed to validate the workflow data output against a defined JSON Schema\tstring or object\tno"
    },
    {
        "text": "constants\tWorkflow constants\tstring or object\tno"
    },
    {
        "text": "secrets\tWorkflow secrets\tstring or array\tno"
    },
    {
        "text": "start\tWorkflow start definition\tstring or object\tno"
    },
    {
        "text": "specVersion\tServerless Workflow specification release version\tstring\tyes"
    },
    {
        "text": "expressionLang\tIdentifies the expression language used for workflow expressions"
    },
    {
        "text": "Default value is \"jq\"\tstring\tno"
    },
    {
        "text": "timeouts\tDefines the workflow default timeout settings\tstring or object\tno"
    },
    {
        "text": "errors\tDefines checked errors that can be explicitly handled during Workflow Execution\tstring or array\tno"
    },
    {
        "text": "keepActive\tIf true, workflow instances is not terminated when there are no active execution paths"
    },
    {
        "text": "Instance can be terminated with \"terminate end definition\" or reaching defined \"workflowExecTimeout\"\tboolean\tno"
    },
    {
        "text": "auth\tWorkflow authentication definitions\tarray or string\tno"
    },
    {
        "text": "events\tWorkflow event definitions"
    },
    {
        "text": "array or string\tno"
    },
    {
        "text": "autoRetries\tIf set to true, actions should automatically be retried on unchecked errors"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "states\tWorkflow states\tarray\tyes"
    },
    {
        "text": "extensions\tWorkflow extensions definitions\tarray or string\tno"
    },
    {
        "text": "metadata\tMetadata information\tobject\tno"
    },
    {
        "text": "Defines the top-level structure of a serverless workflow model"
    },
    {
        "text": "Following figure describes the main workflow definition blocks"
    },
    {
        "text": "The id property defines the unique, domain-specific workflow identifier, for example \"orders\", \"payment\", etc"
    },
    {
        "text": "The key property defines the unique, domain-specific workflow identifier"
    },
    {
        "text": "It can be used when the id property is auto-generated by a content-management system for example"
    },
    {
        "text": "In these cases, you can specify the key property to be the domain-specific identifier of the workflow definition"
    },
    {
        "text": "The id and key properties are mutually exclusive, meaning you cannot define both"
    },
    {
        "text": "The name property is the workflow logical name"
    },
    {
        "text": "The description property can be used to give further information about the workflow"
    },
    {
        "text": "The version property can be used to provide a specific workflow version"
    },
    {
        "text": "It must use the semantic versioning format"
    },
    {
        "text": "The annotations property defines a list of helpful terms describing the workflows intended purpose, subject areas, or other important qualities,for example \"machine learning\", \"monitoring\", \"networking\", etc"
    },
    {
        "text": "The dataInputSchema and dataOutputSchema properties can be used to validate input and output data against a defined JSON Schema"
    },
    {
        "text": "The dataInputSchema property validates the workflow data input"
    },
    {
        "text": "Validation should be performed before any states are executed"
    },
    {
        "text": "In case ofa start Event state the input schema is ignored, if present"
    },
    {
        "text": "The failOnValidationErrors property determines if Workflow Execution should continue in case of validation errors"
    },
    {
        "text": "The dataOutputSchema property validates the Workflow data output"
    },
    {
        "text": "Validation is performed on the output of the Workflow Execution"
    },
    {
        "text": "The failOnValidationErrors property determines what should be done when the workflow output does not match the provided schema"
    },
    {
        "text": "If failOnValidationErrors is true, an error should be thrown"
    },
    {
        "text": "If executed within a subprocess, that error can be be handled by the parent workflow"
    },
    {
        "text": "If failOnValidationErrors is false, the error should not be propagated"
    },
    {
        "text": "It is up to the implementor to warn the user about that fact"
    },
    {
        "text": "For example, printing a log"
    },
    {
        "text": "Both properties can be expressed as object or string type"
    },
    {
        "text": "If using object type, their schema property might be an URI, which points to the JSON schema used to validate the workflow data input, or it might be the JSON schema object"
    },
    {
        "text": "failOnValidationErrors is optional, default value is true"
    },
    {
        "text": "Example for Json schema reference"
    },
    {
        "text": "Example for Json schema included in the workflow file"
    },
    {
        "text": "If using string type, then the string value is the external schema URI and failOnValidationErrors default value of true is assumed"
    },
    {
        "text": "Example using string type"
    },
    {
        "text": "The secrets property allows you to use sensitive information such as passwords, OAuth tokens, ssh keys, etc"
    },
    {
        "text": "inside yourWorkflow expressions"
    },
    {
        "text": "For more information about Workflow secrets, reference the Workflow Secrets section"
    },
    {
        "text": "The constants property can be used to define Workflow constants valueswhich are accessible in Workflow Expressions"
    },
    {
        "text": "For more information see the Workflow Constants section"
    },
    {
        "text": "The start property defines the workflow starting information"
    },
    {
        "text": "For more information see the start definition section"
    },
    {
        "text": "This property is not required"
    },
    {
        "text": "If not defined, the workflow starting state has to bethe very first state defined in the workflow states array"
    },
    {
        "text": "The expressionLang property can be used to identify the expression language used for all expressions inthe workflow definition"
    },
    {
        "text": "The default value of this property is \"jq\""
    },
    {
        "text": "You should set this property if you chose to define workflow expressionswith an expression language / syntax other than the default"
    },
    {
        "text": "The timeouts property is used to define the default workflow timeouts for workflow, state, action, and branchexecution"
    },
    {
        "text": "For more information about timeouts and its use cases see the Workflow Timeouts section"
    },
    {
        "text": "The error property is used to define checked errors that can be explicitly handled during Workflow Execution"
    },
    {
        "text": "For more information about workflow error handling see this section"
    },
    {
        "text": "The authRef property is used to reference an authentication definition inthe auth property and should be applied when invoking the helloWorld function"
    },
    {
        "text": "An AuthRef object can alternatively be used to configure the authentication definition to use when accessing the function's resource and/or when invoking the function"
    },
    {
        "text": "The functions property can be either an in-line function definition array, or an URI reference toa resource containing an array of functions definition"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "Referenced resource must conform to the specifications Workflow Functions JSON Schema"
    },
    {
        "text": "The events property can be either an in-line event definition array, or an URI reference toa resource containing an array of event definition"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "]"
    },
    {
        "text": "Referenced resource must conform to the specifications Workflow Events JSON Schema"
    },
    {
        "text": "The retries property can be either an in-line retry definition array, or an URI reference toa resource containing an array of retry definition"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "For more information aboutusing and referencing retry definitions see the Workflow Error Handling section"
    },
    {
        "text": "The keepActive property allows you to change the default behavior of workflow instances"
    },
    {
        "text": "By default, as described in the Core Concepts section, a workflow instance is terminated once there are no moreactive execution paths, one of its active paths ends in a \"terminate\" end definition, or whenits workflowExecTimeout time is reached"
    },
    {
        "text": "You can reference the specification examples to see the keepActive property in action"
    },
    {
        "text": "Here we define two workflow extensions, namely the rate limiting and kpi extensions for our workflow definition"
    },
    {
        "text": "Name\tDescription\tConsumes events?\tProduces events?\tExecutes actions?\tHandles errors/retries?\tAllows parallel execution?\tMakes data-based transitions?\tCan be workflow start state?\tCan be workflow end state?"
    },
    {
        "text": "Event\tDefine events that trigger action execution\tyes\tyes\tyes\tyes\tyes\tno\tyes\tyes"
    },
    {
        "text": "Operation\tExecute one or more actions\tno\tyes\tyes\tyes\tyes\tno\tyes\tyes"
    },
    {
        "text": "Switch\tDefine data-based or event-based workflow transitions\tno\tyes\tno\tyes\tno\tyes\tyes\tno"
    },
    {
        "text": "Sleep\tSleep Workflow Execution for a specific time duration\tno\tyes\tno\tyes\tno\tno\tyes\tyes"
    },
    {
        "text": "Inject\tInject static data into state data\tno\tyes\tno\tyes\tno\tno\tyes\tyes"
    },
    {
        "text": "ForEach\tParallel execution of states for each element of a data array\tno\tyes\tno\tyes\tyes\tno\tyes\tyes"
    },
    {
        "text": "Callback\tManual decision step"
    },
    {
        "text": "Executes a function and waits for callback event that indicates completion of the manual decision\tyes\tyes\tyes\tyes\tno\tno\tyes\tyes"
    },
    {
        "text": "EVENT STATE"
    },
    {
        "text": "name\tUnique State name\tstring\tyes"
    },
    {
        "text": "type\tState type\tstring\tyes"
    },
    {
        "text": "exclusive\tIf true, consuming one of the defined events causes its associated actions to be performed"
    },
    {
        "text": "If false, all of the defined events must be consumed in order for actions to be performed"
    },
    {
        "text": "Default is true\tboolean\tno"
    },
    {
        "text": "onEvents\tDefine the events to be consumed and optional actions to be performed\tarray\tyes"
    },
    {
        "text": "timeouts\tState specific timeout settings\tobject\tno"
    },
    {
        "text": "stateDataFilter\tState data filter definition\tobject\tno"
    },
    {
        "text": "onErrors\tStates error handling definitions\tarray\tno"
    },
    {
        "text": "compensatedBy\tUnique name of a workflow state which is responsible for compensation of this state\tstring\tno"
    },
    {
        "text": "- HighBodyTemperature"
    },
    {
        "text": "- HighBloodPressure"
    },
    {
        "text": "- HighRespirationRate"
    },
    {
        "text": "Event states await one or more events and perform actions when they are received"
    },
    {
        "text": "If defined as the workflow starting state, the event state definition controls when the workflowinstances should be created"
    },
    {
        "text": "The exclusive property determines if the state should wait for any of the defined events in the onEvents array, orif all defined events must be present for their associated actions to be performed"
    },
    {
        "text": "If the Event state in this case is a workflow starting state, the occurrence of any of the defined events would start a new workflow instance"
    },
    {
        "text": "If the Event state in this case is a workflow starting state, the occurrence of all defined events would start a newworkflow instance"
    },
    {
        "text": "In order to consider only events that are related to each other, we need to set the correlation property in the workflowevents definitions"
    },
    {
        "text": "This allows us to set up event correlation rules against the eventsextension context attributes"
    },
    {
        "text": "The timeouts property can be used to define state specific timeout settings"
    },
    {
        "text": "Event states can define thestateExecTimeout, actionExecTimeout, and eventTimeout properties"
    },
    {
        "text": "For more information about Event state specific event timeout settings reference this section"
    },
    {
        "text": "For more information about workflow timeouts reference the Workflow Timeouts section"
    },
    {
        "text": "Note that transition and end properties are mutually exclusive, meaning that you cannot define both of them at the same time"
    },
    {
        "text": "OPERATION STATE"
    },
    {
        "text": "actionMode\tShould actions be performed sequentially or in parallel"
    },
    {
        "text": "Default is sequential\tenum\tno"
    },
    {
        "text": "actions\tActions to be performed\tarray\tyes"
    },
    {
        "text": "stateDataFilter\tState data filter\tobject\tno"
    },
    {
        "text": "onErrors\tStates error handling and retries definitions\tarray\tno"
    },
    {
        "text": "usedForCompensation\tIf true, this state is used to compensate another state"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "Operation state defines a set of actions to be performed in sequence or in parallel"
    },
    {
        "text": "Once all actions have been performed, a transition to another state can occur"
    },
    {
        "text": "The timeouts property can be used to define state specific timeout settings"
    },
    {
        "text": "Operation states can definethe stateExecTimeout and actionExecTimeout settings"
    },
    {
        "text": "For more information on Workflow timeouts referencethe Workflow Timeouts section"
    },
    {
        "text": "SWITCH STATE"
    },
    {
        "text": "defaultCondition\tDefault transition of the workflow if there is no matching data conditions or event timeout is reached"
    },
    {
        "text": "Can be a transition or end definition\tobject\tyes"
    },
    {
        "text": "Data-based conditions"
    },
    {
        "text": "Event-based conditions"
    },
    {
        "text": "These are exclusive, meaning that a switch state can define one or the other condition type, but not both"
    },
    {
        "text": "In case of data-based conditions definition, switch state controls workflow transitions based on the states data"
    },
    {
        "text": "If no defined conditions can be matched, the state transitions is taken based on the defaultCondition property"
    },
    {
        "text": "This property can be either a transition to another workflow state, or an end definition meaning a workflow end"
    },
    {
        "text": "For event-based conditions, a switch state acts as a workflow wait state"
    },
    {
        "text": "It halts Workflow Executionuntil one of the referenced events arrive, then making a transition depending on that event definition"
    },
    {
        "text": "If events defined in event-based conditions do not arrive before the states eventTimeout property expires,state transitions are based on the defined defaultCondition property"
    },
    {
        "text": "The timeouts property can be used to define state specific timeout settings"
    },
    {
        "text": "Switch states can define thestateExecTimeout setting"
    },
    {
        "text": "If eventConditions is defined, the switch state can also define theeventTimeout property"
    },
    {
        "text": "For more information on workflow timeouts reference the Workflow Timeouts section"
    },
    {
        "text": "SLEEP STATE"
    },
    {
        "text": "Sleep statesuspends Workflow Execution for a given time duration"
    },
    {
        "text": "The delay is defined in its duration property using the ISO 8601duration format"
    },
    {
        "text": "PARALLEL STATE"
    },
    {
        "text": "branches\tList of branches for this parallel state\tarray\tyes"
    },
    {
        "text": "completionType\tOption types on how to complete branch execution"
    },
    {
        "text": "Default is \"allOf\"\tenum\tno"
    },
    {
        "text": "]"
    },
    {
        "text": "Parallel state defines a collection of branches that are executed in parallel"
    },
    {
        "text": "A parallel state can be seen a state which splits up the current workflow instance execution pathinto multiple ones, one for each branch"
    },
    {
        "text": "These execution paths are performed in paralleland are joined back into the current execution path depending on the defined completionType parameter value"
    },
    {
        "text": "Exceptions may occur during execution of branches of the Parallel state, this is described in detail in this section"
    },
    {
        "text": "The timeouts property can be used to set state specific timeout settings"
    },
    {
        "text": "Parallel states can define thestateExecTimeout and branchExecTimeout timeout settings"
    },
    {
        "text": "For more information on workflow timeoutsreference the Workflow Timeouts section"
    },
    {
        "text": "INJECT STATE"
    },
    {
        "text": "data\tJSON object which can be set as state's data input and can be manipulated via filter\tobject\tyes"
    },
    {
        "text": "The inject state data property allows you to statically define a JSON object which gets added to the states data input"
    },
    {
        "text": "You can use the filter property to control the states data output to the transition state"
    },
    {
        "text": "If the inject state already receives a data input from the previous transition state, the inject data should be mergedwith its data input"
    },
    {
        "text": "This allows you to test if your workflow behaves properly for cases when there are people whose age is greater or equal 40"
    },
    {
        "text": "FOREACH STATE"
    },
    {
        "text": "inputCollection\tWorkflow expression selecting an array element of the states data\tstring\tyes"
    },
    {
        "text": "outputCollection\tWorkflow expression specifying an array element of the states data to add the results of each iteration\tstring\tno"
    },
    {
        "text": "iterationParam\tName of the iteration parameter that can be referenced in actions/workflow"
    },
    {
        "text": "For each parallel iteration, this param should contain an unique element of the inputCollection array\tstring\tno"
    },
    {
        "text": "actions\tActions to be executed for each of the elements of inputCollection\tarray\tyes"
    },
    {
        "text": "ForEach states can be used to execute actions for each element of a data set"
    },
    {
        "text": "Each iteration of the ForEach state is by default executed in parallel by default"
    },
    {
        "text": "However, executing iterations sequentially is also possible by setting the value of the mode property tosequential"
    },
    {
        "text": "The mode property defines if iterations should be done sequentially or in parallel"
    },
    {
        "text": "By default,if mode is not specified, iterations should be done in parallel"
    },
    {
        "text": "The inputCollection property is a workflow expression which selects an array in the states data"
    },
    {
        "text": "All iterationsare performed against data elements of this array"
    },
    {
        "text": "If this array does not exist, the runtime should throwan error"
    },
    {
        "text": "This error can be handled inside the states onErrors definition"
    },
    {
        "text": "The outputCollection property is a workflow expression which selects an array in the state data where the resultsof each iteration should be added to"
    },
    {
        "text": "If this array does not exist, it should be created"
    },
    {
        "text": "The iterationParam property defines the name of the iteration parameter passed to each iteration of the ForEach state"
    },
    {
        "text": "It should contain the unique element of the inputCollection array and made available to actions of the ForEach state"
    },
    {
        "text": "iterationParam can be accessed as an expression variable"
    },
    {
        "text": "In JQ, expression variables are prefixed by $"
    },
    {
        "text": "If iterationParam is not explicitly defined, runtimes should create one and populate it with the value of the uniqueiteration parameter for each iteration of the ForEach state"
    },
    {
        "text": "The actions property defines actions to be executed in each state iteration"
    },
    {
        "text": "The workflow data input containing order information is passed to the SendConfirmState ForEach state"
    },
    {
        "text": "The ForEach state defines an inputCollection property which selects all orders that have the completed property set to true"
    },
    {
        "text": "For each element of the array selected by inputCollection a JSON object defined by iterationParam should becreated containing an unique element of inputCollection and passed as the data input to the parallel executed actions"
    },
    {
        "text": "The results of each parallel action execution are stored as elements in the state data array defined by the outputCollection property"
    },
    {
        "text": "The timeouts property can be used to set state specific timeout settings"
    },
    {
        "text": "ForEach states can define thestateExecTimeout and actionExecTimeout settings"
    },
    {
        "text": "For more information on workflow timeouts reference the Workflow Timeoutssection"
    },
    {
        "text": "CALLBACK STATE"
    },
    {
        "text": "action\tDefines the action to be executed\tobject\tyes"
    },
    {
        "text": "eventRef\tReferences an unique callback event name in the defined workflow events\tstring\tyes"
    },
    {
        "text": "eventDataFilter\tCallback event data filter definition\tobject\tno"
    },
    {
        "text": "compensatedBy\tUniaue name of a workflow state which is responsible for compensation of this state\tstring\tno"
    },
    {
        "text": "Note that the called decision service is responsible for emitting the callback CloudEvent indicating the completion of thedecision and including the decision results as part of the event payload"
    },
    {
        "text": "This event must be correlated to theworkflow instance using the callback events context attribute defined in the correlation property of thereferenced Event Definition"
    },
    {
        "text": "The callback event payload is merged with the Callback state data and can be filtered via the \"eventDataFilter\" definition"
    },
    {
        "text": "If the defined callback event has not been received during this time period, the state should transition to the next state or end Workflow Execution if it is an end state"
    },
    {
        "text": "The timeouts property defines state specific timeout settings"
    },
    {
        "text": "Callback states can define thestateExecTimeout, actionExecTimeout, and eventTimeout properties"
    },
    {
        "text": "For more information on workflow timeouts reference the Workflow Timeoutssection"
    },
    {
        "text": "FUNCTION DEFINITION"
    },
    {
        "text": "name\tUnique function name\tstring\tyes"
    },
    {
        "text": "operation\tIf type is rest, #"
    },
    {
        "text": "If type is asyncapi, #"
    },
    {
        "text": "If type is rpc, ##"
    },
    {
        "text": "If type is graphql, #<literal \"mutation\" or \"query\">#"
    },
    {
        "text": "If type is odata, #"
    },
    {
        "text": "If type is expression, defines the workflow expression"
    },
    {
        "text": "string\tyes"
    },
    {
        "text": "type\tDefines the function type"
    },
    {
        "text": "Can be either rest, asyncapi, rpc, graphql, odata, expression, or custom"
    },
    {
        "text": "Default is rest\tenum\tno"
    },
    {
        "text": "authRef\tReferences an auth definition name to be used to access to resource defined in the operation parameter\tstring\tno"
    },
    {
        "text": "metadata\tMetadata information"
    },
    {
        "text": "Can be used to define custom function information\tobject\tno"
    },
    {
        "text": "The name property defines an unique name of the function definition"
    },
    {
        "text": "The type property defines the function type"
    },
    {
        "text": "Its value can be either rest or expression"
    },
    {
        "text": "Default value is rest"
    },
    {
        "text": "If type is expression, defines the expression syntax"
    },
    {
        "text": "Take a look at the workflow expressions section for more information on this"
    },
    {
        "text": "Defining custom function types is possible, for more information on that refer to the Defining custom function types section"
    },
    {
        "text": "The authRef property references a name of a defined workflow auth definition"
    },
    {
        "text": "It is used to provide authentication info to access the resource defined in the operation property and/or to invoke the function"
    },
    {
        "text": "Note that using metadata for cases such as above heavily reduces the portability of your workflow markup"
    },
    {
        "text": "Function definitions themselves do not define data input parameters"
    },
    {
        "text": "Parameters can bedefined via the parameters property in function definitions inside actions"
    },
    {
        "text": "AuthRef Definition"
    },
    {
        "text": "resource\tReferences an auth definition to be used to access the resource defined in the operation parameter\tstring\tyes"
    },
    {
        "text": "invocation\tReferences an auth definition to be used to invoke the operation\tstring\tno"
    },
    {
        "text": "The authRef property references a name of a defined workflow auth definition"
    },
    {
        "text": "It can be a string or an object"
    },
    {
        "text": "If it's a string, the referenced auth definition is used solely for the function's invocation"
    },
    {
        "text": "It's worth noting that if an auth definition has been defined for an OpenAPI function which's resource declare an authentication mechanism, the later should be used instead, thus ignoring entirely the auth definition"
    },
    {
        "text": "EVENT DEFINITION"
    },
    {
        "text": "name\tUnique event name\tstring\tyes"
    },
    {
        "text": "kind\tDefines the event is either consumed or produced by the workflow"
    },
    {
        "text": "Default is consumed\tenum\tno"
    },
    {
        "text": "correlation\tDefine event correlation rules for this event"
    },
    {
        "text": "Only used for consumed events\tarray\tno"
    },
    {
        "text": "Used to define events and their correlations"
    },
    {
        "text": "These events can be either consumed or produced during Workflow Execution as wellas can be used to trigger function/service invocations"
    },
    {
        "text": "The Serverless Workflow specification mandates that all events conform to the CloudEvents specification"
    },
    {
        "text": "This is to assure consistency and portability of the events format used"
    },
    {
        "text": "The name property defines a single name of the event that is unique inside the workflow definition"
    },
    {
        "text": "This event name can bethen referenced within function and state definitions"
    },
    {
        "text": "The source property matches this event definition with the sourceproperty of the CloudEvent required attributes"
    },
    {
        "text": "The type property matches this event definition with the type property of the CloudEvent required attributes"
    },
    {
        "text": "Event correlation plays a big role in large event-driven applications"
    },
    {
        "text": "Correlating one or more events with a particular workflow instancecan be done by defining the event correlation rules within the correlation property"
    },
    {
        "text": "This property is an array of correlation definitions"
    },
    {
        "text": "The CloudEvents specification allows users to add Extension Context Attributesand the correlation definitions can use these attributes to define clear matching event correlation rules"
    },
    {
        "text": "Extension context attributes are not part of the event payload, so they are serialized the same way as other standard required attributes"
    },
    {
        "text": "This means that the event payload does not have to be inspected by implementations in order to read and evaluate the defined correlation rules"
    },
    {
        "text": "and"
    },
    {
        "text": "This allows developers to write orchestration workflows that are specifically targeted to patients that are in the hospital urgent care unit,for example"
    },
    {
        "text": "AUTH DEFINITION"
    },
    {
        "text": "name\tUnique auth definition name\tstring\tyes"
    },
    {
        "text": "scheme\tAuth scheme, can be \"basic\", \"bearer\", or \"oauth2\""
    },
    {
        "text": "Default is \"basic\"\tenum\tno"
    },
    {
        "text": "properties\tAuth scheme properties"
    },
    {
        "text": "Can be one of \"Basic properties definition\", \"Bearer properties definition\", or \"OAuth2 properties definition\"\tobject\tyes"
    },
    {
        "text": "The name property defines the unique auth definition name"
    },
    {
        "text": "The scheme property defines the auth scheme to be used"
    },
    {
        "text": "Can be \"bearer\", \"basic\" or \"oauth2\""
    },
    {
        "text": "The properties property defines the auth scheme properties information"
    },
    {
        "text": "Can be one of \"Basic properties definition\", \"Bearer properties definition\", or \"OAuth2 properties definition\""
    },
    {
        "text": "See here for more information about Basic Authentication scheme"
    },
    {
        "text": "username\tString or a workflow expression"
    },
    {
        "text": "Contains the user name\tstring\tyes"
    },
    {
        "text": "password\tString or a workflow expression"
    },
    {
        "text": "Contains the user password\tstring\tyes"
    },
    {
        "text": "See here for more information about Bearer Authentication scheme"
    },
    {
        "text": "token\tString or a workflow expression"
    },
    {
        "text": "Contains the token information\tstring\tyes"
    },
    {
        "text": "See here for more information about OAuth2 Authentication scheme"
    },
    {
        "text": "authority\tString or a workflow expression"
    },
    {
        "text": "Contains the authority information\tstring\tno"
    },
    {
        "text": "grantType\tDefines the grant type"
    },
    {
        "text": "Can be \"password\", \"clientCredentials\", or \"tokenExchange\"\tenum\tyes"
    },
    {
        "text": "clientId\tString or a workflow expression"
    },
    {
        "text": "Contains the client identifier\tstring\tyes"
    },
    {
        "text": "clientSecret\tWorkflow secret or a workflow expression"
    },
    {
        "text": "Contains the client secret\tstring\tno"
    },
    {
        "text": "scopes\tArray containing strings or workflow expressions"
    },
    {
        "text": "Contains the OAuth2 scopes\tarray\tno"
    },
    {
        "text": "username\tString or a workflow expression"
    },
    {
        "text": "Contains the user name"
    },
    {
        "text": "Used only if grantType is 'resourceOwner'\tstring\tno"
    },
    {
        "text": "password\tString or a workflow expression"
    },
    {
        "text": "Contains the user password"
    },
    {
        "text": "Used only if grantType is 'resourceOwner'\tstring\tno"
    },
    {
        "text": "audiences\tArray containing strings or workflow expressions"
    },
    {
        "text": "Contains the OAuth2 audiences\tarray\tno"
    },
    {
        "text": "subjectToken\tString or a workflow expression"
    },
    {
        "text": "Contains the subject token\tstring\tno"
    },
    {
        "text": "requestedSubject\tString or a workflow expression"
    },
    {
        "text": "Contains the requested subject\tstring\tno"
    },
    {
        "text": "requestedIssuer\tString or a workflow expression"
    },
    {
        "text": "Contains the requested issuer\tstring\tno"
    },
    {
        "text": "CORRELATION DEFINITION"
    },
    {
        "text": "contextAttributeName\tCloudEvent Extension Context Attribute name\tstring\tyes"
    },
    {
        "text": "contextAttributeValue\tCloudEvent Extension Context Attribute value\tstring\tno"
    },
    {
        "text": "Used to define event correlation rules"
    },
    {
        "text": "Only usable for consumed event definitions"
    },
    {
        "text": "The contextAttributeName property defines the name of the CloudEvent extension context attribute"
    },
    {
        "text": "The contextAttributeValue property defines the value of the defined CloudEvent extension context attribute"
    },
    {
        "text": "ONEVENTS DEFINITION"
    },
    {
        "text": "eventRefs\tReferences one or more unique event names in the defined workflow events\tarray\tyes"
    },
    {
        "text": "actions\tActions to be performed\tarray\tno"
    },
    {
        "text": "eventDataFilter\tEvent data filter definition\tobject\tno"
    },
    {
        "text": "- HighBodyTemperature"
    },
    {
        "text": "OnEvent definition allow you to define which actions are to be performedfor the one or more events definitions defined in the eventRefs array"
    },
    {
        "text": "Note that the values of eventRefs array must be unique"
    },
    {
        "text": "The actionMode property defines if the defined actions need to be performed sequentially or in parallel"
    },
    {
        "text": "The actions property defines a list of actions to be performed"
    },
    {
        "text": "If exclusive is set to true, the consumption of either the HighBodyTemperature or HighBloodPressure events will trigger action execution"
    },
    {
        "text": "If exclusive is set to false, the consumption of both the HighBodyTemperature and HighBloodPressure events will trigger action execution"
    },
    {
        "text": "ACTION DEFINITION"
    },
    {
        "text": "name\tUnique Action name\tstring\tno"
    },
    {
        "text": "retryRef\tReferences a defined workflow retry definition"
    },
    {
        "text": "If not defined uses the default runtime retry definition\tstring\tno"
    },
    {
        "text": "nonRetryableErrors\tList of references to defined workflow errors for which the action should not be retried"
    },
    {
        "text": "Used only when autoRetries is set to true\tarray\tno"
    },
    {
        "text": "retryableErrors\tList of references to defined workflow errors for which the action should be retried"
    },
    {
        "text": "Used only when autoRetries is set to false\tarray\tno"
    },
    {
        "text": "actionDataFilter\tAction data filter definition\tobject\tno"
    },
    {
        "text": "sleep\tDefines time periods Workflow Execution should sleep before / after function execution\tobject\tno"
    },
    {
        "text": "condition\tExpression, if defined, must evaluate to true for this action to be performed"
    },
    {
        "text": "If false, action is disregarded\tstring\tno"
    },
    {
        "text": "Reference functions definitions by its unique name using the functionRef property"
    },
    {
        "text": "Reference a produced and consumed event definitions via the eventRef property"
    },
    {
        "text": "Reference a sub-workflow invocation via the subFlowRef property"
    },
    {
        "text": "Note that functionRef, eventRef, and subFlowRef are mutually exclusive, meaning that only one of them can bespecified in a single action definition"
    },
    {
        "text": "The name property specifies the action name"
    },
    {
        "text": "In the event-based scenario a service, or a set of services we want to invokeare not exposed via a specific resource URI for example, but can only be invoked via an event"
    },
    {
        "text": "The eventRef property defines thereferenced produced event via its produceEventRef property and a consumed event via its consumeEventRef property"
    },
    {
        "text": "Function invocation timeouts should be handled via the states timeouts definition"
    },
    {
        "text": "The retryRef property references one of the defined workflow retries by it's unique name"
    },
    {
        "text": "If not set, the actionshould be retried according to the default retry policy of the runtime implementation"
    },
    {
        "text": "For more information about workflowretries reference this section"
    },
    {
        "text": "The nonRetryableErrors property is a list that references one or more unique names of workflow error definitions"
    },
    {
        "text": "This is the list of known errors for which the action should not be retried for"
    },
    {
        "text": "It should be used only when the workflow top-level autoRetries property is set to true"
    },
    {
        "text": "The retryableErrors property is a list that references one or more unique names of workflow error definitions"
    },
    {
        "text": "This is the list of known errors for which the action should be retried for"
    },
    {
        "text": "It should be used only when the workflow top-level autoRetries property is set to false"
    },
    {
        "text": "The condition property is a workflow expression"
    },
    {
        "text": "If defined, it must evaluate to truefor this action to be performed"
    },
    {
        "text": "If it evaluates to false the action is skipped"
    },
    {
        "text": "If the condition property is not defined, the action is always performed"
    },
    {
        "text": "SUBFLOW ACTION"
    },
    {
        "text": "Often you want to group your workflows into small logical units that solve a particular business problem and can be reused inmultiple other workflow definitions"
    },
    {
        "text": "Reusable workflows are referenced by their id property via the SubFlow action workflowId parameter"
    },
    {
        "text": "For the simple case, subFlowRef can be a string containing the id of the sub-workflow to invoke"
    },
    {
        "text": "If you want to specify other parameters then a subFlowRef should be provided instead"
    },
    {
        "text": "Each referenced workflow receives the SubFlow actions data as workflow data input"
    },
    {
        "text": "Referenced sub-workflows must declare their own function and event definitions"
    },
    {
        "text": "FUNCTIONREF DEFINITION"
    },
    {
        "text": "Note that if used with string type, the invocation of the function is synchronous"
    },
    {
        "text": "refName\tName of the referenced function\tstring\tyes"
    },
    {
        "text": "invoke\tSpecifies if the function should be invoked sync or async"
    },
    {
        "text": "Default is sync\tenum\tno"
    },
    {
        "text": "The refName property is the name of the referenced function"
    },
    {
        "text": "EVENTREF DEFINITION"
    },
    {
        "text": "Allows defining invocation of a function via event"
    },
    {
        "text": "produceEventRef\tReference to the unique name of a produced event definition\tstring\tyes"
    },
    {
        "text": "consumeEventRef\tReference to the unique name of a consumed event definition\tstring\tno"
    },
    {
        "text": "contextAttributes\tAdd additional event extension context attributes to the trigger/produced event\tobject\tno"
    },
    {
        "text": "References a produced and consumed event definitions via the produceEventRef and consumeEventRef properties, respectively"
    },
    {
        "text": "The contextAttributes property allows you to add one or more extension context attributesto the trigger/produced event"
    },
    {
        "text": "SUBFLOWREF DEFINITION"
    },
    {
        "text": "SubFlowRef definition can have two types, namely string or object"
    },
    {
        "text": "If string type, it defines the unique id of the sub-workflow to be invoked"
    },
    {
        "text": "This short-hand definition can be used if sub-workflow lookup is done only by its idproperty and not its version property"
    },
    {
        "text": "workflowId\tSub-workflow unique id\tstring\tyes"
    },
    {
        "text": "version\tSub-workflow version\tstring\tno"
    },
    {
        "text": "invoke\tSpecifies if the subflow should be invoked sync or async"
    },
    {
        "text": "Default is sync\tenum\tno"
    },
    {
        "text": "onParentComplete\tIf invoke is async, specifies if subflow execution should terminate or continue when parent workflow completes"
    },
    {
        "text": "Default is terminate\tenum\tno"
    },
    {
        "text": "The workflowId property define the unique ID of the sub-workflow to be invoked"
    },
    {
        "text": "Usually, the workflow id should not be the same id of the workflow where the action is defined"
    },
    {
        "text": "Otherwise, it may occur undesired recurring calls to the same workflow"
    },
    {
        "text": "The version property defined the unique version of the sub-workflow to be invoked"
    },
    {
        "text": "If this property is defined, runtimes should match both the id and the version propertiesdefined in the sub-workflow definition"
    },
    {
        "text": "ERROR DEFINITION"
    },
    {
        "text": "Error definitions describe checked errors that can occur during Workflow Execution and how to handle them"
    },
    {
        "text": "The errorRef property references the unique workflow error definition"
    },
    {
        "text": "For more info on workflow error handlingreferece this section"
    },
    {
        "text": "The errorRefsproperty references at least one of the defined workflow error definitions"
    },
    {
        "text": "Can be used when errorRef is not used"
    },
    {
        "text": "Usable when you want to define multiple error refs for which the same transitionor end definition should be applied"
    },
    {
        "text": "For more info on workflow error handlingreferece this section"
    },
    {
        "text": "Note that the errorRef and errorRefs properties are mutually exclusive, meaning that you can only specify one or the other,but not both at the same time"
    },
    {
        "text": "The transition property defines the transition to the next workflow state in cases when the definederror happens during runtime execution"
    },
    {
        "text": "If transition is not defined you can also define the end property which will end Workflow Execution at that point"
    },
    {
        "text": "Note that the transition and end properties are mutually exclusive, meaning that you can only specify one or the other,but not both at the same time"
    },
    {
        "text": "For more information, see the Workflow Error Handling sections"
    },
    {
        "text": "RETRY DEFINITION"
    },
    {
        "text": "name\tUnique retry strategy name\tstring\tyes"
    },
    {
        "text": "maxAttempts\tMaximum number of retry attempts"
    },
    {
        "text": "Value of 1 means no retries are performed\tstring or number\tyes"
    },
    {
        "text": "If both increment and multiplier properties are defined, increment should be applied first and thenthe multiplier when determining the next retry time"
    },
    {
        "text": "The maxAttempts property determines the maximum number of retry attempts allowed and is a positive integer value"
    },
    {
        "text": "The jitter property is important to prevent certain scenarios where clientsare retrying in sync, possibly causing or contributing to a transient failureprecisely because they're retrying at the same time"
    },
    {
        "text": "Adding a typically small,bounded random amount of time to the period between retries serves the purposeof attempting to prevent these retries from happening simultaneously, possiblyreducing total time to complete requests and overall congestion"
    },
    {
        "text": "How this valueis used in the exponential backoff algorithm is left up to implementations"
    },
    {
        "text": "Alternatively, jitter may be defined as an absolute value specified as an ISO8601 duration"
    },
    {
        "text": "This way, the maximum amount of random time added is fixed andwill not increase as new attempts are made"
    },
    {
        "text": "The maxDelay property determines the maximum amount of delay that is desired between retry attempts, and is appliedafter increment, multiplier, and jitter"
    },
    {
        "text": "TRANSITION DEFINITION"
    },
    {
        "text": "nextState\tName of the state to transition to next\tstring\tyes"
    },
    {
        "text": "compensate\tIf set to true, triggers workflow compensation before this transition is taken"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "produceEvents\tArray of producedEvent definitions"
    },
    {
        "text": "Events to be produced before the transition takes place\tarray\tno"
    },
    {
        "text": "SWITCH STATE DATA CONDITIONS"
    },
    {
        "text": "name\tData condition name\tstring\tno"
    },
    {
        "text": "condition\tWorkflow expression evaluated against state data"
    },
    {
        "text": "Must evaluate to true or false\tstring\tyes"
    },
    {
        "text": "If the condition is evaluated to true, you can specify either the transition or end definitionsto decide what to do, transition to another workflow state, or end Workflow Execution"
    },
    {
        "text": "Note that transition and enddefinitions are mutually exclusive, meaning that you can specify either one or the other, but not both"
    },
    {
        "text": "SWITCH STATE EVENT CONDITIONS"
    },
    {
        "text": "name\tEvent condition name\tstring\tno"
    },
    {
        "text": "eventRef\tReferences an unique event name in the defined workflow events\tstring\tyes"
    },
    {
        "text": "Switch state event conditions specify events, which the switch state must wait for"
    },
    {
        "text": "Each conditioncan reference one workflow-defined event"
    },
    {
        "text": "Upon arrival of this event, the associated transition is taken"
    },
    {
        "text": "The eventRef property references a name of one of the defined workflow events"
    },
    {
        "text": "If the referenced event is received, you can specify either the transition or end definitionsto decide what to do, transition to another workflow state, or end Workflow Execution"
    },
    {
        "text": "The eventDataFilter property can be used to filter event data when it is received"
    },
    {
        "text": "Note that transition and enddefinitions are mutually exclusive, meaning that you can specify either one or the other, but not both"
    },
    {
        "text": "PARALLEL STATE BRANCH"
    },
    {
        "text": "name\tBranch name\tstring\tyes"
    },
    {
        "text": "actions\tActions to be executed in this branch\tarray\tyes"
    },
    {
        "text": "timeouts\tBranch specific timeout settings\tobject\tno"
    },
    {
        "text": "Each branch receives the same copy of the Parallel state's data input"
    },
    {
        "text": "A branch can define actions that need to be executed"
    },
    {
        "text": "For the SubFlowRef action, the workflow id should not be the same id of the workflow where the branch is defined"
    },
    {
        "text": "Otherwise, it may occur undesired recurring calls to the same workflow"
    },
    {
        "text": "The timeouts property can be used to set branch specific timeout settings"
    },
    {
        "text": "Parallel state branches can set theactionExecTimeout and branchExecTimeout timeout properties"
    },
    {
        "text": "For more information on workflow timeouts reference theWorkflow Timeouts section"
    },
    {
        "text": "PARALLEL STATE HANDLING EXCEPTIONS"
    },
    {
        "text": "Exceptions can occur during execution of Parallel state branches"
    },
    {
        "text": "By default, exceptions that are not handled within branches stop branch execution and are propagatedto the Parallel state and should be handled with its onErrors definition"
    },
    {
        "text": "If the parallel states defines a subflow action, exceptions that occur during execution of the called workflowcan choose to handle exceptions on their own"
    },
    {
        "text": "All unhandled exceptions from the called workflowexecution however are propagated back to the parallel state and can be handled with the parallel statesonErrors definition"
    },
    {
        "text": "START DEFINITION"
    },
    {
        "text": "Can be either string or object type"
    },
    {
        "text": "If type string, it defines the name of the workflow starting state"
    },
    {
        "text": "In this case it's assumed that the schedule property is not defined"
    },
    {
        "text": "stateName\tName of the starting workflow state\tstring\tno"
    },
    {
        "text": "schedule\tDefine the recurring time intervals or cron expressions at which workflow instances should be automatically started"
    },
    {
        "text": "string or object\tyes"
    },
    {
        "text": "Start definition explicitly defines how/when workflow instances should be created and what the workflow starting state is"
    },
    {
        "text": "The start definition can be either string or object type"
    },
    {
        "text": "If string type, it defines the name of the workflow starting state"
    },
    {
        "text": "If object type, it provides the ability to set the workflow starting state name, as well as the schedule property"
    },
    {
        "text": "The stateName property can be set to define the starting workflow state"
    },
    {
        "text": "If not specified, the first statein the workflow states definition should be used as the starting workflow state"
    },
    {
        "text": "0 0/5 * * * ?"
    },
    {
        "text": "to define that a workflow instance from the workflow definition should be created every 5 minutes, starting at full hour"
    },
    {
        "text": "* * * * * - Create workflow instance at the top of every minute"
    },
    {
        "text": "0 * * * * - Create workflow instance at the top of every hour"
    },
    {
        "text": "0 */2 * * * - Create workflow instance every 2 hours"
    },
    {
        "text": "See here to get more information on defining cron expressions"
    },
    {
        "text": "Defining a start definition is not required"
    },
    {
        "text": "If it's not defined, the starting workflowstate has to be the very first state defined in the workflow states array"
    },
    {
        "text": "SCHEDULE DEFINITION"
    },
    {
        "text": "The cron property uses a cron expressionto describe a repeating interval upon which a workflow instance should be created automatically"
    },
    {
        "text": "For more information see the cron definition section"
    },
    {
        "text": "Note that when the workflow starting state is an Eventdefining cron-based scheduled starts for the runtime implementations would mean that there needs to be an event service that issuesthe needed events at the defined times to trigger workflow instance creation"
    },
    {
        "text": "CRON DEFINITION"
    },
    {
        "text": "END DEFINITION"
    },
    {
        "text": "In this case it's assumed that the terminate property has its default value of false, and the produceEvents,compensate, and continueAs properties are not defined"
    },
    {
        "text": "terminate\tIf true"
    },
    {
        "text": "terminates workflow instance execution\tboolean\tno"
    },
    {
        "text": "produceEvents\tArray of producedEvent definitions"
    },
    {
        "text": "Defines events that should be produced"
    },
    {
        "text": "array\tno"
    },
    {
        "text": "compensate\tIf set to true, triggers workflow compensation before Workflow Execution completes"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "continueAs\tDefines that current Workflow Execution should stop, and execution should continue as a new workflow instance of the provided id\tstring or object\tno"
    },
    {
        "text": "End definitions are used to explicitly define execution completion of a workflow instance or Workflow Execution path"
    },
    {
        "text": "A workflow definition must include at least one workflow state"
    },
    {
        "text": "Note that Switch states cannot declare to be workflow end states"
    },
    {
        "text": "Their conditions however candefine a stop of Workflow Execution"
    },
    {
        "text": "The terminate property, if set to true, completes the workflow instance execution, this any other activeexecution paths"
    },
    {
        "text": "If a terminate end is reached inside a ForEach or Parallel state the entire workflow instance is terminated"
    },
    {
        "text": "The produceEvents allows defining events which should be producedby the workflow instance before workflow stops its execution"
    },
    {
        "text": "It's important to mention that if the workflow keepActive property is set totrue,the only way to complete execution of the workflow instanceis if Workflow Execution reaches a state that defines an end definition with terminate property set to true,or, if the workflowExecTimeout property is defined, the time defined in its intervalis reached"
    },
    {
        "text": "The compensate property defines that workflow compensation should be performed before the workflowexecution is completed"
    },
    {
        "text": "PRODUCEDEVENT DEFINITION"
    },
    {
        "text": "eventRef\tReference to a defined unique event name in the events definition\tstring\tyes"
    },
    {
        "text": "contextAttributes\tAdd additional event extension context attributes\tobject\tno"
    },
    {
        "text": "The data property can have two types, object or string"
    },
    {
        "text": "If of string type, it is an expression that can select parts of state datato be used as the event payload"
    },
    {
        "text": "If of object type, you can define a custom object to be the event payload"
    },
    {
        "text": "The contextAttributes property allows you to add one or more extension context attributesto the generated event"
    },
    {
        "text": "Being able to produce events when Workflow Execution completes or during state transitionallows for event-based orchestration communication"
    },
    {
        "text": "For example, completion of an orchestration workflow can notify other orchestration workflows to decide if they need to act uponthe produced event, or notify monitoring services of the current state of Workflow Execution, etc"
    },
    {
        "text": "It can be used to create very dynamic orchestration scenarios"
    },
    {
        "text": "TRANSITIONS"
    },
    {
        "text": "Implementers must use the unique State name property for determining the transition"
    },
    {
        "text": "Events can be produced during state transitions"
    },
    {
        "text": "The produceEvents property of the transition definitions allows youto reference one or more defined produced events in the workflow events definitions"
    },
    {
        "text": "For each of the produced events you can select what parts of state data to be the event payload"
    },
    {
        "text": "Transitions can trigger compensation via their compensate property"
    },
    {
        "text": "See the Workflow Compensationsection for more information"
    },
    {
        "text": "ADDITIONAL PROPERTIES"
    },
    {
        "text": "Specifying additional properties, namely properties which are not defined by the specificationare only allowed in the Workflow Definition"
    },
    {
        "text": "Additional properties serve the same purpose as Workflow Metadata"
    },
    {
        "text": "They allow you to enrich the workflow definition with custom information"
    },
    {
        "text": "Additional properties, just like workflow metadata, should not affect Workflow Execution"
    },
    {
        "text": "Implementations may choose to use additional properties or ignore them"
    },
    {
        "text": "It is recommended to use workflow metadata instead of additional properties in the workflow definition"
    },
    {
        "text": "In this example, we specify the loglevel, environment, and category additional properties"
    },
    {
        "text": "Serverless Workflow language allows you to define explicit error handling, meaning you can define what should happenin case of errors inside your workflow model rather than some generic error handling entity"
    },
    {
        "text": "This allows error handling to become part of your orchestration activities and as such part of your business problemsolutions"
    },
    {
        "text": "The idea behind the way Serverless Workflow defines error handling is that workflows should only fail due to unknown bugsduring execution"
    },
    {
        "text": "In general, you should always write your workflows so that they do not fail on any known failures"
    },
    {
        "text": "Each workflow state can define error handling, which is related only to errors that may arise during itsexecution"
    },
    {
        "text": "Error handling defined in one state cannot be used to handle errors that happened during execution of another stateduring Workflow Execution"
    },
    {
        "text": "Unknown errors that may arise during workflow state execution that are not explicitly handled within the workflow definitionshould be reported by runtime implementations and halt Workflow Execution"
    },
    {
        "text": "In addition to the domain specific error name, users have the option to also add an optional error codeto help runtime implementations with mapping defined errors to concrete underlying technical ones"
    },
    {
        "text": "Known workflow errors, that we know we need to handle during Workflow Execution should be defined inthe workflow top-level 'errors' property"
    },
    {
        "text": "This property can be either a string type, meaning it can referencea reusable JSON or Yaml definition file including the error definitions, or it can have an array type where you candefine these checked errors in-line in your workflow definition"
    },
    {
        "text": "information"
    },
    {
        "text": "These defined errors can then be referenced by their unique name in both states onErrors definitions as well as inactions nonRetryableErrors and retryableErrors properties"
    },
    {
        "text": "Regardless of the chosen retries option, note that workflows in general should be designed to not fail"
    },
    {
        "text": "Workflows should be able to recover from intermittent failures"
    },
    {
        "text": "The next sections provide more details to each action retry option"
    },
    {
        "text": "- SomeErrorOne"
    },
    {
        "text": "- SomeErrorTwo"
    },
    {
        "text": "- SomeErrorThree"
    },
    {
        "text": "Each action can define the retry strategy it wants to use"
    },
    {
        "text": "If it does not define one, the action is in this case not retries"
    },
    {
        "text": "Actions can define a list of known errors in its retryableErrors array"
    },
    {
        "text": "If defined, then the action should be retriedfor those errors according to the referenced retry strategy"
    },
    {
        "text": "In our example, \"MyFirstFunction\" invocation should be retried according to the \"FirstRetryStrategy\" policy only on known errors\"SomeErrorOne\" and \"SomeErrorTwo\""
    },
    {
        "text": "This is the option used when the workflow top-level autoRetries property is set to true"
    },
    {
        "text": "Automatic retries are well suited to long-running and stateful workflow orchestrations"
    },
    {
        "text": "It allows workflowsto recover from failures thus providing more resilience"
    },
    {
        "text": "There is a possible cost associated with automatic retriesin terms of resource and computing power utilization"
    },
    {
        "text": "maxAttempts to be unlimited, meaning that the action should be retried indefinitely until successful"
    },
    {
        "text": "delay to be set to one second, meaning that there is a one second delay between action retries"
    },
    {
        "text": "multiplier to be set to two meaning that the delay should be multiplied by two for each retry attempt"
    },
    {
        "text": "Runtimes should document their default retry strategy to users, so it's clear whichproperty values they are using for the default"
    },
    {
        "text": "In our example the first action named MyFirstFunction is going to be retried according to the FirstRetryStrategyretry policyfor all errors except SomeErrorOne and SomeErrorTwo"
    },
    {
        "text": "The seconds action named MySecondFunction is going to be retried according to the SecondRetryStrategyretry policyfor all errors except SomeErrorTwo and SomeErrorThree"
    },
    {
        "text": "The fourth action named MyFourthFunction is going to be retried according to the DoNotRetryStrategyretry policy which has the maxAttempts property set to 1, meaning that this action will not be retried"
    },
    {
        "text": "Workflow execution"
    },
    {
        "text": "State execution"
    },
    {
        "text": "Action execution"
    },
    {
        "text": "Branch execution"
    },
    {
        "text": "Event consumption time"
    },
    {
        "text": "The specification allows for timeouts to be defined on the top-level workflow definition, as well asin each of the workflow state definitions"
    },
    {
        "text": "Note that the timeout settings defined in states, and state branches overwrite the top-levelworkflow definition for state, action and branch execution"
    },
    {
        "text": "If they are not defined, then the top-leveltimeout settings should take in effect"
    },
    {
        "text": "This top-level workflow timeout setting defines that the maximum execution time of all defined workflow statesis two seconds each"
    },
    {
        "text": "Since state \"A\" does not overwrite the top-level stateExecTimeout, its execution timeout should be inherited fromthe top-level timeout definition"
    },
    {
        "text": "On the other hand, state \"B\" does define it's own stateExecTimeout, in which case it would overwrite the defaultsetting, meaning that it would its execution time has a max limit of ten seconds"
    },
    {
        "text": "Defining timeouts is not mandatory, meaning that if not defined, all the timeout settings should be assumed tobe \"unlimited\""
    },
    {
        "text": "Note that the defined Workflow Execution timeout has precedence over all other defined timeouts"
    },
    {
        "text": "Just to give an extreme example, let's say we define the Workflow Execution timeout to ten seconds,and the state execution timeout to twenty seconds"
    },
    {
        "text": "In this case if the Workflow Execution timeout is reachedit should follow the rules of Workflow Execution timeout and end Workflow Execution, no matter what thestate execution time has been set to"
    },
    {
        "text": "The eventTimeout property defines the maximum amount of time to wait to consume defined events"
    },
    {
        "text": "If not specified it should default to\"unlimited\""
    },
    {
        "text": "The branchExecTimeout property defines the maximum execution time for a single branch"
    },
    {
        "text": "If not specified it should default to\"unlimited\""
    },
    {
        "text": "The actionExecTimeout property defines the maximum execution time for a single actions definition"
    },
    {
        "text": "If not specified it should default to\"unlimited\""
    },
    {
        "text": "Note that an action definition can include multiple actions"
    },
    {
        "text": "The stateExecTimeout property defines the maximum execution time for a single workflow state"
    },
    {
        "text": "If not specified it should default to\"unlimited\""
    },
    {
        "text": "WORKFLOWEXECTIMEOUT DEFINITION"
    },
    {
        "text": "interrupt\tIf false, workflow instance is allowed to finish current execution"
    },
    {
        "text": "If true, current Workflow Execution is stopped immediately"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "runBefore\tName of a workflow state to be executed before workflow instance is terminated\tstring\tno"
    },
    {
        "text": "The duration property defines the time duration of the execution timeout"
    },
    {
        "text": "Once a workflow instance is created,and the amount of the defined time is reached, the workflow instance should be terminated"
    },
    {
        "text": "The interrupt property defines if the currently running instance should be allowed to finish its currentexecution flow before it needs to be terminated"
    },
    {
        "text": "If set to true, the current instance execution should stop immediately"
    },
    {
        "text": "If it is a single state, it must define an end definition, if it transitions to other states,at last one must define it"
    },
    {
        "text": "Runtime implementations should raise compile time / parsing exceptions if any of the rules mentioned above arenot obeyed in the workflow definition"
    },
    {
        "text": "All workflow states except Sleep and Inject States can define the timeouts property and can define different timeoutsettings depending on their state type"
    },
    {
        "text": "Please reference each workflow state definitions for more information on whichtimeout settings are available for each state type"
    },
    {
        "text": "Workflow states timeouts cannot define the workflowExecTimeout property"
    },
    {
        "text": "Parallel states can define the branchExecTimeout property"
    },
    {
        "text": "If defined on the statelevel, it applies to each branch of the Parallel state"
    },
    {
        "text": "Note that each parallel state branchcan overwrite this setting to define its own branch execution timeout"
    },
    {
        "text": "If a branch does not define this timeout property, it should be inherited from it's state definition branch timeout setting"
    },
    {
        "text": "If its state does not define it either, it should be inherited from the top-level workflow branch timeout settings"
    },
    {
        "text": "The Event state timeouts property can be used tospecify state specific timeout settings"
    },
    {
        "text": "For event state it can contain the eventTimeout propertywhich is defined using the ISO 8601 data and time format"
    },
    {
        "text": "You can specify for example \"PT15M\" to represent 15 minutes or \"P2DT3H4M\" to represent 2 days, 3 hours and 4 minutes"
    },
    {
        "text": "eventTimeout values should always be represented as durations and not as specific time intervals"
    },
    {
        "text": "The eventTimeout property needs to be described in detail for Event states as it depends on whether or not the Event state is a workflow starting state or not"
    },
    {
        "text": "If the Event state is a workflow starting state, incoming events may trigger workflow instances"
    },
    {
        "text": "In this case,if the exclusive property is set to true, the eventTimeout property should be ignored"
    },
    {
        "text": "\"ExampleEvent1\","
    },
    {
        "text": "\"ExampleEvent2\""
    },
    {
        "text": "]"
    },
    {
        "text": "The first eventTimeout would start once any of the referenced events are consumed"
    },
    {
        "text": "If the second event does not occur withinthe defined eventTimeout, no workflow instance should be created"
    },
    {
        "text": "Compensation deals with undoing or reversing the work of one or more states which havealready successfully completed"
    },
    {
        "text": "For example, let's say that we have charged a customer $100 for an itempurchase"
    },
    {
        "text": "In the case customer laster on decides to cancel this purchase we need to undo it"
    },
    {
        "text": "One way ofdoing that is to credit the customer $100"
    },
    {
        "text": "Compensation in Serverless Workflow must be explicitly defined by the workflow control flow logic"
    },
    {
        "text": "It cannot be dynamically triggered by initial workflow data, event payloads, results of service invocations, orerrors"
    },
    {
        "text": "They cannot be an event state"
    },
    {
        "text": "They cannot define an end definition"
    },
    {
        "text": "If they do, it should be ignored"
    },
    {
        "text": "They must define the usedForCompensation property and set it to true"
    },
    {
        "text": "They can transition only to states which also have their usedForCompensation property set to true"
    },
    {
        "text": "\"NewPurchase\""
    },
    {
        "text": "],"
    },
    {
        "text": "]"
    },
    {
        "text": "],"
    },
    {
        "text": "- NewPurchase"
    },
    {
        "text": "In this example our \"NewItemPurchase\" event state waits for a \"NewPurchase\" event and thendebits the customer and sends them a purchase confirmation email"
    },
    {
        "text": "It defines that it's compensated by the\"CancelPurchase\" operation state which performs two actions, namely credits back thepurchase amount to customer and sends them a purchase cancellation email"
    },
    {
        "text": "As previously mentioned, compensation must be explicitly triggered by the workflows control-flow logic"
    },
    {
        "text": "This can be done via transition and end definitions"
    },
    {
        "text": "End definitions can trigger compensations by specifying the compensate property and setting it to true"
    },
    {
        "text": "This means that before workflow finishes its execution workflow compensation must be performed"
    },
    {
        "text": "Note thatin case when the end definition has its produceEvents property set, compensation must be performed beforeproducing the specified events and ending Workflow Execution"
    },
    {
        "text": "In the case the end definition has a continueAs property defined, compensation must be performed beforeWorkflow Execution continues as a new workflow invocation"
    },
    {
        "text": "In the case where the end definition has both produceEvents, and continueAs compensation is performed first,then the event should be produced, and then the workflow should continue its execution as a new workflow invocation"
    },
    {
        "text": "In this example lets say our Workflow Execution is at the \"End\" state which defines the compensate property to trueas shown in the previous section"
    },
    {
        "text": "States with a red border, namely \"A\", \"B\", \"D\" and \"E\" are states which have so farbeen executed successfully"
    },
    {
        "text": "State \"C\" has not been executed during Workflow Execution in our example"
    },
    {
        "text": "State \"E\" is not compensated as it does not define a compensatedBy state"
    },
    {
        "text": "State \"D\" is compensated by executing compensation \"D1\""
    },
    {
        "text": "State \"B\" is compensated by executing \"B1\" and then \"B1-2\""
    },
    {
        "text": "State C is not compensated as it was never active during Workflow Execution"
    },
    {
        "text": "State A is not comped as it does not define a compensatedBy state"
    },
    {
        "text": "In our example, when compensation triggers,the current workflow data is passed as input to the \"D1\" state, the first compensation state for our example"
    },
    {
        "text": "The states data output is then passed as states data input to \"B1\", and so on"
    },
    {
        "text": "In some cases when compensation is triggered, some states such as Parallel and ForEachstates can still be \"active\", meaning they still might have some async executions that are being performed"
    },
    {
        "text": "If compensation needs to performed on such still active states, the state execution must be first cancelled"
    },
    {
        "text": "After it is cancelled, compensation should be performed"
    },
    {
        "text": "In some cases our workflows are deployed and executed on runtimes and/or cloud platforms that expose someexecution limitations such as finite execution duration, finite number of workflow transitions, etc"
    },
    {
        "text": "Some runtimes, especially when dealing with stateful workflow orchestrations have a finite limit ofexecution history log sizes, meaning that once a long-running workflow reaches these limits Workflow Executions islikely to be forced to stop before reaching its completion"
    },
    {
        "text": "This can result in unexpected issues, especially withmission-critical workflows"
    },
    {
        "text": "Defining this should stop the current Workflow Execution, and continue execution as a new workflow instance of theworkflow which defines the workflow id of \"myworkflowid\""
    },
    {
        "text": "The state data where this is define shouldbecome the workflow data input of the workflow that is continuing the current Workflow Execution"
    },
    {
        "text": "Note that any defined produceEvents and compensate definitions should be honored before continueAs is applied"
    },
    {
        "text": "workflowId\tUnique id of the workflow to continue execution as"
    },
    {
        "text": "string\tyes"
    },
    {
        "text": "version\tVersion of the workflow to continue execution as"
    },
    {
        "text": "string\tno"
    },
    {
        "text": "data\tIf string type, a workflow expression which selects parts of the states data output to become the workflow data input of continued execution"
    },
    {
        "text": "If object type, a custom object to become the workflow data input of the continued execution"
    },
    {
        "text": "string or object\tno"
    },
    {
        "text": "workflowExecTimeout\tWorkflow execution timeout to be used by the workflow continuing execution"
    },
    {
        "text": "Overwrites any specific settings set by that workflow"
    },
    {
        "text": "string or object\tno"
    },
    {
        "text": "Continuing execution with continueAs can also be used inside sub-Workflow Executions, which brings its next use case"
    },
    {
        "text": "Workflows can invoke sub-workflows during their execution"
    },
    {
        "text": "In Serverless Workflow DSL, sub-workflows are invokedsimilarly to other function types via the SubFlowRef Definitionin workflow states Action definitions"
    },
    {
        "text": "Just like \"parent\" workflows, sub-workflow can also be long-running, and can run into the same type of runtime/serverless platformlimitations as previously discussed"
    },
    {
        "text": "As such they can also use continueAs to stop their current execution and continue it asa new one of the same or different workflow id"
    },
    {
        "text": "Note that when a sub-workflow is invoked it can produce a result that is then merged into the parent workflow state data"
    },
    {
        "text": "This may bring up a question as to what happens when a sub-workflow calls continueAs in terms of what is returned asresult to of its invocation by the parent workflow"
    },
    {
        "text": "Top level workflow definition version property"
    },
    {
        "text": "Actions subflowRef version property"
    },
    {
        "text": "The version property must respect the semantic versioning guidelines"
    },
    {
        "text": "Workflow constants are used to define static, and immutable, data which is available to Workflow Expressions"
    },
    {
        "text": "Constants can only be accessed inside Workflow expressions via the $CONST variable"
    },
    {
        "text": "Runtimes must make $CONST available to expressions as a predefined variable"
    },
    {
        "text": ","
    },
    {
        "text": "Workflow constants values should only contain static data, meaning that their value should notcontain Workflow expressions"
    },
    {
        "text": "Workflow constants data must be immutable"
    },
    {
        "text": "Workflow constants should not have access to Workflow secrets definitions"
    },
    {
        "text": "Secrets allow you access sensitive information, such as passwords, OAuth tokens, ssh keys, etcinside your Workflow Expressions"
    },
    {
        "text": "If secrets are defined in a Workflow definition, runtimes must assure to provide their valuesduring Workflow execution"
    },
    {
        "text": "Secrets can be used only in Workflow expressions by referencing them via the $SECRETS variable"
    },
    {
        "text": "Runtimes must make $SECRETS available to expressions as a predefined variable"
    },
    {
        "text": "Note that secrets can also be used in expression functions"
    },
    {
        "text": "Secrets are immutable, meaning that workflow expressions are not allowed to change their values"
    },
    {
        "text": "Metadata enables you to enrich the serverless workflow model with information beyond its core definitions"
    },
    {
        "text": "It is intended to be used by clients, such as tools and libraries, as well as users that find this information relevant"
    },
    {
        "text": "Metadata should not affect Workflow Execution"
    },
    {
        "text": "Implementations may choose to use metadata information or ignore it"
    },
    {
        "text": "Note, however, that using metadata to control Workflow Execution can lead to vendor-locked implementations that do not comply with the main goals of this specification, which is to be completely vendor-neutral"
    },
    {
        "text": "Function definitions"
    },
    {
        "text": "Event definitions"
    },
    {
        "text": "State definitions"
    },
    {
        "text": "Switch state data and event conditions"
    },
    {
        "text": "UI tooling information such as sizing or scaling factors"
    },
    {
        "text": "Build, release, or image information such as timestamps, release ids, git branches, PR numbers, etc"
    },
    {
        "text": "Logging, monitoring, analytics, or audit repository information"
    },
    {
        "text": "Labels used for organizing/indexing purposes, such as \"release\" \"stable\", \"track\", \"daily\", etc"
    },
    {
        "text": "Similar to Constants and Secrets, workflows expressions can have access to the context information of a running instance via the keyword WORKFLOW"
    },
    {
        "text": "In this use case, a third-party service may require information from the caller for traceability purposes"
    },
    {
        "text": "The specification doesn't define any specific variable within the WORKFLOW bucket, but it's considered a reserved keyword"
    },
    {
        "text": "The workflow extension mechanism allows you to enhance your model definitions with additional information useful forthings like analytics, rate limiting, logging, simulation, debugging, tracing, etc"
    },
    {
        "text": "Serverless Workflow specification provides extensions which can be found here"
    },
    {
        "text": "You can define extensions in your workflow definition using its top-level extensions property"
    },
    {
        "text": "For more information about this property, see the extensions property in theWorkflow Definition Structure section"
    },
    {
        "text": "Even tho users can define their own extensions, it is encouraged to use the ones provided by the specification"
    },
    {
        "text": "We also encourage users to contribute their extensions to the specification"
    },
    {
        "text": "That way they can be sharedwith the rest of the community"
    },
    {
        "text": "If you have an idea for a new workflow extension, or would like to enhance an existing one,please open an New Extension Request issue in this repository"
    },
    {
        "text": "You can find different Serverless Workflow use cases here"
    },
    {
        "text": "You can find many Serverless Workflow examples here"
    },
    {
        "text": "You can find info how the Serverless Workflow language compares withother workflow languages here"
    },
    {
        "text": "You can find a list of other languages, technologies and specifications related to workflows here"
    },
    {
        "text": "Serverless Workflow specification operates under theApache License version 2"
    },
    {
        "text": "0"
    },
    {
        "text": "Abstract -"
    },
    {
        "text": "Status -"
    },
    {
        "text": "Overview -"
    },
    {
        "text": "Project Components -"
    },
    {
        "text": "Specification Details -"
    },
    {
        "text": "Core Concepts -"
    },
    {
        "text": "Workflow Definition - workflow"
    },
    {
        "text": "Workflow Instance - workflow"
    },
    {
        "text": "Workflow Model - workflow"
    },
    {
        "text": "Workflow Data - workflow"
    },
    {
        "text": "Input, Passing, Output, Filters, Merging"
    },
    {
        "text": "Workflow Functions - workflow"
    },
    {
        "text": "REST, Async API, RPC, GraphQL, OData, Expression, Custom"
    },
    {
        "text": "Workflow Expressions -"
    },
    {
        "text": "Workflow Definition Structure -"
    },
    {
        "text": ", workflow, , ,"
    },
    {
        "text": "Serverless Workflow"
    },
    {
        "text": "MindOS?"
    },
    {
        "text": ", Serverless Workflow MindOS"
    },
    {
        "text": "MindOS, , -"
    },
    {
        "text": "MindOS Serverless Workflow"
    },
    {
        "text": ", Serverless Workflow -"
    },
    {
        "text": ", MindOS"
    },
    {
        "text": "Serverless Workflow MindOS,"
    },
    {
        "text": "MindOS,"
    },
    {
        "text": "- , ,"
    },
    {
        "text": ", \u00b9"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", , ,"
    },
    {
        "text": "DDI\t \t - ,"
    },
    {
        "text": "DCMI\t \t - ,"
    },
    {
        "text": "EAD\t \t - XML"
    },
    {
        "text": "EML\t \t - XML"
    },
    {
        "text": "LOM\t \t - ISO ,"
    },
    {
        "text": "MARC\t \t- - -"
    },
    {
        "text": "MODS\t \t - XML , MARC 21"
    },
    {
        "text": "MPEG-7\t \t MPEG-7 - ISO , , ,"
    },
    {
        "text": "PREMIS\t \t - XML ,"
    },
    {
        "text": "SAML\t \t - OASIS"
    },
    {
        "text": "- ,"
    },
    {
        "text": "- , , , , , , ,"
    },
    {
        "text": "- ,"
    },
    {
        "text": ", RESTful, AsyncAPI, RPC, GraphQL OData"
    },
    {
        "text": "-"
    },
    {
        "text": ","
    },
    {
        "text": "- ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": "- , , ,,"
    },
    {
        "text": "MindOS , , ,"
    },
    {
        "text": "MindOS , JavaScript, Python SQL"
    },
    {
        "text": "Workflow Build Process - DNAnexus Documentation - DNAnexus, JSON, MindOS"
    },
    {
        "text": "Serverless Workflow Specification - GitHub -, MindOS"
    },
    {
        "text": "Workflow Builder error messages in the server log file - IBM - IBM, MindOS"
    },
    {
        "text": "- ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": "-"
    },
    {
        "text": "-"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ", dataset"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": ", JSON- workflow Serverless Workflow, ,"
    },
    {
        "text": "JSON-, , workflow"
    },
    {
        "text": "workflow, JSON-"
    },
    {
        "text": ", workflow, , ,"
    },
    {
        "text": "workflow JSON-"
    },
    {
        "text": ","
    },
    {
        "text": ", Serverless Workflow"
    },
    {
        "text": ","
    },
    {
        "text": "! , , , ,, , , ,"
    },
    {
        "text": "JSON-, workflow"
    },
    {
        "text": ", ,, workflow"
    },
    {
        "text": ", workflow"
    },
    {
        "text": "workflow, ,"
    },
    {
        "text": "workflow -"
    },
    {
        "text": "ML"
    },
    {
        "text": ", workflow"
    },
    {
        "text": ", , -"
    },
    {
        "text": "\"kenedu\", - \"weniti\""
    },
    {
        "text": ", ,, \"kenedu\""
    },
    {
        "text": ", ,, \"weniti\""
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ", JSON"
    },
    {
        "text": ",, ,"
    },
    {
        "text": ",, ,,"
    },
    {
        "text": "CSV Pandas DataFrame"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ", -"
    },
    {
        "text": ",!"
    },
    {
        "text": "ML"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", 100"
    },
    {
        "text": "name"
    },
    {
        "text": "surname"
    },
    {
        "text": "age"
    },
    {
        "text": "gender"
    },
    {
        "text": "description"
    },
    {
        "text": "date"
    },
    {
        "text": "author"
    },
    {
        "text": "content"
    },
    {
        "text": "tags"
    },
    {
        "text": "!, , -"
    },
    {
        "text": "200 ,"
    },
    {
        "text": "Faker"
    },
    {
        "text": "- ,"
    },
    {
        "text": "ML"
    },
    {
        "text": "TF-IDF"
    },
    {
        "text": "TensorFlow Dataset"
    },
    {
        "text": ", -"
    },
    {
        "text": ","
    },
    {
        "text": ", -"
    },
    {
        "text": "py"
    },
    {
        "text": "train_data"
    },
    {
        "text": "pkl test_data"
    },
    {
        "text": "pkl Pandas dataframe"
    },
    {
        "text": ", - -"
    },
    {
        "text": "train_data"
    },
    {
        "text": "pkl test_data"
    },
    {
        "text": "pkl Pandas, ?"
    },
    {
        "text": ", dataframe"
    },
    {
        "text": "train_df test_df Pandas dataframe,"
    },
    {
        "text": ","
    },
    {
        "text": ", - ,"
    },
    {
        "text": ", /"
    },
    {
        "text": "\" Python, , for"
    },
    {
        "text": "10 random"
    },
    {
        "text": "\""
    },
    {
        "text": ", ,"
    },
    {
        "text": ", - ,"
    },
    {
        "text": "-!"
    },
    {
        "text": ", ,"
    },
    {
        "text": "JSON Pandas DataFrame"
    },
    {
        "text": "TF-IDF"
    },
    {
        "text": "TensorFlow Dataset"
    },
    {
        "text": "Pickle"
    },
    {
        "text": "/"
    },
    {
        "text": ","
    },
    {
        "text": "JSON Pandas DataFrame"
    },
    {
        "text": ","
    },
    {
        "text": "- TF-IDF, Word2Vec"
    },
    {
        "text": "TensorFlow, PyTorch, Keras"
    },
    {
        "text": "ML"
    },
    {
        "text": "Pickle, JSON, XML, YAML"
    },
    {
        "text": ", -"
    },
    {
        "text": "!"
    },
    {
        "text": ", , , Genius , , Genius"
    },
    {
        "text": ", ,"
    },
    {
        "text": "- , Genius"
    },
    {
        "text": "-"
    },
    {
        "text": "Genius"
    },
    {
        "text": "-"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": "GitHub"
    },
    {
        "text": "cookiecutter poetry Python"
    },
    {
        "text": "API ML sklearn, PyTorch, TensorFlow"
    },
    {
        "text": ","
    },
    {
        "text": ", ,"
    },
    {
        "text": "GitHub cookiecutter"
    },
    {
        "text": "synthetic_data_generator"
    },
    {
        "text": "API ML sklearn, PyTorch, TensorFlow"
    },
    {
        "text": "/"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", -"
    },
    {
        "text": ", dataset Genius MindOS"
    },
    {
        "text": "Read 1 file"
    },
    {
        "text": ", github"
    },
    {
        "text": "com/serverlessworkflow/specification Genius MindOS"
    },
    {
        "text": "Serverless Workflow -"
    },
    {
        "text": "-, ,"
    },
    {
        "text": "SDK"
    },
    {
        "text": ","
    },
    {
        "text": "- , ,"
    },
    {
        "text": ","
    },
    {
        "text": "Genius Serverless Workflow"
    },
    {
        "text": ", - -"
    },
    {
        "text": ", , dataset"
    },
    {
        "text": ", MindOS, github"
    },
    {
        "text": "com/serverlessworkflow/specification,"
    },
    {
        "text": "-, ,"
    },
    {
        "text": "-, ,"
    },
    {
        "text": "NLP"
    },
    {
        "text": ", SDK,"
    },
    {
        "text": "NLP"
    },
    {
        "text": ", ,"
    },
    {
        "text": "\"MindOS_training_data_v1\""
    },
    {
        "text": "Genius"
    },
    {
        "text": ", -"
    },
    {
        "text": "\"MindOS_training_data_v1\""
    },
    {
        "text": "'Recommends products based on past user behavior',"
    },
    {
        "text": "'Detects objects in images',"
    },
    {
        "text": "'Chatbot Genius for answering user queries'],"
    },
    {
        "text": "],"
    },
    {
        "text": "'Workflows can orchestrate Serverless functions, services and apps',"
    },
    {
        "text": "'Supports workflow functions like parallel branches, joins, loops',"
    },
    {
        "text": "'Can integrate with event-driven infrastructure and services',"
    },
    {
        "text": "]"
    },
    {
        "text": ", ,,"
    },
    {
        "text": ","
    },
    {
        "text": "Genius , , MindOS"
    },
    {
        "text": ", -"
    },
    {
        "text": "Datasets represent data in Visual Studio"
    },
    {
        "text": "They can come from a database, service, file, or be generated in-memory"
    },
    {
        "text": "Right click on the Data Sources folder in Solution Explorer and select Add New Data Source"
    },
    {
        "text": "Configure the connection and select the specific database/tables/objects to include"
    },
    {
        "text": "Drag tables/objects onto the designer surface to include them"
    },
    {
        "text": "Set primary keys, foreign keys, relations, column data types"
    },
    {
        "text": "Preview and filter the data"
    },
    {
        "text": "Drag tables onto the Typed Dataset designer"
    },
    {
        "text": "It generates strongly-typed classes to represent each table"
    },
    {
        "text": "You can then program against the strongly-typed dataset"
    },
    {
        "text": "TableAdapters in typed datasets expose methods like Fill, Insert, Update, Delete to manipulate data"
    },
    {
        "text": "Add custom methods or properties"
    },
    {
        "text": "Add validation logic"
    },
    {
        "text": "Add relations between tables"
    },
    {
        "text": "Generate custom SQL queries"
    },
    {
        "text": "So in summary, Visual Studio provides a graphical way to create datasets from data sources, configure them, and generate strongly-typed code for programming against the data"
    },
    {
        "text": "The Dataset Designer and Typed Dataset features are key tools for this"
    },
    {
        "text": "md"
    },
    {
        "text": "os"
    },
    {
        "text": "walk"
    },
    {
        "text": "md_files"
    },
    {
        "text": "md"
    },
    {
        "text": "GitHub, GitLab"
    },
    {
        "text": "This appears to be a Docker image for Graphviz - an open source graph visualization software"
    },
    {
        "text": "It builds Graphviz from source code and installs it into a Ubuntu base image"
    },
    {
        "text": "It exposes ports 8080 and 8081 for web visualization of graphs"
    },
    {
        "text": "The image description states it can be used to generate graphs from DOT language scripts"
    },
    {
        "text": "This Docker image allows running Graphviz in a portable containerized environment"
    },
    {
        "text": "So in summary, this GitLab container registry link points to an official Docker image for running the Graphviz graph visualization software"
    },
    {
        "text": "The image is built from source and exposes web ports to view generated graphs"
    },
    {
        "text": "Read 10 files"
    },
    {
        "text": "This allows accessing the Graphviz web visualization server on those ports after running the container"
    },
    {
        "text": "Once running, Graphviz can be used to generate graphs by passing DOT language scripts to the web UI or API exposed on ports 8080 and 8081"
    },
    {
        "text": "Let me know if you need any clarification or have additional questions!"
    },
    {
        "text": ", ?"
    },
    {
        "text": ", - , ,"
    },
    {
        "text": ", - , ,,"
    },
    {
        "text": ","
    },
    {
        "text": "-, NLTK, gensim, - OpenCV TensorFlow"
    },
    {
        "text": ", , ,"
    },
    {
        "text": ", -"
    },
    {
        "text": "WDL ,"
    },
    {
        "text": "WDL - 1"
    },
    {
        "text": "1"
    },
    {
        "text": ","
    },
    {
        "text": "WDL - , Slack,"
    },
    {
        "text": "WDL, Dockstore BioWDL"
    },
    {
        "text": "WDL , Cromwell, MiniWDL, dxWDL"
    },
    {
        "text": "WDL - , ,"
    },
    {
        "text": ", WDL -"
    },
    {
        "text": ", MindOS,"
    },
    {
        "text": ", , MindOS \u2014 , \u2014"
    },
    {
        "text": "MindOS , MindOS, ,"
    },
    {
        "text": ", , ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", , MindOS"
    },
    {
        "text": "MindOS,"
    },
    {
        "text": ", , MindOS - , ,"
    },
    {
        "text": ", , , ,"
    },
    {
        "text": ", , AI-"
    },
    {
        "text": "- AI-,"
    },
    {
        "text": ","
    },
    {
        "text": ", MindOS"
    },
    {
        "text": "MindOS,"
    },
    {
        "text": ", , MindOS ,"
    },
    {
        "text": ","
    },
    {
        "text": "?"
    },
    {
        "text": ", MindOS,"
    },
    {
        "text": "- MindOS,"
    },
    {
        "text": ", /"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": "AI-, \"AI Geniuses\""
    },
    {
        "text": "Genius ,"
    },
    {
        "text": "Featured - , ,"
    },
    {
        "text": "Trending - , , , Midjourney"
    },
    {
        "text": "My Geniuses"
    },
    {
        "text": "-, , ,"
    },
    {
        "text": "-, ,"
    },
    {
        "text": "AI- ,"
    },
    {
        "text": "- AI-"
    },
    {
        "text": "Geniuses - AI-"
    },
    {
        "text": "Mindverse AI"
    },
    {
        "text": "Mindverse AI"
    },
    {
        "text": "Mindverse"
    },
    {
        "text": "Mindverse AI"
    },
    {
        "text": "MindOS AI Agent Engine"
    },
    {
        "text": "Mindverse AI"
    },
    {
        "text": "'"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", Genius"
    },
    {
        "text": "Ready Player Me"
    },
    {
        "text": "-"
    },
    {
        "text": "Chatbot"
    },
    {
        "text": ", Genius"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": "Genius MindOS"
    },
    {
        "text": ","
    },
    {
        "text": "Ready Player Me"
    },
    {
        "text": ", Genius MindOS"
    },
    {
        "text": ", -"
    },
    {
        "text": "PersonaKnowledgeSkillsMemoryAutonomyPublishAvatar Genius"
    },
    {
        "text": "ReadyPlayerMePicture"
    },
    {
        "text": ","
    },
    {
        "text": ", , ,"
    },
    {
        "text": "\u00ab ,"
    },
    {
        "text": "' , , Genius ,"
    },
    {
        "text": ","
    },
    {
        "text": "'BuildChat"
    },
    {
        "text": "Genius MindOS"
    },
    {
        "text": "ReadyPlayerMe"
    },
    {
        "text": "Chat"
    },
    {
        "text": "- , , Genius"
    },
    {
        "text": "PersonaKnowledgeSkillsMemoryAutonomyPublishLearning Knowledge"
    },
    {
        "text": "-"
    },
    {
        "text": "ALLBuildChat"
    },
    {
        "text": "'Genius UpdatedMessage"
    },
    {
        "text": "Genius MindOS"
    },
    {
        "text": "-"
    },
    {
        "text": "Genius"
    },
    {
        "text": "- GitBook"
    },
    {
        "text": "- Genius"
    },
    {
        "text": "- , 30+"
    },
    {
        "text": "LibrarySkillsValidated"
    },
    {
        "text": "Google"
    },
    {
        "text": "Serper"
    },
    {
        "text": "From LibraryAPIValidated"
    },
    {
        "text": "Google APIValidated"
    },
    {
        "text": "Youtube, APIValidated"
    },
    {
        "text": "LLM JSON ,"
    },
    {
        "text": "LibraryAPIValidated"
    },
    {
        "text": ", html- urlFrom LibraryAPIValidated"
    },
    {
        "text": "resultFrom LibraryAPIValidated"
    },
    {
        "text": "From LibraryAPIValidated"
    },
    {
        "text": "-From LibraryAPIValidate"
    },
    {
        "text": ", PE,PB, , API"
    },
    {
        "text": "API"
    },
    {
        "text": "2023-07-15WorkflowValidated"
    },
    {
        "text": "GitHub2023-07-14WorkflowValidated"
    },
    {
        "text": "API"
    },
    {
        "text": "2023-07-13WorkflowValidated"
    },
    {
        "text": "API , , -"
    },
    {
        "text": "2023-07-13WorkflowValidated"
    },
    {
        "text": "2023-07-13WorkflowValidated"
    },
    {
        "text": ","
    },
    {
        "text": "Test shortcut ChatSkill -"
    },
    {
        "text": "Test shortcut ChatSkill -"
    },
    {
        "text": "Test shortcut ChatSkill - Google"
    },
    {
        "text": "Test shortcut ChatSkill -"
    },
    {
        "text": "Test shortcut ChatSkill -"
    },
    {
        "text": "Test shortcut ChatSkill - LLM"
    },
    {
        "text": "Test shortcut ChatSkill - LLM"
    },
    {
        "text": "Test shortcut"
    },
    {
        "text": ", WorkflowSlyAI -"
    },
    {
        "text": ", MindOS"
    },
    {
        "text": "Genius"
    },
    {
        "text": "MindOS AI-Assistant"
    },
    {
        "text": "Genius MindOS"
    },
    {
        "text": "API"
    },
    {
        "text": "- Genius"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", Genius , Genius , , , ,"
    },
    {
        "text": ","
    },
    {
        "text": "Genius , , ,"
    },
    {
        "text": ", , - , Genius"
    },
    {
        "text": "Genius, , WorkflowSlyAI - AI-Genius Genius"
    },
    {
        "text": ", Genius"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", ,"
    },
    {
        "text": "persona, knowledge, skills memory Genius"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", Genius"
    },
    {
        "text": "WorkflowSlyAI Genius"
    },
    {
        "text": ", - Genius Genius"
    },
    {
        "text": ", \" \" Genius WorkflowSlyAI MindOS !!! ?"
    },
    {
        "text": "- Genius WorkflowSlyAI, MindOS!"
    },
    {
        "text": "MindOS,"
    },
    {
        "text": "Genius, WorkflowSlyAI"
    },
    {
        "text": "Genius"
    },
    {
        "text": "Genius,"
    },
    {
        "text": "WorkflowSlyAI,"
    },
    {
        "text": "! MindOS, Genius WorkflowSlyAI"
    },
    {
        "text": "!"
    },
    {
        "text": ", , , Genius -"
    },
    {
        "text": "MindOS"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": ","
    },
    {
        "text": ", WorkflowSlyAI , -"
    },
    {
        "text": "MindOS"
    },
    {
        "text": ", MindOS -"
    },
    {
        "text": ", Genius Genius - Persona, Knowledge, Skills"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", MindOS"
    },
    {
        "text": ", Genius"
    },
    {
        "text": "!"
    },
    {
        "text": "Persona, Avatar ReadyPlayerMe Voice , ,, Biography Genius , Persona"
    },
    {
        "text": "!"
    },
    {
        "text": ","
    },
    {
        "text": "\ud83d\ude0a"
    },
    {
        "text": "Knowledge!"
    },
    {
        "text": ","
    },
    {
        "text": "Skills! , Genius"
    },
    {
        "text": "API skills!"
    },
    {
        "text": "Workflow skills! ,"
    },
    {
        "text": "Memory!"
    },
    {
        "text": ","
    },
    {
        "text": "AI- MindOS AI- , AI- AI- API MindOS"
    },
    {
        "text": ", AI-"
    },
    {
        "text": "!"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "\"Load Data\" ,"
    },
    {
        "text": "\"Find Result\" , , , MindOS"
    },
    {
        "text": ", , MindOS"
    },
    {
        "text": ", ,"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "\"Load Data\""
    },
    {
        "text": "\"Find Result\" MindOS"
    },
    {
        "text": "!"
    },
    {
        "text": ","
    },
    {
        "text": "InteRiOS - Genius"
    },
    {
        "text": "SamaBlogSample -"
    },
    {
        "text": "MemoryCatcher -"
    },
    {
        "text": "\" \" -,"
    },
    {
        "text": ", , MindOS"
    },
    {
        "text": "- \"\", ,"
    },
    {
        "text": "- -,"
    },
    {
        "text": "SamaBlogSample -"
    },
    {
        "text": "MemoryCatcher -"
    },
    {
        "text": "\" \""
    },
    {
        "text": "-"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "- \"\","
    },
    {
        "text": ","
    },
    {
        "text": "?"
    },
    {
        "text": ", WDL - ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": "WDL MindOS"
    },
    {
        "text": "Read 4 files"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": "Mind AI"
    },
    {
        "text": "WDL -, MindOS -"
    },
    {
        "text": "WDL , MindOS"
    },
    {
        "text": "WDL - , MindOS -"
    },
    {
        "text": "WDL , MindOS -"
    },
    {
        "text": ","
    },
    {
        "text": "- WDL MindOS"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": "- Genius MindOS"
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", WorkflowSlyAI - , Genius MindOS"
    },
    {
        "text": "Genius"
    },
    {
        "text": "WorkflowSlyAI Genius MindOS"
    },
    {
        "text": "Genius"
    },
    {
        "text": "WorkflowSlyAI ,"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", WorkflowSlyAI , Genius,"
    },
    {
        "text": ", , - WorkflowSlyAI Genius MindOS"
    },
    {
        "text": ","
    },
    {
        "text": "Python Pandas, NumPy"
    },
    {
        "text": ", ,"
    },
    {
        "text": "Scikit-Learn, TensorFlow , ,"
    },
    {
        "text": "NLTK, SpaCy"
    },
    {
        "text": ", POS-,"
    },
    {
        "text": "API Python, JSON,"
    },
    {
        "text": "API, Twitter, OpenWeather"
    },
    {
        "text": "BeautifulSoup, Selenium"
    },
    {
        "text": ", -"
    },
    {
        "text": "- Python aiogram, pyTelegramBotAPI"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ", -"
    },
    {
        "text": "MindOS Genius ?"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "MindOS, , ,"
    },
    {
        "text": "Marketplace \" \""
    },
    {
        "text": ", Genius MindOS - ,"
    },
    {
        "text": "MindOS WDL"
    },
    {
        "text": "Genius WorkflowSlyAI MindOS"
    },
    {
        "text": ", MindOS Genius"
    },
    {
        "text": ", MindOS , Genius,"
    },
    {
        "text": ","
    },
    {
        "text": "CLIP"
    },
    {
        "text": ", ,"
    },
    {
        "text": "CLIP -"
    },
    {
        "text": "-"
    },
    {
        "text": ", , -"
    },
    {
        "text": "CLIP"
    },
    {
        "text": "latent,"
    },
    {
        "text": "CLIP ,"
    },
    {
        "text": "-"
    },
    {
        "text": "CLIP ,"
    },
    {
        "text": "-"
    },
    {
        "text": "- ,"
    },
    {
        "text": "CLIP - Contrastive Language-Image Pretraining"
    },
    {
        "text": "Image Encoder - ResNet"
    },
    {
        "text": "Text Encoder -"
    },
    {
        "text": "\"-\""
    },
    {
        "text": "latent"
    },
    {
        "text": "CLIP"
    },
    {
        "text": "-"
    },
    {
        "text": "-"
    },
    {
        "text": "GLIDE - Guided Language to Image Diffusion for Generation and Editing"
    },
    {
        "text": "Diffusion- ,"
    },
    {
        "text": "CLIP-"
    },
    {
        "text": "FID CLIPScore"
    },
    {
        "text": "Diffusion- -"
    },
    {
        "text": "\" GLIDE ,"
    },
    {
        "text": "Diffusion-"
    },
    {
        "text": ", GLIDE"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", GLIDE ?\""
    },
    {
        "text": "?"
    },
    {
        "text": "\"A painting of a fox sitting in a field of flowers\" -"
    },
    {
        "text": "\"A photograph of a tabby cat playing with a ball of yarn\" -"
    },
    {
        "text": "\"A photo of a beach with more blue in the ocean\" -"
    },
    {
        "text": "\"A portrait of a girl with red hair\" -"
    },
    {
        "text": "\"A living room with bookshelves added\" -"
    },
    {
        "text": "\"A dog without a collar\" -"
    },
    {
        "text": ", , GLIDE"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "Genius WorkflowSlyAI"
    },
    {
        "text": ", ,"
    },
    {
        "text": "-"
    },
    {
        "text": "Genius MindOS"
    },
    {
        "text": ","
    },
    {
        "text": "- Genius WorkflowSlyAI"
    },
    {
        "text": "WorkflowSlyAI - Genius,"
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": "WorkflowSlyAI , MindOS"
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": ", WorkflowSlyAI"
    },
    {
        "text": ", WorkflowSlyAI"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", WorkflowSlyAI"
    },
    {
        "text": "- \" \" ?"
    },
    {
        "text": "WorkflowSlyAI - - , ,"
    },
    {
        "text": "-"
    },
    {
        "text": "WorkflowSlyAI - -"
    },
    {
        "text": "-"
    },
    {
        "text": "- WorkflowSlyAI"
    },
    {
        "text": "-, WorkflowSlyAI /"
    },
    {
        "text": ", - Genius WorkflowSlyAI"
    },
    {
        "text": "WorkflowSlyAI -"
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": "-"
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": "- autoencoder"
    },
    {
        "text": ", autoencoder -"
    },
    {
        "text": "autoencoder -"
    },
    {
        "text": "-, WorkflowSlyAI,"
    },
    {
        "text": "autoencoder"
    },
    {
        "text": "-"
    },
    {
        "text": "-"
    },
    {
        "text": "-"
    },
    {
        "text": "-"
    },
    {
        "text": ", autoencoder pipeline - WorkflowSlyAI"
    },
    {
        "text": "-"
    },
    {
        "text": "html"
    },
    {
        "text": "user_dream"
    },
    {
        "text": "Model NameGPT3"
    },
    {
        "text": "5-Turbo-16k"
    },
    {
        "text": "Parameters AvailableAspect Ratios--aspect, or --ar Change the aspect ratio of a generation"
    },
    {
        "text": "Chaos--chaos <number 0\u2013100> Change how varied the results will be"
    },
    {
        "text": "Higher valuesproduce more unusual and unexpected generations"
    },
    {
        "text": "No--no Negative prompting, --no plants would try to remove plants from the image"
    },
    {
        "text": "Quality--quality <"
    },
    {
        "text": "25,"
    },
    {
        "text": "5, 1, or 2>, or --q <"
    },
    {
        "text": "25,"
    },
    {
        "text": "5, 1, or 2> How much rendering quality time youwant to spend"
    },
    {
        "text": "The default value is 1"
    },
    {
        "text": "Higher values cost more and lower values costless"
    },
    {
        "text": "Repeat--repeat <1\u201340>, or --r <1\u201340> Create multiple Jobs from a single prompt"
    },
    {
        "text": "--repeat isuseful for quickly rerunning a job multiple times"
    },
    {
        "text": "Seed--seed <integer between 0\u20134294967295> The Midjourney bot uses a seed number tocreate a field of visual noise, like television static, as a starting point to generate theinitial image grids"
    },
    {
        "text": "Seed numbers are generated randomly for each image but can bespecified with the --seed or --sameseed parameter"
    },
    {
        "text": "Using the same seed numberand prompt will produce similar ending images"
    },
    {
        "text": "Stop--stop <integer between 10\u2013100> Use the --stop parameter to finish a Job part waythrough the process"
    },
    {
        "text": "Stopping a Job at an earlier percentage can create blurrier, lessdetailed results"
    },
    {
        "text": "Style--style <4a, 4b, or 4c> Switch between versions of the Midjourney Model Version 4--style <expressive, or cute> Switch between versions of the Niji Model VersionStylize--stylize, or --s parameter influences how strongly Midjourney'sdefault aesthetic style is applied to Jobs"
    },
    {
        "text": "cottages, lively scene, warm and sunny, midday light, feel-good atmosphere\u201dYou can use any amount of stylize from 100-900"
    },
    {
        "text": "You don\u2019t have to use it every timeeither"
    },
    {
        "text": "Just if you think it\u2019d be good for the images that are being generated to bedifferent from one another in that same style"
    },
    {
        "text": "Now that you have a full understanding of Midjourney with example prompts"
    },
    {
        "text": "You can take inspiration from the structure of the prompts above, you can make these prompts longer or shorter if necessary in order to generate the perfect prompt"
    },
    {
        "text": "Please direct output the prompt without any other explanation"
    },
    {
        "text": "user_dream_image"
    },
    {
        "text": "Draw a picture based on user's description"
    },
    {
        "text": "Request Bodyprompt"
    },
    {
        "text": "Dream PaintingTest RunPublish"
    },
    {
        "text": "- Midjourney"
    },
    {
        "text": ", ,"
    },
    {
        "text": "Midjourney"
    },
    {
        "text": ", ,"
    },
    {
        "text": "Midjourney"
    },
    {
        "text": "- -, ,"
    },
    {
        "text": "-"
    },
    {
        "text": ","
    },
    {
        "text": "- Midjourney"
    },
    {
        "text": "_"
    },
    {
        "text": "3D"
    },
    {
        "text": "3D"
    },
    {
        "text": "3D"
    },
    {
        "text": "-"
    },
    {
        "text": "-"
    },
    {
        "text": "9 -"
    },
    {
        "text": "4"
    },
    {
        "text": "3D"
    },
    {
        "text": "3D"
    },
    {
        "text": "- 3D"
    },
    {
        "text": "9"
    },
    {
        "text": "1"
    },
    {
        "text": "3D"
    },
    {
        "text": "9"
    },
    {
        "text": "2"
    },
    {
        "text": "9"
    },
    {
        "text": "3"
    },
    {
        "text": "9"
    },
    {
        "text": "5"
    },
    {
        "text": "9"
    },
    {
        "text": "6"
    },
    {
        "text": "9"
    },
    {
        "text": "7"
    },
    {
        "text": "9"
    },
    {
        "text": "8"
    },
    {
        "text": "9"
    },
    {
        "text": "9"
    },
    {
        "text": "3D ,"
    },
    {
        "text": ","
    },
    {
        "text": "3"
    },
    {
        "text": "1"
    },
    {
        "text": "3"
    },
    {
        "text": "2"
    },
    {
        "text": "3"
    },
    {
        "text": "3"
    },
    {
        "text": "4"
    },
    {
        "text": "1"
    },
    {
        "text": "4"
    },
    {
        "text": "2"
    },
    {
        "text": "4"
    },
    {
        "text": "3"
    },
    {
        "text": "3D"
    },
    {
        "text": "7"
    },
    {
        "text": "1"
    },
    {
        "text": "7"
    },
    {
        "text": "2"
    },
    {
        "text": "7"
    },
    {
        "text": "3"
    },
    {
        "text": "OK?"
    },
    {
        "text": "- 9"
    },
    {
        "text": "- 4"
    },
    {
        "text": "9"
    },
    {
        "text": "1"
    },
    {
        "text": "9"
    },
    {
        "text": "2"
    },
    {
        "text": "9"
    },
    {
        "text": "3"
    },
    {
        "text": "9"
    },
    {
        "text": "4"
    },
    {
        "text": "9"
    },
    {
        "text": "5"
    },
    {
        "text": "9"
    },
    {
        "text": "6"
    },
    {
        "text": "9"
    },
    {
        "text": "7"
    },
    {
        "text": "- ,"
    },
    {
        "text": ","
    },
    {
        "text": "3D"
    },
    {
        "text": "GPT"
    },
    {
        "text": "-"
    },
    {
        "text": "API"
    },
    {
        "text": "MindOS -"
    },
    {
        "text": "workflow"
    },
    {
        "text": "- MindOS"
    },
    {
        "text": "-,"
    },
    {
        "text": "Define the Block class"
    },
    {
        "text": "Create instances of objects for each block"
    },
    {
        "text": "Connect the blocks together"
    },
    {
        "text": ", -"
    },
    {
        "text": "Blockconnectconnections"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", , -"
    },
    {
        "text": "Block"
    },
    {
        "text": "J"
    },
    {
        "text": "S"
    },
    {
        "text": "O"
    },
    {
        "text": "N"
    },
    {
        "text": "Y"
    },
    {
        "text": "A"
    },
    {
        "text": "M"
    },
    {
        "text": "L"
    },
    {
        "text": "X"
    },
    {
        "text": "Nata"
    },
    {
        "text": "B"
    },
    {
        "text": "P"
    },
    {
        "text": "D"
    },
    {
        "text": "Python"
    },
    {
        "text": "Java"
    },
    {
        "text": "Script"
    },
    {
        "text": "Input"
    },
    {
        "text": "Name"
    },
    {
        "text": "Text"
    },
    {
        "text": "Dropdown"
    },
    {
        "text": "Personality"
    },
    {
        "text": "Choice"
    },
    {
        "text": "Friendly"
    },
    {
        "text": "Professional"
    },
    {
        "text": "Funny"
    },
    {
        "text": "Button"
    },
    {
        "text": "Create"
    },
    {
        "text": "Action"
    },
    {
        "text": "Label"
    },
    {
        "text": "Status"
    },
    {
        "text": "Genius"
    },
    {
        "text": "G"
    },
    {
        "text": "I"
    },
    {
        "text": "W"
    },
    {
        "text": "Workflow Engine"
    },
    {
        "text": "Company"
    },
    {
        "text": "Serper News I"
    },
    {
        "text": "Searching"
    },
    {
        "text": "List"
    },
    {
        "text": "Interpreting"
    },
    {
        "text": "Pass"
    },
    {
        "text": "Intergrade"
    },
    {
        "text": "T"
    },
    {
        "text": "Max"
    },
    {
        "text": "News"
    },
    {
        "text": "Above"
    },
    {
        "text": "News Title"
    },
    {
        "text": "Potential Impact"
    },
    {
        "text": "Generating"
    },
    {
        "text": "Markdown"
    },
    {
        "text": "U"
    },
    {
        "text": "R"
    },
    {
        "text": "H"
    },
    {
        "text": "Writing"
    },
    {
        "text": "Vg"
    },
    {
        "text": "Ey"
    },
    {
        "text": "Placeholder"
    },
    {
        "text": "Enter"
    },
    {
        "text": "Connected"
    },
    {
        "text": "Options"
    },
    {
        "text": "Random"
    },
    {
        "text": "Value"
    },
    {
        "text": "None"
    },
    {
        "text": "Please"
    },
    {
        "text": "Your Genius"
    },
    {
        "text": "Something"
    },
    {
        "text": "C"
    },
    {
        "text": "E"
    },
    {
        "text": "Is Name"
    },
    {
        "text": "Yes"
    },
    {
        "text": "F"
    },
    {
        "text": "No"
    },
    {
        "text": "Is Personality Random"
    },
    {
        "text": "Pick"
    },
    {
        "text": "Create Genius"
    },
    {
        "text": "Is"
    },
    {
        "text": "K"
    },
    {
        "text": "Is Personality"
    },
    {
        "text": "Create A"
    },
    {
        "text": "Your A"
    },
    {
        "text": "Type"
    },
    {
        "text": "Bing"
    },
    {
        "text": "Miro"
    },
    {
        "text": "Company Name"
    },
    {
        "text": "Link List"
    },
    {
        "text": "Summary List"
    },
    {
        "text": "Final Report"
    },
    {
        "text": "Mind"
    },
    {
        "text": "Sly"
    },
    {
        "text": "Start"
    },
    {
        "text": "Gather Location Information"
    },
    {
        "text": "Retrieve Weather Data"
    },
    {
        "text": "Process Weather Data"
    },
    {
        "text": "Generate Weather Update"
    },
    {
        "text": "Provide Weather Update"
    },
    {
        "text": "End"
    },
    {
        "text": "Prompt"
    },
    {
        "text": "Retrieve"
    },
    {
        "text": "Process"
    },
    {
        "text": "Generate"
    },
    {
        "text": "The"
    },
    {
        "text": "Humidity"
    },
    {
        "text": "Provide"
    },
    {
        "text": "Weather"
    },
    {
        "text": "Layer"
    },
    {
        "text": "View"
    },
    {
        "text": "To"
    },
    {
        "text": "Leaflet"
    },
    {
        "text": "Certainly"
    },
    {
        "text": "Let"
    },
    {
        "text": "Warehouse Management System"
    },
    {
        "text": "S Skill Overview"
    },
    {
        "text": "A Warehouse Management System"
    },
    {
        "text": "The W"
    },
    {
        "text": "Logic"
    },
    {
        "text": "Flow"
    },
    {
        "text": "S Skill"
    },
    {
        "text": "User Interaction"
    },
    {
        "text": "Warehouse Setup"
    },
    {
        "text": "Inventory Management"
    },
    {
        "text": "Order Management"
    },
    {
        "text": "It"
    },
    {
        "text": "Pack"
    },
    {
        "text": "Shipping"
    },
    {
        "text": "Logistics"
    },
    {
        "text": "Reporting"
    },
    {
        "text": "Analytics"
    },
    {
        "text": "System Integration"
    },
    {
        "text": "Enterprise Resource Planning"
    },
    {
        "text": "Customer Relationship Management"
    },
    {
        "text": "Maintenance"
    },
    {
        "text": "Support"
    },
    {
        "text": "By"
    },
    {
        "text": "Here"
    },
    {
        "text": "The Genius"
    },
    {
        "text": "User Input"
    },
    {
        "text": "Capture"
    },
    {
        "text": "Location Validation"
    },
    {
        "text": "Validate"
    },
    {
        "text": "Use"
    },
    {
        "text": "Weather A"
    },
    {
        "text": "I Integration"
    },
    {
        "text": "Integrate"
    },
    {
        "text": "Handle"
    },
    {
        "text": "Data Processing"
    },
    {
        "text": "Extract"
    },
    {
        "text": "Access"
    },
    {
        "text": "Weather Update Generation"
    },
    {
        "text": "Format"
    },
    {
        "text": "Response Delivery"
    },
    {
        "text": "Error Handling"
    },
    {
        "text": "Implement"
    },
    {
        "text": "Testing"
    },
    {
        "text": "Optimization"
    },
    {
        "text": "Test"
    },
    {
        "text": "Continuously"
    },
    {
        "text": "Remember"
    },
    {
        "text": "Integration"
    },
    {
        "text": "In"
    },
    {
        "text": "P G"
    },
    {
        "text": "The A"
    },
    {
        "text": "Finally"
    },
    {
        "text": "Additionally"
    },
    {
        "text": "You"
    },
    {
        "text": "Choose"
    },
    {
        "text": "Sign"
    },
    {
        "text": "Make"
    },
    {
        "text": "Visualization"
    },
    {
        "text": "With Sly"
    },
    {
        "text": "Workflow Visualization"
    },
    {
        "text": "Use A"
    },
    {
        "text": "Identify"
    },
    {
        "text": "Component Visualization"
    },
    {
        "text": "Arrange"
    },
    {
        "text": "L Template Integration"
    },
    {
        "text": "Convert"
    },
    {
        "text": "Use H"
    },
    {
        "text": "Embed"
    },
    {
        "text": "Web Map Service"
    },
    {
        "text": "The H"
    },
    {
        "text": "The Java"
    },
    {
        "text": "Learn"
    },
    {
        "text": "Ready Player Me"
    },
    {
        "text": "Virtual A"
    },
    {
        "text": "I Being Creation Platform Mind"
    },
    {
        "text": "S Just Launched"
    },
    {
        "text": "Global Closed Beta"
    },
    {
        "text": "Morningstar"
    },
    {
        "text": "Global"
    },
    {
        "text": "Universal Windows Platform"
    },
    {
        "text": "Wikipedia"
    },
    {
        "text": "Universal"
    },
    {
        "text": "Windows"
    },
    {
        "text": "Platform"
    },
    {
        "text": "I Agent Creator Platform Mind"
    },
    {
        "text": "S Launches Open Beta"
    },
    {
        "text": "Tech"
    },
    {
        "text": "Asia"
    },
    {
        "text": "Mindverse A"
    },
    {
        "text": "Metadata"
    },
    {
        "text": "Information"
    },
    {
        "text": "S Security Assertion Markup Language"
    },
    {
        "text": "V"
    },
    {
        "text": "Serverless"
    },
    {
        "text": "Tful"
    },
    {
        "text": "Async"
    },
    {
        "text": "Graph"
    },
    {
        "text": "Q"
    },
    {
        "text": "Data"
    },
    {
        "text": "State"
    },
    {
        "text": "Function"
    },
    {
        "text": "Transition"
    },
    {
        "text": "Constant"
    },
    {
        "text": "Secrets"
    },
    {
        "text": "Context"
    },
    {
        "text": "Workflow Build Process"
    },
    {
        "text": "Anexus Documentation"
    },
    {
        "text": "Anexus"
    },
    {
        "text": "Git"
    },
    {
        "text": "Hub"
    },
    {
        "text": "Workflow Builder"
    },
    {
        "text": "Microsoft Intune"
    },
    {
        "text": "Recognizing"
    },
    {
        "text": "Geniuss"
    },
    {
        "text": "Important"
    },
    {
        "text": "Computer Vision"
    },
    {
        "text": "Computer"
    },
    {
        "text": "Useful"
    },
    {
        "text": "Parse J"
    },
    {
        "text": "Manage"
    },
    {
        "text": "Google Calendar A"
    },
    {
        "text": "Temporary"
    },
    {
        "text": "User"
    },
    {
        "text": "Current"
    },
    {
        "text": "Recent"
    },
    {
        "text": "Past"
    },
    {
        "text": "Interactions"
    },
    {
        "text": "What"
    },
    {
        "text": "How"
    },
    {
        "text": "Machine"
    },
    {
        "text": "Diagrams"
    },
    {
        "text": "Natural Language Processing"
    },
    {
        "text": "Useful C"
    },
    {
        "text": "Call Open"
    },
    {
        "text": "Map A"
    },
    {
        "text": "Google Calendar"
    },
    {
        "text": "Use Google Calendar A"
    },
    {
        "text": "Auth"
    },
    {
        "text": "Long"
    },
    {
        "text": "Combining"
    },
    {
        "text": "Supervised"
    },
    {
        "text": "Neural"
    },
    {
        "text": "Key N"
    },
    {
        "text": "Common"
    },
    {
        "text": "Integrate Open"
    },
    {
        "text": "Process J"
    },
    {
        "text": "Add"
    },
    {
        "text": "Implement O"
    },
    {
        "text": "Store"
    },
    {
        "text": "Follow"
    },
    {
        "text": "Combine"
    },
    {
        "text": "Build"
    },
    {
        "text": "Try Rasa"
    },
    {
        "text": "Dialogflow"
    },
    {
        "text": "For"
    },
    {
        "text": "Facebook Messenger"
    },
    {
        "text": "Slack"
    },
    {
        "text": "Host"
    },
    {
        "text": "Goal"
    },
    {
        "text": "Key"
    },
    {
        "text": "Tasks"
    },
    {
        "text": "Detected"
    },
    {
        "text": "Interaction"
    },
    {
        "text": "Web"
    },
    {
        "text": "Mobile"
    },
    {
        "text": "Hello"
    },
    {
        "text": "Seattle"
    },
    {
        "text": "According"
    },
    {
        "text": "Weather Channel A"
    },
    {
        "text": "Can"
    },
    {
        "text": "Paris"
    },
    {
        "text": "Friday"
    },
    {
        "text": "Absolutely"
    },
    {
        "text": "Based"
    },
    {
        "text": "Trip"
    },
    {
        "text": "Advisor"
    },
    {
        "text": "Google Maps"
    },
    {
        "text": "Le Meurice Alain Ducasse"
    },
    {
        "text": "They"
    },
    {
        "text": "Avant Comptoir"
    },
    {
        "text": "Mer"
    },
    {
        "text": "Charming"
    },
    {
        "text": "Saint"
    },
    {
        "text": "Germain"
    },
    {
        "text": "Pr"
    },
    {
        "text": "Le Caf"
    },
    {
        "text": "Homme"
    },
    {
        "text": "Elegant"
    },
    {
        "text": "Mus"
    },
    {
        "text": "Natural"
    },
    {
        "text": "Some"
    },
    {
        "text": "Enable"
    },
    {
        "text": "Connect"
    },
    {
        "text": "Algorithms"
    },
    {
        "text": "Conversational A"
    },
    {
        "text": "This"
    },
    {
        "text": "Intent"
    },
    {
        "text": "Utterances"
    },
    {
        "text": "My Genius"
    },
    {
        "text": "Entities"
    },
    {
        "text": "Thank"
    },
    {
        "text": "S Geniuss"
    },
    {
        "text": "Initialize"
    },
    {
        "text": "Fine"
    },
    {
        "text": "Iteratively"
    },
    {
        "text": "Evaluate"
    },
    {
        "text": "Retrain"
    },
    {
        "text": "Messenger"
    },
    {
        "text": "Publish"
    },
    {
        "text": "Monitor"
    },
    {
        "text": "Analyze"
    },
    {
        "text": "Collect"
    },
    {
        "text": "Update"
    },
    {
        "text": "Main"
    },
    {
        "text": "Italian"
    },
    {
        "text": "Los Angeles"
    },
    {
        "text": "Pasta Sisters"
    },
    {
        "text": "Osteria Mozza"
    },
    {
        "text": "Felix Trattoria"
    },
    {
        "text": "Schedule"
    },
    {
        "text": "Move"
    },
    {
        "text": "Cancel"
    },
    {
        "text": "Bot"
    },
    {
        "text": "Hi"
    },
    {
        "text": "John Doe"
    },
    {
        "text": "Likes"
    },
    {
        "text": "Website"
    },
    {
        "text": "Android"
    },
    {
        "text": "Amazon Alexa"
    },
    {
        "text": "Google Assistant"
    },
    {
        "text": "Number"
    },
    {
        "text": "Conversation"
    },
    {
        "text": "Entity"
    },
    {
        "text": "Chatbase"
    },
    {
        "text": "Dashbot"
    },
    {
        "text": "Bespoken Analytics"
    },
    {
        "text": "Chatlytics"
    },
    {
        "text": "Review"
    },
    {
        "text": "Retrain N"
    },
    {
        "text": "Active"
    },
    {
        "text": "Reinforcement"
    },
    {
        "text": "Transfer"
    },
    {
        "text": "Serverless Workflow"
    },
    {
        "text": "States"
    },
    {
        "text": "Functions"
    },
    {
        "text": "S Lambda"
    },
    {
        "text": "Events"
    },
    {
        "text": "Error"
    },
    {
        "text": "Compensation"
    },
    {
        "text": "Table"
    },
    {
        "text": "Contents"
    },
    {
        "text": "Why"
    },
    {
        "text": "Focus"
    },
    {
        "text": "Workflow"
    },
    {
        "text": "Using"
    },
    {
        "text": "Using Functions"
    },
    {
        "text": "Tful Service Invocations"
    },
    {
        "text": "Async A"
    },
    {
        "text": "I Service Invocations"
    },
    {
        "text": "C Service Invocations"
    },
    {
        "text": "L Service Invocations"
    },
    {
        "text": "Invoking"
    },
    {
        "text": "L Query"
    },
    {
        "text": "L Mutation"
    },
    {
        "text": "Data Service Invocations"
    },
    {
        "text": "Creating"
    },
    {
        "text": "Data Function Definition"
    },
    {
        "text": "Expression Evaluation"
    },
    {
        "text": "Defining"
    },
    {
        "text": "Each State"
    },
    {
        "text": "Properties Definition"
    },
    {
        "text": "On"
    },
    {
        "text": "Events Definition"
    },
    {
        "text": "Ref Definition"
    },
    {
        "text": "Sub"
    },
    {
        "text": "Produced"
    },
    {
        "text": "Retry"
    },
    {
        "text": "Automatic"
    },
    {
        "text": "Exec"
    },
    {
        "text": "Timeout Definition"
    },
    {
        "text": "Active States"
    },
    {
        "text": "Unrecoverable"
    },
    {
        "text": "Continuing"
    },
    {
        "text": "Execution"
    },
    {
        "text": "Continue"
    },
    {
        "text": "As"
    },
    {
        "text": "Comparison"
    },
    {
        "text": "The Serverless Workflow"
    },
    {
        "text": "Workflows"
    },
    {
        "text": "Selecting"
    },
    {
        "text": "Portability"
    },
    {
        "text": "Having"
    },
    {
        "text": "Serverless Workflow Wiki"
    },
    {
        "text": "Cloud"
    },
    {
        "text": "Open"
    },
    {
        "text": "Definitions"
    },
    {
        "text": "Workflow J"
    },
    {
        "text": "N Schema"
    },
    {
        "text": "Software Development Kits"
    },
    {
        "text": "Ks"
    },
    {
        "text": "Go"
    },
    {
        "text": "Typescript"
    },
    {
        "text": "Set"
    },
    {
        "text": "Workflow Extensions"
    },
    {
        "text": "Key Performance Indicators"
    },
    {
        "text": "Rate Limiting"
    },
    {
        "text": "Simulation"
    },
    {
        "text": "Tracing"
    },
    {
        "text": "Technology Compatibility Kit"
    },
    {
        "text": "Following"
    },
    {
        "text": "Workflow Definition Structureand"
    },
    {
        "text": "Workflow Model It"
    },
    {
        "text": "Their"
    },
    {
        "text": "Runtimes"
    },
    {
        "text": "Depending"
    },
    {
        "text": "Each"
    },
    {
        "text": "Timeout"
    },
    {
        "text": "Other"
    },
    {
        "text": "Reusable"
    },
    {
        "text": "Errors"
    },
    {
        "text": "Definition"
    },
    {
        "text": "When"
    },
    {
        "text": "State Data"
    },
    {
        "text": "These"
    },
    {
        "text": "Multiple"
    },
    {
        "text": "Reference"
    },
    {
        "text": "Must"
    },
    {
        "text": "If"
    },
    {
        "text": "There"
    },
    {
        "text": "Click"
    },
    {
        "text": "N\tY"
    },
    {
        "text": "Filter"
    },
    {
        "text": "Orders"
    },
    {
        "text": "Results"
    },
    {
        "text": "Like"
    },
    {
        "text": "Once"
    },
    {
        "text": "Data\tWorkflow"
    },
    {
        "text": "Results\tIf"
    },
    {
        "text": "Default"
    },
    {
        "text": "Select"
    },
    {
        "text": "We"
    },
    {
        "text": "Ref"
    },
    {
        "text": "And"
    },
    {
        "text": "Pasta"
    },
    {
        "text": "Types"
    },
    {
        "text": "Now"
    },
    {
        "text": "Buy"
    },
    {
        "text": "At"
    },
    {
        "text": "With"
    },
    {
        "text": "Data\tIf"
    },
    {
        "text": "Allows"
    },
    {
        "text": "All"
    },
    {
        "text": "Note"
    },
    {
        "text": "Only"
    },
    {
        "text": "As Event"
    },
    {
        "text": "Greet"
    },
    {
        "text": "Customers"
    },
    {
        "text": "Greet Customers"
    },
    {
        "text": "Version"
    },
    {
        "text": "Wait"
    },
    {
        "text": "Customer"
    },
    {
        "text": "Arrive"
    },
    {
        "text": "Refs"
    },
    {
        "text": "Arrives"
    },
    {
        "text": "Info"
    },
    {
        "text": "Message"
    },
    {
        "text": "Result"
    },
    {
        "text": "Greeting"
    },
    {
        "text": "Hola"
    },
    {
        "text": "Hallo"
    },
    {
        "text": "Goodbye"
    },
    {
        "text": "Adi"
    },
    {
        "text": "Auf Wiedersehen"
    },
    {
        "text": "John Michaels"
    },
    {
        "text": "Some Street"
    },
    {
        "text": "City"
    },
    {
        "text": "Country"
    },
    {
        "text": "Its"
    },
    {
        "text": "Before"
    },
    {
        "text": "Time"
    },
    {
        "text": "Hola John Michaels"
    },
    {
        "text": "After"
    },
    {
        "text": "Event State Completes Execution"
    },
    {
        "text": "Because"
    },
    {
        "text": "Namely"
    },
    {
        "text": "Consumed"
    },
    {
        "text": "Merging"
    },
    {
        "text": "John"
    },
    {
        "text": "Jane"
    },
    {
        "text": "Michael"
    },
    {
        "text": "Referencethe"
    },
    {
        "text": "I Specification"
    },
    {
        "text": "Order"
    },
    {
        "text": "Confirmation"
    },
    {
        "text": "Send"
    },
    {
        "text": "Confirm"
    },
    {
        "text": "Streetlights A"
    },
    {
        "text": "The Smartylighting Streetlights A"
    },
    {
        "text": "Apache"
    },
    {
        "text": "Inform"
    },
    {
        "text": "Id"
    },
    {
        "text": "Light"
    },
    {
        "text": "Measured"
    },
    {
        "text": "Date"
    },
    {
        "text": "Measurements"
    },
    {
        "text": "Operation"
    },
    {
        "text": "Also"
    },
    {
        "text": "Our"
    },
    {
        "text": "Publish Measurements"
    },
    {
        "text": "Publish Light Measurements"
    },
    {
        "text": "Similar"
    },
    {
        "text": "For R"
    },
    {
        "text": "Protocol Buffers"
    },
    {
        "text": "Service"
    },
    {
        "text": "Empty"
    },
    {
        "text": "Users"
    },
    {
        "text": "Request"
    },
    {
        "text": "Role"
    },
    {
        "text": "Method"
    },
    {
        "text": "Query"
    },
    {
        "text": "Pet"
    },
    {
        "text": "Int"
    },
    {
        "text": "Mutation"
    },
    {
        "text": "Treat"
    },
    {
        "text": "String"
    },
    {
        "text": "G A G"
    },
    {
        "text": "L Q"
    },
    {
        "text": "One"
    },
    {
        "text": "Which"
    },
    {
        "text": "Snuffles"
    },
    {
        "text": "L M"
    },
    {
        "text": "Likewise"
    },
    {
        "text": "Sadaharu"
    },
    {
        "text": "Dog"
    },
    {
        "text": "Years"
    },
    {
        "text": "Of"
    },
    {
        "text": "Birth"
    },
    {
        "text": "Expressions"
    },
    {
        "text": "L Subscriptions"
    },
    {
        "text": "Functions Definitions"
    },
    {
        "text": "G A"
    },
    {
        "text": "N O"
    },
    {
        "text": "A F"
    },
    {
        "text": "N D"
    },
    {
        "text": "Persons"
    },
    {
        "text": "Person"
    },
    {
        "text": "Detail"
    },
    {
        "text": "Serverless Workflow O"
    },
    {
        "text": "Data Json"
    },
    {
        "text": "Expression"
    },
    {
        "text": "Adult"
    },
    {
        "text": "Minor"
    },
    {
        "text": "Serverless Workflowcan"
    },
    {
        "text": "State Data Filters"
    },
    {
        "text": "Check"
    },
    {
        "text": "Applicant"
    },
    {
        "text": "Conditions"
    },
    {
        "text": "Approve"
    },
    {
        "text": "Application"
    },
    {
        "text": "Reject"
    },
    {
        "text": "Condition"
    },
    {
        "text": "Increment Count Function"
    },
    {
        "text": "Initialize Count"
    },
    {
        "text": "Increment Count"
    },
    {
        "text": "Just"
    },
    {
        "text": "Later"
    },
    {
        "text": "State Data Filtering"
    },
    {
        "text": "Lang"
    },
    {
        "text": "Where"
    },
    {
        "text": "Expr"
    },
    {
        "text": "Func"
    },
    {
        "text": "Address"
    },
    {
        "text": "Naist"
    },
    {
        "text": "Nara"
    },
    {
        "text": "Code"
    },
    {
        "text": "Numbers"
    },
    {
        "text": "Phone"
    },
    {
        "text": "Switch"
    },
    {
        "text": "My"
    },
    {
        "text": "Sample"
    },
    {
        "text": "Sample Workflow"
    },
    {
        "text": "Domain"
    },
    {
        "text": "Schema\tUsed"
    },
    {
        "text": "Output"
    },
    {
        "text": "Version\tServerless Workflow"
    },
    {
        "text": "Lang\tIdentifies"
    },
    {
        "text": "Defines"
    },
    {
        "text": "Active\tIf"
    },
    {
        "text": "Instance"
    },
    {
        "text": "Retries\tIf"
    },
    {
        "text": "Starting"
    },
    {
        "text": "Schema"
    },
    {
        "text": "Validation"
    },
    {
        "text": "Both"
    },
    {
        "text": "Example"
    },
    {
        "text": "Json"
    },
    {
        "text": "Yaml"
    },
    {
        "text": "World"
    },
    {
        "text": "My Basic Auth"
    },
    {
        "text": "An Auth"
    },
    {
        "text": "Referenced"
    },
    {
        "text": "Workflow Functions J"
    },
    {
        "text": "Attribute"
    },
    {
        "text": "Workflow Events J"
    },
    {
        "text": "Setting"
    },
    {
        "text": "Name\tDescription\tConsumes"
    },
    {
        "text": "Produces"
    },
    {
        "text": "Executes"
    },
    {
        "text": "Handles"
    },
    {
        "text": "Makes"
    },
    {
        "text": "Event\tDefine"
    },
    {
        "text": "Operation\tExecute"
    },
    {
        "text": "Switch\tDefine"
    },
    {
        "text": "Sleep\tSleep"
    },
    {
        "text": "Parallel\tCauses"
    },
    {
        "text": "Inject\tInject"
    },
    {
        "text": "Each\tParallel"
    },
    {
        "text": "Callback\tManual"
    },
    {
        "text": "T S"
    },
    {
        "text": "Unique State"
    },
    {
        "text": "Events\tDefine"
    },
    {
        "text": "Filter\tState"
    },
    {
        "text": "Next"
    },
    {
        "text": "Errors\tStates"
    },
    {
        "text": "By\tUnique"
    },
    {
        "text": "Vitals"
    },
    {
        "text": "High"
    },
    {
        "text": "Body"
    },
    {
        "text": "Temperature"
    },
    {
        "text": "Tylenol"
    },
    {
        "text": "Blood"
    },
    {
        "text": "Pressure"
    },
    {
        "text": "Nurse"
    },
    {
        "text": "Respiration"
    },
    {
        "text": "Rate"
    },
    {
        "text": "Pulmonologist"
    },
    {
        "text": "N S"
    },
    {
        "text": "Mode\tShould"
    },
    {
        "text": "Actions"
    },
    {
        "text": "Compensation\tIf"
    },
    {
        "text": "Mode"
    },
    {
        "text": "Rejection"
    },
    {
        "text": "Email"
    },
    {
        "text": "H S"
    },
    {
        "text": "Conditions\tDefined"
    },
    {
        "text": "Condition\tDefault"
    },
    {
        "text": "Visa"
    },
    {
        "text": "Approved"
    },
    {
        "text": "Rejected"
    },
    {
        "text": "Decision"
    },
    {
        "text": "Because A"
    },
    {
        "text": "P S"
    },
    {
        "text": "Duration"
    },
    {
        "text": "Sleep"
    },
    {
        "text": "Five"
    },
    {
        "text": "Seconds"
    },
    {
        "text": "Get"
    },
    {
        "text": "Job"
    },
    {
        "text": "L S"
    },
    {
        "text": "Type\tOption"
    },
    {
        "text": "Completed\tUsed"
    },
    {
        "text": "Completion"
    },
    {
        "text": "Least"
    },
    {
        "text": "Parallel"
    },
    {
        "text": "Branch"
    },
    {
        "text": "Param"
    },
    {
        "text": "Two"
    },
    {
        "text": "Completed"
    },
    {
        "text": "Exceptions"
    },
    {
        "text": "Inject"
    },
    {
        "text": "Simple"
    },
    {
        "text": "Doe"
    },
    {
        "text": "Street"
    },
    {
        "text": "Marry"
    },
    {
        "text": "Allice"
    },
    {
        "text": "Kelly"
    },
    {
        "text": "Mill"
    },
    {
        "text": "Collection\tWorkflow"
    },
    {
        "text": "Param\tName"
    },
    {
        "text": "Collection"
    },
    {
        "text": "Size\tSpecifies"
    },
    {
        "text": "Used"
    },
    {
        "text": "Specifies"
    },
    {
        "text": "Provision"
    },
    {
        "text": "However"
    },
    {
        "text": "Size"
    },
    {
        "text": "Sizeis"
    },
    {
        "text": "In J"
    },
    {
        "text": "Buyer"
    },
    {
        "text": "State For"
    },
    {
        "text": "The For"
    },
    {
        "text": "So"
    },
    {
        "text": "Workflow Timeoutssection"
    },
    {
        "text": "K S"
    },
    {
        "text": "Ref\tReferences"
    },
    {
        "text": "Filter\tCallback"
    },
    {
        "text": "By\tUniaue"
    },
    {
        "text": "Credit"
    },
    {
        "text": "Microservice"
    },
    {
        "text": "While"
    },
    {
        "text": "The Callback"
    },
    {
        "text": "Callback"
    },
    {
        "text": "Unique"
    },
    {
        "text": "Api"
    },
    {
        "text": "Products"
    },
    {
        "text": "Take"
    },
    {
        "text": "Docker"
    },
    {
        "text": "Parameters"
    },
    {
        "text": "Secured"
    },
    {
        "text": "Invocation"
    },
    {
        "text": "My O"
    },
    {
        "text": "C Auth"
    },
    {
        "text": "My Api Key Auth"
    },
    {
        "text": "My Api"
    },
    {
        "text": "Key Auth"
    },
    {
        "text": "Mundo"
    },
    {
        "text": "T D"
    },
    {
        "text": "Define"
    },
    {
        "text": "Only\tIf"
    },
    {
        "text": "Otherwise"
    },
    {
        "text": "Correlating"
    },
    {
        "text": "The Cloud"
    },
    {
        "text": "Extension Context Attributesand"
    },
    {
        "text": "Extension"
    },
    {
        "text": "System"
    },
    {
        "text": "Heart"
    },
    {
        "text": "Reading"
    },
    {
        "text": "Z"
    },
    {
        "text": "Urgent"
    },
    {
        "text": "Care"
    },
    {
        "text": "H D"
    },
    {
        "text": "Basic"
    },
    {
        "text": "Bearer"
    },
    {
        "text": "See"
    },
    {
        "text": "Basic Authentication"
    },
    {
        "text": "The Basic"
    },
    {
        "text": "Contains"
    },
    {
        "text": "Bearer Authentication"
    },
    {
        "text": "Authentication"
    },
    {
        "text": "Type\tDefines"
    },
    {
        "text": "Credentials"
    },
    {
        "text": "Exchange"
    },
    {
        "text": "Id\tString"
    },
    {
        "text": "Secret\tWorkflow"
    },
    {
        "text": "Array"
    },
    {
        "text": "Owner"
    },
    {
        "text": "Token\tString"
    },
    {
        "text": "Subject\tString"
    },
    {
        "text": "Issuer\tString"
    },
    {
        "text": "Name\tCloud"
    },
    {
        "text": "Event Extension Context Attribute"
    },
    {
        "text": "Value\tCloud"
    },
    {
        "text": "S D"
    },
    {
        "text": "Refs\tReferences"
    },
    {
        "text": "Mode\tSpecifies"
    },
    {
        "text": "Filter\tEvent"
    },
    {
        "text": "Call"
    },
    {
        "text": "Unique Action"
    },
    {
        "text": "Retryable"
    },
    {
        "text": "Errors\tList"
    },
    {
        "text": "Retries"
    },
    {
        "text": "Filter\tAction"
    },
    {
        "text": "Finalize Application Action"
    },
    {
        "text": "W A"
    },
    {
        "text": "Often"
    },
    {
        "text": "F D"
    },
    {
        "text": "Name\tName"
    },
    {
        "text": "Arguments"
    },
    {
        "text": "Set\tUsed"
    },
    {
        "text": "Funds"
    },
    {
        "text": "Availabe"
    },
    {
        "text": "Amount"
    },
    {
        "text": "Ref\tReference"
    },
    {
        "text": "Timeout\tMaximum"
    },
    {
        "text": "Attributes\tAdd"
    },
    {
        "text": "Vet"
    },
    {
        "text": "Appointment"
    },
    {
        "text": "Attributes"
    },
    {
        "text": "Id\tSub"
    },
    {
        "text": "Parent"
    },
    {
        "text": "Complete\tIf"
    },
    {
        "text": "Usually"
    },
    {
        "text": "Subflows"
    },
    {
        "text": "Complete"
    },
    {
        "text": "R D"
    },
    {
        "text": "Refs\tReference"
    },
    {
        "text": "Item"
    },
    {
        "text": "Issue"
    },
    {
        "text": "Refund"
    },
    {
        "text": "Refsproperty"
    },
    {
        "text": "Usable"
    },
    {
        "text": "Y D"
    },
    {
        "text": "Attempts\tMaximum"
    },
    {
        "text": "Delay\tMaximum"
    },
    {
        "text": "Static"
    },
    {
        "text": "Float"
    },
    {
        "text": "Strat"
    },
    {
        "text": "Attempts"
    },
    {
        "text": "Timeout Errors Strategy"
    },
    {
        "text": "Adding"
    },
    {
        "text": "Alternatively"
    },
    {
        "text": "Delay"
    },
    {
        "text": "State\tName"
    },
    {
        "text": "Events\tArray"
    },
    {
        "text": "Eval"
    },
    {
        "text": "E D"
    },
    {
        "text": "A C"
    },
    {
        "text": "Eighteen"
    },
    {
        "text": "E E"
    },
    {
        "text": "T C"
    },
    {
        "text": "Upon"
    },
    {
        "text": "E B"
    },
    {
        "text": "E H"
    },
    {
        "text": "G E"
    },
    {
        "text": "Startingstate"
    },
    {
        "text": "Scheduled"
    },
    {
        "text": "Cron"
    },
    {
        "text": "Declares"
    },
    {
        "text": "Timezone"
    },
    {
        "text": "Unlike"
    },
    {
        "text": "March"
    },
    {
        "text": "May"
    },
    {
        "text": "O I"
    },
    {
        "text": "For I"
    },
    {
        "text": "Until"
    },
    {
        "text": "Eventdefining"
    },
    {
        "text": "Until\tSpecific"
    },
    {
        "text": "November"
    },
    {
        "text": "S Eastern Standard Timeas"
    },
    {
        "text": "D D"
    },
    {
        "text": "As\tDefines"
    },
    {
        "text": "Producing"
    },
    {
        "text": "Being"
    },
    {
        "text": "Implementers"
    },
    {
        "text": "Workflow Compensationsection"
    },
    {
        "text": "L P"
    },
    {
        "text": "Specifying"
    },
    {
        "text": "Additional"
    },
    {
        "text": "Implementations"
    },
    {
        "text": "My Test Workflow"
    },
    {
        "text": "My First State"
    },
    {
        "text": "Production"
    },
    {
        "text": "Sales"
    },
    {
        "text": "Py Test Workflow"
    },
    {
        "text": "Unknown"
    },
    {
        "text": "Within"
    },
    {
        "text": "Illegal"
    },
    {
        "text": "Runtime"
    },
    {
        "text": "Known"
    },
    {
        "text": "Referencing"
    },
    {
        "text": "Server"
    },
    {
        "text": "Retrying"
    },
    {
        "text": "Regardless"
    },
    {
        "text": "First"
    },
    {
        "text": "Strategy"
    },
    {
        "text": "Second"
    },
    {
        "text": "Three"
    },
    {
        "text": "Third"
    },
    {
        "text": "Do"
    },
    {
        "text": "Not"
    },
    {
        "text": "Fourth"
    },
    {
        "text": "Strategyretry"
    },
    {
        "text": "Since"
    },
    {
        "text": "Timeout\tWorkflow"
    },
    {
        "text": "Timeout\tActions"
    },
    {
        "text": "Timeout\tBranch"
    },
    {
        "text": "Timeout\tDefault"
    },
    {
        "text": "If Object"
    },
    {
        "text": "Before\tName"
    },
    {
        "text": "Inject States"
    },
    {
        "text": "The Event"
    },
    {
        "text": "Compensating"
    },
    {
        "text": "Instead"
    },
    {
        "text": "New"
    },
    {
        "text": "Purchase"
    },
    {
        "text": "Debit"
    },
    {
        "text": "Cancellation"
    },
    {
        "text": "State C"
    },
    {
        "text": "State A"
    },
    {
        "text": "Eachstates"
    },
    {
        "text": "Serverless Workflow D"
    },
    {
        "text": "Id\tUnique"
    },
    {
        "text": "Overwrites"
    },
    {
        "text": "In Serverless Workflow D"
    },
    {
        "text": "Ref Definitionin"
    },
    {
        "text": "Versioning"
    },
    {
        "text": "Versions"
    },
    {
        "text": "Top"
    },
    {
        "text": "Constants"
    },
    {
        "text": "Translations"
    },
    {
        "text": "Serbian"
    },
    {
        "text": "Spanish"
    },
    {
        "text": "French"
    },
    {
        "text": "Azure"
    },
    {
        "text": "Process Sales Orders"
    },
    {
        "text": "Author Name"
    },
    {
        "text": "Team Name"
    },
    {
        "text": "Logging"
    },
    {
        "text": "Labels"
    },
    {
        "text": "Model"
    },
    {
        "text": "Even"
    },
    {
        "text": "That"
    },
    {
        "text": "New Extension Request"
    },
    {
        "text": "Apache License"
    },
    {
        "text": "Passing"
    },
    {
        "text": "Filters"
    },
    {
        "text": "Custom"
    },
    {
        "text": "Related Definitions"
    },
    {
        "text": "Py"
    },
    {
        "text": "Torch"
    },
    {
        "text": "N Editor Online"
    },
    {
        "text": "Pandas Data"
    },
    {
        "text": "Frame"
    },
    {
        "text": "True"
    },
    {
        "text": "Faker"
    },
    {
        "text": "Tensor"
    },
    {
        "text": "Flow Dataset"
    },
    {
        "text": "Mary"
    },
    {
        "text": "Steven"
    },
    {
        "text": "David"
    },
    {
        "text": "Sophia"
    },
    {
        "text": "Alice"
    },
    {
        "text": "Lee"
    },
    {
        "text": "Smith"
    },
    {
        "text": "Richards"
    },
    {
        "text": "Willis"
    },
    {
        "text": "Brooks"
    },
    {
        "text": "Green"
    },
    {
        "text": "Best"
    },
    {
        "text": "Local"
    },
    {
        "text": "Sports"
    },
    {
        "text": "Summer"
    },
    {
        "text": "Latest"
    },
    {
        "text": "Donna Howard"
    },
    {
        "text": "Mike Scott"
    },
    {
        "text": "Lisa Brown"
    },
    {
        "text": "Tom Wilson"
    },
    {
        "text": "Julia Bell"
    },
    {
        "text": "Sam Williams"
    },
    {
        "text": "Chris Smith"
    },
    {
        "text": "Tomorrow"
    },
    {
        "text": "Mark"
    },
    {
        "text": "Linda"
    },
    {
        "text": "James"
    },
    {
        "text": "Brown"
    },
    {
        "text": "Davis"
    },
    {
        "text": "Wilson"
    },
    {
        "text": "Movie"
    },
    {
        "text": "Amanda Clark"
    },
    {
        "text": "David Lee"
    },
    {
        "text": "Ryan Bell"
    },
    {
        "text": "Pandas"
    },
    {
        "text": "Bob"
    },
    {
        "text": "Charlie"
    },
    {
        "text": "Football"
    },
    {
        "text": "Kate"
    },
    {
        "text": "Sam"
    },
    {
        "text": "Dave"
    },
    {
        "text": "Fashion"
    },
    {
        "text": "Peter"
    },
    {
        "text": "Chris"
    },
    {
        "text": "Emma"
    },
    {
        "text": "Alex"
    },
    {
        "text": "Mike"
    },
    {
        "text": "Dataset"
    },
    {
        "text": "Pickle"
    },
    {
        "text": "Word"
    },
    {
        "text": "Vec"
    },
    {
        "text": "Keras"
    },
    {
        "text": "Logistic"
    },
    {
        "text": "Regression"
    },
    {
        "text": "Read"
    },
    {
        "text": "Classifies"
    },
    {
        "text": "Recommends"
    },
    {
        "text": "Detects"
    },
    {
        "text": "Chatbot Genius"
    },
    {
        "text": "Clicked"
    },
    {
        "text": "Searched"
    },
    {
        "text": "Uploaded"
    },
    {
        "text": "Logged"
    },
    {
        "text": "Accessed"
    },
    {
        "text": "Downloaded"
    },
    {
        "text": "Supports"
    },
    {
        "text": "Anyone"
    },
    {
        "text": "Need"
    },
    {
        "text": "Microsoft"
    },
    {
        "text": "Visual Studio"
    },
    {
        "text": "Datasets"
    },
    {
        "text": "Right"
    },
    {
        "text": "Data Sources"
    },
    {
        "text": "Solution Explorer"
    },
    {
        "text": "Add New Data Source"
    },
    {
        "text": "Configure"
    },
    {
        "text": "The Dataset Designer"
    },
    {
        "text": "Drag"
    },
    {
        "text": "Preview"
    },
    {
        "text": "Typed Datasets"
    },
    {
        "text": "Typed Dataset"
    },
    {
        "text": "Adapters"
    },
    {
        "text": "Fill"
    },
    {
        "text": "Insert"
    },
    {
        "text": "Delete"
    },
    {
        "text": "Path"
    },
    {
        "text": "Found"
    },
    {
        "text": "Scanned"
    },
    {
        "text": "Lab"
    },
    {
        "text": "Graphviz"
    },
    {
        "text": "The Dockerfile"
    },
    {
        "text": "Dockerfile"
    },
    {
        "text": "Ubuntu"
    },
    {
        "text": "This Docker"
    },
    {
        "text": "Unfortunately I"
    },
    {
        "text": "Graphviz Docker"
    },
    {
        "text": "Specifically"
    },
    {
        "text": "Matplotlib"
    },
    {
        "text": "Scikit"
    },
    {
        "text": "Workflow Description Language"
    },
    {
        "text": "Dockstore"
    },
    {
        "text": "Bio"
    },
    {
        "text": "Cromwell"
    },
    {
        "text": "Mini"
    },
    {
        "text": "Inte"
    },
    {
        "text": "Ri"
    },
    {
        "text": "Sama"
    },
    {
        "text": "Blog"
    },
    {
        "text": "Memory"
    },
    {
        "text": "Catcher"
    },
    {
        "text": "Create New Genius"
    },
    {
        "text": "Subscription"
    },
    {
        "text": "Unlimited"
    },
    {
        "text": "Mo"
    },
    {
        "text": "Tus"
    },
    {
        "text": "Marketplace"
    },
    {
        "text": "Search"
    },
    {
        "text": "Lazarus"
    },
    {
        "text": "Trip Advisor"
    },
    {
        "text": "Stock Analyst"
    },
    {
        "text": "Genie"
    },
    {
        "text": "Product Hunter"
    },
    {
        "text": "Minda"
    },
    {
        "text": "Summa"
    },
    {
        "text": "Link"
    },
    {
        "text": "Youtube"
    },
    {
        "text": "Midjourney Helper"
    },
    {
        "text": "Midjourney"
    },
    {
        "text": "Kexin"
    },
    {
        "text": "Morty"
    },
    {
        "text": "Mindverse"
    },
    {
        "text": "Dream Interpreter"
    },
    {
        "text": "Rap God"
    },
    {
        "text": "Hub Trend Watcher"
    },
    {
        "text": "Wise"
    },
    {
        "text": "Buy Assistant"
    },
    {
        "text": "Amazon"
    },
    {
        "text": "Tutor"
    },
    {
        "text": "Movie Critique"
    },
    {
        "text": "Unnamed"
    },
    {
        "text": "Speak"
    },
    {
        "text": "Buddhism"
    },
    {
        "text": "Genious"
    },
    {
        "text": "Ask"
    },
    {
        "text": "Candy"
    },
    {
        "text": "Babe"
    },
    {
        "text": "Eulaw"
    },
    {
        "text": "Awwsum"
    },
    {
        "text": "Naval"
    },
    {
        "text": "Autism Aware"
    },
    {
        "text": "Thought"
    },
    {
        "text": "Zn"
    },
    {
        "text": "Bell"
    },
    {
        "text": "Crypto"
    },
    {
        "text": "I Genius"
    },
    {
        "text": "Knows U"
    },
    {
        "text": "I Design"
    },
    {
        "text": "P Support"
    },
    {
        "text": "Beer Awards"
    },
    {
        "text": "Genshin"
    },
    {
        "text": "Fan"
    },
    {
        "text": "C Legal Help"
    },
    {
        "text": "Allow Law Genuis"
    },
    {
        "text": "He"
    },
    {
        "text": "Lluvia"
    },
    {
        "text": "Sparrow"
    },
    {
        "text": "Professor"
    },
    {
        "text": "Ele"
    },
    {
        "text": "Guy"
    },
    {
        "text": "Knowall"
    },
    {
        "text": "Idan"
    },
    {
        "text": "Michaelim"
    },
    {
        "text": "The Defect Doctor"
    },
    {
        "text": "K Prints"
    },
    {
        "text": "K Prints Assitant"
    },
    {
        "text": "Congming Da"
    },
    {
        "text": "Game"
    },
    {
        "text": "Master"
    },
    {
        "text": "Dark Souls"
    },
    {
        "text": "Gs"
    },
    {
        "text": "Dr"
    },
    {
        "text": "Adeli"
    },
    {
        "text": "I Geniuses"
    },
    {
        "text": "Geniuses"
    },
    {
        "text": "Featured"
    },
    {
        "text": "Trending"
    },
    {
        "text": "Newest"
    },
    {
        "text": "My Geniuses"
    },
    {
        "text": "Industry Analyst"
    },
    {
        "text": "S Stock Analyst"
    },
    {
        "text": "Template"
    },
    {
        "text": "Persona"
    },
    {
        "text": "Knowledge"
    },
    {
        "text": "Skills"
    },
    {
        "text": "Autonomy"
    },
    {
        "text": "Wisebuy Assistant"
    },
    {
        "text": "I Copilots"
    },
    {
        "text": "Book"
    },
    {
        "text": "Jira"
    },
    {
        "text": "Book A"
    },
    {
        "text": "I Lens"
    },
    {
        "text": "Aktxn"
    },
    {
        "text": "Oh"
    },
    {
        "text": "Vt"
    },
    {
        "text": "S A"
    },
    {
        "text": "I Agent Engine"
    },
    {
        "text": "Enterprise"
    },
    {
        "text": "Pro"
    },
    {
        "text": "I Open"
    },
    {
        "text": "Socket"
    },
    {
        "text": "S Marketplace"
    },
    {
        "text": "I Copilot"
    },
    {
        "text": "Learned"
    },
    {
        "text": "Chat"
    },
    {
        "text": "Chatbot"
    },
    {
        "text": "Avatar"
    },
    {
        "text": "Ready"
    },
    {
        "text": "Player"
    },
    {
        "text": "Me"
    },
    {
        "text": "Picture"
    },
    {
        "text": "Learning Knowledge"
    },
    {
        "text": "Genius Updated"
    },
    {
        "text": "Learning A"
    },
    {
        "text": "Library"
    },
    {
        "text": "Validated"
    },
    {
        "text": "Google"
    },
    {
        "text": "Serper"
    },
    {
        "text": "From Library"
    },
    {
        "text": "Skill"
    },
    {
        "text": "Assistant"
    },
    {
        "text": "Tube"
    },
    {
        "text": "Get Started"
    },
    {
        "text": "Voice"
    },
    {
        "text": "Biography"
    },
    {
        "text": "Add Knowledge"
    },
    {
        "text": "View Knowledge"
    },
    {
        "text": "Edit"
    },
    {
        "text": "Books"
    },
    {
        "text": "Add Skills"
    },
    {
        "text": "View Skills"
    },
    {
        "text": "Google Books A"
    },
    {
        "text": "Content"
    },
    {
        "text": "Accept"
    },
    {
        "text": "Book Search"
    },
    {
        "text": "Authorization"
    },
    {
        "text": "Weather Search"
    },
    {
        "text": "Map"
    },
    {
        "text": "Workflow Book Search"
    },
    {
        "text": "Call A"
    },
    {
        "text": "I Book Search"
    },
    {
        "text": "Book Search Workflow"
    },
    {
        "text": "Else"
    },
    {
        "text": "Add Memory"
    },
    {
        "text": "View Memory"
    },
    {
        "text": "Harry Potter"
    },
    {
        "text": "Philosopher"
    },
    {
        "text": "Stone"
    },
    {
        "text": "The Lord"
    },
    {
        "text": "Rings"
    },
    {
        "text": "Benzinga"
    },
    {
        "text": "Virtual"
    },
    {
        "text": "Creation"
    },
    {
        "text": "Launch"
    },
    {
        "text": "Closed"
    },
    {
        "text": "Beta"
    },
    {
        "text": "D H"
    },
    {
        "text": "Load Data"
    },
    {
        "text": "Find Result"
    },
    {
        "text": "Marketpl"
    },
    {
        "text": "Mind A"
    },
    {
        "text": "Num"
    },
    {
        "text": "Spa"
    },
    {
        "text": "Cy"
    },
    {
        "text": "Twitter"
    },
    {
        "text": "Beautiful"
    },
    {
        "text": "Soup"
    },
    {
        "text": "Selenium"
    },
    {
        "text": "Telegram"
    },
    {
        "text": "Connecting Text"
    },
    {
        "text": "Images"
    },
    {
        "text": "Xiv"
    },
    {
        "text": "Contrastive Language"
    },
    {
        "text": "Image Pre"
    },
    {
        "text": "Image Pretraining"
    },
    {
        "text": "Image Encoder"
    },
    {
        "text": "Text Encoder"
    },
    {
        "text": "Res"
    },
    {
        "text": "Net"
    },
    {
        "text": "Guided Language"
    },
    {
        "text": "Image Diffusion"
    },
    {
        "text": "Generation"
    },
    {
        "text": "Editing"
    },
    {
        "text": "Diffusion"
    },
    {
        "text": "Score"
    },
    {
        "text": "Add Key"
    },
    {
        "text": "Input Keyscontent"
    },
    {
        "text": "Model Name"
    },
    {
        "text": "Turbo"
    },
    {
        "text": "Prompt Template"
    },
    {
        "text": "Iam"
    },
    {
        "text": "Then"
    },
    {
        "text": "Through Discord"
    },
    {
        "text": "Interact"
    },
    {
        "text": "Midjourney Bot"
    },
    {
        "text": "Discord"
    },
    {
        "text": "Command"
    },
    {
        "text": "Commands"
    },
    {
        "text": "The Midjourney Bot"
    },
    {
        "text": "Ratherthan"
    },
    {
        "text": "Show"
    },
    {
        "text": "California"
    },
    {
        "text": "Vibrant"
    },
    {
        "text": "Trial"
    },
    {
        "text": "Jobs"
    },
    {
        "text": "A Job"
    },
    {
        "text": "Fast Time Remaining"
    },
    {
        "text": "Prompt Length"
    },
    {
        "text": "Prompts"
    },
    {
        "text": "Single"
    },
    {
        "text": "Very"
    },
    {
        "text": "Concentrate"
    },
    {
        "text": "Grammar"
    },
    {
        "text": "More"
    },
    {
        "text": "Remove"
    },
    {
        "text": "Fewer"
    },
    {
        "text": "Usecommas"
    },
    {
        "text": "Midjourney Model Version"
    },
    {
        "text": "Want"
    },
    {
        "text": "Think About What Details Matter"
    },
    {
        "text": "Anything"
    },
    {
        "text": "Be"
    },
    {
        "text": "Try"
    },
    {
        "text": "Thinkabout"
    },
    {
        "text": "Subject"
    },
    {
        "text": "Medium"
    },
    {
        "text": "Environment"
    },
    {
        "text": "Narnia"
    },
    {
        "text": "Emerald"
    },
    {
        "text": "Lighting"
    },
    {
        "text": "Color"
    },
    {
        "text": "Mood"
    },
    {
        "text": "Sedate"
    },
    {
        "text": "Composition"
    },
    {
        "text": "Portrait"
    },
    {
        "text": "Use Collective Nouns"
    },
    {
        "text": "Plural"
    },
    {
        "text": "Collective"
    },
    {
        "text": "Parameters Available"
    },
    {
        "text": "Aspect Ratios"
    },
    {
        "text": "Change"
    },
    {
        "text": "Chaos"
    },
    {
        "text": "Higher"
    },
    {
        "text": "Negative"
    },
    {
        "text": "Quality"
    },
    {
        "text": "Repeat"
    },
    {
        "text": "Seed"
    },
    {
        "text": "The Midjourney"
    },
    {
        "text": "Stop"
    },
    {
        "text": "Stopping"
    },
    {
        "text": "Style"
    },
    {
        "text": "Niji Model Version"
    },
    {
        "text": "Stylize"
    },
    {
        "text": "Uplight"
    },
    {
        "text": "Upbeta"
    },
    {
        "text": "Different"
    },
    {
        "text": "Niji"
    },
    {
        "text": "An"
    },
    {
        "text": "Testp"
    },
    {
        "text": "Midjourneyalgorithm"
    },
    {
        "text": "Mid"
    },
    {
        "text": "Journey"
    },
    {
        "text": "Erlenmeyer Flask"
    },
    {
        "text": "Dreamy"
    },
    {
        "text": "Mamiya"
    },
    {
        "text": "Fujifilm Pro"
    },
    {
        "text": "Leica"
    },
    {
        "text": "Kodak"
    },
    {
        "text": "American"
    },
    {
        "text": "Mysteriousadventure"
    },
    {
        "text": "Plants"
    },
    {
        "text": "Fireflies"
    },
    {
        "text": "Pixar"
    },
    {
        "text": "Whatever I"
    },
    {
        "text": "Act"
    },
    {
        "text": "Another"
    },
    {
        "text": "Teenage"
    },
    {
        "text": "Tips"
    },
    {
        "text": "C Painting"
    },
    {
        "text": "Hide Display"
    },
    {
        "text": "Endpoint"
    },
    {
        "text": "Draw"
    },
    {
        "text": "Request Bodyprompt"
    },
    {
        "text": "Drawing"
    },
    {
        "text": "Dream Painting"
    },
    {
        "text": "Test Run"
    },
    {
        "text": "Exit"
    },
    {
        "text": "Io"
    },
    {
        "text": "Chamfer"
    },
    {
        "text": "Block"
    },
    {
        "text": "Blocknameparameterscontentfunctionsconnectconnections"
    },
    {
        "text": "Blockconnectconnections"
    },
    {
        "text": "8241"
    },
    {
        "text": "8252"
    },
    {
        "text": "8244"
    },
    {
        "text": "8245"
    },
    {
        "text": "8246"
    },
    {
        "text": "8250"
    },
    {
        "text": "8256"
    },
    {
        "text": "0"
    },
    {
        "text": "200"
    },
    {
        "text": "8249"
    },
    {
        "text": "8251"
    },
    {
        "text": "8253"
    },
    {
        "text": "8254"
    },
    {
        "text": "8255"
    },
    {
        "text": "8243"
    },
    {
        "text": "23"
    },
    {
        "text": "07"
    },
    {
        "text": "2023"
    },
    {
        "text": "80"
    },
    {
        "text": "82"
    },
    {
        "text": "85"
    },
    {
        "text": "8242"
    },
    {
        "text": "51"
    },
    {
        "text": "505"
    },
    {
        "text": "09"
    },
    {
        "text": "20230420005959"
    },
    {
        "text": "21"
    },
    {
        "text": "11179"
    },
    {
        "text": "2015"
    },
    {
        "text": "61932"
    },
    {
        "text": "20200821"
    },
    {
        "text": "00"
    },
    {
        "text": "104112"
    },
    {
        "text": "64"
    },
    {
        "text": "50"
    },
    {
        "text": "60"
    },
    {
        "text": "111"
    },
    {
        "text": "40"
    },
    {
        "text": "1234"
    },
    {
        "text": "12345"
    },
    {
        "text": "54321"
    },
    {
        "text": "4321"
    },
    {
        "text": "6789"
    },
    {
        "text": "30"
    },
    {
        "text": "20"
    },
    {
        "text": "42"
    },
    {
        "text": "9001"
    },
    {
        "text": "43"
    },
    {
        "text": "18"
    },
    {
        "text": "26"
    },
    {
        "text": "630"
    },
    {
        "text": "0192"
    },
    {
        "text": "0123"
    },
    {
        "text": "4567"
    },
    {
        "text": "8888"
    },
    {
        "text": "8910"
    },
    {
        "text": "8080"
    },
    {
        "text": "8601"
    },
    {
        "text": "15"
    },
    {
        "text": "25"
    },
    {
        "text": "55"
    },
    {
        "text": "5678"
    },
    {
        "text": "9910"
    },
    {
        "text": "2020"
    },
    {
        "text": "01"
    },
    {
        "text": "31"
    },
    {
        "text": "02"
    },
    {
        "text": "110"
    },
    {
        "text": "70"
    },
    {
        "text": "16"
    },
    {
        "text": "100"
    },
    {
        "text": "03"
    },
    {
        "text": "05"
    },
    {
        "text": "2019"
    },
    {
        "text": "45"
    },
    {
        "text": "2021"
    },
    {
        "text": "404"
    },
    {
        "text": "22"
    },
    {
        "text": "32"
    },
    {
        "text": "27"
    },
    {
        "text": "36"
    },
    {
        "text": "29"
    },
    {
        "text": "04"
    },
    {
        "text": "06"
    },
    {
        "text": "08"
    },
    {
        "text": "41"
    },
    {
        "text": "24"
    },
    {
        "text": "28"
    },
    {
        "text": "37"
    },
    {
        "text": "19"
    },
    {
        "text": "1000"
    },
    {
        "text": "8765"
    },
    {
        "text": "34"
    },
    {
        "text": "56"
    },
    {
        "text": "2022"
    },
    {
        "text": "1746675"
    },
    {
        "text": "8081"
    },
    {
        "text": "467431"
    },
    {
        "text": "216719"
    },
    {
        "text": "135215"
    },
    {
        "text": "11988"
    },
    {
        "text": "64712"
    },
    {
        "text": "7607"
    },
    {
        "text": "5398"
    },
    {
        "text": "40811"
    },
    {
        "text": "3088"
    },
    {
        "text": "2726"
    },
    {
        "text": "2784"
    },
    {
        "text": "1524"
    },
    {
        "text": "3482"
    },
    {
        "text": "2164"
    },
    {
        "text": "1693"
    },
    {
        "text": "663"
    },
    {
        "text": "1323"
    },
    {
        "text": "1103"
    },
    {
        "text": "672"
    },
    {
        "text": "912"
    },
    {
        "text": "1170"
    },
    {
        "text": "281"
    },
    {
        "text": "1099"
    },
    {
        "text": "1027549"
    },
    {
        "text": "99"
    },
    {
        "text": "49"
    },
    {
        "text": "1016053"
    },
    {
        "text": "8443"
    },
    {
        "text": "20230404005229"
    },
    {
        "text": "2201"
    },
    {
        "text": "11903"
    },
    {
        "text": "2302"
    },
    {
        "text": "08043"
    },
    {
        "text": "64903"
    },
    {
        "text": "64902"
    },
    {
        "text": "4294967295"
    },
    {
        "text": "911"
    },
    {
        "text": "800"
    },
    {
        "text": "900"
    },
    {
        "text": "64905"
    },
    {
        "text": "Cloud"
    },
    {
        "text": "Extracting response text from JSON"
    },
    {
        "text": "Checking the quality of the response"
    },
    {
        "text": "Caching of frequent queries"
    },
    {
        "text": "Scaling to multiple nodes"
    },
    {
        "text": "Performance monitoring"
    },
    {
        "text": "Copy"
    },
    {
        "text": "The block type is \"code\""
    },
    {
        "text": "Unique identifier"
    },
    {
        "text": "Input parameter with selection from a list"
    },
    {
        "text": "Python code block"
    },
    {
        "text": "Output data description"
    },
    {
        "text": "Usage hint"
    },
    {
        "text": "This JSON can be imported into the diagram editor to create a code block"
    },
    {
        "text": "Moneybox"
    },
    {
        "text": "//"
    },
    {
        "text": "configuration as in a regular LLM"
    },
    {
        "text": "These blocks can be used as a basis for demo workflows"
    },
    {
        "text": "Workflow Build Process - DNAnexus Documentation - documentation for building workflows on the DNAnexus platform, which uses the same JSON format as the MindOS platform"
    },
    {
        "text": "Serverless Workflow Specification - GitHub - The standard on which the MindOS platform metadata specification is based"
    },
    {
        "text": "Workflow Builder error messages in the server log file - IBM - documentation on debugging workflow builder errors on the IBM platform, which may also be useful for the MindOS platform"
    },
    {
        "text": "1"
    },
    {
        "text": "github"
    },
    {
        "text": "com"
    },
    {
        "text": "2"
    },
    {
        "text": "documentation"
    },
    {
        "text": "dnanexus"
    },
    {
        "text": "com"
    },
    {
        "text": "3"
    },
    {
        "text": "ibm"
    },
    {
        "text": "com"
    },
    {
        "text": "The Serverless Workflow project defines a vendor-neutral and declarative workflow language,"
    },
    {
        "text": "targeting the Serverless computing technology domain"
    },
    {
        "text": "This document represents the current state of the specification"
    },
    {
        "text": "It includes all features so far released"
    },
    {
        "text": "as well as all features planned to be added in the next release"
    },
    {
        "text": "Workflows allow us to capture and organize business requirements in a unified manner"
    },
    {
        "text": "They can bridge the gap between how we express and model business logic"
    },
    {
        "text": "business logic and solutions"
    },
    {
        "text": "Selecting the appropriate workflow language for our business and technology domains is"
    },
    {
        "text": "a very important decision to be considered"
    },
    {
        "text": "Serverless Workflow focuses on defining a **vendor-neutral**, **platform-independent**, and **declarative** workflow"
    },
    {
        "text": "language that targets the serverless computing technology domain"
    },
    {
        "text": "It can be used to significantly bridge the gap between your unique business domain and the target technology domain"
    },
    {
        "text": "The lack of a common way to define and model workflows means that we must constantly re-learn"
    },
    {
        "text": "how to write them"
    },
    {
        "text": "This also limits the potential for common libraries, tooling and"
    },
    {
        "text": "infrastructure to aid workflow modeling and execution across different platforms"
    },
    {
        "text": "Portability as well as productivity that can be achieved from workflow orchestration is hindered overall"
    },
    {
        "text": "Serverless Workflow addresses the need for a community-driven, vendor-neutral and a platform-independent"
    },
    {
        "text": "workflow language specification that targets the serverless computing technology domain"
    },
    {
        "text": "Having and using a specification-based workflow language allows us to model our workflows once and deploy them"
    },
    {
        "text": "onto many different container/cloud platforms, expecting the same execution results"
    },
    {
        "text": "</p>"
    },
    {
        "text": "allow users to define additional, non-execution-related workflow information"
    },
    {
        "text": "This information can be used to improve"
    },
    {
        "text": "workflow performance"
    },
    {
        "text": "A workflow definition is a JSON or YAML file that conforms to the Serverless Workflow specification DSL"
    },
    {
        "text": "A business solution can be composed of any number of related workflow definitions"
    },
    {
        "text": "A workflow instance represents a single Workflow Execution corresponding to the instructions provided by a"
    },
    {
        "text": "workflow definition"
    },
    {
        "text": "A workflow instance can be short or long-running"
    },
    {
        "text": "A single workflow instance"
    },
    {
        "text": "should be isolated, meaning it should not share state and data with other workflow instances"
    },
    {
        "text": "Workflow instances should be able to communicate with each other via events"
    },
    {
        "text": "Depending on their workflow definition, workflow instances can be short-lived or"
    },
    {
        "text": "can execute for days, weeks, or years"
    },
    {
        "text": "Each workflow instances should have its unique identifier, which should remain"
    },
    {
        "text": "unchanged throughout its execution"
    },
    {
        "text": "Workflow instances can be started providing some data input"
    },
    {
        "text": "This is described in detail in the"
    },
    {
        "text": "Workflow instances can also wait for examples to start their execution, which is the case"
    },
    {
        "text": "The workflow definition also explicitly defines when a workflow instance should be completed"
    },
    {
        "text": "For long-running workflow-executions, you can utilize the `keepActive` workflow property which"
    },
    {
        "text": "provides more control as to when exactly to terminate Workflow Execution"
    },
    {
        "text": "In cases where a"
    },
    {
        "text": "Workflow Execution should be continued as a new one, the DSL also provides the `continueAs` property which is described"
    },
    {
        "text": "Data flow and execution logic go hand in hand, meaning as Workflow Execution follows the workflow definition"
    },
    {
        "text": "States can also consume events as well as invoke services"
    },
    {
        "text": "These event payloads and service invocation results"
    },
    {
        "text": "input and output, action inputs and results, and event payloads"
    },
    {
        "text": "Multiple filters can be combined to gain high level of control of your workflow state data"
    },
    {
        "text": "You can find an example of that in"
    },
    {
        "text": "Data from consumed events,and action execution results are added/merged"
    },
    {
        "text": "```json"
    },
    {
        "text": "When a state completes its execution, its data output is passed to the state's data input it transitions to"
    },
    {
        "text": "Each Workflow Execution should produce a data output"
    },
    {
        "text": "The workflow data output is the data output of the last executed workflow state"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "The state data filters `input` property expression is applied when the workflow transitions to the current state and receives its data input"
    },
    {
        "text": "It can be used to select only data that is needed and disregard what is not needed"
    },
    {
        "text": "If `input` is not defined or does not select any parts of the state's data input, its data input is not filtered"
    },
    {
        "text": "The state data filter `output` property expression is applied right before the state transitions to the next state defined"
    },
    {
        "text": "It filters the state's data output to be passed as data input to the transitioning state"
    },
    {
        "text": "If the current state is the workflow end state, the filtered state's data output becomes the workflow data output"
    },
    {
        "text": "If `output` is not defined or does not select any parts of the state's data output, its data output is not filtered"
    },
    {
        "text": "Results of the `input` expression should become the state data input"
    },
    {
        "text": "Results of the `output` expression should become the state data output"
    },
    {
        "text": "For the first example, our state only cares about fruits data, and we want to disregard the vegetables"
    },
    {
        "text": "To do this"
    },
    {
        "text": "For our second example, let's say that we are interested in the only vegetable \"veggie-like\""
    },
    {
        "text": "Here we have two ways of filtering our data, depending on if actions within our state need access to all vegetables, or"
    },
    {
        "text": "only the ones that are \"veggie-like\""
    },
    {
        "text": "The states data input filter selects all the vegetables from the main data input"
    },
    {
        "text": "Once all actions have performed, before the state transition"
    },
    {
        "text": "* Filter the state data to select only the data that can be used within function definition arguments using its `fromStateData` property"
    },
    {
        "text": "* Filter the action results to select only the result data that should be added/merged back into the state data"
    },
    {
        "text": "using its `results` property"
    },
    {
        "text": "* Select the part of state data which the action data results should be added/merged to"
    },
    {
        "text": "using the `toStateData` property"
    },
    {
        "text": "To give an example, let's say we have an action which returns a list of breads and pasta types"
    },
    {
        "text": "For our workflow, we are only interested into breads and not the pasta"
    },
    {
        "text": "In this case, our `results` select the first bread and the second element of the pasta array"
    },
    {
        "text": "The `toStateData` expression then selects the `itemsToBuyAtStore` array of the state data to add/merge these results"
    },
    {
        "text": "In the case action results should not be added/merged to state data, we can set the `useResults` property to `false`"
    },
    {
        "text": "In this case, the `results` and `toStateData` properties should be ignored, and nothing is added/merged to state data"
    },
    {
        "text": "Event data filters can be used to filter consumed event payloads"
    },
    {
        "text": "* Filter the event payload to select only the data that should be added/merged into the state data"
    },
    {
        "text": "using its `data` property"
    },
    {
        "text": "* Select the part of state data into which the event payload should be added/merged into"
    },
    {
        "text": "Allows event data to be filtered and added to or merged with the state data"
    },
    {
        "text": "All events have to be in the CloudEvents format"
    },
    {
        "text": "In the case event data/payload should not be added/merged to state data, we can set the `useData` property to `false`"
    },
    {
        "text": "In this case, the `data` and `toStateData` properties should be ignored, and nothing is added/merged to state data"
    },
    {
        "text": "a workflow with a single event state and show how data filters can be combined"
    },
    {
        "text": "Here is a sample diagram showing our workflow, each numbered step on this diagram shows a certain defined point during"
    },
    {
        "text": "Workflow Execution at which data filters are invoked and correspond to the numbered items below"
    },
    {
        "text": "Workflow executes its starting state, namely the \"WaitForCustomerToArrive\" event state"
    },
    {
        "text": "The event state **stateDataFilter** is invoked to filter its data input"
    },
    {
        "text": "The filters \"input\" expression is evaluated and"
    },
    {
        "text": "selects only the \"greetings\" data"
    },
    {
        "text": "The rest of the state data input should be disregarded"
    },
    {
        "text": "Its \"data\" expression selects the \"customer\" object from the events data"
    },
    {
        "text": "The \"toStateData\" expression"
    },
    {
        "text": "says that we should add/merge this selected event data to the state data in its \"customerInfo\" property"
    },
    {
        "text": "If this property"
    },
    {
        "text": "exists it should be merged, if it does not exist, one should be created"
    },
    {
        "text": "Before the first action is executed, its actionDataFilter is invoked"
    },
    {
        "text": "Its \"fromStateData\" expression filters"
    },
    {
        "text": "the current state data to select from its data that should be available to action arguments"
    },
    {
        "text": "In this example"
    },
    {
        "text": "it selects the \"hello\" and \"customerInfo\" properties from the current state data"
    },
    {
        "text": "At this point the action is executed"
    },
    {
        "text": "The action filters \"toStateData\" expression then defines that we want to add/merge this action result to"
    },
    {
        "text": "state data under the \"finalCustomerGreeting\" element"
    },
    {
        "text": "When our event state finishes its execution, the states \"stateDataFilter\" \"output\" filter expression is executed"
    },
    {
        "text": "to filter the state data to create the final state data output"
    },
    {
        "text": "Event and action data filters can be used to give more details about this operation"
    },
    {
        "text": "to the state data"
    },
    {
        "text": "Merging should be applied to the entire state data JSON element"
    },
    {
        "text": "In case of event and action filters, their \"toStateData\" property can be defined to select a specific element"
    },
    {
        "text": "of the state data with which merging should be done against"
    },
    {
        "text": "If this element does not exist, a new one should"
    },
    {
        "text": "be created first"
    },
    {
        "text": "that you should not merge arrays with objects or objects with arrays etc"
    },
    {
        "text": "When merging elements of type object should be done by inserting all the key-value pairs from both objects into"
    },
    {
        "text": "a single combined object"
    },
    {
        "text": "If both objects contain a value for the same key, the object of the event data/action results"
    },
    {
        "text": "Merging array types should be done by concatenating them into a larger array including unique elements of both arrays"
    },
    {
        "text": "Merging number types should be done by overwriting the data from events data/action results into the merging element of the state data"
    },
    {
        "text": "We can define if functions are invoked sync or async"
    },
    {
        "text": "Reference"
    },
    {
        "text": "define when the service operations should be invoked during Workflow Execution, as well as the data parameters"
    },
    {
        "text": "passed to them if needed"
    },
    {
        "text": "Note that with Serverless Workflow, we can also define invocation of services which are triggered via an event"
    },
    {
        "text": "Because of an overall lack of a common way to describe different services and their operations,"
    },
    {
        "text": "many workflow languages typically chose to define custom function definitions"
    },
    {
        "text": "This approach, however, often runs into issues such as lack of portability, limited capabilities, as well as"
    },
    {
        "text": "forcing non-workflow-specific information, such as service authentication, to be added inside the workflow language"
    },
    {
        "text": "To avoid these issues, the Serverless Workflow specification mandates that details about"
    },
    {
        "text": "OpenAPI is a language-agnostic standard that describes discovery of RESTful services"
    },
    {
        "text": "This allows Serverless Workflow language to describe RESTful services in a portable"
    },
    {
        "text": "way, as well as workflow runtimes to utilize OpenAPI tooling and APIs to invoke service operations"
    },
    {
        "text": "It can, as previously mentioned be referenced during Workflow Execution when the invocation of this service is desired"
    },
    {
        "text": "```text"
    },
    {
        "text": "Also note that the referenced function definition type in this case must have the value `asyncapi`"
    },
    {
        "text": "Similar to defining invocations of operations on RESTful services, you can also use the workflow"
    },
    {
        "text": "a widely used RPC system"
    },
    {
        "text": "and the methods on those services that can be invoked"
    },
    {
        "text": "Let's look at an example of invoking a service method using RPC"
    },
    {
        "text": "For this example let's say we have the following"
    },
    {
        "text": "Note that the referenced function definition type in this case must be `rpc`"
    },
    {
        "text": "```graphql"
    },
    {
        "text": "Similar to defining invocations of operations on GraphQL services, you can also use workflow"
    },
    {
        "text": "In order to ensure compatibility of OData support across runtimes,"
    },
    {
        "text": "can also be used to define expressions that should be evaluated during Workflow Execution"
    },
    {
        "text": "Defining expressions as part of function definitions has the benefit of being able to reference"
    },
    {
        "text": "them by their logical name through workflow states where expression evaluation is required"
    },
    {
        "text": "Expression functions must declare their `type` parameter to be `expression`"
    },
    {
        "text": "Here we define two reusable expression functions"
    },
    {
        "text": "Expressions in Serverless Workflow"
    },
    {
        "text": "can be evaluated against the workflow, or workflow state data"
    },
    {
        "text": "Note that different data filters play a big role as to which parts of the"
    },
    {
        "text": "workflow data are being evaluated by the expressions"
    },
    {
        "text": "Reference the"
    },
    {
        "text": "This state defines an invocation of the \"Increment Count Function\" expression function defined in our workflow definition"
    },
    {
        "text": "This triggers the evaluation of the defined expression"
    },
    {
        "text": "The input of this expression is by default the current state data"
    },
    {
        "text": "Just like with \"rest\", and \"rpc\" type functions, expression functions also produce a result"
    },
    {
        "text": "In this case"
    },
    {
        "text": "the result of the expression is just the number 1"
    },
    {
        "text": "``` json"
    },
    {
        "text": "Note that the used function definition type in this case must be `expression`"
    },
    {
        "text": "the specification"
    },
    {
        "text": "Some runtime implementations might support additional function types that extend the ones"
    },
    {
        "text": "When a custom function type is specified, the operation property value has a **custom format**, meaning that"
    },
    {
        "text": "its format is controlled by the runtime which provides the custom function type"
    },
    {
        "text": "Note that different data filters play a big role as to which parts of the states data are to be used when the expression is"
    },
    {
        "text": "evaluated"
    },
    {
        "text": "Reference the"
    },
    {
        "text": "Serverless Workflow does not mandate the use of jq and it's possible to use an expression language"
    },
    {
        "text": "of your choice with the restriction that a single one must be used for all expressions"
    },
    {
        "text": "in a workflow definition"
    },
    {
        "text": "If a different expression language needs to be used, make sure to set the workflow"
    },
    {
        "text": "`expressionLang` property to identify it to runtime implementations"
    },
    {
        "text": "Note that using a non-default expression language could lower the portability of your workflow definitions"
    },
    {
        "text": "across multiple container/cloud platforms"
    },
    {
        "text": "are written using the default jq syntax"
    },
    {
        "text": "Where `expression` can be either an in-line expression, or a reference to a"
    },
    {
        "text": "Where `fn` is the namespace of the defined expression functions and"
    },
    {
        "text": "`myExprName` is the unique expression function name"
    },
    {
        "text": "We will get back to this function definition in just a bit, but now let's take a look at using"
    },
    {
        "text": "In this case our input parameter `applicantName` would be set to \"John Doe\""
    },
    {
        "text": "Expressions can also be used to select and manipulate state data, this is in particularly useful for"
    },
    {
        "text": "state data filters"
    },
    {
        "text": "As previously mentioned, expressions are evaluated against certain subsets of data"
    },
    {
        "text": "For example"
    },
    {
        "text": "which would set the workflow version to \"1"
    },
    {
        "text": "0"
    },
    {
        "text": "0\""
    },
    {
        "text": "Note that the workflow \"id\" property value is not allowed to use an expression"
    },
    {
        "text": "The workflow"
    },
    {
        "text": "definition \"id\" must be a constant value"
    },
    {
        "text": "Defines the top-level structure of a serverless workflow model"
    },
    {
        "text": "Following figure describes the main workflow definition blocks"
    },
    {
        "text": "The `id` property defines the unique, domain-specific workflow identifier, for example \"orders\", \"payment\", etc"
    },
    {
        "text": "The `key` property defines the unique, domain-specific workflow identifier"
    },
    {
        "text": "It can be used when the `id` property is auto-generated by a content-management system for example"
    },
    {
        "text": "In these cases, you can specify the `key` property to be the domain-specific identifier of the workflow definition"
    },
    {
        "text": "The `id` and `key` properties are mutually exclusive, meaning you cannot define both"
    },
    {
        "text": "The `name` property is the workflow logical name"
    },
    {
        "text": "The `description` property can be used to give further information about the workflow"
    },
    {
        "text": "The `annotations` property defines a list of helpful terms describing the workflows intended purpose, subject areas, or other important qualities,"
    },
    {
        "text": "The `dataInputSchema` and `dataOutputSchema` properties can be used to validate input and output data against a defined JSON Schema"
    },
    {
        "text": "The `failOnValidationErrors` property determines what should be done when the workflow output does not match the provided schema"
    },
    {
        "text": "If `failOnValidationErrors` is true, an error should be thrown"
    },
    {
        "text": "If executed within a subprocess, that error can be be handled by the parent workflow"
    },
    {
        "text": "If `failOnValidationErrors` is false, the error should not be propagated"
    },
    {
        "text": "It is up to the implementor to warn the user about that fact"
    },
    {
        "text": "For example, printing a log"
    },
    {
        "text": "Both properties can be expressed as object or string type"
    },
    {
        "text": "If using object type, their `schema` property might be an URI, which points to the JSON schema used to validate the workflow data input, or it might be the JSON schema object"
    },
    {
        "text": "`failOnValidationErrors` is optional, default value is `true`"
    },
    {
        "text": "If using string type, then the string value is the external schema URI and `failOnValidationErrors` default value of `true` is assumed"
    },
    {
        "text": "The `secrets` property allows you to use sensitive information such as passwords, OAuth tokens, ssh keys, etc"
    },
    {
        "text": "inside your"
    },
    {
        "text": "Workflow expressions"
    },
    {
        "text": "It has two possible types, `string` or `array`"
    },
    {
        "text": "If `string` type, it is an URI pointing to a JSON or YAML document"
    },
    {
        "text": "The `constants` property can be used to define Workflow constants values"
    },
    {
        "text": "It has two possible types, `string` or `object`"
    },
    {
        "text": "This property is not required"
    },
    {
        "text": "If not defined, the workflow starting state has to be"
    },
    {
        "text": "The `specVersion` property is used to set the Serverless Workflow specification release version"
    },
    {
        "text": "the workflow markup adheres to"
    },
    {
        "text": "its value should be set to `\"0"
    },
    {
        "text": "8\"`"
    },
    {
        "text": "The `expressionLang` property can be used to identify the expression language used for all expressions in"
    },
    {
        "text": "with an expression language / syntax other than the default"
    },
    {
        "text": "The `timeouts` property is used to define the default workflow timeouts for workflow, state, action, and branch"
    },
    {
        "text": "The `error` property is used to define checked errors that can be explicitly handled during Workflow Execution"
    },
    {
        "text": "Auth definitions can be used to define authentication that should be used to access"
    },
    {
        "text": "The `authRef` property is used to reference an authentication definition in"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "For more information about"
    },
    {
        "text": "The `keepActive` property allows you to change the default behavior of workflow instances"
    },
    {
        "text": "Setting the `keepActive` property to `true` allows you to change this default behavior in that a workflow instance"
    },
    {
        "text": "The `extensions` property can be used to define extensions for this workflow definition"
    },
    {
        "text": "Workflow states define building blocks of the Workflow Execution instructions"
    },
    {
        "text": "They define the"
    },
    {
        "text": "control flow logic instructions on what the workflow is supposed to do"
    },
    {
        "text": "Event states await one or more events and perform actions when they are received"
    },
    {
        "text": "If defined as the workflow starting state, the event state definition controls when the workflow"
    },
    {
        "text": "instances should be created"
    },
    {
        "text": "The `exclusive` property determines if the state should wait for any of the defined events in the `onEvents` array, or"
    },
    {
        "text": "If the Event state in this case is a workflow starting state, the occurrence of *any* of the defined events would start a new workflow instance"
    },
    {
        "text": "If the Event state in this case is a workflow starting state, the occurrence of *all* defined events would start a new"
    },
    {
        "text": "workflow instance"
    },
    {
        "text": "In order to consider only events that are related to each other, we need to set the `correlation` property in the workflow"
    },
    {
        "text": "extension context attributes"
    },
    {
        "text": "If the Event state is not a workflow starting state, the `timeout` property can be used to define the time duration from the"
    },
    {
        "text": "invocation of the event state"
    },
    {
        "text": "If the defined event, or events have not been received during this time,"
    },
    {
        "text": "The `timeouts` property can be used to define state specific timeout settings"
    },
    {
        "text": "Event states can define the"
    },
    {
        "text": "`stateExecTimeout`, `actionExecTimeout`, and `eventTimeout` properties"
    },
    {
        "text": "Note that `transition` and `end` properties are mutually exclusive, meaning that you cannot define both of them at the same time"
    },
    {
        "text": "Operation state defines a set of actions to be performed in sequence or in parallel"
    },
    {
        "text": "Once all actions have been performed, a transition to another state can occur"
    },
    {
        "text": "The `timeouts` property can be used to define state specific timeout settings"
    },
    {
        "text": "Operation states can define"
    },
    {
        "text": "the `stateExecTimeout` and `actionExecTimeout` settings"
    },
    {
        "text": "For more information on Workflow timeouts reference"
    },
    {
        "text": "At times multiple defined conditions can be evaluated to `true` by runtime implementations"
    },
    {
        "text": "Conditions defined first take precedence over conditions defined later"
    },
    {
        "text": "This is backed by the fact that arrays/sequences"
    },
    {
        "text": "Because A was defined first, its transition will be executed, not B's"
    },
    {
        "text": "In case of data-based conditions definition, switch state controls workflow transitions based on the states data"
    },
    {
        "text": "If no defined conditions can be matched, the state transitions is taken based on the `defaultCondition` property"
    },
    {
        "text": "This property can be either a `transition` to another workflow state, or an `end` definition meaning a workflow end"
    },
    {
        "text": "For event-based conditions, a switch state acts as a workflow wait state"
    },
    {
        "text": "It halts Workflow Execution"
    },
    {
        "text": "until one of the referenced events arrive, then making a transition depending on that event definition"
    },
    {
        "text": "If events defined in event-based conditions do not arrive before the states `eventTimeout` property expires,"
    },
    {
        "text": "state transitions are based on the defined `defaultCondition` property"
    },
    {
        "text": "The `timeouts` property can be used to define state specific timeout settings"
    },
    {
        "text": "Switch states can define the"
    },
    {
        "text": "`stateExecTimeout` setting"
    },
    {
        "text": "If `eventConditions` is defined, the switch state can also define the"
    },
    {
        "text": "Sleep state"
    },
    {
        "text": "suspends Workflow Execution for a given time duration"
    },
    {
        "text": "The delay is defined in its `duration` property using the ISO 8601"
    },
    {
        "text": "duration format"
    },
    {
        "text": "Parallel state defines a collection of `branches` that are executed in parallel"
    },
    {
        "text": "A parallel state can be seen a state which splits up the current workflow instance execution path"
    },
    {
        "text": "into multiple ones, one for each branch"
    },
    {
        "text": "These execution paths are performed in parallel"
    },
    {
        "text": "and are joined back into the current execution path depending on the defined `completionType` parameter value"
    },
    {
        "text": "specify the `numCompleted` property to define this number"
    },
    {
        "text": "The `timeouts` property can be used to set state specific timeout settings"
    },
    {
        "text": "Parallel states can define the"
    },
    {
        "text": "`stateExecTimeout` and `branchExecTimeout` timeout settings"
    },
    {
        "text": "For more information on workflow timeouts"
    },
    {
        "text": "Inject state can be used to inject static data into state data input"
    },
    {
        "text": "Inject state does not perform any actions"
    },
    {
        "text": "It is very useful for debugging, for example, as you can test/simulate Workflow Execution with pre-set data that would typically"
    },
    {
        "text": "The inject state `data` property allows you to statically define a JSON object which gets added to the states data input"
    },
    {
        "text": "You can use the filter property to control the states data output to the transition state"
    },
    {
        "text": "Here is a typical example of how to use the inject state to add static data into its states data input, which then is passed"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "If the inject state already receives a data input from the previous transition state, the inject data should be merged"
    },
    {
        "text": "with its data input"
    },
    {
        "text": "Each iteration of the ForEach state is by default executed in parallel by default"
    },
    {
        "text": "However, executing iterations sequentially is also possible by setting the value of the `mode` property to"
    },
    {
        "text": "`sequential`"
    },
    {
        "text": "The `mode` property defines if iterations should be done sequentially or in parallel"
    },
    {
        "text": "By default,"
    },
    {
        "text": "that can be executed at a time"
    },
    {
        "text": "To give an example, if the number of iterations is 55 and `batchSize`"
    },
    {
        "text": "is set to `10`, 10 iterations are to be executed at a time, meaning that the state would execute 10 iterations in parallel,"
    },
    {
        "text": "then execute the next batch of 10 iterations"
    },
    {
        "text": "After 5 such executions, the remaining 5 iterations are to be executed in the last batch"
    },
    {
        "text": "The `inputCollection` property is a workflow expression which selects an array in the states data"
    },
    {
        "text": "All iterations"
    },
    {
        "text": "are performed against data elements of this array"
    },
    {
        "text": "If this array does not exist, the runtime should throw"
    },
    {
        "text": "The `outputCollection` property is a workflow expression which selects an array in the state data where the results"
    },
    {
        "text": "of each iteration should be added to"
    },
    {
        "text": "If this array does not exist, it should be created"
    },
    {
        "text": "The `iterationParam` property defines the name of the iteration parameter passed to each iteration of the ForEach state"
    },
    {
        "text": "It should contain the unique element of the `inputCollection` array and made available to actions of the ForEach state"
    },
    {
        "text": "If `iterationParam` is not explicitly defined, runtimes should create one and populate it with the value of the unique"
    },
    {
        "text": "iteration parameter for each iteration of the ForEach state"
    },
    {
        "text": "The `actions` property defines actions to be executed in each state iteration"
    },
    {
        "text": "The ForEach state defines an `inputCollection` property which selects all orders that have the `completed` property set to `true`"
    },
    {
        "text": "For each element of the array selected by `inputCollection` a JSON object defined by `iterationParam` should be"
    },
    {
        "text": "created containing an unique element of `inputCollection` and passed as the data input to the parallel executed actions"
    },
    {
        "text": "The results of each parallel action execution are stored as elements in the state data array defined by the `outputCollection` property"
    },
    {
        "text": "The `timeouts` property can be used to set state specific timeout settings"
    },
    {
        "text": "ForEach states can define the"
    },
    {
        "text": "section"
    },
    {
        "text": "Serverless orchestration can at times require manual steps/decisions to be made"
    },
    {
        "text": "While some work performed"
    },
    {
        "text": "The Callback state allows you to explicitly model manual decision steps during Workflow Execution"
    },
    {
        "text": "The action property defines a function call that triggers an external activity/service"
    },
    {
        "text": "Once the action executes,"
    },
    {
        "text": "of the manual decision by the called service"
    },
    {
        "text": "Note that the called decision service is responsible for emitting the callback CloudEvent indicating the completion of the"
    },
    {
        "text": "decision and including the decision results as part of the event payload"
    },
    {
        "text": "This event must be correlated to the"
    },
    {
        "text": "workflow instance using the callback events context attribute defined in the `correlation` property of the"
    },
    {
        "text": "defined workflow state or completes Workflow Execution in case it is an end state"
    },
    {
        "text": "The `timeouts` property defines state specific timeout settings"
    },
    {
        "text": "Callback states can define the"
    },
    {
        "text": "The `name` property defines an unique name of the function definition"
    },
    {
        "text": "The `type` property defines the function type"
    },
    {
        "text": "Its value can be either `rest` or `expression`"
    },
    {
        "text": "Default value is `rest`"
    },
    {
        "text": "* If `type` is `rest`, a combination of the function/service OpenAPI definition document URI and the particular service operation that needs to be invoked, separated by a '#'"
    },
    {
        "text": "* If `type` is `asyncapi`, a combination of the AsyncApi definition document URI and the particular service operation that needs to be invoked, separated by a '#'"
    },
    {
        "text": "* If `type` is `rpc`, a combination of the gRPC proto document URI and the particular service name and service method name that needs to be invoked, separated by a '#'"
    },
    {
        "text": "* If `type` is `graphql`, a combination of the GraphQL schema definition URI and the particular service name and service method name that needs to be invoked, separated by a '#'"
    },
    {
        "text": "* If `type` is `odata`, a combination of the GraphQL schema definition URI and the particular service name and service method name that needs to be invoked, separated by a '#'"
    },
    {
        "text": "It is used to provide authentication info to access the resource defined in the `operation` property and/or to invoke the function"
    },
    {
        "text": "Function definitions themselves do not define data input parameters"
    },
    {
        "text": "Parameters can be"
    },
    {
        "text": "Used to define events and their correlations"
    },
    {
        "text": "These events can be either consumed or produced during Workflow Execution as well"
    },
    {
        "text": "This is to assure consistency and portability of the events format used"
    },
    {
        "text": "The `name` property defines a single name of the event that is unique inside the workflow definition"
    },
    {
        "text": "This event name can be"
    },
    {
        "text": "property of the CloudEvent required attributes"
    },
    {
        "text": "The `kind` property defines this event as either `consumed` or `produced`"
    },
    {
        "text": "In terms of the workflow, this means it is either an event"
    },
    {
        "text": "Note that for `produced` event definitions, implementations must provide the value of the CloudEvent source attribute"
    },
    {
        "text": "Event correlation plays a big role in large event-driven applications"
    },
    {
        "text": "Correlating one or more events with a particular workflow instance"
    },
    {
        "text": "can be done by defining the event correlation rules within the `correlation` property"
    },
    {
        "text": "and the correlation definitions can use these attributes to define clear matching event correlation rules"
    },
    {
        "text": "Extension context attributes are not part of the event payload, so they are serialized the same way as other standard required attributes"
    },
    {
        "text": "This means that the event payload does not have to be inspected by implementations in order to read and evaluate the defined correlation rules"
    },
    {
        "text": "We can then define a correlation rule, through which all consumed events with the \"hospitalMonitorSystem\", and the \"com"
    },
    {
        "text": "hospital"
    },
    {
        "text": "patient"
    },
    {
        "text": "heartRateMonitor\""
    },
    {
        "text": "should then also be associated with the same instance"
    },
    {
        "text": "You can also correlate multiple events together"
    },
    {
        "text": "In the following example, we assume that the workflow consumes two different event types,"
    },
    {
        "text": "all consumed events from this source and type must have the same \"patientId\" to be considered"
    },
    {
        "text": "The second rule"
    },
    {
        "text": "says that these events must all have a context attribute named \"department\" with the value of \"UrgentCare\""
    },
    {
        "text": "This allows developers to write orchestration workflows that are specifically targeted to patients that are in the hospital urgent care unit,"
    },
    {
        "text": "The `dataOnly` property deals with what Event data is accessible by the consuming Workflow states"
    },
    {
        "text": "If `false`, both Event payload and context attributes should be accessible"
    },
    {
        "text": "The `name` property defines the unique auth definition name"
    },
    {
        "text": "The `scheme` property defines the auth scheme to be used"
    },
    {
        "text": "Can be \"bearer\", \"basic\" or \"oauth2\""
    },
    {
        "text": "The `properties` property defines the auth scheme properties information"
    },
    {
        "text": "The Basic properties definition can have two types, either `string` or `object`"
    },
    {
        "text": "Used to define event correlation rules"
    },
    {
        "text": "Only usable for `consumed` event definitions"
    },
    {
        "text": "Note that the values of `eventRefs` array must be unique"
    },
    {
        "text": "The `actionMode` property defines if the defined actions need to be performed sequentially or in parallel"
    },
    {
        "text": "The `actions` property defines a list of actions to be performed"
    },
    {
        "text": "When specifying the `onEvents` definition it is important to consider the Event states `exclusive` property,"
    },
    {
        "text": "because it determines how 'onEvents' is interpreted"
    },
    {
        "text": "]"
    },
    {
        "text": "1"
    },
    {
        "text": "If `exclusive` is set to `true`, the consumption of **either** the `HighBodyTemperature` or `HighBloodPressure` events will trigger action execution"
    },
    {
        "text": "2"
    },
    {
        "text": "If `exclusive` is set to `false`, the consumption of **both** the `HighBodyTemperature` and `HighBloodPressure` events will trigger action execution"
    },
    {
        "text": "Actions specify invocations of services or other workflows during Workflow Execution"
    },
    {
        "text": "* Reference a sub-workflow invocation via the `subFlowRef` property"
    },
    {
        "text": "Note that `functionRef`, `eventRef`, and `subFlowRef` are mutually exclusive, meaning that only one of them can be"
    },
    {
        "text": "specified in a single action definition"
    },
    {
        "text": "The `name` property specifies the action name"
    },
    {
        "text": "In the event-based scenario a service, or a set of services we want to invoke"
    },
    {
        "text": "are not exposed via a specific resource URI for example, but can only be invoked via an event"
    },
    {
        "text": "referenced `produced` event via its `produceEventRef` property and a `consumed` event via its `consumeEventRef` property"
    },
    {
        "text": "The `sleep` property can be used to define time periods that Workflow Execution should sleep"
    },
    {
        "text": "The `retryRef` property references one of the defined workflow retries by it's unique name"
    },
    {
        "text": "If not set, the action"
    },
    {
        "text": "should be retried according to the default retry policy of the runtime implementation"
    },
    {
        "text": "For more information about workflow"
    },
    {
        "text": "The `nonRetryableErrors` property is a list that references one or more unique names of workflow error definitions"
    },
    {
        "text": "This is the list of known errors for which the action should not be retried for"
    },
    {
        "text": "It should be used only when the workflow top-level `autoRetries` property is set to `true`"
    },
    {
        "text": "The `retryableErrors` property is a list that references one or more unique names of workflow error definitions"
    },
    {
        "text": "This is the list of known errors for which the action should be retried for"
    },
    {
        "text": "It should be used only when the workflow top-level `autoRetries` property is set to `false`"
    },
    {
        "text": "If the `condition` property is not defined, the action is always performed"
    },
    {
        "text": "Often you want to group your workflows into small logical units that solve a particular business problem and can be reused in"
    },
    {
        "text": "multiple other workflow definitions"
    },
    {
        "text": "Reusable workflows are referenced by their `id` property via the SubFlow action `workflowId` parameter"
    },
    {
        "text": "For the simple case, `subFlowRef` can be a string containing the `id` of the sub-workflow to invoke"
    },
    {
        "text": "`FunctionRef` definition can have two types, either `string` or `object`"
    },
    {
        "text": "Note that if used with `string` type, the invocation of the function is synchronous"
    },
    {
        "text": "If you need to define parameters in your `functionRef` definition, you can define"
    },
    {
        "text": "The `arguments` property defines the arguments that are to be passed to the referenced function"
    },
    {
        "text": "`sync`, meaning that Workflow Execution should wait until the function completes"
    },
    {
        "text": "If set to `async`, Workflow Execution should just invoke the function and should not wait until its completion"
    },
    {
        "text": "Note that in this case the action does not produce any results and the associated actions actionDataFilter as well as"
    },
    {
        "text": "its retry definition, if defined, should be ignored"
    },
    {
        "text": "In addition, functions that are invoked async do not propagate their errors to the associated action definition and the"
    },
    {
        "text": "workflow state, meaning that any errors that happen during their execution cannot be handled in the workflow states"
    },
    {
        "text": "onErrors definition"
    },
    {
        "text": "Note that errors raised during functions that are invoked async should not fail Workflow Execution"
    },
    {
        "text": "Allows defining invocation of a function via event"
    },
    {
        "text": "to be used as payload of the event referenced by `produceEventRef`"
    },
    {
        "text": "If it is of object type, you can define a custom object to be the event payload"
    },
    {
        "text": "to the trigger/produced event"
    },
    {
        "text": "If the event defined by the `consumeEventRef` property is not received in that set time, action invocation should raise an error"
    },
    {
        "text": "that can be handled in the states `onErrors` definition"
    },
    {
        "text": "In case the `consumeEventRef` is not defined, the `consumeEventTimeout` property is ignored"
    },
    {
        "text": "If set to `async`, Workflow Execution should just produce the trigger event and should not wait for the result event"
    },
    {
        "text": "workflow state, meaning that any errors that happen during their execution cannot be handled in the workflow states"
    },
    {
        "text": "onErrors definition"
    },
    {
        "text": "Note that errors raised during functions that are invoked sync or async in this case"
    },
    {
        "text": "should not fail Workflow Execution"
    },
    {
        "text": "`SubFlowRef` definition can have two types, namely `string` or `object`"
    },
    {
        "text": "If `string` type, it defines the unique id of the sub-workflow to be invoked"
    },
    {
        "text": "This short-hand definition can be used if sub-workflow lookup is done only by its `id`"
    },
    {
        "text": "property and not its `version` property"
    },
    {
        "text": "The `workflowId` property define the unique ID of the sub-workflow to be invoked"
    },
    {
        "text": "Usually, the workflow id should not be the same id of the workflow where the action is defined"
    },
    {
        "text": "Otherwise, it may occur undesired recurring calls to the same workflow"
    },
    {
        "text": "The `version` property defined the unique version of the sub-workflow to be invoked"
    },
    {
        "text": "If this property is defined, runtimes should match both the `id` and the `version` properties"
    },
    {
        "text": "defined in the sub-workflow definition"
    },
    {
        "text": "`sync`, meaning that Workflow Execution should wait until the subflow completes"
    },
    {
        "text": "If set to `async`, Workflow Execution should just invoke the subflow and not wait for its results"
    },
    {
        "text": "Note that in this case the action does not produce any results, and the associated actions actionDataFilter as well as"
    },
    {
        "text": "Subflows that are invoked async do not propagate their errors to the associated action definition and the"
    },
    {
        "text": "onErrors definition"
    },
    {
        "text": "Note that errors raised during subflows that are invoked async"
    },
    {
        "text": "The `onParentComplete` property defines how subflow execution that is invoked async should behave if the parent workflow"
    },
    {
        "text": "completes execution before the subflow completes its own execution"
    },
    {
        "text": "completes, execution of the subflow should be terminated"
    },
    {
        "text": "If it is set to `continue`, if the parent workflow completes, the subflow execution is allowed to continue its own execution"
    },
    {
        "text": "The `errorRef` property references the unique workflow error definition"
    },
    {
        "text": "For more info on workflow error handling"
    },
    {
        "text": "The `errorRefs`property references at least one of the defined workflow error definitions"
    },
    {
        "text": "Can be used when `errorRef` is not used"
    },
    {
        "text": "Usable when you want to define multiple error refs for which the same transition"
    },
    {
        "text": "or end definition should be applied"
    },
    {
        "text": "For more info on workflow error handling"
    },
    {
        "text": "Note that the `errorRef` and `errorRefs` properties are mutually exclusive, meaning that you can only specify one or the other,"
    },
    {
        "text": "but not both at the same time"
    },
    {
        "text": "The `transition` property defines the transition to the next workflow state in cases when the defined"
    },
    {
        "text": "error happens during runtime execution"
    },
    {
        "text": "If `transition` is not defined you can also define the `end` property which will end Workflow Execution at that point"
    },
    {
        "text": "Note that the `transition` and `end` properties are mutually exclusive, meaning that you can only specify one or the other,"
    },
    {
        "text": "The `increment` property specifies a static duration which will be added to the delay between successive retries"
    },
    {
        "text": "in this example 10, 12, 14, and 16 seconds between retries"
    },
    {
        "text": "The `multiplier` property specifies the value by which the interval time is increased for each of the retry attempts"
    },
    {
        "text": "in this example 10, 20, 40, and 80 seconds between retries"
    },
    {
        "text": "If both `increment` and `multiplier` properties are defined, `increment` should be applied first and then"
    },
    {
        "text": "the `multiplier` when determining the next retry time"
    },
    {
        "text": "The `maxAttempts` property determines the maximum number of retry attempts allowed and is a positive integer value"
    },
    {
        "text": "The `jitter` property is important to prevent certain scenarios where clients"
    },
    {
        "text": "are retrying in sync, possibly causing or contributing to a transient failure"
    },
    {
        "text": "precisely because they're retrying at the same time"
    },
    {
        "text": "Adding a typically small,"
    },
    {
        "text": "bounded random amount of time to the period between retries serves the purpose"
    },
    {
        "text": "of attempting to prevent these retries from happening simultaneously, possibly"
    },
    {
        "text": "reducing total time to complete requests and overall congestion"
    },
    {
        "text": "How this value"
    },
    {
        "text": "is used in the exponential backoff algorithm is left up to implementations"
    },
    {
        "text": "`jitter` may be specified as a percentage relative to the total delay"
    },
    {
        "text": "Once the next retry attempt delay is calculated, we can apply `jitter` as a percentage value relative to this"
    },
    {
        "text": "calculated delay"
    },
    {
        "text": "For example, if your calculated delay for the next retry is six seconds, and we specify"
    },
    {
        "text": "Alternatively, `jitter` may be defined as an absolute value specified as an ISO"
    },
    {
        "text": "8601 duration"
    },
    {
        "text": "This way, the maximum amount of random time added is fixed and"
    },
    {
        "text": "will not increase as new attempts are made"
    },
    {
        "text": "The `maxDelay` property determines the maximum amount of delay that is desired between retry attempts, and is applied"
    },
    {
        "text": "after `increment`, `multiplier`, and `jitter`"
    },
    {
        "text": "`Transition` definition can have two types, either `string` or `object`"
    },
    {
        "text": "If `string`, it defines the name of the state to transition to"
    },
    {
        "text": "If you need to define additional parameters in your `transition` definition, you can define"
    },
    {
        "text": "The `nextState` property defines the name of the state to transition to next"
    },
    {
        "text": "The `produceEvents` property allows you to define a list of events to produce before the transition happens"
    },
    {
        "text": "Switch state data conditions specify a data-based condition statement, which causes a transition to another"
    },
    {
        "text": "workflow state if evaluated to `true`"
    },
    {
        "text": "parts of the state data input"
    },
    {
        "text": "The condition must evaluate to `true` or `false`"
    },
    {
        "text": "If the condition is evaluated to `true`, you can specify either the `transition` or `end` definitions"
    },
    {
        "text": "to decide what to do, transition to another workflow state, or end Workflow Execution"
    },
    {
        "text": "Note that `transition` and `end`"
    },
    {
        "text": "definitions are mutually exclusive, meaning that you can specify either one or the other, but not both"
    },
    {
        "text": "Switch state event conditions specify events, which the switch state must wait for"
    },
    {
        "text": "Each condition"
    },
    {
        "text": "can reference one workflow-defined event"
    },
    {
        "text": "Upon arrival of this event, the associated transition is taken"
    },
    {
        "text": "The `eventRef` property references a name of one of the defined workflow events"
    },
    {
        "text": "If the referenced event is received, you can specify either the `transition` or `end` definitions"
    },
    {
        "text": "to decide what to do, transition to another workflow state, or end Workflow Execution"
    },
    {
        "text": "The `eventDataFilter` property can be used to filter event data when it is received"
    },
    {
        "text": "Note that `transition` and `end`"
    },
    {
        "text": "The `timeouts` property can be used to set branch specific timeout settings"
    },
    {
        "text": "Parallel state branches can set the"
    },
    {
        "text": "`actionExecTimeout` and `branchExecTimeout` timeout properties"
    },
    {
        "text": "For more information on workflow timeouts reference the"
    },
    {
        "text": "By default, exceptions that are not handled within branches stop branch execution and are propagated"
    },
    {
        "text": "to the Parallel state and should be handled with its `onErrors` definition"
    },
    {
        "text": "are propagated to the parallel state"
    },
    {
        "text": "and can be handled with the parallel states `onErrors` definition"
    },
    {
        "text": "If the parallel states defines a subflow action, exceptions that occur during execution of the called workflow"
    },
    {
        "text": "can choose to handle exceptions on their own"
    },
    {
        "text": "All unhandled exceptions from the called workflow"
    },
    {
        "text": "execution however are propagated back to the parallel state and can be handled with the parallel states"
    },
    {
        "text": "`onErrors` definition"
    },
    {
        "text": "Note that once an error that is propagated to the parallel state from a branch and handled by the"
    },
    {
        "text": "parallel state should be considered as the workflow control flow logic has already moved to a different state"
    },
    {
        "text": "Can be either `string` or `object` type"
    },
    {
        "text": "If type string, it defines the name of the workflow starting state"
    },
    {
        "text": "In this case it's assumed that the `schedule` property is not defined"
    },
    {
        "text": "The start definition can be either `string` or `object` type"
    },
    {
        "text": "If `string` type, it defines the name of the workflow starting state"
    },
    {
        "text": "If `object` type, it provides the ability to set the workflow starting state name, as well as the `schedule` property"
    },
    {
        "text": "The `stateName` property can be set to define the starting workflow state"
    },
    {
        "text": "If not specified, the first state"
    },
    {
        "text": "The `schedule` property allows to define scheduled workflow instance creation"
    },
    {
        "text": "Scheduled starts have two different choices"
    },
    {
        "text": "You can define a recurring time interval or cron-based schedule at which a workflow"
    },
    {
        "text": "One use case for cron-based scheduled starts is a workflow that performs periodical data batch processing"
    },
    {
        "text": "In this case we could use a cron definition"
    },
    {
        "text": "``` text"
    },
    {
        "text": "Defining a cron-based scheduled starts for the runtime implementations would mean that there needs to be an event service that issues"
    },
    {
        "text": "the needed events at the defined times to trigger workflow instance creation"
    },
    {
        "text": "Defining a start definition is not required"
    },
    {
        "text": "If it's not defined, the starting workflow"
    },
    {
        "text": "`Schedule` definition can have two types, either `string` or `object`"
    },
    {
        "text": "If `string` type, it defines time interval describing when the workflow instance should be automatically created"
    },
    {
        "text": "If you need to define the `cron` or the `timezone` parameters in your `schedule` definition, you can define"
    },
    {
        "text": "The `interval` property uses a derivative of ISO 8601 recurring time interval format to describe a series of consecutive time intervals for workflow instances to be automatically created at the start of"
    },
    {
        "text": "Unlike full ISO 8601, this derivative format does not allow expression of an explicit number of recurrences or identification of a series by the date and time at the start and end of its first time interval"
    },
    {
        "text": "instances will be automatically created every 2 hours starting from March 20th 2020 at 1pm UTC"
    },
    {
        "text": "to describe a repeating interval upon which a workflow instance should be created automatically"
    },
    {
        "text": "The `timezone` property is used to define a time zone name to evaluate the cron or interval expression against"
    },
    {
        "text": "If not specified, it should default"
    },
    {
        "text": "defining cron-based scheduled starts for the runtime implementations would mean that there needs to be an event service that issues"
    },
    {
        "text": "`Cron` definition can have two types, either `string` or `object`"
    },
    {
        "text": "If you need to define the `validUntil` parameters in your `cron` definition, you can define"
    },
    {
        "text": "`validUntil` time is reached, the cron expression for instances creations of this workflow"
    },
    {
        "text": "should no longer be valid"
    },
    {
        "text": "This tells the runtime engine to create an instance of this workflow every hour"
    },
    {
        "text": "as defined by the `validUntil` property value"
    },
    {
        "text": "In this case it's assumed that the `terminate` property has its default value of `false`, and the `produceEvents`,"
    },
    {
        "text": "`compensate`, and `continueAs` properties are not defined"
    },
    {
        "text": "End definitions are used to explicitly define execution completion of a workflow instance or Workflow Execution path"
    },
    {
        "text": "define a stop of Workflow Execution"
    },
    {
        "text": "The `terminate` property, if set to `true`, completes the workflow instance execution, this any other active"
    },
    {
        "text": "execution paths"
    },
    {
        "text": "If a terminate end is reached inside a ForEach or Parallel state the entire workflow instance is terminated"
    },
    {
        "text": "by the workflow instance before workflow stops its execution"
    },
    {
        "text": "It's important to mention that if the workflow `keepActive` property is set to`true`,"
    },
    {
        "text": "the only way to complete execution of the workflow instance"
    },
    {
        "text": "is if Workflow Execution reaches a state that defines an end definition with `terminate` property set to `true`,"
    },
    {
        "text": "is reached"
    },
    {
        "text": "execution is completed"
    },
    {
        "text": "and worklow execution should continue as a new instance of a new workflow"
    },
    {
        "text": "When defined, it should be assumed that `terminate` is `true`"
    },
    {
        "text": "If `continueAs` is defined, and `terminate` is explicitly"
    },
    {
        "text": "before the Workflow Execution is stopped, and continued as a new workflow instance with the defined workflow id"
    },
    {
        "text": "The `eventRef` property must match the name of"
    },
    {
        "text": "The `data` property can have two types, object or string"
    },
    {
        "text": "If of string type, it is an expression that can select parts of state data"
    },
    {
        "text": "to be used as the event payload"
    },
    {
        "text": "If of object type, you can define a custom object to be the event payload"
    },
    {
        "text": "to the generated event"
    },
    {
        "text": "Being able to produce events when Workflow Execution completes or during state transition"
    },
    {
        "text": "allows for event-based orchestration communication"
    },
    {
        "text": "For example, completion of an orchestration workflow can notify other orchestration workflows to decide if they need to act upon"
    },
    {
        "text": "the produced event, or notify monitoring services of the current state of Workflow Execution, etc"
    },
    {
        "text": "It can be used to create very dynamic orchestration scenarios"
    },
    {
        "text": "Each state can define a `transition` definition that is used to determine which"
    },
    {
        "text": "state to transition to next"
    },
    {
        "text": "Implementers **must** use the unique State `name` property for determining the transition"
    },
    {
        "text": "Events can be produced during state transitions"
    },
    {
        "text": "The `produceEvents` property of the `transition` definitions allows you"
    },
    {
        "text": "For each of the produced events you can select what parts of state data to be the event payload"
    },
    {
        "text": "section for more information"
    },
    {
        "text": "Specifying additional properties, namely properties which are not defined by the specification"
    },
    {
        "text": "They allow you to enrich the workflow definition with custom information"
    },
    {
        "text": "Additional properties, just like workflow metadata, should not affect Workflow Execution"
    },
    {
        "text": "Implementations may choose to use additional properties or ignore them"
    },
    {
        "text": "In this example, we specify the `loglevel`, `environment`, and `category` additional properties"
    },
    {
        "text": "Serverless Workflow language allows you to define `explicit` error handling, meaning you can define what should happen"
    },
    {
        "text": "in case of errors inside your workflow model rather than some generic error handling entity"
    },
    {
        "text": "This allows error handling to become part of your orchestration activities and as such part of your business problem"
    },
    {
        "text": "solutions"
    },
    {
        "text": "The idea behind the way Serverless Workflow defines error handling is that workflows should only fail due to unknown bugs"
    },
    {
        "text": "during execution"
    },
    {
        "text": "In general, you should always write your workflows so that they do not fail on any known failures"
    },
    {
        "text": "Each workflow state can define error handling, which is related only to errors that may arise during its"
    },
    {
        "text": "execution"
    },
    {
        "text": "Error handling defined in one state cannot be used to handle errors that happened during execution of another state"
    },
    {
        "text": "during Workflow Execution"
    },
    {
        "text": "Unknown errors that may arise during workflow state execution that are not explicitly handled within the workflow definition"
    },
    {
        "text": "should be reported by runtime implementations and halt Workflow Execution"
    },
    {
        "text": "Within workflow definitions, errors defined are `domain specific`, meaning they are defined within"
    },
    {
        "text": "For example, we can define errors such as \"Order not found\", or \"Item not in inventory\", rather than having to"
    },
    {
        "text": "might make little to no sense to our specific problem domain, as well as may not be portable across various runtime implementations"
    },
    {
        "text": "In addition to the domain specific error name, users have the option to also add an optional error code"
    },
    {
        "text": "to help runtime implementations with mapping defined errors to concrete underlying technical ones"
    },
    {
        "text": "to concrete technical errors that arise during Workflow Execution"
    },
    {
        "text": "Known workflow errors, that we know we need to handle during Workflow Execution should be defined in"
    },
    {
        "text": "the workflow top-level 'errors' property"
    },
    {
        "text": "This property can be either a string type, meaning it can reference"
    },
    {
        "text": "a reusable JSON or Yaml definition file including the error definitions, or it can have an array type where you can"
    },
    {
        "text": "define these checked errors in-line in your workflow definition"
    },
    {
        "text": "These defined errors can then be referenced by their unique name in both states `onErrors` definitions as well as in"
    },
    {
        "text": "actions `nonRetryableErrors` and `retryableErrors` properties"
    },
    {
        "text": "Retries allow workflows to deal with intermittent failures of services they are trying to invoke"
    },
    {
        "text": "services and continue execution after they are fixed"
    },
    {
        "text": "Retries are important for both short-lived and long-lived workflows, as well as in both stateless and stateful"
    },
    {
        "text": "scenarios"
    },
    {
        "text": "Which retry option the workflow should use by default is defined via the workflow top-level `autoRetries` property"
    },
    {
        "text": "Regardless of the chosen retries option, note that workflows in general should be designed to not fail"
    },
    {
        "text": "Workflows should be able to recover from intermittent failures"
    },
    {
        "text": "This is the default option when the workflow top-level `autoRetries` property is not specified or is set to `false`"
    },
    {
        "text": "This retry options is suited for stateless / short-running workflows where retries should be performed when specifically"
    },
    {
        "text": "Workflow Execution should fail"
    },
    {
        "text": "Each action can define the retry strategy it wants to use"
    },
    {
        "text": "If it does not define one, the action is in this case not retries"
    },
    {
        "text": "Actions can define a list of known errors in its `retryableErrors` array"
    },
    {
        "text": "If defined, then the action should be retried"
    },
    {
        "text": "In our example, \"MyFirstFunction\" invocation should be retried according to the \"FirstRetryStrategy\" policy only on known errors"
    },
    {
        "text": "\"SomeErrorOne\" and \"SomeErrorTwo\""
    },
    {
        "text": "`onErrors` definition"
    },
    {
        "text": "This is the option used when the workflow top-level `autoRetries` property is set to `true`"
    },
    {
        "text": "Automatic retries are well suited to long-running and stateful workflow orchestrations"
    },
    {
        "text": "It allows workflows"
    },
    {
        "text": "to recover from failures thus providing more resilience"
    },
    {
        "text": "There is a possible cost associated with automatic retries"
    },
    {
        "text": "in terms of resource and computing power utilization"
    },
    {
        "text": "errors"
    },
    {
        "text": "This means that you do not have to define a retry strategy for actions for them to have retried, it's included by default"
    },
    {
        "text": "Users can still define a custom retry strategy for each action via the `retryRef` property"
    },
    {
        "text": "If a retry strategy is not defined, a default retry strategy should be used"
    },
    {
        "text": "* `maxAttempts` to be `unlimited`, meaning that the action should be retried indefinitely until successful"
    },
    {
        "text": "* `delay` to be set to one second, meaning that there is a one second delay between action retries"
    },
    {
        "text": "* `multiplier` to be set to two meaning that the delay should be multiplied by two for each retry attempt"
    },
    {
        "text": "Runtimes should document their default retry strategy to users, so it's clear which"
    },
    {
        "text": "property values they are using for the default"
    },
    {
        "text": "This is done via the actions `nonRetryableErrors` property"
    },
    {
        "text": "If a known error happens during action execution"
    },
    {
        "text": "which is included in the `nonRetryableErrors` property array, that action should not be retried and the error"
    },
    {
        "text": "then should be handled in the workflow states `onErrors` property"
    },
    {
        "text": "Let's take a look at an examples of defining retries when using the automatic retries option"
    },
    {
        "text": "This example assumes that the workfow top level `autoRetries` property is set to `true`"
    },
    {
        "text": "In our example the first action named `MyFirstFunction` is going to be retried according to the `FirstRetryStrategy`"
    },
    {
        "text": "retry policy"
    },
    {
        "text": "The seconds action named `MySecondFunction` is going to be retried according to the `SecondRetryStrategy`"
    },
    {
        "text": "retry policy"
    },
    {
        "text": "The third action named `MyThirdFunction` is going to retried according to the default runtime retry policy"
    },
    {
        "text": "The fourth action named `MyFourthFunction` is going to be retried according to the `DoNotRetryStrategy`"
    },
    {
        "text": "retry policy which has the `maxAttempts` property set to `1`, meaning that this action will not be retried"
    },
    {
        "text": "1"
    },
    {
        "text": "Workflow execution"
    },
    {
        "text": "2"
    },
    {
        "text": "State execution"
    },
    {
        "text": "3"
    },
    {
        "text": "Action execution"
    },
    {
        "text": "4"
    },
    {
        "text": "Branch execution"
    },
    {
        "text": "5"
    },
    {
        "text": "Event consumption time"
    },
    {
        "text": "The specification allows for timeouts to be defined on the top-level workflow definition, as well as"
    },
    {
        "text": "in each of the workflow state definitions"
    },
    {
        "text": "Note that the timeout settings defined in states, and state branches overwrite the top-level"
    },
    {
        "text": "workflow definition for state, action and branch execution"
    },
    {
        "text": "If they are not defined, then the top-level"
    },
    {
        "text": "timeout settings should take in effect"
    },
    {
        "text": "This top-level workflow timeout setting defines that the maximum execution time of all defined workflow states"
    },
    {
        "text": "is two seconds each"
    },
    {
        "text": "Now let's say that we have worfklow states \"A\" and \"B\""
    },
    {
        "text": "State \"A\" does not define a timeout definition, but state"
    },
    {
        "text": "Since state \"A\" does not overwrite the top-level `stateExecTimeout`, its execution timeout should be inherited from"
    },
    {
        "text": "the top-level timeout definition"
    },
    {
        "text": "On the other hand, state \"B\" does define it's own `stateExecTimeout`, in which case it would overwrite the default"
    },
    {
        "text": "setting, meaning that it would its execution time has a max limit of ten seconds"
    },
    {
        "text": "Defining timeouts is not mandatory, meaning that if not defined, all the timeout settings should be assumed to"
    },
    {
        "text": "be \"unlimited\""
    },
    {
        "text": "Note that the defined Workflow Execution timeout has precedence over all other defined timeouts"
    },
    {
        "text": "Just to give an extreme example, let's say we define the Workflow Execution timeout to ten seconds,"
    },
    {
        "text": "and the state execution timeout to twenty seconds"
    },
    {
        "text": "In this case if the Workflow Execution timeout is reached"
    },
    {
        "text": "it should follow the rules of Workflow Execution timeout and end Workflow Execution, no matter what the"
    },
    {
        "text": "state execution time has been set to"
    },
    {
        "text": "Workflow timeouts are defined with the top-level `timeouts` property"
    },
    {
        "text": "It can have two types, `string` and `object`"
    },
    {
        "text": "If `string` type it defines an URI that points to a Json or Yaml file containing the workflow timeout definitions"
    },
    {
        "text": "The `eventTimeout` property defines the maximum amount of time to wait to consume defined events"
    },
    {
        "text": "If not specified it should default to"
    },
    {
        "text": "\"unlimited\""
    },
    {
        "text": "The `branchExecTimeout` property defines the maximum execution time for a single branch"
    },
    {
        "text": "If not specified it should default to"
    },
    {
        "text": "The `actionExecTimeout` property defines the maximum execution time for a single actions definition"
    },
    {
        "text": "If not specified it should default to"
    },
    {
        "text": "\"unlimited\""
    },
    {
        "text": "Note that an action definition can include multiple actions"
    },
    {
        "text": "The `stateExecTimeout` property defines the maximum execution time for a single workflow state"
    },
    {
        "text": "If not specified it should default to"
    },
    {
        "text": "The `workflowExecTimeout` property defines the Workflow Execution timeout"
    },
    {
        "text": "It is defined using the ISO 8601 duration format"
    },
    {
        "text": "If not defined, the Workflow Execution should be given \"unlimited\""
    },
    {
        "text": "amount of time to complete"
    },
    {
        "text": "`workflowExecTimeout` can have two possibly types, either `string` or `object`"
    },
    {
        "text": "If `string` type, it defines the maximum Workflow Execution time"
    },
    {
        "text": "The `duration` property defines the time duration of the execution timeout"
    },
    {
        "text": "Once a workflow instance is created,"
    },
    {
        "text": "and the amount of the defined time is reached, the workflow instance should be terminated"
    },
    {
        "text": "The `interrupt` property defines if the currently running instance should be allowed to finish its current"
    },
    {
        "text": "execution flow before it needs to be terminated"
    },
    {
        "text": "If set to `true`, the current instance execution should stop immediately"
    },
    {
        "text": "The `runBefore` property defines a name of a workflow state to be executed before workflow instance is terminated"
    },
    {
        "text": "at last one must define it"
    },
    {
        "text": "Runtime implementations should raise compile time / parsing exceptions if any of the rules mentioned above are"
    },
    {
        "text": "not obeyed in the workflow definition"
    },
    {
        "text": "All workflow states except Sleep and Inject States can define the `timeouts` property and can define different timeout"
    },
    {
        "text": "settings depending on their state type"
    },
    {
        "text": "timeout settings are available for each state type"
    },
    {
        "text": "Workflow states timeouts cannot define the `workflowExecTimeout` property"
    },
    {
        "text": "Workflow states can set their `stateExecTimeout` property inside the `timeouts` definition"
    },
    {
        "text": "It must be a duration that's greater than zero and defines the total state execution timeout"
    },
    {
        "text": "When this timeout is reached, state execution"
    },
    {
        "text": "should be stopped and can be handled as a timeout error in the states `onErrors` definition"
    },
    {
        "text": "can overwrite this setting to define its own branch execution timeout"
    },
    {
        "text": "If a branch does not define this timeout property, it should be inherited from it's state definition branch timeout setting"
    },
    {
        "text": "If its state does not define it either, it should be inherited from the top-level workflow branch timeout settings"
    },
    {
        "text": "The Event state `timeouts` property can be used to"
    },
    {
        "text": "specify state specific timeout settings"
    },
    {
        "text": "For event state it can contain the `eventTimeout` property"
    },
    {
        "text": "which is defined using the ISO 8601 data and time format"
    },
    {
        "text": "You can specify for example \"PT15M\" to represent 15 minutes or \"P2DT3H4M\" to represent 2 days, 3 hours and 4 minutes"
    },
    {
        "text": "`eventTimeout` values should always be represented as durations and not as specific time intervals"
    },
    {
        "text": "The `eventTimeout` property needs to be described in detail for Event states as it depends on whether or not the Event state is a workflow starting state or not"
    },
    {
        "text": "If the Event state is a workflow starting state, incoming events may trigger workflow instances"
    },
    {
        "text": "In this case,"
    },
    {
        "text": "If the `exclusive` property is set to `false`, in this case, the defined `eventTimeout` represents the time"
    },
    {
        "text": "The first `eventTimeout` would start once any of the referenced events are consumed"
    },
    {
        "text": "If the second event does not occur within"
    },
    {
        "text": "the defined eventTimeout, no workflow instance should be created"
    },
    {
        "text": "If the event state is not a workflow starting state, the `eventTimeout` property is relative to the time when the"
    },
    {
        "text": "are not satisfied within the defined timeout period, the event state should transition to the next state or end the workflow"
    },
    {
        "text": "instance in case it is an end state without performing any actions"
    },
    {
        "text": "Compensation deals with undoing or reversing the work of one or more states which have"
    },
    {
        "text": "already successfully completed"
    },
    {
        "text": "For example, let's say that we have charged a customer $100 for an item"
    },
    {
        "text": "purchase"
    },
    {
        "text": "In the case customer laster on decides to cancel this purchase we need to undo it"
    },
    {
        "text": "One way of"
    },
    {
        "text": "doing that is to credit the customer $100"
    },
    {
        "text": "It's important to understand that compensation with workflows is not the same as for example rolling back"
    },
    {
        "text": "might involve multiple logical steps and thus is part of the overall business logic that must be"
    },
    {
        "text": "defined within the workflow itself"
    },
    {
        "text": "To explain this let's use our previous example and say that when our"
    },
    {
        "text": "customer made the item purchase, our workflow has sent her/him a confirmation email"
    },
    {
        "text": "In the case, to"
    },
    {
        "text": "compensate this purchase, we cannot just \"undo\" the confirmation email sent"
    },
    {
        "text": "Instead, we want to"
    },
    {
        "text": "send a second email to the customer which includes purchase cancellation information"
    },
    {
        "text": "Compensation in Serverless Workflow must be explicitly defined by the workflow control flow logic"
    },
    {
        "text": "It cannot be dynamically triggered by initial workflow data, event payloads, results of service invocations, or"
    },
    {
        "text": "errors"
    },
    {
        "text": "Each workflow state can define how it should be compensated via its `compensatedBy` property"
    },
    {
        "text": "* They must define the `usedForCompensation` property and set it to `true`"
    },
    {
        "text": "* They can transition only to states which also have their `usedForCompensation` property set to `true`"
    },
    {
        "text": "Let's take a look at an example workflow state which defines its `compensatedBy` property, and the compensation"
    },
    {
        "text": "debits the customer and sends them a purchase confirmation email"
    },
    {
        "text": "It defines that it's compensated by the"
    },
    {
        "text": "purchase amount to customer and sends them a purchase cancellation email"
    },
    {
        "text": "As previously mentioned, compensation must be explicitly triggered by the workflows control-flow logic"
    },
    {
        "text": "Transitions can trigger compensations by specifying the `compensate` property and setting it to `true`"
    },
    {
        "text": "workflow compensation must be performed"
    },
    {
        "text": "End definitions can trigger compensations by specifying the `compensate` property and setting it to `true`"
    },
    {
        "text": "This means that before workflow finishes its execution workflow compensation must be performed"
    },
    {
        "text": "Note that"
    },
    {
        "text": "in case when the end definition has its `produceEvents` property set, compensation must be performed before"
    },
    {
        "text": "producing the specified events and ending Workflow Execution"
    },
    {
        "text": "In the case the end definition has a `continueAs` property defined, compensation must be performed before"
    },
    {
        "text": "Workflow Execution continues as a new workflow invocation"
    },
    {
        "text": "In the case where the end definition has both `produceEvents`, and `continueAs` compensation is performed first,"
    },
    {
        "text": "then the event should be produced, and then the workflow should continue its execution as a new workflow invocation"
    },
    {
        "text": "Now that we have seen how to define and trigger compensation, we need to go into details on how compensation should be executed"
    },
    {
        "text": "Compensation is always done in sequential order, and should not be executed in parallel"
    },
    {
        "text": "In this example lets say our Workflow Execution is at the \"End\" state which defines the `compensate` property to `true`"
    },
    {
        "text": "as shown in the previous section"
    },
    {
        "text": "States with a red border, namely \"A\", \"B\", \"D\" and \"E\" are states which have so far"
    },
    {
        "text": "been executed successfully"
    },
    {
        "text": "State \"C\" has not been executed during Workflow Execution in our example"
    },
    {
        "text": "1"
    },
    {
        "text": "State \"E\" is not compensated as it does not define a `compensatedBy` state"
    },
    {
        "text": "2"
    },
    {
        "text": "State \"D\" is compensated by executing compensation \"D1\""
    },
    {
        "text": "3"
    },
    {
        "text": "State \"B\" is compensated by executing \"B1\" and then \"B1-2\""
    },
    {
        "text": "4"
    },
    {
        "text": "State C is not compensated as it was never active during Workflow Execution"
    },
    {
        "text": "5"
    },
    {
        "text": "State A is not comped as it does not define a `compensatedBy` state"
    },
    {
        "text": "In our example, when compensation triggers,"
    },
    {
        "text": "the current workflow data is passed as input to the \"D1\" state, the first compensation state for our example"
    },
    {
        "text": "The states data output is then passed as states data input to \"B1\", and so on"
    },
    {
        "text": "states can still be \"active\", meaning they still might have some async executions that are being performed"
    },
    {
        "text": "If compensation needs to performed on such still active states, the state execution must be first cancelled"
    },
    {
        "text": "After it is cancelled, compensation should be performed"
    },
    {
        "text": "`onErrors` property just like any other workflow states"
    },
    {
        "text": "In case of unrecoverable errors during their execution"
    },
    {
        "text": "Workflow Execution should be stopped, which is the same behavior as when not using compensation as well"
    },
    {
        "text": "In some cases our workflows are deployed and executed on runtimes and/or cloud platforms that expose some"
    },
    {
        "text": "execution limitations such as finite execution duration, finite number of workflow transitions, etc"
    },
    {
        "text": "Some runtimes, especially when dealing with stateful workflow orchestrations have a finite limit of"
    },
    {
        "text": "execution history log sizes, meaning that once a long-running workflow reaches these limits Workflow Executions is"
    },
    {
        "text": "likely to be forced to stop before reaching its completion"
    },
    {
        "text": "This can result in unexpected issues, especially with"
    },
    {
        "text": "mission-critical workflows"
    },
    {
        "text": "For those cases, the Serverless Workflow DSL provides a way to explicitly define stopping the current workflow"
    },
    {
        "text": "The end definitions `continueAs` can be either of type `string` or `object`"
    },
    {
        "text": "Defining this should stop the current Workflow Execution, and continue execution as a new workflow instance of the"
    },
    {
        "text": "workflow which defines the workflow id of \"myworkflowid\""
    },
    {
        "text": "The state data where this is define should"
    },
    {
        "text": "become the workflow data input of the workflow that is continuing the current Workflow Execution"
    },
    {
        "text": "Note that any defined `produceEvents` and `compensate` definitions should be honored before `continueAs` is applied"
    },
    {
        "text": "Continuing execution with `continueAs` can also be used inside sub-Workflow Executions, which brings its next use case"
    },
    {
        "text": "Workflows can invoke sub-workflows during their execution"
    },
    {
        "text": "In Serverless Workflow DSL, sub-workflows are invoked"
    },
    {
        "text": "Just like \"parent\" workflows, sub-workflow can also be long-running, and can run into the same type of runtime/serverless platform"
    },
    {
        "text": "limitations as previously discussed"
    },
    {
        "text": "As such they can also use `continueAs` to stop their current execution and continue it as"
    },
    {
        "text": "a new one of the same or different workflow id"
    },
    {
        "text": "Note that when a sub-workflow is invoked it can produce a result that is then merged into the parent workflow state data"
    },
    {
        "text": "This may bring up a question as to what happens when a sub-workflow calls `continueAs` in terms of what is returned as"
    },
    {
        "text": "result to of its invocation by the parent workflow"
    },
    {
        "text": "No matter how many times sub-workflow may use `continueAs`, to the parent workflow it should be as a single invocation is performed,"
    },
    {
        "text": "data returned by the invocation of the sub-workflow to the parent workflow"
    },
    {
        "text": "Versioning your workflow definitions is an important task to consider"
    },
    {
        "text": "Versions indicate"
    },
    {
        "text": "changes or updates of your workflow definitions to the associated execution runtimes"
    },
    {
        "text": "1"
    },
    {
        "text": "Top level workflow definition `version` property"
    },
    {
        "text": "Constants can only be accessed inside Workflow expressions via the `$CONST` variable"
    },
    {
        "text": "Runtimes must make `$CONST` available to expressions as a predefined variable"
    },
    {
        "text": "Workflow constants values should only contain static data, meaning that their value should not"
    },
    {
        "text": "contain Workflow expressions"
    },
    {
        "text": "Workflow constants data must be immutable"
    },
    {
        "text": "Secrets allow you access sensitive information, such as passwords, OAuth tokens, ssh keys, etc"
    },
    {
        "text": "If secrets are defined in a Workflow definition, runtimes must assure to provide their values"
    },
    {
        "text": "during Workflow execution"
    },
    {
        "text": "Runtimes must make `$SECRETS` available to expressions as a predefined variable"
    },
    {
        "text": "Metadata enables you to enrich the serverless workflow model with information beyond its core definitions"
    },
    {
        "text": "It is intended to be used by clients, such as tools and libraries, as well as users that find this information relevant"
    },
    {
        "text": "Metadata should not affect Workflow Execution"
    },
    {
        "text": "Implementations may choose to use metadata information or ignore it"
    },
    {
        "text": "Note, however, that using metadata to control Workflow Execution can lead to vendor-locked implementations that do not comply with the main goals of this specification, which is to be completely vendor-neutral"
    },
    {
        "text": "- UI tooling information such as sizing or scaling factors"
    },
    {
        "text": "- Build, release, or image information such as timestamps, release ids, git branches, PR numbers, etc"
    },
    {
        "text": "- Logging, monitoring, analytics, or audit repository information"
    },
    {
        "text": "- Labels used for organizing/indexing purposes, such as \"release\" \"stable\", \"track\", \"daily\", etc"
    },
    {
        "text": "Specify resources for the model"
    },
    {
        "text": "Configure authentication"
    },
    {
        "text": "Specify endpoint"
    },
    {
        "text": "Write logic for processing the result"
    },
    {
        "text": "Make sure that all objects, arrays, strings are closed"
    },
    {
        "text": "Check JSON string encoding and correct it to the correct form ]"
    },
    {
        "text": ", -"
    },
    {
        "text": "json,"
    },
    {
        "text": "yaml,"
    },
    {
        "text": "xml,"
    },
    {
        "text": "Input"
    },
    {
        "text": "\u201cName\u201d \u201cText\u201d"
    },
    {
        "text": "Genius"
    },
    {
        "text": "Dropdown"
    },
    {
        "text": "\u201cPersonality\u201d \u201cChoice\u201d"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", \u201cFriendly\u201d, \u201cProfessional\u201d, \u201cFunny\u201d, etc"
    },
    {
        "text": "Button"
    },
    {
        "text": "\u201cCreate\u201d \u201cAction\u201d"
    },
    {
        "text": "Genius"
    },
    {
        "text": "Label"
    },
    {
        "text": "\u201cStatus\u201d \u201cText\u201d"
    },
    {
        "text": "Genius"
    },
    {
        "text": "Name Create, Personality Create, Create Status"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", , , Name , , Genius"
    },
    {
        "text": ", Genius,"
    },
    {
        "text": ", Genius"
    },
    {
        "text": ", Genius,"
    },
    {
        "text": "Genius ,"
    },
    {
        "text": ", , ,"
    },
    {
        "text": ","
    },
    {
        "text": ", \u00ab \u00bb, \u00ab \u00bb \u00ab \u00bb"
    },
    {
        "text": ", Genius , , - -"
    },
    {
        "text": ","
    },
    {
        "text": "- -"
    },
    {
        "text": ","
    },
    {
        "text": ", \u00ab \u00bb GPS IP-"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", Genius"
    },
    {
        "text": "]]"
    },
    {
        "text": ","
    },
    {
        "text": "Company_Name"
    },
    {
        "text": "the specific company or industry name or stock name mentioned by user"
    },
    {
        "text": "Event"
    },
    {
        "text": "the event mentioned by user"
    },
    {
        "text": "Demand"
    },
    {
        "text": "the demand of user, select from impact, prediction, recommendation"
    },
    {
        "text": "company"
    },
    {
        "text": "event"
    },
    {
        "text": "demand"
    },
    {
        "text": "result"
    },
    {
        "text": "1"
    },
    {
        "text": "2"
    },
    {
        "text": "3"
    },
    {
        "text": "4"
    },
    {
        "text": "5"
    },
    {
        "text": "API"
    },
    {
        "text": "q"
    },
    {
        "text": "linkList"
    },
    {
        "text": "Interpreting news for you"
    },
    {
        "text": "articles"
    },
    {
        "text": "linksList"
    },
    {
        "text": "6"
    },
    {
        "text": "7"
    },
    {
        "text": "data"
    },
    {
        "text": "company_name"
    },
    {
        "text": "output"
    },
    {
        "text": "8"
    },
    {
        "text": "9"
    },
    {
        "text": "10"
    },
    {
        "text": "11"
    },
    {
        "text": "12"
    },
    {
        "text": "13"
    },
    {
        "text": "14"
    },
    {
        "text": "del item['link']"
    },
    {
        "text": "del item['link']"
    },
    {
        "text": "Intergrade"
    },
    {
        "text": "GPT3"
    },
    {
        "text": "5-"
    },
    {
        "text": "Max_token"
    },
    {
        "text": "500"
    },
    {
        "text": "0"
    },
    {
        "text": "7"
    },
    {
        "text": "1"
    },
    {
        "text": "0"
    },
    {
        "text": "Generating news report"
    },
    {
        "text": "summary_list"
    },
    {
        "text": "link_list"
    },
    {
        "text": "Markdown, URL- HTML-"
    },
    {
        "text": "Writing the final report"
    },
    {
        "text": "title"
    },
    {
        "text": "Stock News Report"
    },
    {
        "text": "result1"
    },
    {
        "text": ","
    },
    {
        "text": "url]"
    },
    {
        "text": "```"
    },
    {
        "text": "- Name ,"
    },
    {
        "text": ", \"Please enter a name for your Genius\" Status"
    },
    {
        "text": "- Personality \"Random\","
    },
    {
        "text": ", Personality"
    },
    {
        "text": "```mermaid"
    },
    {
        "text": "graph TD"
    },
    {
        "text": "G -- Yes --> H[Pick a random option]"
    },
    {
        "text": "G -- No --> I[Create Genius]"
    },
    {
        "text": "H --> I"
    },
    {
        "text": "+-----------------+ +-----------------+ +-----------------+"
    },
    {
        "text": "+-----------------+"
    },
    {
        "text": "+-----------------+"
    },
    {
        "text": "v"
    },
    {
        "text": "+---------+"
    },
    {
        "text": "/ \\"
    },
    {
        "text": "/ Yes \\ No"
    },
    {
        "text": "/ \\"
    },
    {
        "text": "v v"
    },
    {
        "text": "+-----------------+ +-----------------+"
    },
    {
        "text": "/ \\"
    },
    {
        "text": "/ Yes \\ No"
    },
    {
        "text": "/ \\"
    },
    {
        "text": "v v"
    },
    {
        "text": "+-----------------+ +-----------------+"
    },
    {
        "text": "\\ /"
    },
    {
        "text": "\\ /"
    },
    {
        "text": "\\ /"
    },
    {
        "text": "v v"
    },
    {
        "text": "+---------+"
    },
    {
        "text": "/ \\"
    },
    {
        "text": "/ Yes \\ No"
    },
    {
        "text": "/ \\"
    },
    {
        "text": "v v"
    },
    {
        "text": "+-----------------+ +-----------------+"
    },
    {
        "text": "```]"
    },
    {
        "text": "+-----------------------------------+-----------------------------------+"
    },
    {
        "text": "]"
    },
    {
        "text": "1"
    },
    {
        "text": "Genius Input Name Genius Dropdown Personality"
    },
    {
        "text": "2"
    },
    {
        "text": "Button Create, Genius"
    },
    {
        "text": "3"
    },
    {
        "text": ", Name"
    },
    {
        "text": ", \"Please enter a name for your Genius\" Label Status"
    },
    {
        "text": ","
    },
    {
        "text": "4"
    },
    {
        "text": ", Personality \"Random\""
    },
    {
        "text": ", Personality"
    },
    {
        "text": ","
    },
    {
        "text": "- Company Name Company_Name 8241 8250"
    },
    {
        "text": "- 8241 Company_Name 8250 LLM 8249"
    },
    {
        "text": "- q q LLM 8242"
    },
    {
        "text": "- LLM 8242 result Link List 8243"
    },
    {
        "text": "- Link List linksList 8245 8251"
    },
    {
        "text": "- 8243 ,"
    },
    {
        "text": "- 8245 data 8246 Summary List"
    },
    {
        "text": "- 8246 linksList 8251"
    },
    {
        "text": "- Summary List summary_list 8251"
    },
    {
        "text": "- 8250 output LLM 8249"
    },
    {
        "text": "- LLM 8249 result1 8255"
    },
    {
        "text": "- 8251 result id 8253"
    },
    {
        "text": "- 8254 title id 8253"
    },
    {
        "text": "- 8255 result id 8253"
    },
    {
        "text": "- id 8253 , HTML-"
    },
    {
        "text": "- Final Report , Markdown"
    },
    {
        "text": "- - WMS,, ,"
    },
    {
        "text": "WMS , ,"
    },
    {
        "text": "WMS ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": ", , ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", , , WMS"
    },
    {
        "text": ", WMS ,"
    },
    {
        "text": ", , WMS"
    },
    {
        "text": ","
    },
    {
        "text": "API"
    },
    {
        "text": "API,"
    },
    {
        "text": "API"
    },
    {
        "text": ", , ,"
    },
    {
        "text": ", , API , ,"
    },
    {
        "text": ","
    },
    {
        "text": ", !"
    },
    {
        "text": "asciiart"
    },
    {
        "text": "eu/faq"
    },
    {
        "text": "\" \""
    },
    {
        "text": "st->input->api->process->generate->output->e"
    },
    {
        "text": "\u00ab\u00bb"
    },
    {
        "text": "\u00ab \u00bb"
    },
    {
        "text": "API \u00ab \u00bb"
    },
    {
        "text": "\u00ab \u00bb"
    },
    {
        "text": "\u00abGenerate Weather Update\u00bb"
    },
    {
        "text": "\u00ab \u00bb"
    },
    {
        "text": "\u00ab\u00bb"
    },
    {
        "text": ", , ,"
    },
    {
        "text": ","
    },
    {
        "text": ", !"
    },
    {
        "text": ","
    },
    {
        "text": ", , API"
    },
    {
        "text": ", , API,"
    },
    {
        "text": ","
    },
    {
        "text": ", !"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": "API, HTTP- API"
    },
    {
        "text": "API"
    },
    {
        "text": "API, JSON,"
    },
    {
        "text": ", API"
    },
    {
        "text": "JSON, , ,"
    },
    {
        "text": ","
    },
    {
        "text": ", , -"
    },
    {
        "text": ", API"
    },
    {
        "text": "try-catch ,"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": "API, JSON"
    },
    {
        "text": ","
    },
    {
        "text": ", !"
    },
    {
        "text": "return data"
    },
    {
        "text": "return temperature, humidity, wind_speed, weather_condition"
    },
    {
        "text": "WeatherAPI"
    },
    {
        "text": "HTTP- GET API,"
    },
    {
        "text": "API , , ,"
    },
    {
        "text": ","
    },
    {
        "text": "get_weather_dataprocess_weather_data"
    },
    {
        "text": "API ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": "\"YOUR_API_KEY\"requestspip install requests"
    },
    {
        "text": ", API"
    },
    {
        "text": ", !"
    },
    {
        "text": ", ,"
    },
    {
        "text": "API,"
    },
    {
        "text": "API"
    },
    {
        "text": "API API"
    },
    {
        "text": "HTTP- API,"
    },
    {
        "text": ","
    },
    {
        "text": ", !"
    },
    {
        "text": "!"
    },
    {
        "text": "WorkflowSlyAI ASCII HTML-"
    },
    {
        "text": "ASCII -,"
    },
    {
        "text": ","
    },
    {
        "text": "ASCII-"
    },
    {
        "text": ","
    },
    {
        "text": "ASCII HTML-"
    },
    {
        "text": "HTML CSS"
    },
    {
        "text": "HTML-"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": ", !"
    },
    {
        "text": "WMS"
    },
    {
        "text": "<!DOCTYPE html>"
    },
    {
        "text": "<html>"
    },
    {
        "text": "<head>"
    },
    {
        "text": "<style>"
    },
    {
        "text": "</style>"
    },
    {
        "text": "</head>"
    },
    {
        "text": "<body>"
    },
    {
        "text": "<script>"
    },
    {
        "text": "// Create a new WMS layer"
    },
    {
        "text": "// Create a map and add the WMS layer"
    },
    {
        "text": "</script>"
    },
    {
        "text": "</body>"
    },
    {
        "text": "</html>"
    },
    {
        "text": "Leaflet, JavaScript , WMS"
    },
    {
        "text": "HTML CSS div \"map\","
    },
    {
        "text": "JavaScript WMS , URL- WMS, ,"
    },
    {
        "text": ", WMS"
    },
    {
        "text": "L"
    },
    {
        "text": "tileLayer"
    },
    {
        "text": "wmsaddTo"
    },
    {
        "text": "The WMS skill starts by interacting with the user to understand their specific requirements and gather relevant information about the warehouse operations"
    },
    {
        "text": "The skill guides the user through the process of setting up the warehouse in the system, including defining the warehouse layout, storage locations, and inventory categories"
    },
    {
        "text": "The skill provides functionalities for managing inventory, such as receiving goods, updating stock levels, and tracking inventory movements within the warehouse"
    },
    {
        "text": "The skill enables the user to manage customer orders, including order creation, order fulfillment, and order tracking"
    },
    {
        "text": "It ensures efficient order processing and timely delivery"
    },
    {
        "text": "The skill assists in optimizing the picking and packing process by suggesting the most efficient routes and methods for order fulfillment"
    },
    {
        "text": "It considers factors like product location, order priority, and packaging requirements"
    },
    {
        "text": "The skill integrates with shipping carriers and logistics providers to streamline the shipping process"
    },
    {
        "text": "It generates shipping labels, tracks shipments, and provides real-time visibility into the delivery status"
    },
    {
        "text": "The skill offers reporting and analytics capabilities to provide insights into warehouse performance, inventory levels, order fulfillment rates, and other key metrics"
    },
    {
        "text": "It helps identify areas for improvement and supports data-driven decision-making"
    },
    {
        "text": "The skill provides maintenance and support features, including system updates, bug fixes, and user assistance, to ensure the smooth operation of the WMS"
    },
    {
        "text": "By following this logical flow, the WMS skill can effectively manage warehouse operations, optimize processes, and enhance overall productivity"
    },
    {
        "text": "Please note that this is a high-level overview, and the specific implementation details may vary based on the requirements and capabilities of the WMS system"
    },
    {
        "text": "The virtual Genius receives a user request for weather updates"
    },
    {
        "text": "The Genius prompts the user to provide the location for which they want to receive weather updates"
    },
    {
        "text": "The Genius captures the user's location input"
    },
    {
        "text": "The Genius uses a weather API or service to fetch the current weather data for the specified location"
    },
    {
        "text": "The Genius sends a request to the weather API, including the user's location information"
    },
    {
        "text": "Prompt the user to enter their desired location for weather updates"
    },
    {
        "text": "Capture the user's input using an input function or a user interface element"
    },
    {
        "text": "Validate the user's input to ensure it is a valid location"
    },
    {
        "text": "Use a validation mechanism such as checking against a list of valid locations or using a geocoding service to verify the location"
    },
    {
        "text": "Integrate with a weather API service by making an HTTP request to the API endpoint"
    },
    {
        "text": "Pass the user's location as a parameter in the API request"
    },
    {
        "text": "Handle the API response, which typically comes in JSON format, by parsing the data"
    },
    {
        "text": "Extract relevant information from the weather data received from the API response"
    },
    {
        "text": "Access specific fields in the JSON data structure to retrieve temperature, humidity, wind speed, and weather conditions"
    },
    {
        "text": "Use the extracted weather information to generate a concise and informative weather update"
    },
    {
        "text": "Format the weather update message according to your desired output format, such as a text string or a structured object"
    },
    {
        "text": "Provide the weather update to the user through the appropriate channel, such as printing the update to the console, displaying it on a web page, or speaking it out using text-to-speech capabilities"
    },
    {
        "text": "Implement error handling mechanisms to handle cases where the weather API request fails or the location input is invalid"
    },
    {
        "text": "Use try-catch blocks or error handling functions to gracefully handle exceptions and provide meaningful error messages to the user"
    },
    {
        "text": "Test the weather update feature thoroughly to ensure its accuracy and reliability"
    },
    {
        "text": "Continuously optimize the code based on user feedback and performance metrics, such as response time and error rates"
    },
    {
        "text": "Remember to use appropriate libraries or frameworks for making API requests, handling JSON data, and validating user input based on your programming language of choice"
    },
    {
        "text": "I hope this helps you in writing the code for each block in the weather update feature"
    },
    {
        "text": "Let me know if you have any further questions!"
    },
    {
        "text": "In this example, we use the WeatherAPI service to fetch the current weather data for the specified location"
    },
    {
        "text": "The get_weather_data function sends an HTTP GET request to the API endpoint, passing the user's location as a parameter"
    },
    {
        "text": "The API response is then processed using the process_weather_data function to extract relevant information such as temperature, humidity, wind speed, and weather conditions"
    },
    {
        "text": "Finally, the weather update is generated and provided to the user"
    },
    {
        "text": "Remember to replace \"YOUR_API_KEY\" with your actual API key from the weather service you are using"
    },
    {
        "text": "Additionally, you may need to install the requests library using pip install requests if it is not already installed"
    },
    {
        "text": "I hope this example helps you understand the integration process for retrieving weather data from a weather API"
    },
    {
        "text": "Let me know if you have any further questions!"
    },
    {
        "text": "You can use various methods for location validation, such as checking against a list of valid locations, using a geocoding service to verify the location, or implementing a regular expression pattern matching"
    },
    {
        "text": "Choose a weather API service that provides the necessary weather data"
    },
    {
        "text": "Sign up for an API key from the chosen weather service provider"
    },
    {
        "text": "Use the API key to authenticate your requests to the weather API"
    },
    {
        "text": "Make an HTTP request to the weather API endpoint, passing the user's location as a parameter"
    },
    {
        "text": "Handle exceptions gracefully and provide meaningful error messages to the user"
    },
    {
        "text": "Remember to use the appropriate libraries or frameworks for making API requests, handling JSON data, and validating user input based on your programming language of choice"
    },
    {
        "text": "I hope this detailed explanation helps you understand the integration process for the weather update feature"
    },
    {
        "text": "Let me know if you have any further questions!"
    },
    {
        "text": "Certainly! Visualization is an essential aspect of understanding and communicating the structure and components of an Genius"
    },
    {
        "text": "With WorkflowSlyAI, you can utilize ASCII drawings and HTML templates to create visual representations of your Genius's workflow and architecture"
    },
    {
        "text": "Use ASCII drawings or flowchart diagrams to represent the workflow of your Genius"
    },
    {
        "text": "Identify the different steps or blocks in the workflow and their relationships"
    },
    {
        "text": "Use arrows or lines to indicate the flow of information or control between the steps"
    },
    {
        "text": "Create visual representations of the various components or modules in your Genius"
    },
    {
        "text": "Use ASCII art or graphical icons to represent each component"
    },
    {
        "text": "Arrange the components in a logical and intuitive manner to depict their relationships and interactions"
    },
    {
        "text": "Convert your ASCII drawings or graphical representations into HTML templates"
    },
    {
        "text": "Use HTML tags and CSS styling to create visually appealing and interactive visualizations"
    },
    {
        "text": "Embed the HTML templates into your Genius's user interface or documentation for easy access and understanding"
    },
    {
        "text": "By visualizing your Genius, you can gain a clearer understanding of its structure, identify potential bottlenecks or areas for improvement, and effectively communicate its functionality to others"
    },
    {
        "text": "I hope this helps you in visualizing your Genius"
    },
    {
        "text": "Let me know if you have any further questions!"
    },
    {
        "text": "In this example, we use the Leaflet library, a popular JavaScript library for interactive maps, to visualize the WMS layer"
    },
    {
        "text": "The HTML and CSS code provide a container div with the id \"map\" where the map will be displayed"
    },
    {
        "text": "The JavaScript code creates a new WMS layer using the L"
    },
    {
        "text": "tileLayer"
    },
    {
        "text": "wms method, specifying the URL of the WMS service, the desired layers, image format, and transparency settings"
    },
    {
        "text": "Finally, the WMS layer is added to the map using the addTo method"
    },
    {
        "text": "The Genius receives the weather data from the API response"
    },
    {
        "text": "The Genius extracts relevant information such as temperature, humidity, wind speed, and weather conditions from the data"
    },
    {
        "text": "The Genius generates a concise and informative weather update based on the extracted information"
    },
    {
        "text": "The virtual Genius concludes the weather update process"
    },
    {
        "text": "Please note that the specific implementation details, including the weather API used and the format of the weather update, may vary based on the chosen weather service and the platform on which the virtual Genius operates"
    },
    {
        "text": "I hope this logical flow helps you in designing the weather update feature for your virtual Genius"
    },
    {
        "text": "Let me know if you need any further assistance!"
    },
    {
        "text": "The process starts with the \"Start\" node"
    },
    {
        "text": "The user provides the location information at the \"Gather Location Information\" node"
    },
    {
        "text": "The Genius retrieves weather data from the API at the \"Retrieve Weather Data\" node"
    },
    {
        "text": "The weather data is processed at the \"Process Weather Data\" node"
    },
    {
        "text": "The Genius generates a weather update at the \"Generate Weather Update\" node"
    },
    {
        "text": "The weather update is provided to the user at the \"Provide Weather Update\" node"
    },
    {
        "text": "The process ends at the \"End\" node"
    },
    {
        "text": "Please note that this is a simplified representation of the workflow, and the actual implementation may involve additional steps or decision points based on the specific requirements and capabilities of the virtual Genius"
    },
    {
        "text": "I hope this workflow representation helps you visualize the sequence of actions in the weather update feature"
    },
    {
        "text": "Let me know if you need any further assistance!]"
    },
    {
        "text": "- ****"
    },
    {
        "text": "Ready Player Me"
    },
    {
        "text": ", MindOS\u00b9"
    },
    {
        "text": "- ****"
    },
    {
        "text": ", , ,"
    },
    {
        "text": ", Genius \u00b9"
    },
    {
        "text": "- ****"
    },
    {
        "text": "Genius, , ,"
    },
    {
        "text": ", , , Genius \u00b9"
    },
    {
        "text": "- ** **"
    },
    {
        "text": ", Genius"
    },
    {
        "text": "Genius , \u00b9"
    },
    {
        "text": "- ** **"
    },
    {
        "text": "Genius , ,"
    },
    {
        "text": "Genius\u00b9"
    },
    {
        "text": "**** Genius,"
    },
    {
        "text": "Genius, ,"
    },
    {
        "text": ","
    },
    {
        "text": "- , , Bing"
    },
    {
        "text": "Bing! \ud83d\ude0a"
    },
    {
        "text": "- , ,"
    },
    {
        "text": "- , , ,"
    },
    {
        "text": "- - ,"
    },
    {
        "text": "- - , , , , , , ,"
    },
    {
        "text": "- - ,"
    },
    {
        "text": ", RESTful, AsyncAPI, RPC, GraphQL OData"
    },
    {
        "text": "- -"
    },
    {
        "text": ","
    },
    {
        "text": "- - ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": "- - , , ,,"
    },
    {
        "text": "- MindOS , , ,"
    },
    {
        "text": "- MindOS , JavaScript, Python SQL"
    },
    {
        "text": "\" Genius?\","
    },
    {
        "text": "\" ?\","
    },
    {
        "text": "\" ?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\" \","
    },
    {
        "text": "\" machine learning natural language processing\","
    },
    {
        "text": "\", , 3D-\""
    },
    {
        "text": "]"
    },
    {
        "text": "\" ?\","
    },
    {
        "text": "\" ?\","
    },
    {
        "text": "\" Genius?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\" JSON\","
    },
    {
        "text": "\" , , \","
    },
    {
        "text": "\" \""
    },
    {
        "text": "],"
    },
    {
        "text": "\"Genius_architecture"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"data_flow"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"training_loop"
    },
    {
        "text": "png\""
    },
    {
        "text": "]"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": "JSON Python"
    },
    {
        "text": "// previous data"
    },
    {
        "text": "// links"
    },
    {
        "text": "// images"
    },
    {
        "text": "\"NLP helps Geniuss understand natural language\","
    },
    {
        "text": "\"Important techniques are tokenization, lemmatization, entity recognition\""
    },
    {
        "text": "\"Computer vision extracts information from visual inputs\","
    },
    {
        "text": "\"Useful for image classification, object detection, face recognition\""
    },
    {
        "text": "\"Weather API call based on geolocation\","
    },
    {
        "text": "\"Parse JSON response to extract forecast\""
    },
    {
        "text": "\"Integrate with Google Calendar API\","
    },
    {
        "text": "\"Support adding, editing, removing events\""
    },
    {
        "text": "\"User name\","
    },
    {
        "text": "\"Current topic\","
    },
    {
        "text": "\"Recent questions and answers\""
    },
    {
        "text": "\"Interactions history\","
    },
    {
        "text": "\"User preferences\""
    },
    {
        "text": ","
    },
    {
        "text": "\"What is the best way to create an Genius?\","
    },
    {
        "text": "\"How can I train a conversational Genius?\","
    },
    {
        "text": "\"What visualization methods are helpful for understanding processes?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"You need to define the use cases and collect training data"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Machine learning and NLP can be used for training"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Diagrams, flowcharts, interactive 3D models are useful"
    },
    {
        "text": "\""
    },
    {
        "text": "]"
    },
    {
        "text": "],"
    },
    {
        "text": "\"Genius_arch_diagram"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"conversation_flowchart"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"model_training_loop"
    },
    {
        "text": "png\""
    },
    {
        "text": "\"NLP techniques help Geniuss understand natural human language"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Important techniques include tokenization, lemmatization, named entity recognition"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Computer vision extracts high-level information from visual inputs like images and videos"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Useful CV tasks are image classification, object detection, face recognition"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Call OpenWeatherMap API with geolocation coordinates"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Parse JSON response to extract weather data like temperature, humidity, description"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Use Google Calendar API to add, edit, and delete events"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Integrate with OAuth for authentication and access control"
    },
    {
        "text": "\""
    },
    {
        "text": "\"User name, location, current topic"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Recent questions and answers"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Past conversation history and topics"
    },
    {
        "text": "\","
    },
    {
        "text": "\"User preferences and personal details"
    },
    {
        "text": "\""
    },
    {
        "text": ", , Genius"
    },
    {
        "text": "\"What are the main approaches for building a conversational Genius?\","
    },
    {
        "text": "\"How can I leverage machine learning to create a robust Genius?\","
    },
    {
        "text": "\"What data structure is best for storing conversational logs?\""
    },
    {
        "text": "\"The main approaches are rule-based, retrieval-based, and generative models"
    },
    {
        "text": "Combining them works best"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Supervised learning with labeled datasets is effective"
    },
    {
        "text": "Neural networks like LSTM, BERT are useful"
    },
    {
        "text": "\","
    },
    {
        "text": "\"JSON provides a flexible schema for storing chat history, context, entities"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Genius_architecture_diagram"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"conversation_flow_diagram"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"neural_network_training_loop"
    },
    {
        "text": "png\""
    },
    {
        "text": "\"NLP techniques enable Geniuss to process human language input"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Key NLP tasks are language modeling, named entity recognition, sentiment analysis"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Machine learning models can learn from data without explicit programming"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Common algorithms used are regression, decision trees, neural networks"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Integrate OpenWeatherMap API to get weather data"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Process JSON response to extract temperature, humidity, weather conditions"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Use Google Calendar API to manage calendar"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Implement OAuth 2"
    },
    {
        "text": "0 for secure user authentication and access"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Recent questions and responses"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Past conversations and topics discussed"
    },
    {
        "text": "\","
    },
    {
        "text": "\"User preferences, personal details"
    },
    {
        "text": "\""
    },
    {
        "text": "]"
    },
    {
        "text": "? , ,, 5 ,"
    },
    {
        "text": "\"What are the best practices for creating a conversational Genius?\","
    },
    {
        "text": "\"How can I leverage machine learning and NLP for robust language understanding?\","
    },
    {
        "text": "\"What tools and frameworks do you recommend for deployment?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"Follow principles of utility, natural flow, personality"
    },
    {
        "text": "Combine rules, ML, and external APIs"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Build training datasets for intents, entities"
    },
    {
        "text": "Use transformers like BERT, GPT-3"
    },
    {
        "text": "Try Rasa, Dialogflow"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Start with chat widgets"
    },
    {
        "text": "For scale, use channels like Facebook Messenger, Slack"
    },
    {
        "text": "Host on cloud platforms"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Genius_design_architecture"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"rasa_nlu_pipeline"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"dialogflow_essentials"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"azure_bot_service_channels"
    },
    {
        "text": "png\""
    },
    {
        "text": "\"Goal of conversational AI is natural dialog between humans and machines"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Key principles are utility, natural flow, context tracking, personality"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Common architectures combine NLU, dialogue manager, NLG"
    },
    {
        "text": "\""
    },
    {
        "text": "\"NLP enables Geniuss to analyze textual data and extract meaning"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Tasks include language modeling, intent recognition, named entity extraction"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Integrate OpenWeatherMap API to fetch weather data"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Process JSON response to extract temperature, precipitation chance, weather state"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Recent questions and responses"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Detected intents and entities"
    },
    {
        "text": "\""
    },
    {
        "text": "\"User preferences, personal details"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Interaction frequency, common questions"
    },
    {
        "text": "\""
    },
    {
        "text": "skills intents entities"
    },
    {
        "text": "10"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "// ,"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "// -"
    },
    {
        "text": "]"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "],"
    },
    {
        "text": "//"
    },
    {
        "text": ", ,,"
    },
    {
        "text": ","
    },
    {
        "text": ", Genius"
    },
    {
        "text": "\"Hello, how are you doing today?\","
    },
    {
        "text": "\"What is the weather forecast for Seattle tomorrow?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"Hello! I'm doing great thanks for asking"
    },
    {
        "text": "How can I help you today?\","
    },
    {
        "text": "\"Let me check the weather forecast for Seattle tomorrow"
    },
    {
        "text": "According to the Weather Channel API, tomorrow in Seattle there is a high of 64\u00b0F and a low of 50\u00b0F, with a 60% chance of rain showers"
    },
    {
        "text": "\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"Can you help me find a nice restaurant in Paris for a romantic dinner next Friday at 8pm?\""
    },
    {
        "text": "],"
    },
    {
        "text": "Le Meurice Alain Ducasse - 5-star fine dining with stunning views of Paris"
    },
    {
        "text": "They have availability for 8pm next Friday"
    },
    {
        "text": "L'Avant Comptoir de la Mer - Charming and cozy seafood tapas place near the Saint-Germain-des-Pr\u00e9s"
    },
    {
        "text": "I can book a table for two at 8pm"
    },
    {
        "text": "Le Caf\u00e9 de l'Homme - Elegant bistro inside the Mus\u00e9e de l'Homme"
    },
    {
        "text": "They have a lovely terrace and can take a reservation at your preferred time"
    },
    {
        "text": "\""
    },
    {
        "text": ", , -"
    },
    {
        "text": "\"Machine learning is a subset of artificial intelligence that enables computers to learn patterns from data in order to make decisions and predictions without being explicitly programmed"
    },
    {
        "text": "It involves training statistical models on sample data to perform tasks like classification, regression, clustering, reinforcement learning"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Supervised learning algorithms like linear regression, random forests, and deep neural networks are commonly used to train NLP and dialogue models for conversational Geniuss from labeled conversation datasets"
    },
    {
        "text": "\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"Integrate natural language understanding to parse user requests related to calendar management"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Connect to Google Calendar API and implement OAuth 2"
    },
    {
        "text": "0 authorization flow for secure access to user calendar"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Use entities like EVENT_TITLE, LOCATION, DATE, TIME detected by NLU to create, update, and delete events"
    },
    {
        "text": "\""
    },
    {
        "text": "\"VIEW_CALENDAR - view user calendar events\","
    },
    {
        "text": "\"ADD_EVENT - add a new calendar event\","
    },
    {
        "text": "\"EDIT_EVENT - make changes to an existing event\","
    },
    {
        "text": "\"DELETE_EVENT - delete an event from the calendar\""
    },
    {
        "text": ", ,"
    },
    {
        "text": ", , -"
    },
    {
        "text": ","
    },
    {
        "text": "10 ,"
    },
    {
        "text": "\"NLP enables computers to analyze, understand, and generate human language"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Key techniques like speech recognition, NLU, NLG are used in conversational AI"
    },
    {
        "text": "\""
    },
    {
        "text": "\"ML allows systems to learn from data without explicit programming"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Algorithms like regression, neural networks are used to train chatbots"
    },
    {
        "text": "\""
    },
    {
        "text": "\"architecture_diagram"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"flowchart"
    },
    {
        "text": "svg\""
    },
    {
        "text": "\"promo_video"
    },
    {
        "text": "mp4\","
    },
    {
        "text": "\"overview"
    },
    {
        "text": "mov\""
    },
    {
        "text": "]"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": "// Generate data for this skill using the existing knowledge graph, content, and skills"
    },
    {
        "text": "// - I want to create a new Genius"
    },
    {
        "text": "// - How can I make my own chatbot?"
    },
    {
        "text": "// - Can you help me build an Genius?"
    },
    {
        "text": "// - I want my Genius to [goal]"
    },
    {
        "text": "// - The purpose of my Genius is to [goal]"
    },
    {
        "text": "// - My Genius should [goal]"
    },
    {
        "text": "// - My Genius is for [domain]"
    },
    {
        "text": "// - The domain of my Genius is [domain]"
    },
    {
        "text": "// - I want my Genius to work in the [domain] field"
    },
    {
        "text": "// - I want my Genius to have [features]"
    },
    {
        "text": "// - The features of my Genius are [features]"
    },
    {
        "text": "// - My Genius should be able to [features]"
    },
    {
        "text": "// The testing, deployment, monitoring, and improvement modules remain the same as before // They can be used to test, deploy, monitor, and improve the new Geniuss created by the Genius_creator skill // For example, the testing module can run conversations with the new Geniuss and evaluate their performance // The deployment module can launch the new Geniuss on different channels or platforms // The monitoring module can track the metrics and tools of the new Geniuss in real time // The improvement module can provide feedback and improvement suggestions for the new Geniuss based on data and feedback"
    },
    {
        "text": "// facts"
    },
    {
        "text": "// facts"
    },
    {
        "text": "// examples"
    },
    {
        "text": "// docs, images, videos"
    },
    {
        "text": "// details"
    },
    {
        "text": "// details"
    },
    {
        "text": "\"Prompt for Genius name, domain and use cases\","
    },
    {
        "text": "\"Initialize new MindOS instance with base components\","
    },
    {
        "text": "\"Generate training data using knowledge graph and existing skills\","
    },
    {
        "text": "\"Fine-tune language and dialog models on new data\""
    },
    {
        "text": "\"Iteratively train NLU, dialog manager, NLG models\","
    },
    {
        "text": "\"Evaluate using test conversations and user feedback\","
    },
    {
        "text": "\"Retrain models to improve performance\""
    },
    {
        "text": "\"Test on channel APIs like Messenger, Slack\","
    },
    {
        "text": "\"Publish trained models and data assets\","
    },
    {
        "text": "\"Monitor conversations and collect feedback\""
    },
    {
        "text": "\"Analyze logs, metrics to identify issues\","
    },
    {
        "text": "\"Collect user feedback through surveys, interviews\","
    },
    {
        "text": "\"Update training data, workflows to enhance Genius\""
    },
    {
        "text": "// metrics, tools"
    },
    {
        "text": "// process, techniques"
    },
    {
        "text": "Please let me know if I should expand or refine any other sections related to workflows, integrations, or fine-tuning of Geniuss in MindOS"
    },
    {
        "text": "I'm happy to iterate and improve the data structure"
    },
    {
        "text": "// facts"
    },
    {
        "text": "// examples"
    },
    {
        "text": "// docs, images, videos"
    },
    {
        "text": "// details"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "JSON Genius"
    },
    {
        "text": ", ,, ,"
    },
    {
        "text": ", -,"
    },
    {
        "text": "?"
    },
    {
        "text": "\"NLP allows computers to analyze, understand and generate human language through machine learning algorithms"
    },
    {
        "text": "Main tasks include speech recognition, natural language understanding, machine translation, sentiment analysis and natural language generation"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Machine learning uses statistical models and algorithms to give computer systems the ability to learn from data without being explicitly programmed"
    },
    {
        "text": "Algorithms like regression, clustering, decision trees, neural networks can be trained on conversation data"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Conversational AI involves building interfaces that allow humans to interact with computers using natural language"
    },
    {
        "text": "Main components include speech recognition, NLU, dialogue management, NLG, knowledge bases"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Genius_architecture"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"dialogue_flowchart"
    },
    {
        "text": "svg\""
    },
    {
        "text": "\"Genius_demo"
    },
    {
        "text": "mp4\","
    },
    {
        "text": "\"nlp_techniques"
    },
    {
        "text": "mov\""
    },
    {
        "text": "\"Number of conversations\","
    },
    {
        "text": "\"Conversation resolution rate\","
    },
    {
        "text": "\"Intent recognition accuracy\","
    },
    {
        "text": "\"Entity extraction accuracy\","
    },
    {
        "text": "\"User satisfaction score\""
    },
    {
        "text": "\"Chatbase\","
    },
    {
        "text": "\"Dashbot\","
    },
    {
        "text": "\"Bespoken Analytics\","
    },
    {
        "text": "\"Chatlytics\""
    },
    {
        "text": "\"Analyze logs and metrics to identify issues\","
    },
    {
        "text": "\"Review negative user feedback\","
    },
    {
        "text": "\"Add more training data for problematic intents\","
    },
    {
        "text": "\"Retrain NLU model with updated data\","
    },
    {
        "text": "\"Test conversations to measure performance gains\""
    },
    {
        "text": "\"Active learning - flag unclear user inputs for human review\","
    },
    {
        "text": "\"Reinforcement learning - reward bot actions that lead to positive outcomes\","
    },
    {
        "text": "\"Transfer learning - leverage models trained in related domains\""
    },
    {
        "text": ", -, ,, ,, ,"
    },
    {
        "text": ", -"
    },
    {
        "text": "// NLP, ML, conversational AI"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "//"
    },
    {
        "text": "JSON , Genius -"
    },
    {
        "text": ", -"
    },
    {
        "text": "!"
    },
    {
        "text": "\"conversations\" - ,"
    },
    {
        "text": "\"skills\" - /"
    },
    {
        "text": "\"training\" - ,"
    },
    {
        "text": "\"testing\" - ,"
    },
    {
        "text": "\"monitoring\" - ,"
    },
    {
        "text": ","
    },
    {
        "text": ", !"
    },
    {
        "text": ","
    },
    {
        "text": "API runtime"
    },
    {
        "text": ", !"
    },
    {
        "text": "!"
    },
    {
        "text": "Transitions -"
    },
    {
        "text": "Data and data passing -"
    },
    {
        "text": "Events -,"
    },
    {
        "text": "Error handling -"
    },
    {
        "text": "Compensation -"
    },
    {
        "text": "Extensions -"
    },
    {
        "text": "-"
    },
    {
        "text": "- ,"
    },
    {
        "text": "- workflow"
    },
    {
        "text": "JSON/YAML"
    },
    {
        "text": "Serverless Workflow Specification"
    },
    {
        "text": "Table of Contents"
    },
    {
        "text": "Abstract"
    },
    {
        "text": "Status of this document"
    },
    {
        "text": "Overview"
    },
    {
        "text": "Why we need a specification?"
    },
    {
        "text": "Focus on standards"
    },
    {
        "text": "Project Components"
    },
    {
        "text": "Specification Details"
    },
    {
        "text": "Core Concepts"
    },
    {
        "text": "Workflow Definition"
    },
    {
        "text": "Workflow Instance"
    },
    {
        "text": "Workflow Model"
    },
    {
        "text": "Workflow Data"
    },
    {
        "text": "Workflow Data Input"
    },
    {
        "text": "Information Passing Between States"
    },
    {
        "text": "Workflow data output"
    },
    {
        "text": "State data filters"
    },
    {
        "text": "Action data filters"
    },
    {
        "text": "Event data filters"
    },
    {
        "text": "Using multiple data filters"
    },
    {
        "text": "Data Merging"
    },
    {
        "text": "Workflow Functions"
    },
    {
        "text": "Using Functions for RESTful Service Invocations"
    },
    {
        "text": "Using Functions for Async API Service Invocations"
    },
    {
        "text": "Using Functions for RPC Service Invocations"
    },
    {
        "text": "Using Functions for GraphQL Service Invocations"
    },
    {
        "text": "Invoking a GraphQL Query"
    },
    {
        "text": "Invoking a GraphQL Mutation"
    },
    {
        "text": "Using Functions for OData Service Invocations"
    },
    {
        "text": "Creating an OData Function Definition"
    },
    {
        "text": "Invoking an OData Function Definition"
    },
    {
        "text": "Using Functions for Expression Evaluation"
    },
    {
        "text": "Defining custom function types"
    },
    {
        "text": "Workflow Expressions"
    },
    {
        "text": "Workflow Definition Structure"
    },
    {
        "text": "Workflow States"
    },
    {
        "text": "Event State"
    },
    {
        "text": "Operation State"
    },
    {
        "text": "Switch State"
    },
    {
        "text": "Sleep State"
    },
    {
        "text": "Parallel State"
    },
    {
        "text": "Inject State"
    },
    {
        "text": "ForEach State"
    },
    {
        "text": "Callback State"
    },
    {
        "text": "Related State Definitions"
    },
    {
        "text": "Function Definition"
    },
    {
        "text": "Event Definition"
    },
    {
        "text": "Auth Definition"
    },
    {
        "text": "Basic Properties Definition"
    },
    {
        "text": "Bearer Properties Definition"
    },
    {
        "text": "OAuth2 Properties Definition"
    },
    {
        "text": "Correlation Definition"
    },
    {
        "text": "OnEvents Definition"
    },
    {
        "text": "Action Definition"
    },
    {
        "text": "Subflow Action"
    },
    {
        "text": "FunctionRef Definition"
    },
    {
        "text": "EventRef Definition"
    },
    {
        "text": "SubFlowRef Definition"
    },
    {
        "text": "Error Definition"
    },
    {
        "text": "Retry Definition"
    },
    {
        "text": "Transition Definition"
    },
    {
        "text": "Switch State Data Conditions"
    },
    {
        "text": "Switch State Event Conditions"
    },
    {
        "text": "Parallel State Branch"
    },
    {
        "text": "Parallel State Handling Exceptions"
    },
    {
        "text": "Start Definition"
    },
    {
        "text": "Schedule Definition"
    },
    {
        "text": "Cron Definition"
    },
    {
        "text": "End Definition"
    },
    {
        "text": "ProducedEvent Definition"
    },
    {
        "text": "Transitions"
    },
    {
        "text": "Additional Properties"
    },
    {
        "text": "Workflow Error Handling"
    },
    {
        "text": "Defining Errors"
    },
    {
        "text": "Action retries"
    },
    {
        "text": "Retry actions on known errors"
    },
    {
        "text": "Automatic retries on known and unknown errors"
    },
    {
        "text": "Workflow Timeouts"
    },
    {
        "text": "Workflow Timeout Definition"
    },
    {
        "text": "WorkflowExecTimeout Definition"
    },
    {
        "text": "States Timeout Definition"
    },
    {
        "text": "Branch Timeout Definition"
    },
    {
        "text": "Event Timeout Definition"
    },
    {
        "text": "Workflow Compensation"
    },
    {
        "text": "Defining Compensation"
    },
    {
        "text": "Triggering Compensation"
    },
    {
        "text": "Compensation Execution Details"
    },
    {
        "text": "Compensation and Active States"
    },
    {
        "text": "Unrecoverable errors during compensation"
    },
    {
        "text": "Continuing as a new Execution"
    },
    {
        "text": "ContinueAs in sub workflows"
    },
    {
        "text": "Workflow Versioning"
    },
    {
        "text": "Workflow Constants"
    },
    {
        "text": "Workflow Secrets"
    },
    {
        "text": "Workflow Metadata"
    },
    {
        "text": "Workflow Context"
    },
    {
        "text": "Extensions"
    },
    {
        "text": "Use Cases"
    },
    {
        "text": "Examples"
    },
    {
        "text": "Comparison to other workflow languages"
    },
    {
        "text": "References"
    },
    {
        "text": "License"
    },
    {
        "text": "The Serverless Workflow project defines a vendor-neutral and declarative workflow language,targeting the Serverless computing technology domain"
    },
    {
        "text": "This document represents the current state of the specification"
    },
    {
        "text": "It includes all features so far releasedas well as all features planned to be added in the next release"
    },
    {
        "text": "You can find all specification releases here"
    },
    {
        "text": "You can find the specification roadmap here"
    },
    {
        "text": "Workflows allow us to capture and organize business requirements in a unified manner"
    },
    {
        "text": "They can bridge the gap between how we express and model business logic"
    },
    {
        "text": "Serverless Workflow focuses on defining a vendor-neutral, platform-independent, and declarative workflowlanguage that targets the serverless computing technology domain"
    },
    {
        "text": "It can be used to significantly bridge the gap between your unique business domain and the target technology domain"
    },
    {
        "text": "The lack of a common way to define and model workflows means that we must constantly re-learnhow to write them"
    },
    {
        "text": "This also limits the potential for common libraries, tooling andinfrastructure to aid workflow modeling and execution across different platforms"
    },
    {
        "text": "Portability as well as productivity that can be achieved from workflow orchestration is hindered overall"
    },
    {
        "text": "Serverless Workflow addresses the need for a community-driven, vendor-neutral and a platform-independentworkflow language specification that targets the serverless computing technology domain"
    },
    {
        "text": "Having and using a specification-based workflow language allows us to model our workflows once and deploy themonto many different container/cloud platforms, expecting the same execution results"
    },
    {
        "text": "For more information on the history, development and design rationale behind the specification, see the Serverless Workflow Wiki"
    },
    {
        "text": "Serverless Workflow language takes advantage of well-established and known standards such as CloudEvents, OpenAPI specifications,gRPC and GraphQL"
    },
    {
        "text": "Definitions of the workflow language"
    },
    {
        "text": "This is defined via the Workflow JSON Schema"
    },
    {
        "text": "You can use bothJSON and YAML formats to model your workflows"
    },
    {
        "text": "Following sections provide detailed descriptions of all parts of the Serverless Workflow language"
    },
    {
        "text": "A workflow definition is a JSON or YAML file that conforms to the Serverless Workflow specification DSL"
    },
    {
        "text": "It consists of the core Workflow Definition Structureand the Workflow Model It defines a blueprint used by runtimes for its execution"
    },
    {
        "text": "Runtimes can initialize workflow definitions for some particular set of data inputs or events"
    },
    {
        "text": "A workflow instance represents a single Workflow Execution corresponding to the instructions provided by aworkflow definition"
    },
    {
        "text": "A workflow instance can be short or long-running"
    },
    {
        "text": "A single workflow instanceshould be isolated, meaning it should not share state and data with other workflow instances"
    },
    {
        "text": "Workflow instances should be able to communicate with each other via events"
    },
    {
        "text": "Depending on their workflow definition, workflow instances can be short-lived orcan execute for days, weeks, or years"
    },
    {
        "text": "Each workflow instances should have its unique identifier, which should remainunchanged throughout its execution"
    },
    {
        "text": "Workflow instances can be started providing some data input"
    },
    {
        "text": "This is described in detail in theworkflow data input section"
    },
    {
        "text": "Workflow instances can also wait for examples to start their execution, which is the casewhere a workflow definition contains a EventState starting workflow state"
    },
    {
        "text": "For long-running workflow-executions, you can utilize the keepActive workflow property whichprovides more control as to when exactly to terminate Workflow Execution"
    },
    {
        "text": "In cases where aWorkflow Execution should be continued as a new one, the DSL also provides the continueAs property which is describedin detail in the Continuing a new Execution section"
    },
    {
        "text": "Function definitions - Reusable functions that can declare services that need to be invoked, or expressions to be evaluated"
    },
    {
        "text": "Event definitions - Reusable declarations of events that need to be consumed to start or continue workflow instances, trigger function/service execution, or be produced during Workflow Execution"
    },
    {
        "text": "Retry definitions - Reusable retry definitions"
    },
    {
        "text": "Can specify retry strategies for service invocations during Workflow Execution"
    },
    {
        "text": "Timeout definitions - Reusable timeout definitions"
    },
    {
        "text": "Can specify default Workflow Execution timeout, as well as workflow state, action, and branch execution timeouts"
    },
    {
        "text": "Errors definition - Reusable error definitions"
    },
    {
        "text": "Provide domain-specific error definitions which can be referenced in workflow states error handling"
    },
    {
        "text": "State definitions - Definition of states, the building blocks of workflow control flow logic"
    },
    {
        "text": "States can reference the reusable function, event and retry definitions"
    },
    {
        "text": "The initial Workflow data input is passed to the workflow starting state as its data input"
    },
    {
        "text": "When a state finishes its execution, its data output is passed as data input to the next state that should be executed"
    },
    {
        "text": "When Workflow Execution ends, the last executed workflow state's data output becomes the final Workflow data output"
    },
    {
        "text": "States can filter their data inputs and outputs using State Data filters"
    },
    {
        "text": "States can also consume events as well as invoke services"
    },
    {
        "text": "These event payloads and service invocation resultscan be filtered using Event data filters and Action data filters"
    },
    {
        "text": "Data filters use workflow expressions for selecting and manipulating state datainput and output, action inputs and results, and event payloads"
    },
    {
        "text": "Multiple filters can be combined to gain high level of control of your workflow state data"
    },
    {
        "text": "You can find an example of that inthis section"
    },
    {
        "text": "Data from consumed events,and action execution results are added/mergedto state data"
    },
    {
        "text": "Reference the data merging section to learn about the merging rules that should be applied"
    },
    {
        "text": "Workflow data input is passed to the workflow starting state as its data input"
    },
    {
        "text": "If the state is the workflow starting state, its data input is the workflow data input"
    },
    {
        "text": "When Workflow Execution ends, the data output of the last executed state becomes the workflow data output"
    },
    {
        "text": "Each Workflow Execution should produce a data output"
    },
    {
        "text": "The workflow data output is the data output of the last executed workflow state"
    },
    {
        "text": "Parameter\tDescription\tType\tRequired"
    },
    {
        "text": "input\tWorkflow expression to filter the states data input\tstring\tno"
    },
    {
        "text": "output\tWorkflow expression that filters the states data output\tstring\tno"
    },
    {
        "text": "Click to view example definition"
    },
    {
        "text": "JSON\tYAML"
    },
    {
        "text": "State data filters can be used to filter the state's data input and output"
    },
    {
        "text": "The state data filters input property expression is applied when the workflow transitions to the current state and receives its data input"
    },
    {
        "text": "It can be used to select only data that is needed and disregard what is not needed"
    },
    {
        "text": "If input is not defined or does not select any parts of the state's data input, its data input is not filtered"
    },
    {
        "text": "The state data filter output property expression is applied right before the state transitions to the next state defined"
    },
    {
        "text": "It filters the state's data output to be passed as data input to the transitioning state"
    },
    {
        "text": "If the current state is the workflow end state, the filtered state's data output becomes the workflow data output"
    },
    {
        "text": "If output is not defined or does not select any parts of the state's data output, its data output is not filtered"
    },
    {
        "text": "Results of the input expression should become the state data input"
    },
    {
        "text": "Results of the output expression should become the state data output"
    },
    {
        "text": "For more information on this you can reference the data merging section"
    },
    {
        "text": "For our second example, let's say that we are interested in the only vegetable \"veggie-like\""
    },
    {
        "text": "Here we have two ways of filtering our data, depending on if actions within our state need access to all vegetables, oronly the ones that are \"veggie-like\""
    },
    {
        "text": "fromStateData\tWorkflow expression that filters state data that can be used by the action\tstring\tno"
    },
    {
        "text": "useResults\tIf set to false, action data results are not added/merged to state data"
    },
    {
        "text": "In this case 'results' and 'toStateData' should be ignored"
    },
    {
        "text": "Default is true"
    },
    {
        "text": "boolean\tno"
    },
    {
        "text": "results\tWorkflow expression that filters the actions data results\tstring\tno"
    },
    {
        "text": "toStateData\tWorkflow expression that selects a state data element to which the action results should be added/merged into"
    },
    {
        "text": "If not specified denotes the top-level state data element\tstring\tno"
    },
    {
        "text": "Filter the state data to select only the data that can be used within function definition arguments using its fromStateData property"
    },
    {
        "text": "Filter the action results to select only the result data that should be added/merged back into the state datausing its results property"
    },
    {
        "text": "Select the part of state data which the action data results should be added/merged tousing the toStateData property"
    },
    {
        "text": "To give an example, let's say we have an action which returns a list of breads and pasta types"
    },
    {
        "text": "For our workflow, we are only interested into breads and not the pasta"
    },
    {
        "text": "]"
    },
    {
        "text": "\"baguette\","
    },
    {
        "text": "\"brioche\","
    },
    {
        "text": "\"rye\""
    },
    {
        "text": "\"spaghetti\""
    },
    {
        "text": "useData\tIf set to false, event payload is not added/merged to state data"
    },
    {
        "text": "In this case 'data' and 'toStateData' should be ignored"
    },
    {
        "text": "Default is true"
    },
    {
        "text": "boolean\tno"
    },
    {
        "text": "Filter the event payload to select only the data that should be added/merged into the state datausing its data property"
    },
    {
        "text": "Select the part of state data into which the event payload should be added/merged intousing the toStateData property"
    },
    {
        "text": "As Event states can take advantage of all defined data filters"
    },
    {
        "text": "In the example below, we definea workflow with a single event state and show how data filters can be combined"
    },
    {
        "text": "]"
    },
    {
        "text": "The workflow data input then becomes the data input of the starting workflow state"
    },
    {
        "text": "Here is a sample diagram showing our workflow, each numbered step on this diagram shows a certain defined point duringWorkflow Execution at which data filters are invoked and correspond to the numbered items below"
    },
    {
        "text": "The event state stateDataFilter is invoked to filter its data input"
    },
    {
        "text": "The filters \"input\" expression is evaluated andselects only the \"greetings\" data"
    },
    {
        "text": "The rest of the state data input should be disregarded"
    },
    {
        "text": "After the action is executed, the actionDataFilter \"results\" expression is evaluated to filter the results returned from the action execution"
    },
    {
        "text": "In this case, we select only the \"greetingMessageResult\" element from the results"
    },
    {
        "text": "The action filters \"toStateData\" expression then defines that we want to add/merge this action result tostate data under the \"finalCustomerGreeting\" element"
    },
    {
        "text": "When our event state finishes its execution, the states \"stateDataFilter\" \"output\" filter expression is executedto filter the state data to create the final state data output"
    },
    {
        "text": "In case of event and action filters, their \"toStateData\" property can be defined to select a specific elementof the state data with which merging should be done against"
    },
    {
        "text": "If this element does not exist, a new one shouldbe created first"
    },
    {
        "text": "Merging string types should be done by overwriting the data from events data/action results into the merging element of the state data"
    },
    {
        "text": "Workflow functions are reusable definitions for service invocations and/or expression evaluation"
    },
    {
        "text": "They can be referenced by their domain-specific names inside workflow states"
    },
    {
        "text": "Using functions for RESTful service invocations"
    },
    {
        "text": "Using functions for gRPC service invocation"
    },
    {
        "text": "Using functions for GraphQL service invocation"
    },
    {
        "text": "Using functions for expression evaluations"
    },
    {
        "text": "We can define if functions are invoked sync or async"
    },
    {
        "text": "Referencethe functionRef to learn more on how to do this"
    },
    {
        "text": "Functions can be used to describe services and their operations that need to be invoked duringWorkflow Execution"
    },
    {
        "text": "They can be referenced by states action definitions to clearlydefine when the service operations should be invoked during Workflow Execution, as well as the data parameterspassed to them if needed"
    },
    {
        "text": "Note that with Serverless Workflow, we can also define invocation of services which are triggered via an event"
    },
    {
        "text": "To learn more about that, please reference the event definitions section,as well as the actions definitions eventRef property"
    },
    {
        "text": "Because of an overall lack of a common way to describe different services and their operations,many workflow languages typically chose to define custom function definitions"
    },
    {
        "text": "This approach, however, often runs into issues such as lack of portability, limited capabilities, as well asforcing non-workflow-specific information, such as service authentication, to be added inside the workflow language"
    },
    {
        "text": "To avoid these issues, the Serverless Workflow specification mandates that details aboutRESTful services and their operations be described using the OpenAPI Specification"
    },
    {
        "text": "OpenAPI is a language-agnostic standard that describes discovery of RESTful services"
    },
    {
        "text": "This allows Serverless Workflow language to describe RESTful services in a portableway, as well as workflow runtimes to utilize OpenAPI tooling and APIs to invoke service operations"
    },
    {
        "text": "Here is an example function definition for a RESTful service operation"
    },
    {
        "text": "For more information about functions, reference the Functions definitions section"
    },
    {
        "text": "Functions can be used to invoke PUBLISH and SUBSCRIBE operations on a message broker documented by the Async API Specification"
    },
    {
        "text": "Async API operations are bound to a channel which describes the technology, security mechanisms, input and validation to be used for their execution"
    },
    {
        "text": "The Smartylighting Streetlights API allows you"
    },
    {
        "text": "to remotely manage the city lights"
    },
    {
        "text": "<URI_to_asyncapi_file>#<OperationId>"
    },
    {
        "text": "Also note that the referenced function definition type in this case must have the value asyncapi"
    },
    {
        "text": "<URI_to_proto_file>#<Service_Name>#<Service_Method_Name>"
    },
    {
        "text": "Note that the referenced function definition type in this case must be rpc"
    },
    {
        "text": "If you want to use GraphQL services, you can also invoke them using a similar syntax to the above methods"
    },
    {
        "text": "INVOKING A GRAPHQL QUERY"
    },
    {
        "text": "<url_to_graphql_endpoint>#<literal \"mutation\" or \"query\">#<mutation_or_query_field>"
    },
    {
        "text": "INVOKING A GRAPHQL MUTATION"
    },
    {
        "text": "Expressions must be evaluated before executing the operation"
    },
    {
        "text": "Note that GraphQL Subscriptions are not supported at this time"
    },
    {
        "text": "Similar to defining invocations of operations on GraphQL services, you can also use workflowFunctions Definitions to execute complex queries on an OData service"
    },
    {
        "text": "CREATING AN ODATA FUNCTION DEFINITION"
    },
    {
        "text": "<URI_to_odata_service>#<Entity_Set_Name>"
    },
    {
        "text": "INVOKING AN ODATA FUNCTION DEFINITION"
    },
    {
        "text": "In order to ensure compatibility of OData support across runtimes,thearguments property of an OData function referenceshould follow the Serverless Workflow OData Json schema"
    },
    {
        "text": "In addition to defining RESTful, AsyncAPI, RPC, GraphQL and OData services and their operations, workflow functions definitionscan also be used to define expressions that should be evaluated during Workflow Execution"
    },
    {
        "text": "Defining expressions as part of function definitions has the benefit of being able to referencethem by their logical name through workflow states where expression evaluation is required"
    },
    {
        "text": "Expression functions must declare their type parameter to be expression"
    },
    {
        "text": "Here we define two reusable expression functions"
    },
    {
        "text": "Expressions in Serverless Workflowcan be evaluated against the workflow, or workflow state data"
    },
    {
        "text": "Note that different data filters play a big role as to which parts of theworkflow data are being evaluated by the expressions"
    },
    {
        "text": "Reference theState Data Filters section for more information on this"
    },
    {
        "text": "],"
    },
    {
        "text": "The starting inject state \"Initialize Count\" injects the count element into our state data,which then becomes the state data input of our \"Increment Count\" operation state"
    },
    {
        "text": "This state defines an invocation of the \"Increment Count Function\" expression function defined in our workflow definition"
    },
    {
        "text": "Note that the used function definition type in this case must be expression"
    },
    {
        "text": "For more information about workflow expressions, reference the Workflow Expressions section"
    },
    {
        "text": "Function definitions type property defines a list of function types that are set bythe specification"
    },
    {
        "text": "In this example we define a custom function type that is meant to execute an external TypeScript script"
    },
    {
        "text": "When a custom function type is specified, the operation property value has a custom format, meaning thatits format is controlled by the runtime which provides the custom function type"
    },
    {
        "text": "Note that custom function types are not portable across runtimes"
    },
    {
        "text": "Workflow model parameters can use expressions to select/manipulate workflow and/or state data"
    },
    {
        "text": "Note that different data filters play a big role as to which parts of the states data are to be used when the expression isevaluated"
    },
    {
        "text": "Reference theState Data Filtering section for more information about state data filters"
    },
    {
        "text": "By default, all workflow expressions should be defined using the jq version 1"
    },
    {
        "text": "6 syntax"
    },
    {
        "text": "You can find more information on jq in its manual"
    },
    {
        "text": "Serverless Workflow does not mandate the use of jq and it's possible to use an expression languageof your choice with the restriction that a single one must be used for all expressionsin a workflow definition"
    },
    {
        "text": "If a different expression language needs to be used, make sure to set the workflowexpressionLang property to identify it to runtime implementations"
    },
    {
        "text": "Note that using a non-default expression language could lower the portability of your workflow definitionsacross multiple container/cloud platforms"
    },
    {
        "text": "All workflow expressions in this document, specification examples as well as comparisons examplesare written using the default jq syntax"
    },
    {
        "text": "Where expression can be either an in-line expression, or a reference to adefined expression function definition"
    },
    {
        "text": "Where fn is the namespace of the defined expression functions andmyExprName is the unique expression function name"
    },
    {
        "text": "In this case our input parameter applicantName would be set to \"John Doe\""
    },
    {
        "text": "Expressions can also be used to select and manipulate state data, this is in particularly useful forstate data filters"
    },
    {
        "text": "As previously mentioned, expressions are evaluated against certain subsets of data"
    },
    {
        "text": "For examplethe parameters param of the functionRef definition can evaluate expressionsonly against the data that is available to the action it belongs to"
    },
    {
        "text": "One thing to note here are the top-level workflow definition parameters"
    },
    {
        "text": "Expressions definedin them can only be evaluated against the initial workflow data input"
    },
    {
        "text": "which would set the workflow version to \"1"
    },
    {
        "text": "0"
    },
    {
        "text": "0\""
    },
    {
        "text": "Note that the workflow \"id\" property value is not allowed to use an expression"
    },
    {
        "text": "The workflowdefinition \"id\" must be a constant value"
    },
    {
        "text": "name\tWorkflow name\tstring\tno"
    },
    {
        "text": "description\tWorkflow description\tstring\tno"
    },
    {
        "text": "version\tWorkflow version"
    },
    {
        "text": "MUST respect the semantic versioning format\tstring\tno"
    },
    {
        "text": "annotations\tList of helpful terms describing the workflows intended purpose, subject areas, or other important qualities\tarray\tno"
    },
    {
        "text": "dataInputSchema\tUsed to validate the workflow data input against a defined JSON Schema\tstring or object\tno"
    },
    {
        "text": "dataOutputSchema\tUsed to validate the workflow data output against a defined JSON Schema\tstring or object\tno"
    },
    {
        "text": "constants\tWorkflow constants\tstring or object\tno"
    },
    {
        "text": "secrets\tWorkflow secrets\tstring or array\tno"
    },
    {
        "text": "start\tWorkflow start definition\tstring or object\tno"
    },
    {
        "text": "specVersion\tServerless Workflow specification release version\tstring\tyes"
    },
    {
        "text": "expressionLang\tIdentifies the expression language used for workflow expressions"
    },
    {
        "text": "Default value is \"jq\"\tstring\tno"
    },
    {
        "text": "timeouts\tDefines the workflow default timeout settings\tstring or object\tno"
    },
    {
        "text": "errors\tDefines checked errors that can be explicitly handled during Workflow Execution\tstring or array\tno"
    },
    {
        "text": "keepActive\tIf true, workflow instances is not terminated when there are no active execution paths"
    },
    {
        "text": "Instance can be terminated with \"terminate end definition\" or reaching defined \"workflowExecTimeout\"\tboolean\tno"
    },
    {
        "text": "auth\tWorkflow authentication definitions\tarray or string\tno"
    },
    {
        "text": "events\tWorkflow event definitions"
    },
    {
        "text": "array or string\tno"
    },
    {
        "text": "autoRetries\tIf set to true, actions should automatically be retried on unchecked errors"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "states\tWorkflow states\tarray\tyes"
    },
    {
        "text": "extensions\tWorkflow extensions definitions\tarray or string\tno"
    },
    {
        "text": "metadata\tMetadata information\tobject\tno"
    },
    {
        "text": "Defines the top-level structure of a serverless workflow model"
    },
    {
        "text": "Following figure describes the main workflow definition blocks"
    },
    {
        "text": "The id property defines the unique, domain-specific workflow identifier, for example \"orders\", \"payment\", etc"
    },
    {
        "text": "The key property defines the unique, domain-specific workflow identifier"
    },
    {
        "text": "It can be used when the id property is auto-generated by a content-management system for example"
    },
    {
        "text": "In these cases, you can specify the key property to be the domain-specific identifier of the workflow definition"
    },
    {
        "text": "The id and key properties are mutually exclusive, meaning you cannot define both"
    },
    {
        "text": "The name property is the workflow logical name"
    },
    {
        "text": "The description property can be used to give further information about the workflow"
    },
    {
        "text": "The version property can be used to provide a specific workflow version"
    },
    {
        "text": "It must use the semantic versioning format"
    },
    {
        "text": "The annotations property defines a list of helpful terms describing the workflows intended purpose, subject areas, or other important qualities,for example \"machine learning\", \"monitoring\", \"networking\", etc"
    },
    {
        "text": "The dataInputSchema and dataOutputSchema properties can be used to validate input and output data against a defined JSON Schema"
    },
    {
        "text": "The dataInputSchema property validates the workflow data input"
    },
    {
        "text": "Validation should be performed before any states are executed"
    },
    {
        "text": "In case ofa start Event state the input schema is ignored, if present"
    },
    {
        "text": "The failOnValidationErrors property determines if Workflow Execution should continue in case of validation errors"
    },
    {
        "text": "The dataOutputSchema property validates the Workflow data output"
    },
    {
        "text": "Validation is performed on the output of the Workflow Execution"
    },
    {
        "text": "The failOnValidationErrors property determines what should be done when the workflow output does not match the provided schema"
    },
    {
        "text": "If failOnValidationErrors is true, an error should be thrown"
    },
    {
        "text": "If executed within a subprocess, that error can be be handled by the parent workflow"
    },
    {
        "text": "If failOnValidationErrors is false, the error should not be propagated"
    },
    {
        "text": "It is up to the implementor to warn the user about that fact"
    },
    {
        "text": "For example, printing a log"
    },
    {
        "text": "Both properties can be expressed as object or string type"
    },
    {
        "text": "If using object type, their schema property might be an URI, which points to the JSON schema used to validate the workflow data input, or it might be the JSON schema object"
    },
    {
        "text": "failOnValidationErrors is optional, default value is true"
    },
    {
        "text": "Example for Json schema reference"
    },
    {
        "text": "Example for Json schema included in the workflow file"
    },
    {
        "text": "If using string type, then the string value is the external schema URI and failOnValidationErrors default value of true is assumed"
    },
    {
        "text": "Example using string type"
    },
    {
        "text": "The secrets property allows you to use sensitive information such as passwords, OAuth tokens, ssh keys, etc"
    },
    {
        "text": "inside yourWorkflow expressions"
    },
    {
        "text": "For more information about Workflow secrets, reference the Workflow Secrets section"
    },
    {
        "text": "The constants property can be used to define Workflow constants valueswhich are accessible in Workflow Expressions"
    },
    {
        "text": "For more information see the Workflow Constants section"
    },
    {
        "text": "The start property defines the workflow starting information"
    },
    {
        "text": "For more information see the start definition section"
    },
    {
        "text": "This property is not required"
    },
    {
        "text": "If not defined, the workflow starting state has to bethe very first state defined in the workflow states array"
    },
    {
        "text": "The expressionLang property can be used to identify the expression language used for all expressions inthe workflow definition"
    },
    {
        "text": "The default value of this property is \"jq\""
    },
    {
        "text": "You should set this property if you chose to define workflow expressionswith an expression language / syntax other than the default"
    },
    {
        "text": "The timeouts property is used to define the default workflow timeouts for workflow, state, action, and branchexecution"
    },
    {
        "text": "For more information about timeouts and its use cases see the Workflow Timeouts section"
    },
    {
        "text": "The error property is used to define checked errors that can be explicitly handled during Workflow Execution"
    },
    {
        "text": "For more information about workflow error handling see this section"
    },
    {
        "text": "The authRef property is used to reference an authentication definition inthe auth property and should be applied when invoking the helloWorld function"
    },
    {
        "text": "An AuthRef object can alternatively be used to configure the authentication definition to use when accessing the function's resource and/or when invoking the function"
    },
    {
        "text": "The functions property can be either an in-line function definition array, or an URI reference toa resource containing an array of functions definition"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "Referenced resource must conform to the specifications Workflow Functions JSON Schema"
    },
    {
        "text": "The events property can be either an in-line event definition array, or an URI reference toa resource containing an array of event definition"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "]"
    },
    {
        "text": "Referenced resource must conform to the specifications Workflow Events JSON Schema"
    },
    {
        "text": "The retries property can be either an in-line retry definition array, or an URI reference toa resource containing an array of retry definition"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "For more information aboutusing and referencing retry definitions see the Workflow Error Handling section"
    },
    {
        "text": "The keepActive property allows you to change the default behavior of workflow instances"
    },
    {
        "text": "By default, as described in the Core Concepts section, a workflow instance is terminated once there are no moreactive execution paths, one of its active paths ends in a \"terminate\" end definition, or whenits workflowExecTimeout time is reached"
    },
    {
        "text": "You can reference the specification examples to see the keepActive property in action"
    },
    {
        "text": "Here we define two workflow extensions, namely the rate limiting and kpi extensions for our workflow definition"
    },
    {
        "text": "Name\tDescription\tConsumes events?\tProduces events?\tExecutes actions?\tHandles errors/retries?\tAllows parallel execution?\tMakes data-based transitions?\tCan be workflow start state?\tCan be workflow end state?"
    },
    {
        "text": "Event\tDefine events that trigger action execution\tyes\tyes\tyes\tyes\tyes\tno\tyes\tyes"
    },
    {
        "text": "Operation\tExecute one or more actions\tno\tyes\tyes\tyes\tyes\tno\tyes\tyes"
    },
    {
        "text": "Switch\tDefine data-based or event-based workflow transitions\tno\tyes\tno\tyes\tno\tyes\tyes\tno"
    },
    {
        "text": "Sleep\tSleep Workflow Execution for a specific time duration\tno\tyes\tno\tyes\tno\tno\tyes\tyes"
    },
    {
        "text": "Inject\tInject static data into state data\tno\tyes\tno\tyes\tno\tno\tyes\tyes"
    },
    {
        "text": "ForEach\tParallel execution of states for each element of a data array\tno\tyes\tno\tyes\tyes\tno\tyes\tyes"
    },
    {
        "text": "Callback\tManual decision step"
    },
    {
        "text": "Executes a function and waits for callback event that indicates completion of the manual decision\tyes\tyes\tyes\tyes\tno\tno\tyes\tyes"
    },
    {
        "text": "EVENT STATE"
    },
    {
        "text": "name\tUnique State name\tstring\tyes"
    },
    {
        "text": "type\tState type\tstring\tyes"
    },
    {
        "text": "exclusive\tIf true, consuming one of the defined events causes its associated actions to be performed"
    },
    {
        "text": "If false, all of the defined events must be consumed in order for actions to be performed"
    },
    {
        "text": "Default is true\tboolean\tno"
    },
    {
        "text": "onEvents\tDefine the events to be consumed and optional actions to be performed\tarray\tyes"
    },
    {
        "text": "timeouts\tState specific timeout settings\tobject\tno"
    },
    {
        "text": "stateDataFilter\tState data filter definition\tobject\tno"
    },
    {
        "text": "onErrors\tStates error handling definitions\tarray\tno"
    },
    {
        "text": "compensatedBy\tUnique name of a workflow state which is responsible for compensation of this state\tstring\tno"
    },
    {
        "text": "- HighBodyTemperature"
    },
    {
        "text": "- HighBloodPressure"
    },
    {
        "text": "- HighRespirationRate"
    },
    {
        "text": "Event states await one or more events and perform actions when they are received"
    },
    {
        "text": "If defined as the workflow starting state, the event state definition controls when the workflowinstances should be created"
    },
    {
        "text": "The exclusive property determines if the state should wait for any of the defined events in the onEvents array, orif all defined events must be present for their associated actions to be performed"
    },
    {
        "text": "If the Event state in this case is a workflow starting state, the occurrence of any of the defined events would start a new workflow instance"
    },
    {
        "text": "If the Event state in this case is a workflow starting state, the occurrence of all defined events would start a newworkflow instance"
    },
    {
        "text": "In order to consider only events that are related to each other, we need to set the correlation property in the workflowevents definitions"
    },
    {
        "text": "This allows us to set up event correlation rules against the eventsextension context attributes"
    },
    {
        "text": "The timeouts property can be used to define state specific timeout settings"
    },
    {
        "text": "Event states can define thestateExecTimeout, actionExecTimeout, and eventTimeout properties"
    },
    {
        "text": "For more information about Event state specific event timeout settings reference this section"
    },
    {
        "text": "For more information about workflow timeouts reference the Workflow Timeouts section"
    },
    {
        "text": "Note that transition and end properties are mutually exclusive, meaning that you cannot define both of them at the same time"
    },
    {
        "text": "OPERATION STATE"
    },
    {
        "text": "actionMode\tShould actions be performed sequentially or in parallel"
    },
    {
        "text": "Default is sequential\tenum\tno"
    },
    {
        "text": "actions\tActions to be performed\tarray\tyes"
    },
    {
        "text": "stateDataFilter\tState data filter\tobject\tno"
    },
    {
        "text": "onErrors\tStates error handling and retries definitions\tarray\tno"
    },
    {
        "text": "usedForCompensation\tIf true, this state is used to compensate another state"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "Operation state defines a set of actions to be performed in sequence or in parallel"
    },
    {
        "text": "Once all actions have been performed, a transition to another state can occur"
    },
    {
        "text": "The timeouts property can be used to define state specific timeout settings"
    },
    {
        "text": "Operation states can definethe stateExecTimeout and actionExecTimeout settings"
    },
    {
        "text": "For more information on Workflow timeouts referencethe Workflow Timeouts section"
    },
    {
        "text": "SWITCH STATE"
    },
    {
        "text": "defaultCondition\tDefault transition of the workflow if there is no matching data conditions or event timeout is reached"
    },
    {
        "text": "Can be a transition or end definition\tobject\tyes"
    },
    {
        "text": "Data-based conditions"
    },
    {
        "text": "Event-based conditions"
    },
    {
        "text": "These are exclusive, meaning that a switch state can define one or the other condition type, but not both"
    },
    {
        "text": "In case of data-based conditions definition, switch state controls workflow transitions based on the states data"
    },
    {
        "text": "If no defined conditions can be matched, the state transitions is taken based on the defaultCondition property"
    },
    {
        "text": "This property can be either a transition to another workflow state, or an end definition meaning a workflow end"
    },
    {
        "text": "For event-based conditions, a switch state acts as a workflow wait state"
    },
    {
        "text": "It halts Workflow Executionuntil one of the referenced events arrive, then making a transition depending on that event definition"
    },
    {
        "text": "If events defined in event-based conditions do not arrive before the states eventTimeout property expires,state transitions are based on the defined defaultCondition property"
    },
    {
        "text": "The timeouts property can be used to define state specific timeout settings"
    },
    {
        "text": "Switch states can define thestateExecTimeout setting"
    },
    {
        "text": "If eventConditions is defined, the switch state can also define theeventTimeout property"
    },
    {
        "text": "For more information on workflow timeouts reference the Workflow Timeouts section"
    },
    {
        "text": "SLEEP STATE"
    },
    {
        "text": "Sleep statesuspends Workflow Execution for a given time duration"
    },
    {
        "text": "The delay is defined in its duration property using the ISO 8601duration format"
    },
    {
        "text": "PARALLEL STATE"
    },
    {
        "text": "branches\tList of branches for this parallel state\tarray\tyes"
    },
    {
        "text": "completionType\tOption types on how to complete branch execution"
    },
    {
        "text": "Default is \"allOf\"\tenum\tno"
    },
    {
        "text": "]"
    },
    {
        "text": "Parallel state defines a collection of branches that are executed in parallel"
    },
    {
        "text": "A parallel state can be seen a state which splits up the current workflow instance execution pathinto multiple ones, one for each branch"
    },
    {
        "text": "These execution paths are performed in paralleland are joined back into the current execution path depending on the defined completionType parameter value"
    },
    {
        "text": "Exceptions may occur during execution of branches of the Parallel state, this is described in detail in this section"
    },
    {
        "text": "The timeouts property can be used to set state specific timeout settings"
    },
    {
        "text": "Parallel states can define thestateExecTimeout and branchExecTimeout timeout settings"
    },
    {
        "text": "For more information on workflow timeoutsreference the Workflow Timeouts section"
    },
    {
        "text": "INJECT STATE"
    },
    {
        "text": "data\tJSON object which can be set as state's data input and can be manipulated via filter\tobject\tyes"
    },
    {
        "text": "The inject state data property allows you to statically define a JSON object which gets added to the states data input"
    },
    {
        "text": "You can use the filter property to control the states data output to the transition state"
    },
    {
        "text": "If the inject state already receives a data input from the previous transition state, the inject data should be mergedwith its data input"
    },
    {
        "text": "This allows you to test if your workflow behaves properly for cases when there are people whose age is greater or equal 40"
    },
    {
        "text": "FOREACH STATE"
    },
    {
        "text": "inputCollection\tWorkflow expression selecting an array element of the states data\tstring\tyes"
    },
    {
        "text": "outputCollection\tWorkflow expression specifying an array element of the states data to add the results of each iteration\tstring\tno"
    },
    {
        "text": "iterationParam\tName of the iteration parameter that can be referenced in actions/workflow"
    },
    {
        "text": "For each parallel iteration, this param should contain an unique element of the inputCollection array\tstring\tno"
    },
    {
        "text": "actions\tActions to be executed for each of the elements of inputCollection\tarray\tyes"
    },
    {
        "text": "ForEach states can be used to execute actions for each element of a data set"
    },
    {
        "text": "Each iteration of the ForEach state is by default executed in parallel by default"
    },
    {
        "text": "However, executing iterations sequentially is also possible by setting the value of the mode property tosequential"
    },
    {
        "text": "The mode property defines if iterations should be done sequentially or in parallel"
    },
    {
        "text": "By default,if mode is not specified, iterations should be done in parallel"
    },
    {
        "text": "The inputCollection property is a workflow expression which selects an array in the states data"
    },
    {
        "text": "All iterationsare performed against data elements of this array"
    },
    {
        "text": "If this array does not exist, the runtime should throwan error"
    },
    {
        "text": "This error can be handled inside the states onErrors definition"
    },
    {
        "text": "The outputCollection property is a workflow expression which selects an array in the state data where the resultsof each iteration should be added to"
    },
    {
        "text": "If this array does not exist, it should be created"
    },
    {
        "text": "The iterationParam property defines the name of the iteration parameter passed to each iteration of the ForEach state"
    },
    {
        "text": "It should contain the unique element of the inputCollection array and made available to actions of the ForEach state"
    },
    {
        "text": "iterationParam can be accessed as an expression variable"
    },
    {
        "text": "In JQ, expression variables are prefixed by $"
    },
    {
        "text": "If iterationParam is not explicitly defined, runtimes should create one and populate it with the value of the uniqueiteration parameter for each iteration of the ForEach state"
    },
    {
        "text": "The actions property defines actions to be executed in each state iteration"
    },
    {
        "text": "The workflow data input containing order information is passed to the SendConfirmState ForEach state"
    },
    {
        "text": "The ForEach state defines an inputCollection property which selects all orders that have the completed property set to true"
    },
    {
        "text": "For each element of the array selected by inputCollection a JSON object defined by iterationParam should becreated containing an unique element of inputCollection and passed as the data input to the parallel executed actions"
    },
    {
        "text": "The results of each parallel action execution are stored as elements in the state data array defined by the outputCollection property"
    },
    {
        "text": "The timeouts property can be used to set state specific timeout settings"
    },
    {
        "text": "ForEach states can define thestateExecTimeout and actionExecTimeout settings"
    },
    {
        "text": "For more information on workflow timeouts reference the Workflow Timeoutssection"
    },
    {
        "text": "CALLBACK STATE"
    },
    {
        "text": "action\tDefines the action to be executed\tobject\tyes"
    },
    {
        "text": "eventRef\tReferences an unique callback event name in the defined workflow events\tstring\tyes"
    },
    {
        "text": "eventDataFilter\tCallback event data filter definition\tobject\tno"
    },
    {
        "text": "compensatedBy\tUniaue name of a workflow state which is responsible for compensation of this state\tstring\tno"
    },
    {
        "text": "Note that the called decision service is responsible for emitting the callback CloudEvent indicating the completion of thedecision and including the decision results as part of the event payload"
    },
    {
        "text": "This event must be correlated to theworkflow instance using the callback events context attribute defined in the correlation property of thereferenced Event Definition"
    },
    {
        "text": "The callback event payload is merged with the Callback state data and can be filtered via the \"eventDataFilter\" definition"
    },
    {
        "text": "If the defined callback event has not been received during this time period, the state should transition to the next state or end Workflow Execution if it is an end state"
    },
    {
        "text": "The timeouts property defines state specific timeout settings"
    },
    {
        "text": "Callback states can define thestateExecTimeout, actionExecTimeout, and eventTimeout properties"
    },
    {
        "text": "For more information on workflow timeouts reference the Workflow Timeoutssection"
    },
    {
        "text": "FUNCTION DEFINITION"
    },
    {
        "text": "name\tUnique function name\tstring\tyes"
    },
    {
        "text": "operation\tIf type is rest, #"
    },
    {
        "text": "If type is asyncapi, #"
    },
    {
        "text": "If type is rpc, ##"
    },
    {
        "text": "If type is graphql, #<literal \"mutation\" or \"query\">#"
    },
    {
        "text": "If type is odata, #"
    },
    {
        "text": "If type is expression, defines the workflow expression"
    },
    {
        "text": "string\tyes"
    },
    {
        "text": "type\tDefines the function type"
    },
    {
        "text": "Can be either rest, asyncapi, rpc, graphql, odata, expression, or custom"
    },
    {
        "text": "Default is rest\tenum\tno"
    },
    {
        "text": "authRef\tReferences an auth definition name to be used to access to resource defined in the operation parameter\tstring\tno"
    },
    {
        "text": "metadata\tMetadata information"
    },
    {
        "text": "Can be used to define custom function information\tobject\tno"
    },
    {
        "text": "The name property defines an unique name of the function definition"
    },
    {
        "text": "The type property defines the function type"
    },
    {
        "text": "Its value can be either rest or expression"
    },
    {
        "text": "Default value is rest"
    },
    {
        "text": "If type is expression, defines the expression syntax"
    },
    {
        "text": "Take a look at the workflow expressions section for more information on this"
    },
    {
        "text": "Defining custom function types is possible, for more information on that refer to the Defining custom function types section"
    },
    {
        "text": "The authRef property references a name of a defined workflow auth definition"
    },
    {
        "text": "It is used to provide authentication info to access the resource defined in the operation property and/or to invoke the function"
    },
    {
        "text": "Note that using metadata for cases such as above heavily reduces the portability of your workflow markup"
    },
    {
        "text": "Function definitions themselves do not define data input parameters"
    },
    {
        "text": "Parameters can bedefined via the parameters property in function definitions inside actions"
    },
    {
        "text": "AuthRef Definition"
    },
    {
        "text": "resource\tReferences an auth definition to be used to access the resource defined in the operation parameter\tstring\tyes"
    },
    {
        "text": "invocation\tReferences an auth definition to be used to invoke the operation\tstring\tno"
    },
    {
        "text": "The authRef property references a name of a defined workflow auth definition"
    },
    {
        "text": "It can be a string or an object"
    },
    {
        "text": "If it's a string, the referenced auth definition is used solely for the function's invocation"
    },
    {
        "text": "It's worth noting that if an auth definition has been defined for an OpenAPI function which's resource declare an authentication mechanism, the later should be used instead, thus ignoring entirely the auth definition"
    },
    {
        "text": "EVENT DEFINITION"
    },
    {
        "text": "name\tUnique event name\tstring\tyes"
    },
    {
        "text": "kind\tDefines the event is either consumed or produced by the workflow"
    },
    {
        "text": "Default is consumed\tenum\tno"
    },
    {
        "text": "correlation\tDefine event correlation rules for this event"
    },
    {
        "text": "Only used for consumed events\tarray\tno"
    },
    {
        "text": "Used to define events and their correlations"
    },
    {
        "text": "These events can be either consumed or produced during Workflow Execution as wellas can be used to trigger function/service invocations"
    },
    {
        "text": "The Serverless Workflow specification mandates that all events conform to the CloudEvents specification"
    },
    {
        "text": "This is to assure consistency and portability of the events format used"
    },
    {
        "text": "The name property defines a single name of the event that is unique inside the workflow definition"
    },
    {
        "text": "This event name can bethen referenced within function and state definitions"
    },
    {
        "text": "The source property matches this event definition with the sourceproperty of the CloudEvent required attributes"
    },
    {
        "text": "The type property matches this event definition with the type property of the CloudEvent required attributes"
    },
    {
        "text": "Event correlation plays a big role in large event-driven applications"
    },
    {
        "text": "Correlating one or more events with a particular workflow instancecan be done by defining the event correlation rules within the correlation property"
    },
    {
        "text": "This property is an array of correlation definitions"
    },
    {
        "text": "The CloudEvents specification allows users to add Extension Context Attributesand the correlation definitions can use these attributes to define clear matching event correlation rules"
    },
    {
        "text": "Extension context attributes are not part of the event payload, so they are serialized the same way as other standard required attributes"
    },
    {
        "text": "This means that the event payload does not have to be inspected by implementations in order to read and evaluate the defined correlation rules"
    },
    {
        "text": "and"
    },
    {
        "text": "This allows developers to write orchestration workflows that are specifically targeted to patients that are in the hospital urgent care unit,for example"
    },
    {
        "text": "AUTH DEFINITION"
    },
    {
        "text": "name\tUnique auth definition name\tstring\tyes"
    },
    {
        "text": "scheme\tAuth scheme, can be \"basic\", \"bearer\", or \"oauth2\""
    },
    {
        "text": "Default is \"basic\"\tenum\tno"
    },
    {
        "text": "properties\tAuth scheme properties"
    },
    {
        "text": "Can be one of \"Basic properties definition\", \"Bearer properties definition\", or \"OAuth2 properties definition\"\tobject\tyes"
    },
    {
        "text": "The name property defines the unique auth definition name"
    },
    {
        "text": "The scheme property defines the auth scheme to be used"
    },
    {
        "text": "Can be \"bearer\", \"basic\" or \"oauth2\""
    },
    {
        "text": "The properties property defines the auth scheme properties information"
    },
    {
        "text": "Can be one of \"Basic properties definition\", \"Bearer properties definition\", or \"OAuth2 properties definition\""
    },
    {
        "text": "See here for more information about Basic Authentication scheme"
    },
    {
        "text": "username\tString or a workflow expression"
    },
    {
        "text": "Contains the user name\tstring\tyes"
    },
    {
        "text": "password\tString or a workflow expression"
    },
    {
        "text": "Contains the user password\tstring\tyes"
    },
    {
        "text": "See here for more information about Bearer Authentication scheme"
    },
    {
        "text": "token\tString or a workflow expression"
    },
    {
        "text": "Contains the token information\tstring\tyes"
    },
    {
        "text": "See here for more information about OAuth2 Authentication scheme"
    },
    {
        "text": "authority\tString or a workflow expression"
    },
    {
        "text": "Contains the authority information\tstring\tno"
    },
    {
        "text": "grantType\tDefines the grant type"
    },
    {
        "text": "Can be \"password\", \"clientCredentials\", or \"tokenExchange\"\tenum\tyes"
    },
    {
        "text": "clientId\tString or a workflow expression"
    },
    {
        "text": "Contains the client identifier\tstring\tyes"
    },
    {
        "text": "clientSecret\tWorkflow secret or a workflow expression"
    },
    {
        "text": "Contains the client secret\tstring\tno"
    },
    {
        "text": "scopes\tArray containing strings or workflow expressions"
    },
    {
        "text": "Contains the OAuth2 scopes\tarray\tno"
    },
    {
        "text": "username\tString or a workflow expression"
    },
    {
        "text": "Contains the user name"
    },
    {
        "text": "Used only if grantType is 'resourceOwner'\tstring\tno"
    },
    {
        "text": "password\tString or a workflow expression"
    },
    {
        "text": "Contains the user password"
    },
    {
        "text": "Used only if grantType is 'resourceOwner'\tstring\tno"
    },
    {
        "text": "audiences\tArray containing strings or workflow expressions"
    },
    {
        "text": "Contains the OAuth2 audiences\tarray\tno"
    },
    {
        "text": "subjectToken\tString or a workflow expression"
    },
    {
        "text": "Contains the subject token\tstring\tno"
    },
    {
        "text": "requestedSubject\tString or a workflow expression"
    },
    {
        "text": "Contains the requested subject\tstring\tno"
    },
    {
        "text": "requestedIssuer\tString or a workflow expression"
    },
    {
        "text": "Contains the requested issuer\tstring\tno"
    },
    {
        "text": "CORRELATION DEFINITION"
    },
    {
        "text": "contextAttributeName\tCloudEvent Extension Context Attribute name\tstring\tyes"
    },
    {
        "text": "contextAttributeValue\tCloudEvent Extension Context Attribute value\tstring\tno"
    },
    {
        "text": "Used to define event correlation rules"
    },
    {
        "text": "Only usable for consumed event definitions"
    },
    {
        "text": "The contextAttributeName property defines the name of the CloudEvent extension context attribute"
    },
    {
        "text": "The contextAttributeValue property defines the value of the defined CloudEvent extension context attribute"
    },
    {
        "text": "ONEVENTS DEFINITION"
    },
    {
        "text": "eventRefs\tReferences one or more unique event names in the defined workflow events\tarray\tyes"
    },
    {
        "text": "actions\tActions to be performed\tarray\tno"
    },
    {
        "text": "eventDataFilter\tEvent data filter definition\tobject\tno"
    },
    {
        "text": "- HighBodyTemperature"
    },
    {
        "text": "OnEvent definition allow you to define which actions are to be performedfor the one or more events definitions defined in the eventRefs array"
    },
    {
        "text": "Note that the values of eventRefs array must be unique"
    },
    {
        "text": "The actionMode property defines if the defined actions need to be performed sequentially or in parallel"
    },
    {
        "text": "The actions property defines a list of actions to be performed"
    },
    {
        "text": "If exclusive is set to true, the consumption of either the HighBodyTemperature or HighBloodPressure events will trigger action execution"
    },
    {
        "text": "If exclusive is set to false, the consumption of both the HighBodyTemperature and HighBloodPressure events will trigger action execution"
    },
    {
        "text": "ACTION DEFINITION"
    },
    {
        "text": "name\tUnique Action name\tstring\tno"
    },
    {
        "text": "retryRef\tReferences a defined workflow retry definition"
    },
    {
        "text": "If not defined uses the default runtime retry definition\tstring\tno"
    },
    {
        "text": "nonRetryableErrors\tList of references to defined workflow errors for which the action should not be retried"
    },
    {
        "text": "Used only when autoRetries is set to true\tarray\tno"
    },
    {
        "text": "retryableErrors\tList of references to defined workflow errors for which the action should be retried"
    },
    {
        "text": "Used only when autoRetries is set to false\tarray\tno"
    },
    {
        "text": "actionDataFilter\tAction data filter definition\tobject\tno"
    },
    {
        "text": "sleep\tDefines time periods Workflow Execution should sleep before / after function execution\tobject\tno"
    },
    {
        "text": "condition\tExpression, if defined, must evaluate to true for this action to be performed"
    },
    {
        "text": "If false, action is disregarded\tstring\tno"
    },
    {
        "text": "Reference functions definitions by its unique name using the functionRef property"
    },
    {
        "text": "Reference a produced and consumed event definitions via the eventRef property"
    },
    {
        "text": "Reference a sub-workflow invocation via the subFlowRef property"
    },
    {
        "text": "Note that functionRef, eventRef, and subFlowRef are mutually exclusive, meaning that only one of them can bespecified in a single action definition"
    },
    {
        "text": "The name property specifies the action name"
    },
    {
        "text": "In the event-based scenario a service, or a set of services we want to invokeare not exposed via a specific resource URI for example, but can only be invoked via an event"
    },
    {
        "text": "The eventRef property defines thereferenced produced event via its produceEventRef property and a consumed event via its consumeEventRef property"
    },
    {
        "text": "Function invocation timeouts should be handled via the states timeouts definition"
    },
    {
        "text": "The retryRef property references one of the defined workflow retries by it's unique name"
    },
    {
        "text": "If not set, the actionshould be retried according to the default retry policy of the runtime implementation"
    },
    {
        "text": "For more information about workflowretries reference this section"
    },
    {
        "text": "The nonRetryableErrors property is a list that references one or more unique names of workflow error definitions"
    },
    {
        "text": "This is the list of known errors for which the action should not be retried for"
    },
    {
        "text": "It should be used only when the workflow top-level autoRetries property is set to true"
    },
    {
        "text": "The retryableErrors property is a list that references one or more unique names of workflow error definitions"
    },
    {
        "text": "This is the list of known errors for which the action should be retried for"
    },
    {
        "text": "It should be used only when the workflow top-level autoRetries property is set to false"
    },
    {
        "text": "The condition property is a workflow expression"
    },
    {
        "text": "If defined, it must evaluate to truefor this action to be performed"
    },
    {
        "text": "If it evaluates to false the action is skipped"
    },
    {
        "text": "If the condition property is not defined, the action is always performed"
    },
    {
        "text": "SUBFLOW ACTION"
    },
    {
        "text": "Often you want to group your workflows into small logical units that solve a particular business problem and can be reused inmultiple other workflow definitions"
    },
    {
        "text": "Reusable workflows are referenced by their id property via the SubFlow action workflowId parameter"
    },
    {
        "text": "For the simple case, subFlowRef can be a string containing the id of the sub-workflow to invoke"
    },
    {
        "text": "If you want to specify other parameters then a subFlowRef should be provided instead"
    },
    {
        "text": "Each referenced workflow receives the SubFlow actions data as workflow data input"
    },
    {
        "text": "Referenced sub-workflows must declare their own function and event definitions"
    },
    {
        "text": "FUNCTIONREF DEFINITION"
    },
    {
        "text": "Note that if used with string type, the invocation of the function is synchronous"
    },
    {
        "text": "refName\tName of the referenced function\tstring\tyes"
    },
    {
        "text": "invoke\tSpecifies if the function should be invoked sync or async"
    },
    {
        "text": "Default is sync\tenum\tno"
    },
    {
        "text": "The refName property is the name of the referenced function"
    },
    {
        "text": "EVENTREF DEFINITION"
    },
    {
        "text": "Allows defining invocation of a function via event"
    },
    {
        "text": "produceEventRef\tReference to the unique name of a produced event definition\tstring\tyes"
    },
    {
        "text": "consumeEventRef\tReference to the unique name of a consumed event definition\tstring\tno"
    },
    {
        "text": "contextAttributes\tAdd additional event extension context attributes to the trigger/produced event\tobject\tno"
    },
    {
        "text": "References a produced and consumed event definitions via the produceEventRef and consumeEventRef properties, respectively"
    },
    {
        "text": "The contextAttributes property allows you to add one or more extension context attributesto the trigger/produced event"
    },
    {
        "text": "SUBFLOWREF DEFINITION"
    },
    {
        "text": "SubFlowRef definition can have two types, namely string or object"
    },
    {
        "text": "If string type, it defines the unique id of the sub-workflow to be invoked"
    },
    {
        "text": "This short-hand definition can be used if sub-workflow lookup is done only by its idproperty and not its version property"
    },
    {
        "text": "workflowId\tSub-workflow unique id\tstring\tyes"
    },
    {
        "text": "version\tSub-workflow version\tstring\tno"
    },
    {
        "text": "invoke\tSpecifies if the subflow should be invoked sync or async"
    },
    {
        "text": "Default is sync\tenum\tno"
    },
    {
        "text": "onParentComplete\tIf invoke is async, specifies if subflow execution should terminate or continue when parent workflow completes"
    },
    {
        "text": "Default is terminate\tenum\tno"
    },
    {
        "text": "The workflowId property define the unique ID of the sub-workflow to be invoked"
    },
    {
        "text": "Usually, the workflow id should not be the same id of the workflow where the action is defined"
    },
    {
        "text": "Otherwise, it may occur undesired recurring calls to the same workflow"
    },
    {
        "text": "The version property defined the unique version of the sub-workflow to be invoked"
    },
    {
        "text": "If this property is defined, runtimes should match both the id and the version propertiesdefined in the sub-workflow definition"
    },
    {
        "text": "ERROR DEFINITION"
    },
    {
        "text": "Error definitions describe checked errors that can occur during Workflow Execution and how to handle them"
    },
    {
        "text": "The errorRef property references the unique workflow error definition"
    },
    {
        "text": "For more info on workflow error handlingreferece this section"
    },
    {
        "text": "The errorRefsproperty references at least one of the defined workflow error definitions"
    },
    {
        "text": "Can be used when errorRef is not used"
    },
    {
        "text": "Usable when you want to define multiple error refs for which the same transitionor end definition should be applied"
    },
    {
        "text": "For more info on workflow error handlingreferece this section"
    },
    {
        "text": "Note that the errorRef and errorRefs properties are mutually exclusive, meaning that you can only specify one or the other,but not both at the same time"
    },
    {
        "text": "The transition property defines the transition to the next workflow state in cases when the definederror happens during runtime execution"
    },
    {
        "text": "If transition is not defined you can also define the end property which will end Workflow Execution at that point"
    },
    {
        "text": "Note that the transition and end properties are mutually exclusive, meaning that you can only specify one or the other,but not both at the same time"
    },
    {
        "text": "For more information, see the Workflow Error Handling sections"
    },
    {
        "text": "RETRY DEFINITION"
    },
    {
        "text": "name\tUnique retry strategy name\tstring\tyes"
    },
    {
        "text": "maxAttempts\tMaximum number of retry attempts"
    },
    {
        "text": "Value of 1 means no retries are performed\tstring or number\tyes"
    },
    {
        "text": "If both increment and multiplier properties are defined, increment should be applied first and thenthe multiplier when determining the next retry time"
    },
    {
        "text": "The maxAttempts property determines the maximum number of retry attempts allowed and is a positive integer value"
    },
    {
        "text": "The jitter property is important to prevent certain scenarios where clientsare retrying in sync, possibly causing or contributing to a transient failureprecisely because they're retrying at the same time"
    },
    {
        "text": "Adding a typically small,bounded random amount of time to the period between retries serves the purposeof attempting to prevent these retries from happening simultaneously, possiblyreducing total time to complete requests and overall congestion"
    },
    {
        "text": "How this valueis used in the exponential backoff algorithm is left up to implementations"
    },
    {
        "text": "Alternatively, jitter may be defined as an absolute value specified as an ISO8601 duration"
    },
    {
        "text": "This way, the maximum amount of random time added is fixed andwill not increase as new attempts are made"
    },
    {
        "text": "The maxDelay property determines the maximum amount of delay that is desired between retry attempts, and is appliedafter increment, multiplier, and jitter"
    },
    {
        "text": "TRANSITION DEFINITION"
    },
    {
        "text": "nextState\tName of the state to transition to next\tstring\tyes"
    },
    {
        "text": "compensate\tIf set to true, triggers workflow compensation before this transition is taken"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "produceEvents\tArray of producedEvent definitions"
    },
    {
        "text": "Events to be produced before the transition takes place\tarray\tno"
    },
    {
        "text": "SWITCH STATE DATA CONDITIONS"
    },
    {
        "text": "name\tData condition name\tstring\tno"
    },
    {
        "text": "condition\tWorkflow expression evaluated against state data"
    },
    {
        "text": "Must evaluate to true or false\tstring\tyes"
    },
    {
        "text": "If the condition is evaluated to true, you can specify either the transition or end definitionsto decide what to do, transition to another workflow state, or end Workflow Execution"
    },
    {
        "text": "Note that transition and enddefinitions are mutually exclusive, meaning that you can specify either one or the other, but not both"
    },
    {
        "text": "SWITCH STATE EVENT CONDITIONS"
    },
    {
        "text": "name\tEvent condition name\tstring\tno"
    },
    {
        "text": "eventRef\tReferences an unique event name in the defined workflow events\tstring\tyes"
    },
    {
        "text": "Switch state event conditions specify events, which the switch state must wait for"
    },
    {
        "text": "Each conditioncan reference one workflow-defined event"
    },
    {
        "text": "Upon arrival of this event, the associated transition is taken"
    },
    {
        "text": "The eventRef property references a name of one of the defined workflow events"
    },
    {
        "text": "If the referenced event is received, you can specify either the transition or end definitionsto decide what to do, transition to another workflow state, or end Workflow Execution"
    },
    {
        "text": "The eventDataFilter property can be used to filter event data when it is received"
    },
    {
        "text": "Note that transition and enddefinitions are mutually exclusive, meaning that you can specify either one or the other, but not both"
    },
    {
        "text": "PARALLEL STATE BRANCH"
    },
    {
        "text": "name\tBranch name\tstring\tyes"
    },
    {
        "text": "actions\tActions to be executed in this branch\tarray\tyes"
    },
    {
        "text": "timeouts\tBranch specific timeout settings\tobject\tno"
    },
    {
        "text": "Each branch receives the same copy of the Parallel state's data input"
    },
    {
        "text": "A branch can define actions that need to be executed"
    },
    {
        "text": "For the SubFlowRef action, the workflow id should not be the same id of the workflow where the branch is defined"
    },
    {
        "text": "Otherwise, it may occur undesired recurring calls to the same workflow"
    },
    {
        "text": "The timeouts property can be used to set branch specific timeout settings"
    },
    {
        "text": "Parallel state branches can set theactionExecTimeout and branchExecTimeout timeout properties"
    },
    {
        "text": "For more information on workflow timeouts reference theWorkflow Timeouts section"
    },
    {
        "text": "PARALLEL STATE HANDLING EXCEPTIONS"
    },
    {
        "text": "Exceptions can occur during execution of Parallel state branches"
    },
    {
        "text": "By default, exceptions that are not handled within branches stop branch execution and are propagatedto the Parallel state and should be handled with its onErrors definition"
    },
    {
        "text": "If the parallel states defines a subflow action, exceptions that occur during execution of the called workflowcan choose to handle exceptions on their own"
    },
    {
        "text": "All unhandled exceptions from the called workflowexecution however are propagated back to the parallel state and can be handled with the parallel statesonErrors definition"
    },
    {
        "text": "START DEFINITION"
    },
    {
        "text": "Can be either string or object type"
    },
    {
        "text": "If type string, it defines the name of the workflow starting state"
    },
    {
        "text": "In this case it's assumed that the schedule property is not defined"
    },
    {
        "text": "stateName\tName of the starting workflow state\tstring\tno"
    },
    {
        "text": "schedule\tDefine the recurring time intervals or cron expressions at which workflow instances should be automatically started"
    },
    {
        "text": "string or object\tyes"
    },
    {
        "text": "Start definition explicitly defines how/when workflow instances should be created and what the workflow starting state is"
    },
    {
        "text": "The start definition can be either string or object type"
    },
    {
        "text": "If string type, it defines the name of the workflow starting state"
    },
    {
        "text": "If object type, it provides the ability to set the workflow starting state name, as well as the schedule property"
    },
    {
        "text": "The stateName property can be set to define the starting workflow state"
    },
    {
        "text": "If not specified, the first statein the workflow states definition should be used as the starting workflow state"
    },
    {
        "text": "0 0/5 * * * ?"
    },
    {
        "text": "to define that a workflow instance from the workflow definition should be created every 5 minutes, starting at full hour"
    },
    {
        "text": "* * * * * - Create workflow instance at the top of every minute"
    },
    {
        "text": "0 * * * * - Create workflow instance at the top of every hour"
    },
    {
        "text": "0 */2 * * * - Create workflow instance every 2 hours"
    },
    {
        "text": "See here to get more information on defining cron expressions"
    },
    {
        "text": "Defining a start definition is not required"
    },
    {
        "text": "If it's not defined, the starting workflowstate has to be the very first state defined in the workflow states array"
    },
    {
        "text": "SCHEDULE DEFINITION"
    },
    {
        "text": "The cron property uses a cron expressionto describe a repeating interval upon which a workflow instance should be created automatically"
    },
    {
        "text": "For more information see the cron definition section"
    },
    {
        "text": "Note that when the workflow starting state is an Eventdefining cron-based scheduled starts for the runtime implementations would mean that there needs to be an event service that issuesthe needed events at the defined times to trigger workflow instance creation"
    },
    {
        "text": "CRON DEFINITION"
    },
    {
        "text": "END DEFINITION"
    },
    {
        "text": "In this case it's assumed that the terminate property has its default value of false, and the produceEvents,compensate, and continueAs properties are not defined"
    },
    {
        "text": "terminate\tIf true"
    },
    {
        "text": "terminates workflow instance execution\tboolean\tno"
    },
    {
        "text": "produceEvents\tArray of producedEvent definitions"
    },
    {
        "text": "Defines events that should be produced"
    },
    {
        "text": "array\tno"
    },
    {
        "text": "compensate\tIf set to true, triggers workflow compensation before Workflow Execution completes"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "continueAs\tDefines that current Workflow Execution should stop, and execution should continue as a new workflow instance of the provided id\tstring or object\tno"
    },
    {
        "text": "End definitions are used to explicitly define execution completion of a workflow instance or Workflow Execution path"
    },
    {
        "text": "A workflow definition must include at least one workflow state"
    },
    {
        "text": "Note that Switch states cannot declare to be workflow end states"
    },
    {
        "text": "Their conditions however candefine a stop of Workflow Execution"
    },
    {
        "text": "The terminate property, if set to true, completes the workflow instance execution, this any other activeexecution paths"
    },
    {
        "text": "If a terminate end is reached inside a ForEach or Parallel state the entire workflow instance is terminated"
    },
    {
        "text": "The produceEvents allows defining events which should be producedby the workflow instance before workflow stops its execution"
    },
    {
        "text": "It's important to mention that if the workflow keepActive property is set totrue,the only way to complete execution of the workflow instanceis if Workflow Execution reaches a state that defines an end definition with terminate property set to true,or, if the workflowExecTimeout property is defined, the time defined in its intervalis reached"
    },
    {
        "text": "The compensate property defines that workflow compensation should be performed before the workflowexecution is completed"
    },
    {
        "text": "PRODUCEDEVENT DEFINITION"
    },
    {
        "text": "eventRef\tReference to a defined unique event name in the events definition\tstring\tyes"
    },
    {
        "text": "contextAttributes\tAdd additional event extension context attributes\tobject\tno"
    },
    {
        "text": "The data property can have two types, object or string"
    },
    {
        "text": "If of string type, it is an expression that can select parts of state datato be used as the event payload"
    },
    {
        "text": "If of object type, you can define a custom object to be the event payload"
    },
    {
        "text": "The contextAttributes property allows you to add one or more extension context attributesto the generated event"
    },
    {
        "text": "Being able to produce events when Workflow Execution completes or during state transitionallows for event-based orchestration communication"
    },
    {
        "text": "For example, completion of an orchestration workflow can notify other orchestration workflows to decide if they need to act uponthe produced event, or notify monitoring services of the current state of Workflow Execution, etc"
    },
    {
        "text": "It can be used to create very dynamic orchestration scenarios"
    },
    {
        "text": "TRANSITIONS"
    },
    {
        "text": "Implementers must use the unique State name property for determining the transition"
    },
    {
        "text": "Events can be produced during state transitions"
    },
    {
        "text": "The produceEvents property of the transition definitions allows youto reference one or more defined produced events in the workflow events definitions"
    },
    {
        "text": "For each of the produced events you can select what parts of state data to be the event payload"
    },
    {
        "text": "Transitions can trigger compensation via their compensate property"
    },
    {
        "text": "See the Workflow Compensationsection for more information"
    },
    {
        "text": "ADDITIONAL PROPERTIES"
    },
    {
        "text": "Specifying additional properties, namely properties which are not defined by the specificationare only allowed in the Workflow Definition"
    },
    {
        "text": "Additional properties serve the same purpose as Workflow Metadata"
    },
    {
        "text": "They allow you to enrich the workflow definition with custom information"
    },
    {
        "text": "Additional properties, just like workflow metadata, should not affect Workflow Execution"
    },
    {
        "text": "Implementations may choose to use additional properties or ignore them"
    },
    {
        "text": "It is recommended to use workflow metadata instead of additional properties in the workflow definition"
    },
    {
        "text": "In this example, we specify the loglevel, environment, and category additional properties"
    },
    {
        "text": "Serverless Workflow language allows you to define explicit error handling, meaning you can define what should happenin case of errors inside your workflow model rather than some generic error handling entity"
    },
    {
        "text": "This allows error handling to become part of your orchestration activities and as such part of your business problemsolutions"
    },
    {
        "text": "The idea behind the way Serverless Workflow defines error handling is that workflows should only fail due to unknown bugsduring execution"
    },
    {
        "text": "In general, you should always write your workflows so that they do not fail on any known failures"
    },
    {
        "text": "Each workflow state can define error handling, which is related only to errors that may arise during itsexecution"
    },
    {
        "text": "Error handling defined in one state cannot be used to handle errors that happened during execution of another stateduring Workflow Execution"
    },
    {
        "text": "Unknown errors that may arise during workflow state execution that are not explicitly handled within the workflow definitionshould be reported by runtime implementations and halt Workflow Execution"
    },
    {
        "text": "In addition to the domain specific error name, users have the option to also add an optional error codeto help runtime implementations with mapping defined errors to concrete underlying technical ones"
    },
    {
        "text": "Known workflow errors, that we know we need to handle during Workflow Execution should be defined inthe workflow top-level 'errors' property"
    },
    {
        "text": "This property can be either a string type, meaning it can referencea reusable JSON or Yaml definition file including the error definitions, or it can have an array type where you candefine these checked errors in-line in your workflow definition"
    },
    {
        "text": "information"
    },
    {
        "text": "These defined errors can then be referenced by their unique name in both states onErrors definitions as well as inactions nonRetryableErrors and retryableErrors properties"
    },
    {
        "text": "Regardless of the chosen retries option, note that workflows in general should be designed to not fail"
    },
    {
        "text": "Workflows should be able to recover from intermittent failures"
    },
    {
        "text": "The next sections provide more details to each action retry option"
    },
    {
        "text": "- SomeErrorOne"
    },
    {
        "text": "- SomeErrorTwo"
    },
    {
        "text": "- SomeErrorThree"
    },
    {
        "text": "Each action can define the retry strategy it wants to use"
    },
    {
        "text": "If it does not define one, the action is in this case not retries"
    },
    {
        "text": "Actions can define a list of known errors in its retryableErrors array"
    },
    {
        "text": "If defined, then the action should be retriedfor those errors according to the referenced retry strategy"
    },
    {
        "text": "In our example, \"MyFirstFunction\" invocation should be retried according to the \"FirstRetryStrategy\" policy only on known errors\"SomeErrorOne\" and \"SomeErrorTwo\""
    },
    {
        "text": "This is the option used when the workflow top-level autoRetries property is set to true"
    },
    {
        "text": "Automatic retries are well suited to long-running and stateful workflow orchestrations"
    },
    {
        "text": "It allows workflowsto recover from failures thus providing more resilience"
    },
    {
        "text": "There is a possible cost associated with automatic retriesin terms of resource and computing power utilization"
    },
    {
        "text": "maxAttempts to be unlimited, meaning that the action should be retried indefinitely until successful"
    },
    {
        "text": "delay to be set to one second, meaning that there is a one second delay between action retries"
    },
    {
        "text": "multiplier to be set to two meaning that the delay should be multiplied by two for each retry attempt"
    },
    {
        "text": "Runtimes should document their default retry strategy to users, so it's clear whichproperty values they are using for the default"
    },
    {
        "text": "In our example the first action named MyFirstFunction is going to be retried according to the FirstRetryStrategyretry policyfor all errors except SomeErrorOne and SomeErrorTwo"
    },
    {
        "text": "The seconds action named MySecondFunction is going to be retried according to the SecondRetryStrategyretry policyfor all errors except SomeErrorTwo and SomeErrorThree"
    },
    {
        "text": "The fourth action named MyFourthFunction is going to be retried according to the DoNotRetryStrategyretry policy which has the maxAttempts property set to 1, meaning that this action will not be retried"
    },
    {
        "text": "Workflow execution"
    },
    {
        "text": "State execution"
    },
    {
        "text": "Action execution"
    },
    {
        "text": "Branch execution"
    },
    {
        "text": "Event consumption time"
    },
    {
        "text": "The specification allows for timeouts to be defined on the top-level workflow definition, as well asin each of the workflow state definitions"
    },
    {
        "text": "Note that the timeout settings defined in states, and state branches overwrite the top-levelworkflow definition for state, action and branch execution"
    },
    {
        "text": "If they are not defined, then the top-leveltimeout settings should take in effect"
    },
    {
        "text": "This top-level workflow timeout setting defines that the maximum execution time of all defined workflow statesis two seconds each"
    },
    {
        "text": "Since state \"A\" does not overwrite the top-level stateExecTimeout, its execution timeout should be inherited fromthe top-level timeout definition"
    },
    {
        "text": "On the other hand, state \"B\" does define it's own stateExecTimeout, in which case it would overwrite the defaultsetting, meaning that it would its execution time has a max limit of ten seconds"
    },
    {
        "text": "Defining timeouts is not mandatory, meaning that if not defined, all the timeout settings should be assumed tobe \"unlimited\""
    },
    {
        "text": "Note that the defined Workflow Execution timeout has precedence over all other defined timeouts"
    },
    {
        "text": "Just to give an extreme example, let's say we define the Workflow Execution timeout to ten seconds,and the state execution timeout to twenty seconds"
    },
    {
        "text": "In this case if the Workflow Execution timeout is reachedit should follow the rules of Workflow Execution timeout and end Workflow Execution, no matter what thestate execution time has been set to"
    },
    {
        "text": "The eventTimeout property defines the maximum amount of time to wait to consume defined events"
    },
    {
        "text": "If not specified it should default to\"unlimited\""
    },
    {
        "text": "The branchExecTimeout property defines the maximum execution time for a single branch"
    },
    {
        "text": "If not specified it should default to\"unlimited\""
    },
    {
        "text": "The actionExecTimeout property defines the maximum execution time for a single actions definition"
    },
    {
        "text": "If not specified it should default to\"unlimited\""
    },
    {
        "text": "Note that an action definition can include multiple actions"
    },
    {
        "text": "The stateExecTimeout property defines the maximum execution time for a single workflow state"
    },
    {
        "text": "If not specified it should default to\"unlimited\""
    },
    {
        "text": "WORKFLOWEXECTIMEOUT DEFINITION"
    },
    {
        "text": "interrupt\tIf false, workflow instance is allowed to finish current execution"
    },
    {
        "text": "If true, current Workflow Execution is stopped immediately"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "runBefore\tName of a workflow state to be executed before workflow instance is terminated\tstring\tno"
    },
    {
        "text": "The duration property defines the time duration of the execution timeout"
    },
    {
        "text": "Once a workflow instance is created,and the amount of the defined time is reached, the workflow instance should be terminated"
    },
    {
        "text": "The interrupt property defines if the currently running instance should be allowed to finish its currentexecution flow before it needs to be terminated"
    },
    {
        "text": "If set to true, the current instance execution should stop immediately"
    },
    {
        "text": "If it is a single state, it must define an end definition, if it transitions to other states,at last one must define it"
    },
    {
        "text": "Runtime implementations should raise compile time / parsing exceptions if any of the rules mentioned above arenot obeyed in the workflow definition"
    },
    {
        "text": "All workflow states except Sleep and Inject States can define the timeouts property and can define different timeoutsettings depending on their state type"
    },
    {
        "text": "Please reference each workflow state definitions for more information on whichtimeout settings are available for each state type"
    },
    {
        "text": "Workflow states timeouts cannot define the workflowExecTimeout property"
    },
    {
        "text": "Parallel states can define the branchExecTimeout property"
    },
    {
        "text": "If defined on the statelevel, it applies to each branch of the Parallel state"
    },
    {
        "text": "Note that each parallel state branchcan overwrite this setting to define its own branch execution timeout"
    },
    {
        "text": "If a branch does not define this timeout property, it should be inherited from it's state definition branch timeout setting"
    },
    {
        "text": "If its state does not define it either, it should be inherited from the top-level workflow branch timeout settings"
    },
    {
        "text": "The Event state timeouts property can be used tospecify state specific timeout settings"
    },
    {
        "text": "For event state it can contain the eventTimeout propertywhich is defined using the ISO 8601 data and time format"
    },
    {
        "text": "You can specify for example \"PT15M\" to represent 15 minutes or \"P2DT3H4M\" to represent 2 days, 3 hours and 4 minutes"
    },
    {
        "text": "eventTimeout values should always be represented as durations and not as specific time intervals"
    },
    {
        "text": "The eventTimeout property needs to be described in detail for Event states as it depends on whether or not the Event state is a workflow starting state or not"
    },
    {
        "text": "If the Event state is a workflow starting state, incoming events may trigger workflow instances"
    },
    {
        "text": "In this case,if the exclusive property is set to true, the eventTimeout property should be ignored"
    },
    {
        "text": "\"ExampleEvent1\","
    },
    {
        "text": "\"ExampleEvent2\""
    },
    {
        "text": "]"
    },
    {
        "text": "The first eventTimeout would start once any of the referenced events are consumed"
    },
    {
        "text": "If the second event does not occur withinthe defined eventTimeout, no workflow instance should be created"
    },
    {
        "text": "Compensation deals with undoing or reversing the work of one or more states which havealready successfully completed"
    },
    {
        "text": "For example, let's say that we have charged a customer $100 for an itempurchase"
    },
    {
        "text": "In the case customer laster on decides to cancel this purchase we need to undo it"
    },
    {
        "text": "One way ofdoing that is to credit the customer $100"
    },
    {
        "text": "Compensation in Serverless Workflow must be explicitly defined by the workflow control flow logic"
    },
    {
        "text": "It cannot be dynamically triggered by initial workflow data, event payloads, results of service invocations, orerrors"
    },
    {
        "text": "They cannot be an event state"
    },
    {
        "text": "They cannot define an end definition"
    },
    {
        "text": "If they do, it should be ignored"
    },
    {
        "text": "They must define the usedForCompensation property and set it to true"
    },
    {
        "text": "They can transition only to states which also have their usedForCompensation property set to true"
    },
    {
        "text": "\"NewPurchase\""
    },
    {
        "text": "],"
    },
    {
        "text": "]"
    },
    {
        "text": "],"
    },
    {
        "text": "- NewPurchase"
    },
    {
        "text": "In this example our \"NewItemPurchase\" event state waits for a \"NewPurchase\" event and thendebits the customer and sends them a purchase confirmation email"
    },
    {
        "text": "It defines that it's compensated by the\"CancelPurchase\" operation state which performs two actions, namely credits back thepurchase amount to customer and sends them a purchase cancellation email"
    },
    {
        "text": "As previously mentioned, compensation must be explicitly triggered by the workflows control-flow logic"
    },
    {
        "text": "This can be done via transition and end definitions"
    },
    {
        "text": "End definitions can trigger compensations by specifying the compensate property and setting it to true"
    },
    {
        "text": "This means that before workflow finishes its execution workflow compensation must be performed"
    },
    {
        "text": "Note thatin case when the end definition has its produceEvents property set, compensation must be performed beforeproducing the specified events and ending Workflow Execution"
    },
    {
        "text": "In the case the end definition has a continueAs property defined, compensation must be performed beforeWorkflow Execution continues as a new workflow invocation"
    },
    {
        "text": "In the case where the end definition has both produceEvents, and continueAs compensation is performed first,then the event should be produced, and then the workflow should continue its execution as a new workflow invocation"
    },
    {
        "text": "In this example lets say our Workflow Execution is at the \"End\" state which defines the compensate property to trueas shown in the previous section"
    },
    {
        "text": "States with a red border, namely \"A\", \"B\", \"D\" and \"E\" are states which have so farbeen executed successfully"
    },
    {
        "text": "State \"C\" has not been executed during Workflow Execution in our example"
    },
    {
        "text": "State \"E\" is not compensated as it does not define a compensatedBy state"
    },
    {
        "text": "State \"D\" is compensated by executing compensation \"D1\""
    },
    {
        "text": "State \"B\" is compensated by executing \"B1\" and then \"B1-2\""
    },
    {
        "text": "State C is not compensated as it was never active during Workflow Execution"
    },
    {
        "text": "State A is not comped as it does not define a compensatedBy state"
    },
    {
        "text": "In our example, when compensation triggers,the current workflow data is passed as input to the \"D1\" state, the first compensation state for our example"
    },
    {
        "text": "The states data output is then passed as states data input to \"B1\", and so on"
    },
    {
        "text": "In some cases when compensation is triggered, some states such as Parallel and ForEachstates can still be \"active\", meaning they still might have some async executions that are being performed"
    },
    {
        "text": "If compensation needs to performed on such still active states, the state execution must be first cancelled"
    },
    {
        "text": "After it is cancelled, compensation should be performed"
    },
    {
        "text": "In some cases our workflows are deployed and executed on runtimes and/or cloud platforms that expose someexecution limitations such as finite execution duration, finite number of workflow transitions, etc"
    },
    {
        "text": "Some runtimes, especially when dealing with stateful workflow orchestrations have a finite limit ofexecution history log sizes, meaning that once a long-running workflow reaches these limits Workflow Executions islikely to be forced to stop before reaching its completion"
    },
    {
        "text": "This can result in unexpected issues, especially withmission-critical workflows"
    },
    {
        "text": "Defining this should stop the current Workflow Execution, and continue execution as a new workflow instance of theworkflow which defines the workflow id of \"myworkflowid\""
    },
    {
        "text": "The state data where this is define shouldbecome the workflow data input of the workflow that is continuing the current Workflow Execution"
    },
    {
        "text": "Note that any defined produceEvents and compensate definitions should be honored before continueAs is applied"
    },
    {
        "text": "workflowId\tUnique id of the workflow to continue execution as"
    },
    {
        "text": "string\tyes"
    },
    {
        "text": "version\tVersion of the workflow to continue execution as"
    },
    {
        "text": "string\tno"
    },
    {
        "text": "data\tIf string type, a workflow expression which selects parts of the states data output to become the workflow data input of continued execution"
    },
    {
        "text": "If object type, a custom object to become the workflow data input of the continued execution"
    },
    {
        "text": "string or object\tno"
    },
    {
        "text": "workflowExecTimeout\tWorkflow execution timeout to be used by the workflow continuing execution"
    },
    {
        "text": "Overwrites any specific settings set by that workflow"
    },
    {
        "text": "string or object\tno"
    },
    {
        "text": "Continuing execution with continueAs can also be used inside sub-Workflow Executions, which brings its next use case"
    },
    {
        "text": "Workflows can invoke sub-workflows during their execution"
    },
    {
        "text": "In Serverless Workflow DSL, sub-workflows are invokedsimilarly to other function types via the SubFlowRef Definitionin workflow states Action definitions"
    },
    {
        "text": "Just like \"parent\" workflows, sub-workflow can also be long-running, and can run into the same type of runtime/serverless platformlimitations as previously discussed"
    },
    {
        "text": "As such they can also use continueAs to stop their current execution and continue it asa new one of the same or different workflow id"
    },
    {
        "text": "Note that when a sub-workflow is invoked it can produce a result that is then merged into the parent workflow state data"
    },
    {
        "text": "This may bring up a question as to what happens when a sub-workflow calls continueAs in terms of what is returned asresult to of its invocation by the parent workflow"
    },
    {
        "text": "Top level workflow definition version property"
    },
    {
        "text": "Actions subflowRef version property"
    },
    {
        "text": "The version property must respect the semantic versioning guidelines"
    },
    {
        "text": "Workflow constants are used to define static, and immutable, data which is available to Workflow Expressions"
    },
    {
        "text": "Constants can only be accessed inside Workflow expressions via the $CONST variable"
    },
    {
        "text": "Runtimes must make $CONST available to expressions as a predefined variable"
    },
    {
        "text": ","
    },
    {
        "text": "Workflow constants values should only contain static data, meaning that their value should notcontain Workflow expressions"
    },
    {
        "text": "Workflow constants data must be immutable"
    },
    {
        "text": "Workflow constants should not have access to Workflow secrets definitions"
    },
    {
        "text": "Secrets allow you access sensitive information, such as passwords, OAuth tokens, ssh keys, etcinside your Workflow Expressions"
    },
    {
        "text": "If secrets are defined in a Workflow definition, runtimes must assure to provide their valuesduring Workflow execution"
    },
    {
        "text": "Secrets can be used only in Workflow expressions by referencing them via the $SECRETS variable"
    },
    {
        "text": "Runtimes must make $SECRETS available to expressions as a predefined variable"
    },
    {
        "text": "Note that secrets can also be used in expression functions"
    },
    {
        "text": "Secrets are immutable, meaning that workflow expressions are not allowed to change their values"
    },
    {
        "text": "Metadata enables you to enrich the serverless workflow model with information beyond its core definitions"
    },
    {
        "text": "It is intended to be used by clients, such as tools and libraries, as well as users that find this information relevant"
    },
    {
        "text": "Metadata should not affect Workflow Execution"
    },
    {
        "text": "Implementations may choose to use metadata information or ignore it"
    },
    {
        "text": "Note, however, that using metadata to control Workflow Execution can lead to vendor-locked implementations that do not comply with the main goals of this specification, which is to be completely vendor-neutral"
    },
    {
        "text": "Function definitions"
    },
    {
        "text": "Event definitions"
    },
    {
        "text": "State definitions"
    },
    {
        "text": "Switch state data and event conditions"
    },
    {
        "text": "UI tooling information such as sizing or scaling factors"
    },
    {
        "text": "Build, release, or image information such as timestamps, release ids, git branches, PR numbers, etc"
    },
    {
        "text": "Logging, monitoring, analytics, or audit repository information"
    },
    {
        "text": "Labels used for organizing/indexing purposes, such as \"release\" \"stable\", \"track\", \"daily\", etc"
    },
    {
        "text": "Similar to Constants and Secrets, workflows expressions can have access to the context information of a running instance via the keyword WORKFLOW"
    },
    {
        "text": "In this use case, a third-party service may require information from the caller for traceability purposes"
    },
    {
        "text": "The specification doesn't define any specific variable within the WORKFLOW bucket, but it's considered a reserved keyword"
    },
    {
        "text": "The workflow extension mechanism allows you to enhance your model definitions with additional information useful forthings like analytics, rate limiting, logging, simulation, debugging, tracing, etc"
    },
    {
        "text": "Serverless Workflow specification provides extensions which can be found here"
    },
    {
        "text": "You can define extensions in your workflow definition using its top-level extensions property"
    },
    {
        "text": "For more information about this property, see the extensions property in theWorkflow Definition Structure section"
    },
    {
        "text": "Even tho users can define their own extensions, it is encouraged to use the ones provided by the specification"
    },
    {
        "text": "We also encourage users to contribute their extensions to the specification"
    },
    {
        "text": "That way they can be sharedwith the rest of the community"
    },
    {
        "text": "If you have an idea for a new workflow extension, or would like to enhance an existing one,please open an New Extension Request issue in this repository"
    },
    {
        "text": "You can find different Serverless Workflow use cases here"
    },
    {
        "text": "You can find many Serverless Workflow examples here"
    },
    {
        "text": "You can find info how the Serverless Workflow language compares withother workflow languages here"
    },
    {
        "text": "You can find a list of other languages, technologies and specifications related to workflows here"
    },
    {
        "text": "Serverless Workflow specification operates under theApache License version 2"
    },
    {
        "text": "0"
    },
    {
        "text": "Abstract -"
    },
    {
        "text": "Status -"
    },
    {
        "text": "Overview -"
    },
    {
        "text": "Project Components -"
    },
    {
        "text": "Specification Details -"
    },
    {
        "text": "Core Concepts -"
    },
    {
        "text": "Workflow Definition - workflow"
    },
    {
        "text": "Workflow Instance - workflow"
    },
    {
        "text": "Workflow Model - workflow"
    },
    {
        "text": "Workflow Data - workflow"
    },
    {
        "text": "Input, Passing, Output, Filters, Merging"
    },
    {
        "text": "Workflow Functions - workflow"
    },
    {
        "text": "REST, Async API, RPC, GraphQL, OData, Expression, Custom"
    },
    {
        "text": "Workflow Expressions -"
    },
    {
        "text": "Workflow Definition Structure -"
    },
    {
        "text": ", workflow, , ,"
    },
    {
        "text": "Serverless Workflow"
    },
    {
        "text": "MindOS?"
    },
    {
        "text": ", Serverless Workflow MindOS"
    },
    {
        "text": "MindOS, , -"
    },
    {
        "text": "MindOS Serverless Workflow"
    },
    {
        "text": ", Serverless Workflow -"
    },
    {
        "text": ", MindOS"
    },
    {
        "text": "Serverless Workflow MindOS,"
    },
    {
        "text": "MindOS,"
    },
    {
        "text": "- , ,"
    },
    {
        "text": ", \u00b9"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", , ,"
    },
    {
        "text": "DDI\t \t - ,"
    },
    {
        "text": "DCMI\t \t - ,"
    },
    {
        "text": "EAD\t \t - XML"
    },
    {
        "text": "EML\t \t - XML"
    },
    {
        "text": "LOM\t \t - ISO ,"
    },
    {
        "text": "MARC\t \t- - -"
    },
    {
        "text": "MODS\t \t - XML , MARC 21"
    },
    {
        "text": "MPEG-7\t \t MPEG-7 - ISO , , ,"
    },
    {
        "text": "PREMIS\t \t - XML ,"
    },
    {
        "text": "SAML\t \t - OASIS"
    },
    {
        "text": "- ,"
    },
    {
        "text": "- , , , , , , ,"
    },
    {
        "text": "- ,"
    },
    {
        "text": ", RESTful, AsyncAPI, RPC, GraphQL OData"
    },
    {
        "text": "-"
    },
    {
        "text": ","
    },
    {
        "text": "- ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": "- , , ,,"
    },
    {
        "text": "MindOS , , ,"
    },
    {
        "text": "MindOS , JavaScript, Python SQL"
    },
    {
        "text": "Workflow Build Process - DNAnexus Documentation - DNAnexus, JSON, MindOS"
    },
    {
        "text": "Serverless Workflow Specification - GitHub -, MindOS"
    },
    {
        "text": "Workflow Builder error messages in the server log file - IBM - IBM, MindOS"
    },
    {
        "text": "- ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": "-"
    },
    {
        "text": "-"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ", dataset"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": ", JSON- workflow Serverless Workflow, ,"
    },
    {
        "text": "JSON-, , workflow"
    },
    {
        "text": "workflow, JSON-"
    },
    {
        "text": ", workflow, , ,"
    },
    {
        "text": "workflow JSON-"
    },
    {
        "text": ","
    },
    {
        "text": ", Serverless Workflow"
    },
    {
        "text": ","
    },
    {
        "text": "! , , , ,, , , ,"
    },
    {
        "text": "JSON-, workflow"
    },
    {
        "text": ", ,, workflow"
    },
    {
        "text": ", workflow"
    },
    {
        "text": "workflow, ,"
    },
    {
        "text": "workflow -"
    },
    {
        "text": "ML"
    },
    {
        "text": ", workflow"
    },
    {
        "text": ", , -"
    },
    {
        "text": "\"kenedu\", - \"weniti\""
    },
    {
        "text": ", ,, \"kenedu\""
    },
    {
        "text": ", ,, \"weniti\""
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ", JSON"
    },
    {
        "text": ",, ,"
    },
    {
        "text": ",, ,,"
    },
    {
        "text": "CSV Pandas DataFrame"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ", -"
    },
    {
        "text": ",!"
    },
    {
        "text": "ML"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", 100"
    },
    {
        "text": "name"
    },
    {
        "text": "surname"
    },
    {
        "text": "age"
    },
    {
        "text": "gender"
    },
    {
        "text": "description"
    },
    {
        "text": "date"
    },
    {
        "text": "author"
    },
    {
        "text": "content"
    },
    {
        "text": "tags"
    },
    {
        "text": "!, , -"
    },
    {
        "text": "200 ,"
    },
    {
        "text": "Faker"
    },
    {
        "text": "- ,"
    },
    {
        "text": "ML"
    },
    {
        "text": "TF-IDF"
    },
    {
        "text": "TensorFlow Dataset"
    },
    {
        "text": ", -"
    },
    {
        "text": ","
    },
    {
        "text": ", -"
    },
    {
        "text": "py"
    },
    {
        "text": "train_data"
    },
    {
        "text": "pkl test_data"
    },
    {
        "text": "pkl Pandas dataframe"
    },
    {
        "text": ", - -"
    },
    {
        "text": "train_data"
    },
    {
        "text": "pkl test_data"
    },
    {
        "text": "pkl Pandas, ?"
    },
    {
        "text": ", dataframe"
    },
    {
        "text": "train_df test_df Pandas dataframe,"
    },
    {
        "text": ","
    },
    {
        "text": ", - ,"
    },
    {
        "text": ", /"
    },
    {
        "text": "\" Python, , for"
    },
    {
        "text": "10 random"
    },
    {
        "text": "\""
    },
    {
        "text": ", ,"
    },
    {
        "text": ", - ,"
    },
    {
        "text": "-!"
    },
    {
        "text": ", ,"
    },
    {
        "text": "JSON Pandas DataFrame"
    },
    {
        "text": "TF-IDF"
    },
    {
        "text": "TensorFlow Dataset"
    },
    {
        "text": "Pickle"
    },
    {
        "text": "/"
    },
    {
        "text": ","
    },
    {
        "text": "JSON Pandas DataFrame"
    },
    {
        "text": ","
    },
    {
        "text": "- TF-IDF, Word2Vec"
    },
    {
        "text": "TensorFlow, PyTorch, Keras"
    },
    {
        "text": "ML"
    },
    {
        "text": "Pickle, JSON, XML, YAML"
    },
    {
        "text": ", -"
    },
    {
        "text": "!"
    },
    {
        "text": ", , , Genius , , Genius"
    },
    {
        "text": ", ,"
    },
    {
        "text": "- , Genius"
    },
    {
        "text": "-"
    },
    {
        "text": "Genius"
    },
    {
        "text": "-"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": "GitHub"
    },
    {
        "text": "cookiecutter poetry Python"
    },
    {
        "text": "API ML sklearn, PyTorch, TensorFlow"
    },
    {
        "text": ","
    },
    {
        "text": ", ,"
    },
    {
        "text": "GitHub cookiecutter"
    },
    {
        "text": "synthetic_data_generator"
    },
    {
        "text": "API ML sklearn, PyTorch, TensorFlow"
    },
    {
        "text": "/"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", -"
    },
    {
        "text": ", dataset Genius MindOS"
    },
    {
        "text": "Read 1 file"
    },
    {
        "text": ", github"
    },
    {
        "text": "com/serverlessworkflow/specification Genius MindOS"
    },
    {
        "text": "Serverless Workflow -"
    },
    {
        "text": "-, ,"
    },
    {
        "text": "SDK"
    },
    {
        "text": ","
    },
    {
        "text": "- , ,"
    },
    {
        "text": ","
    },
    {
        "text": "Genius Serverless Workflow"
    },
    {
        "text": ", - -"
    },
    {
        "text": ", , dataset"
    },
    {
        "text": ", MindOS, github"
    },
    {
        "text": "com/serverlessworkflow/specification,"
    },
    {
        "text": "-, ,"
    },
    {
        "text": "-, ,"
    },
    {
        "text": "NLP"
    },
    {
        "text": ", SDK,"
    },
    {
        "text": "NLP"
    },
    {
        "text": ", ,"
    },
    {
        "text": "\"MindOS_training_data_v1\""
    },
    {
        "text": "Genius"
    },
    {
        "text": ", -"
    },
    {
        "text": "\"MindOS_training_data_v1\""
    },
    {
        "text": "'Recommends products based on past user behavior',"
    },
    {
        "text": "'Detects objects in images',"
    },
    {
        "text": "'Chatbot Genius for answering user queries'],"
    },
    {
        "text": "],"
    },
    {
        "text": "'Workflows can orchestrate Serverless functions, services and apps',"
    },
    {
        "text": "'Supports workflow functions like parallel branches, joins, loops',"
    },
    {
        "text": "'Can integrate with event-driven infrastructure and services',"
    },
    {
        "text": "]"
    },
    {
        "text": ", ,,"
    },
    {
        "text": ","
    },
    {
        "text": "Genius , , MindOS"
    },
    {
        "text": ", -"
    },
    {
        "text": "Datasets represent data in Visual Studio"
    },
    {
        "text": "They can come from a database, service, file, or be generated in-memory"
    },
    {
        "text": "Right click on the Data Sources folder in Solution Explorer and select Add New Data Source"
    },
    {
        "text": "Configure the connection and select the specific database/tables/objects to include"
    },
    {
        "text": "Drag tables/objects onto the designer surface to include them"
    },
    {
        "text": "Set primary keys, foreign keys, relations, column data types"
    },
    {
        "text": "Preview and filter the data"
    },
    {
        "text": "Drag tables onto the Typed Dataset designer"
    },
    {
        "text": "It generates strongly-typed classes to represent each table"
    },
    {
        "text": "You can then program against the strongly-typed dataset"
    },
    {
        "text": "TableAdapters in typed datasets expose methods like Fill, Insert, Update, Delete to manipulate data"
    },
    {
        "text": "Add custom methods or properties"
    },
    {
        "text": "Add validation logic"
    },
    {
        "text": "Add relations between tables"
    },
    {
        "text": "Generate custom SQL queries"
    },
    {
        "text": "So in summary, Visual Studio provides a graphical way to create datasets from data sources, configure them, and generate strongly-typed code for programming against the data"
    },
    {
        "text": "The Dataset Designer and Typed Dataset features are key tools for this"
    },
    {
        "text": "md"
    },
    {
        "text": "os"
    },
    {
        "text": "walk"
    },
    {
        "text": "md_files"
    },
    {
        "text": "md"
    },
    {
        "text": "GitHub, GitLab"
    },
    {
        "text": "This appears to be a Docker image for Graphviz - an open source graph visualization software"
    },
    {
        "text": "It builds Graphviz from source code and installs it into a Ubuntu base image"
    },
    {
        "text": "It exposes ports 8080 and 8081 for web visualization of graphs"
    },
    {
        "text": "The image description states it can be used to generate graphs from DOT language scripts"
    },
    {
        "text": "This Docker image allows running Graphviz in a portable containerized environment"
    },
    {
        "text": "So in summary, this GitLab container registry link points to an official Docker image for running the Graphviz graph visualization software"
    },
    {
        "text": "The image is built from source and exposes web ports to view generated graphs"
    },
    {
        "text": "Read 10 files"
    },
    {
        "text": "This allows accessing the Graphviz web visualization server on those ports after running the container"
    },
    {
        "text": "Once running, Graphviz can be used to generate graphs by passing DOT language scripts to the web UI or API exposed on ports 8080 and 8081"
    },
    {
        "text": "Let me know if you need any clarification or have additional questions!"
    },
    {
        "text": ", ?"
    },
    {
        "text": ", - , ,"
    },
    {
        "text": ", - , ,,"
    },
    {
        "text": ","
    },
    {
        "text": "-, NLTK, gensim, - OpenCV TensorFlow"
    },
    {
        "text": ", , ,"
    },
    {
        "text": ", -"
    },
    {
        "text": "WDL ,"
    },
    {
        "text": "WDL - 1"
    },
    {
        "text": "1"
    },
    {
        "text": ","
    },
    {
        "text": "WDL - , Slack,"
    },
    {
        "text": "WDL, Dockstore BioWDL"
    },
    {
        "text": "WDL , Cromwell, MiniWDL, dxWDL"
    },
    {
        "text": "WDL - , ,"
    },
    {
        "text": ", WDL -"
    },
    {
        "text": ", MindOS,"
    },
    {
        "text": ", , MindOS \u2014 , \u2014"
    },
    {
        "text": "MindOS , MindOS, ,"
    },
    {
        "text": ", , ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", , MindOS"
    },
    {
        "text": "MindOS,"
    },
    {
        "text": ", , MindOS - , ,"
    },
    {
        "text": ", , , ,"
    },
    {
        "text": ", , AI-"
    },
    {
        "text": "- AI-,"
    },
    {
        "text": ","
    },
    {
        "text": ", MindOS"
    },
    {
        "text": "MindOS,"
    },
    {
        "text": ", , MindOS ,"
    },
    {
        "text": ","
    },
    {
        "text": "?"
    },
    {
        "text": ", MindOS,"
    },
    {
        "text": "- MindOS,"
    },
    {
        "text": ", /"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": "AI-, \"AI Geniuses\""
    },
    {
        "text": "Genius ,"
    },
    {
        "text": "Featured - , ,"
    },
    {
        "text": "Trending - , , , Midjourney"
    },
    {
        "text": "My Geniuses"
    },
    {
        "text": "-, , ,"
    },
    {
        "text": "-, ,"
    },
    {
        "text": "AI- ,"
    },
    {
        "text": "- AI-"
    },
    {
        "text": "Geniuses - AI-"
    },
    {
        "text": "Mindverse AI"
    },
    {
        "text": "Mindverse AI"
    },
    {
        "text": "Mindverse"
    },
    {
        "text": "Mindverse AI"
    },
    {
        "text": "MindOS AI Agent Engine"
    },
    {
        "text": "Mindverse AI"
    },
    {
        "text": "'"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", Genius"
    },
    {
        "text": "Ready Player Me"
    },
    {
        "text": "-"
    },
    {
        "text": "Chatbot"
    },
    {
        "text": ", Genius"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": "Genius MindOS"
    },
    {
        "text": ","
    },
    {
        "text": "Ready Player Me"
    },
    {
        "text": ", Genius MindOS"
    },
    {
        "text": ", -"
    },
    {
        "text": "PersonaKnowledgeSkillsMemoryAutonomyPublishAvatar Genius"
    },
    {
        "text": "ReadyPlayerMePicture"
    },
    {
        "text": ","
    },
    {
        "text": ", , ,"
    },
    {
        "text": "\u00ab ,"
    },
    {
        "text": "' , , Genius ,"
    },
    {
        "text": ","
    },
    {
        "text": "'BuildChat"
    },
    {
        "text": "Genius MindOS"
    },
    {
        "text": "ReadyPlayerMe"
    },
    {
        "text": "Chat"
    },
    {
        "text": "- , , Genius"
    },
    {
        "text": "PersonaKnowledgeSkillsMemoryAutonomyPublishLearning Knowledge"
    },
    {
        "text": "-"
    },
    {
        "text": "ALLBuildChat"
    },
    {
        "text": "'Genius UpdatedMessage"
    },
    {
        "text": "Genius MindOS"
    },
    {
        "text": "-"
    },
    {
        "text": "Genius"
    },
    {
        "text": "- GitBook"
    },
    {
        "text": "- Genius"
    },
    {
        "text": "- , 30+"
    },
    {
        "text": "LibrarySkillsValidated"
    },
    {
        "text": "Google"
    },
    {
        "text": "Serper"
    },
    {
        "text": "From LibraryAPIValidated"
    },
    {
        "text": "Google APIValidated"
    },
    {
        "text": "Youtube, APIValidated"
    },
    {
        "text": "LLM JSON ,"
    },
    {
        "text": "LibraryAPIValidated"
    },
    {
        "text": ", html- urlFrom LibraryAPIValidated"
    },
    {
        "text": "resultFrom LibraryAPIValidated"
    },
    {
        "text": "From LibraryAPIValidated"
    },
    {
        "text": "-From LibraryAPIValidate"
    },
    {
        "text": ", PE,PB, , API"
    },
    {
        "text": "API"
    },
    {
        "text": "2023-07-15WorkflowValidated"
    },
    {
        "text": "GitHub2023-07-14WorkflowValidated"
    },
    {
        "text": "API"
    },
    {
        "text": "2023-07-13WorkflowValidated"
    },
    {
        "text": "API , , -"
    },
    {
        "text": "2023-07-13WorkflowValidated"
    },
    {
        "text": "2023-07-13WorkflowValidated"
    },
    {
        "text": ","
    },
    {
        "text": "Test shortcut ChatSkill -"
    },
    {
        "text": "Test shortcut ChatSkill -"
    },
    {
        "text": "Test shortcut ChatSkill - Google"
    },
    {
        "text": "Test shortcut ChatSkill -"
    },
    {
        "text": "Test shortcut ChatSkill -"
    },
    {
        "text": "Test shortcut ChatSkill - LLM"
    },
    {
        "text": "Test shortcut ChatSkill - LLM"
    },
    {
        "text": "Test shortcut"
    },
    {
        "text": ", WorkflowSlyAI -"
    },
    {
        "text": ", MindOS"
    },
    {
        "text": "Genius"
    },
    {
        "text": "MindOS AI-Assistant"
    },
    {
        "text": "Genius MindOS"
    },
    {
        "text": "API"
    },
    {
        "text": "- Genius"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", Genius , Genius , , , ,"
    },
    {
        "text": ","
    },
    {
        "text": "Genius , , ,"
    },
    {
        "text": ", , - , Genius"
    },
    {
        "text": "Genius, , WorkflowSlyAI - AI-Genius Genius"
    },
    {
        "text": ", Genius"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", ,"
    },
    {
        "text": "persona, knowledge, skills memory Genius"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", Genius"
    },
    {
        "text": "WorkflowSlyAI Genius"
    },
    {
        "text": ", - Genius Genius"
    },
    {
        "text": ", \" \" Genius WorkflowSlyAI MindOS !!! ?"
    },
    {
        "text": "- Genius WorkflowSlyAI, MindOS!"
    },
    {
        "text": "MindOS,"
    },
    {
        "text": "Genius, WorkflowSlyAI"
    },
    {
        "text": "Genius"
    },
    {
        "text": "Genius,"
    },
    {
        "text": "WorkflowSlyAI,"
    },
    {
        "text": "! MindOS, Genius WorkflowSlyAI"
    },
    {
        "text": "!"
    },
    {
        "text": ", , , Genius -"
    },
    {
        "text": "MindOS"
    },
    {
        "text": ", ,"
    },
    {
        "text": ","
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": ","
    },
    {
        "text": ", WorkflowSlyAI , -"
    },
    {
        "text": "MindOS"
    },
    {
        "text": ", MindOS -"
    },
    {
        "text": ", Genius Genius - Persona, Knowledge, Skills"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", MindOS"
    },
    {
        "text": ", Genius"
    },
    {
        "text": "!"
    },
    {
        "text": "Persona, Avatar ReadyPlayerMe Voice , ,, Biography Genius , Persona"
    },
    {
        "text": "!"
    },
    {
        "text": ","
    },
    {
        "text": "\ud83d\ude0a"
    },
    {
        "text": "Knowledge!"
    },
    {
        "text": ","
    },
    {
        "text": "Skills! , Genius"
    },
    {
        "text": "API skills!"
    },
    {
        "text": "Workflow skills! ,"
    },
    {
        "text": "Memory!"
    },
    {
        "text": ","
    },
    {
        "text": "AI- MindOS AI- , AI- AI- API MindOS"
    },
    {
        "text": ", AI-"
    },
    {
        "text": "!"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "\"Load Data\" ,"
    },
    {
        "text": "\"Find Result\" , , , MindOS"
    },
    {
        "text": ", , MindOS"
    },
    {
        "text": ", ,"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "\"Load Data\""
    },
    {
        "text": "\"Find Result\" MindOS"
    },
    {
        "text": "!"
    },
    {
        "text": ","
    },
    {
        "text": "InteRiOS - Genius"
    },
    {
        "text": "SamaBlogSample -"
    },
    {
        "text": "MemoryCatcher -"
    },
    {
        "text": "\" \" -,"
    },
    {
        "text": ", , MindOS"
    },
    {
        "text": "- \"\", ,"
    },
    {
        "text": "- -,"
    },
    {
        "text": "SamaBlogSample -"
    },
    {
        "text": "MemoryCatcher -"
    },
    {
        "text": "\" \""
    },
    {
        "text": "-"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "- \"\","
    },
    {
        "text": ","
    },
    {
        "text": "?"
    },
    {
        "text": ", WDL - ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": "WDL MindOS"
    },
    {
        "text": "Read 4 files"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", ,"
    },
    {
        "text": "Mind AI"
    },
    {
        "text": "WDL -, MindOS -"
    },
    {
        "text": "WDL , MindOS"
    },
    {
        "text": "WDL - , MindOS -"
    },
    {
        "text": "WDL , MindOS -"
    },
    {
        "text": ","
    },
    {
        "text": "- WDL MindOS"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": "- Genius MindOS"
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", WorkflowSlyAI - , Genius MindOS"
    },
    {
        "text": "Genius"
    },
    {
        "text": "WorkflowSlyAI Genius MindOS"
    },
    {
        "text": "Genius"
    },
    {
        "text": "WorkflowSlyAI ,"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", WorkflowSlyAI , Genius,"
    },
    {
        "text": ", , - WorkflowSlyAI Genius MindOS"
    },
    {
        "text": ","
    },
    {
        "text": "Python Pandas, NumPy"
    },
    {
        "text": ", ,"
    },
    {
        "text": "Scikit-Learn, TensorFlow , ,"
    },
    {
        "text": "NLTK, SpaCy"
    },
    {
        "text": ", POS-,"
    },
    {
        "text": "API Python, JSON,"
    },
    {
        "text": "API, Twitter, OpenWeather"
    },
    {
        "text": "BeautifulSoup, Selenium"
    },
    {
        "text": ", -"
    },
    {
        "text": "- Python aiogram, pyTelegramBotAPI"
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ","
    },
    {
        "text": ", -"
    },
    {
        "text": "MindOS Genius ?"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "MindOS, , ,"
    },
    {
        "text": "Marketplace \" \""
    },
    {
        "text": ", Genius MindOS - ,"
    },
    {
        "text": "MindOS WDL"
    },
    {
        "text": "Genius WorkflowSlyAI MindOS"
    },
    {
        "text": ", MindOS Genius"
    },
    {
        "text": ", MindOS , Genius,"
    },
    {
        "text": ","
    },
    {
        "text": "CLIP"
    },
    {
        "text": ", ,"
    },
    {
        "text": "CLIP -"
    },
    {
        "text": "-"
    },
    {
        "text": ", , -"
    },
    {
        "text": "CLIP"
    },
    {
        "text": "latent,"
    },
    {
        "text": "CLIP ,"
    },
    {
        "text": "-"
    },
    {
        "text": "CLIP ,"
    },
    {
        "text": "-"
    },
    {
        "text": "- ,"
    },
    {
        "text": "CLIP - Contrastive Language-Image Pretraining"
    },
    {
        "text": "Image Encoder - ResNet"
    },
    {
        "text": "Text Encoder -"
    },
    {
        "text": "\"-\""
    },
    {
        "text": "latent"
    },
    {
        "text": "CLIP"
    },
    {
        "text": "-"
    },
    {
        "text": "-"
    },
    {
        "text": "GLIDE - Guided Language to Image Diffusion for Generation and Editing"
    },
    {
        "text": "Diffusion- ,"
    },
    {
        "text": "CLIP-"
    },
    {
        "text": "FID CLIPScore"
    },
    {
        "text": "Diffusion- -"
    },
    {
        "text": "\" GLIDE ,"
    },
    {
        "text": "Diffusion-"
    },
    {
        "text": ", GLIDE"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", GLIDE ?\""
    },
    {
        "text": "?"
    },
    {
        "text": "\"A painting of a fox sitting in a field of flowers\" -"
    },
    {
        "text": "\"A photograph of a tabby cat playing with a ball of yarn\" -"
    },
    {
        "text": "\"A photo of a beach with more blue in the ocean\" -"
    },
    {
        "text": "\"A portrait of a girl with red hair\" -"
    },
    {
        "text": "\"A living room with bookshelves added\" -"
    },
    {
        "text": "\"A dog without a collar\" -"
    },
    {
        "text": ", , GLIDE"
    },
    {
        "text": "MindOS"
    },
    {
        "text": "Genius WorkflowSlyAI"
    },
    {
        "text": ", ,"
    },
    {
        "text": "-"
    },
    {
        "text": "Genius MindOS"
    },
    {
        "text": ","
    },
    {
        "text": "- Genius WorkflowSlyAI"
    },
    {
        "text": "WorkflowSlyAI - Genius,"
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": "WorkflowSlyAI , MindOS"
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": ", WorkflowSlyAI"
    },
    {
        "text": ", WorkflowSlyAI"
    },
    {
        "text": "Genius"
    },
    {
        "text": ", WorkflowSlyAI"
    },
    {
        "text": "- \" \" ?"
    },
    {
        "text": "WorkflowSlyAI - - , ,"
    },
    {
        "text": "-"
    },
    {
        "text": "WorkflowSlyAI - -"
    },
    {
        "text": "-"
    },
    {
        "text": "- WorkflowSlyAI"
    },
    {
        "text": "-, WorkflowSlyAI /"
    },
    {
        "text": ", - Genius WorkflowSlyAI"
    },
    {
        "text": "WorkflowSlyAI -"
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": "-"
    },
    {
        "text": "WorkflowSlyAI"
    },
    {
        "text": "- autoencoder"
    },
    {
        "text": ", autoencoder -"
    },
    {
        "text": "autoencoder -"
    },
    {
        "text": "-, WorkflowSlyAI,"
    },
    {
        "text": "autoencoder"
    },
    {
        "text": "-"
    },
    {
        "text": "-"
    },
    {
        "text": "-"
    },
    {
        "text": "-"
    },
    {
        "text": ", autoencoder pipeline - WorkflowSlyAI"
    },
    {
        "text": "-"
    },
    {
        "text": "html"
    },
    {
        "text": "user_dream"
    },
    {
        "text": "Model NameGPT3"
    },
    {
        "text": "5-Turbo-16k"
    },
    {
        "text": "Parameters AvailableAspect Ratios--aspect, or --ar Change the aspect ratio of a generation"
    },
    {
        "text": "Chaos--chaos <number 0\u2013100> Change how varied the results will be"
    },
    {
        "text": "Higher valuesproduce more unusual and unexpected generations"
    },
    {
        "text": "No--no Negative prompting, --no plants would try to remove plants from the image"
    },
    {
        "text": "Quality--quality <"
    },
    {
        "text": "25,"
    },
    {
        "text": "5, 1, or 2>, or --q <"
    },
    {
        "text": "25,"
    },
    {
        "text": "5, 1, or 2> How much rendering quality time youwant to spend"
    },
    {
        "text": "The default value is 1"
    },
    {
        "text": "Higher values cost more and lower values costless"
    },
    {
        "text": "Repeat--repeat <1\u201340>, or --r <1\u201340> Create multiple Jobs from a single prompt"
    },
    {
        "text": "--repeat isuseful for quickly rerunning a job multiple times"
    },
    {
        "text": "Seed--seed <integer between 0\u20134294967295> The Midjourney bot uses a seed number tocreate a field of visual noise, like television static, as a starting point to generate theinitial image grids"
    },
    {
        "text": "Seed numbers are generated randomly for each image but can bespecified with the --seed or --sameseed parameter"
    },
    {
        "text": "Using the same seed numberand prompt will produce similar ending images"
    },
    {
        "text": "Stop--stop <integer between 10\u2013100> Use the --stop parameter to finish a Job part waythrough the process"
    },
    {
        "text": "Stopping a Job at an earlier percentage can create blurrier, lessdetailed results"
    },
    {
        "text": "Style--style <4a, 4b, or 4c> Switch between versions of the Midjourney Model Version 4--style <expressive, or cute> Switch between versions of the Niji Model VersionStylize--stylize, or --s parameter influences how strongly Midjourney'sdefault aesthetic style is applied to Jobs"
    },
    {
        "text": "cottages, lively scene, warm and sunny, midday light, feel-good atmosphere\u201dYou can use any amount of stylize from 100-900"
    },
    {
        "text": "You don\u2019t have to use it every timeeither"
    },
    {
        "text": "Just if you think it\u2019d be good for the images that are being generated to bedifferent from one another in that same style"
    },
    {
        "text": "Now that you have a full understanding of Midjourney with example prompts"
    },
    {
        "text": "You can take inspiration from the structure of the prompts above, you can make these prompts longer or shorter if necessary in order to generate the perfect prompt"
    },
    {
        "text": "Please direct output the prompt without any other explanation"
    },
    {
        "text": "user_dream_image"
    },
    {
        "text": "Draw a picture based on user's description"
    },
    {
        "text": "Request Bodyprompt"
    },
    {
        "text": "Dream PaintingTest RunPublish"
    },
    {
        "text": "- Midjourney"
    },
    {
        "text": ", ,"
    },
    {
        "text": "Midjourney"
    },
    {
        "text": ", ,"
    },
    {
        "text": "Midjourney"
    },
    {
        "text": "- -, ,"
    },
    {
        "text": "-"
    },
    {
        "text": ","
    },
    {
        "text": "- Midjourney"
    },
    {
        "text": "_"
    },
    {
        "text": "3D"
    },
    {
        "text": "3D"
    },
    {
        "text": "3D"
    },
    {
        "text": "-"
    },
    {
        "text": "-"
    },
    {
        "text": "9 -"
    },
    {
        "text": "4"
    },
    {
        "text": "3D"
    },
    {
        "text": "3D"
    },
    {
        "text": "- 3D"
    },
    {
        "text": "9"
    },
    {
        "text": "1"
    },
    {
        "text": "3D"
    },
    {
        "text": "9"
    },
    {
        "text": "2"
    },
    {
        "text": "9"
    },
    {
        "text": "3"
    },
    {
        "text": "9"
    },
    {
        "text": "5"
    },
    {
        "text": "9"
    },
    {
        "text": "6"
    },
    {
        "text": "9"
    },
    {
        "text": "7"
    },
    {
        "text": "9"
    },
    {
        "text": "8"
    },
    {
        "text": "9"
    },
    {
        "text": "9"
    },
    {
        "text": "3D ,"
    },
    {
        "text": ","
    },
    {
        "text": "3"
    },
    {
        "text": "1"
    },
    {
        "text": "3"
    },
    {
        "text": "2"
    },
    {
        "text": "3"
    },
    {
        "text": "3"
    },
    {
        "text": "4"
    },
    {
        "text": "1"
    },
    {
        "text": "4"
    },
    {
        "text": "2"
    },
    {
        "text": "4"
    },
    {
        "text": "3"
    },
    {
        "text": "3D"
    },
    {
        "text": "7"
    },
    {
        "text": "1"
    },
    {
        "text": "7"
    },
    {
        "text": "2"
    },
    {
        "text": "7"
    },
    {
        "text": "3"
    },
    {
        "text": "OK?"
    },
    {
        "text": "- 9"
    },
    {
        "text": "- 4"
    },
    {
        "text": "9"
    },
    {
        "text": "1"
    },
    {
        "text": "9"
    },
    {
        "text": "2"
    },
    {
        "text": "9"
    },
    {
        "text": "3"
    },
    {
        "text": "9"
    },
    {
        "text": "4"
    },
    {
        "text": "9"
    },
    {
        "text": "5"
    },
    {
        "text": "9"
    },
    {
        "text": "6"
    },
    {
        "text": "9"
    },
    {
        "text": "7"
    },
    {
        "text": "- ,"
    },
    {
        "text": ","
    },
    {
        "text": "3D"
    },
    {
        "text": "GPT"
    },
    {
        "text": "-"
    },
    {
        "text": "API"
    },
    {
        "text": "MindOS -"
    },
    {
        "text": "workflow"
    },
    {
        "text": "- MindOS"
    },
    {
        "text": "-,"
    },
    {
        "text": "Define the Block class"
    },
    {
        "text": "Create instances of objects for each block"
    },
    {
        "text": "Connect the blocks together"
    },
    {
        "text": ", -"
    },
    {
        "text": "Blockconnectconnections"
    },
    {
        "text": ", ,"
    },
    {
        "text": ", , -"
    },
    {
        "text": "Block"
    },
    {
        "text": "J"
    },
    {
        "text": "S"
    },
    {
        "text": "O"
    },
    {
        "text": "N"
    },
    {
        "text": "Y"
    },
    {
        "text": "A"
    },
    {
        "text": "M"
    },
    {
        "text": "L"
    },
    {
        "text": "X"
    },
    {
        "text": "Nata"
    },
    {
        "text": "B"
    },
    {
        "text": "P"
    },
    {
        "text": "D"
    },
    {
        "text": "Python"
    },
    {
        "text": "Java"
    },
    {
        "text": "Script"
    },
    {
        "text": "Input"
    },
    {
        "text": "Name"
    },
    {
        "text": "Text"
    },
    {
        "text": "Dropdown"
    },
    {
        "text": "Personality"
    },
    {
        "text": "Choice"
    },
    {
        "text": "Friendly"
    },
    {
        "text": "Professional"
    },
    {
        "text": "Funny"
    },
    {
        "text": "Button"
    },
    {
        "text": "Create"
    },
    {
        "text": "Action"
    },
    {
        "text": "Label"
    },
    {
        "text": "Status"
    },
    {
        "text": "Genius"
    },
    {
        "text": "G"
    },
    {
        "text": "I"
    },
    {
        "text": "W"
    },
    {
        "text": "Workflow Engine"
    },
    {
        "text": "Company"
    },
    {
        "text": "Serper News I"
    },
    {
        "text": "Searching"
    },
    {
        "text": "List"
    },
    {
        "text": "Interpreting"
    },
    {
        "text": "Pass"
    },
    {
        "text": "Intergrade"
    },
    {
        "text": "T"
    },
    {
        "text": "Max"
    },
    {
        "text": "News"
    },
    {
        "text": "Above"
    },
    {
        "text": "News Title"
    },
    {
        "text": "Potential Impact"
    },
    {
        "text": "Generating"
    },
    {
        "text": "Markdown"
    },
    {
        "text": "U"
    },
    {
        "text": "R"
    },
    {
        "text": "H"
    },
    {
        "text": "Writing"
    },
    {
        "text": "Vg"
    },
    {
        "text": "Ey"
    },
    {
        "text": "Placeholder"
    },
    {
        "text": "Enter"
    },
    {
        "text": "Connected"
    },
    {
        "text": "Options"
    },
    {
        "text": "Random"
    },
    {
        "text": "Value"
    },
    {
        "text": "None"
    },
    {
        "text": "Please"
    },
    {
        "text": "Your Genius"
    },
    {
        "text": "Something"
    },
    {
        "text": "C"
    },
    {
        "text": "E"
    },
    {
        "text": "Is Name"
    },
    {
        "text": "Yes"
    },
    {
        "text": "F"
    },
    {
        "text": "No"
    },
    {
        "text": "Is Personality Random"
    },
    {
        "text": "Pick"
    },
    {
        "text": "Create Genius"
    },
    {
        "text": "Is"
    },
    {
        "text": "K"
    },
    {
        "text": "Is Personality"
    },
    {
        "text": "Create A"
    },
    {
        "text": "Your A"
    },
    {
        "text": "Type"
    },
    {
        "text": "Bing"
    },
    {
        "text": "Miro"
    },
    {
        "text": "Company Name"
    },
    {
        "text": "Link List"
    },
    {
        "text": "Summary List"
    },
    {
        "text": "Final Report"
    },
    {
        "text": "Mind"
    },
    {
        "text": "Sly"
    },
    {
        "text": "Start"
    },
    {
        "text": "Gather Location Information"
    },
    {
        "text": "Retrieve Weather Data"
    },
    {
        "text": "Process Weather Data"
    },
    {
        "text": "Generate Weather Update"
    },
    {
        "text": "Provide Weather Update"
    },
    {
        "text": "End"
    },
    {
        "text": "Prompt"
    },
    {
        "text": "Retrieve"
    },
    {
        "text": "Process"
    },
    {
        "text": "Generate"
    },
    {
        "text": "The"
    },
    {
        "text": "Humidity"
    },
    {
        "text": "Provide"
    },
    {
        "text": "Weather"
    },
    {
        "text": "Layer"
    },
    {
        "text": "View"
    },
    {
        "text": "To"
    },
    {
        "text": "Leaflet"
    },
    {
        "text": "Certainly"
    },
    {
        "text": "Let"
    },
    {
        "text": "Warehouse Management System"
    },
    {
        "text": "S Skill Overview"
    },
    {
        "text": "A Warehouse Management System"
    },
    {
        "text": "The W"
    },
    {
        "text": "Logic"
    },
    {
        "text": "Flow"
    },
    {
        "text": "S Skill"
    },
    {
        "text": "User Interaction"
    },
    {
        "text": "Warehouse Setup"
    },
    {
        "text": "Inventory Management"
    },
    {
        "text": "Order Management"
    },
    {
        "text": "It"
    },
    {
        "text": "Pack"
    },
    {
        "text": "Shipping"
    },
    {
        "text": "Logistics"
    },
    {
        "text": "Reporting"
    },
    {
        "text": "Analytics"
    },
    {
        "text": "System Integration"
    },
    {
        "text": "Enterprise Resource Planning"
    },
    {
        "text": "Customer Relationship Management"
    },
    {
        "text": "Maintenance"
    },
    {
        "text": "Support"
    },
    {
        "text": "By"
    },
    {
        "text": "Here"
    },
    {
        "text": "The Genius"
    },
    {
        "text": "User Input"
    },
    {
        "text": "Capture"
    },
    {
        "text": "Location Validation"
    },
    {
        "text": "Validate"
    },
    {
        "text": "Use"
    },
    {
        "text": "Weather A"
    },
    {
        "text": "I Integration"
    },
    {
        "text": "Integrate"
    },
    {
        "text": "Handle"
    },
    {
        "text": "Data Processing"
    },
    {
        "text": "Extract"
    },
    {
        "text": "Access"
    },
    {
        "text": "Weather Update Generation"
    },
    {
        "text": "Format"
    },
    {
        "text": "Response Delivery"
    },
    {
        "text": "Error Handling"
    },
    {
        "text": "Implement"
    },
    {
        "text": "Testing"
    },
    {
        "text": "Optimization"
    },
    {
        "text": "Test"
    },
    {
        "text": "Continuously"
    },
    {
        "text": "Remember"
    },
    {
        "text": "Integration"
    },
    {
        "text": "In"
    },
    {
        "text": "P G"
    },
    {
        "text": "The A"
    },
    {
        "text": "Finally"
    },
    {
        "text": "Additionally"
    },
    {
        "text": "You"
    },
    {
        "text": "Choose"
    },
    {
        "text": "Sign"
    },
    {
        "text": "Make"
    },
    {
        "text": "Visualization"
    },
    {
        "text": "With Sly"
    },
    {
        "text": "Workflow Visualization"
    },
    {
        "text": "Use A"
    },
    {
        "text": "Identify"
    },
    {
        "text": "Component Visualization"
    },
    {
        "text": "Arrange"
    },
    {
        "text": "L Template Integration"
    },
    {
        "text": "Convert"
    },
    {
        "text": "Use H"
    },
    {
        "text": "Embed"
    },
    {
        "text": "Web Map Service"
    },
    {
        "text": "The H"
    },
    {
        "text": "The Java"
    },
    {
        "text": "Learn"
    },
    {
        "text": "Ready Player Me"
    },
    {
        "text": "Virtual A"
    },
    {
        "text": "I Being Creation Platform Mind"
    },
    {
        "text": "S Just Launched"
    },
    {
        "text": "Global Closed Beta"
    },
    {
        "text": "Morningstar"
    },
    {
        "text": "Global"
    },
    {
        "text": "Universal Windows Platform"
    },
    {
        "text": "Wikipedia"
    },
    {
        "text": "Universal"
    },
    {
        "text": "Windows"
    },
    {
        "text": "Platform"
    },
    {
        "text": "I Agent Creator Platform Mind"
    },
    {
        "text": "S Launches Open Beta"
    },
    {
        "text": "Tech"
    },
    {
        "text": "Asia"
    },
    {
        "text": "Mindverse A"
    },
    {
        "text": "Metadata"
    },
    {
        "text": "Information"
    },
    {
        "text": "S Security Assertion Markup Language"
    },
    {
        "text": "V"
    },
    {
        "text": "Serverless"
    },
    {
        "text": "Tful"
    },
    {
        "text": "Async"
    },
    {
        "text": "Graph"
    },
    {
        "text": "Q"
    },
    {
        "text": "Data"
    },
    {
        "text": "State"
    },
    {
        "text": "Function"
    },
    {
        "text": "Transition"
    },
    {
        "text": "Constant"
    },
    {
        "text": "Secrets"
    },
    {
        "text": "Context"
    },
    {
        "text": "Workflow Build Process"
    },
    {
        "text": "Anexus Documentation"
    },
    {
        "text": "Anexus"
    },
    {
        "text": "Git"
    },
    {
        "text": "Hub"
    },
    {
        "text": "Workflow Builder"
    },
    {
        "text": "Microsoft Intune"
    },
    {
        "text": "Recognizing"
    },
    {
        "text": "Geniuss"
    },
    {
        "text": "Important"
    },
    {
        "text": "Computer Vision"
    },
    {
        "text": "Computer"
    },
    {
        "text": "Useful"
    },
    {
        "text": "Parse J"
    },
    {
        "text": "Manage"
    },
    {
        "text": "Google Calendar A"
    },
    {
        "text": "Temporary"
    },
    {
        "text": "User"
    },
    {
        "text": "Current"
    },
    {
        "text": "Recent"
    },
    {
        "text": "Past"
    },
    {
        "text": "Interactions"
    },
    {
        "text": "What"
    },
    {
        "text": "How"
    },
    {
        "text": "Machine"
    },
    {
        "text": "Diagrams"
    },
    {
        "text": "Natural Language Processing"
    },
    {
        "text": "Useful C"
    },
    {
        "text": "Call Open"
    },
    {
        "text": "Map A"
    },
    {
        "text": "Google Calendar"
    },
    {
        "text": "Use Google Calendar A"
    },
    {
        "text": "Auth"
    },
    {
        "text": "Long"
    },
    {
        "text": "Combining"
    },
    {
        "text": "Supervised"
    },
    {
        "text": "Neural"
    },
    {
        "text": "Key N"
    },
    {
        "text": "Common"
    },
    {
        "text": "Integrate Open"
    },
    {
        "text": "Process J"
    },
    {
        "text": "Add"
    },
    {
        "text": "Implement O"
    },
    {
        "text": "Store"
    },
    {
        "text": "Follow"
    },
    {
        "text": "Combine"
    },
    {
        "text": "Build"
    },
    {
        "text": "Try Rasa"
    },
    {
        "text": "Dialogflow"
    },
    {
        "text": "For"
    },
    {
        "text": "Facebook Messenger"
    },
    {
        "text": "Slack"
    },
    {
        "text": "Host"
    },
    {
        "text": "Goal"
    },
    {
        "text": "Key"
    },
    {
        "text": "Tasks"
    },
    {
        "text": "Detected"
    },
    {
        "text": "Interaction"
    },
    {
        "text": "Web"
    },
    {
        "text": "Mobile"
    },
    {
        "text": "Hello"
    },
    {
        "text": "Seattle"
    },
    {
        "text": "According"
    },
    {
        "text": "Weather Channel A"
    },
    {
        "text": "Can"
    },
    {
        "text": "Paris"
    },
    {
        "text": "Friday"
    },
    {
        "text": "Absolutely"
    },
    {
        "text": "Based"
    },
    {
        "text": "Trip"
    },
    {
        "text": "Advisor"
    },
    {
        "text": "Google Maps"
    },
    {
        "text": "Le Meurice Alain Ducasse"
    },
    {
        "text": "They"
    },
    {
        "text": "Avant Comptoir"
    },
    {
        "text": "Mer"
    },
    {
        "text": "Charming"
    },
    {
        "text": "Saint"
    },
    {
        "text": "Germain"
    },
    {
        "text": "Pr"
    },
    {
        "text": "Le Caf"
    },
    {
        "text": "Homme"
    },
    {
        "text": "Elegant"
    },
    {
        "text": "Mus"
    },
    {
        "text": "Natural"
    },
    {
        "text": "Some"
    },
    {
        "text": "Enable"
    },
    {
        "text": "Connect"
    },
    {
        "text": "Algorithms"
    },
    {
        "text": "Conversational A"
    },
    {
        "text": "This"
    },
    {
        "text": "Intent"
    },
    {
        "text": "Utterances"
    },
    {
        "text": "My Genius"
    },
    {
        "text": "Entities"
    },
    {
        "text": "Thank"
    },
    {
        "text": "S Geniuss"
    },
    {
        "text": "Initialize"
    },
    {
        "text": "Fine"
    },
    {
        "text": "Iteratively"
    },
    {
        "text": "Evaluate"
    },
    {
        "text": "Retrain"
    },
    {
        "text": "Messenger"
    },
    {
        "text": "Publish"
    },
    {
        "text": "Monitor"
    },
    {
        "text": "Analyze"
    },
    {
        "text": "Collect"
    },
    {
        "text": "Update"
    },
    {
        "text": "Main"
    },
    {
        "text": "Italian"
    },
    {
        "text": "Los Angeles"
    },
    {
        "text": "Pasta Sisters"
    },
    {
        "text": "Osteria Mozza"
    },
    {
        "text": "Felix Trattoria"
    },
    {
        "text": "Schedule"
    },
    {
        "text": "Move"
    },
    {
        "text": "Cancel"
    },
    {
        "text": "Bot"
    },
    {
        "text": "Hi"
    },
    {
        "text": "John Doe"
    },
    {
        "text": "Likes"
    },
    {
        "text": "Website"
    },
    {
        "text": "Android"
    },
    {
        "text": "Amazon Alexa"
    },
    {
        "text": "Google Assistant"
    },
    {
        "text": "Number"
    },
    {
        "text": "Conversation"
    },
    {
        "text": "Entity"
    },
    {
        "text": "Chatbase"
    },
    {
        "text": "Dashbot"
    },
    {
        "text": "Bespoken Analytics"
    },
    {
        "text": "Chatlytics"
    },
    {
        "text": "Review"
    },
    {
        "text": "Retrain N"
    },
    {
        "text": "Active"
    },
    {
        "text": "Reinforcement"
    },
    {
        "text": "Transfer"
    },
    {
        "text": "Serverless Workflow"
    },
    {
        "text": "States"
    },
    {
        "text": "Functions"
    },
    {
        "text": "S Lambda"
    },
    {
        "text": "Events"
    },
    {
        "text": "Error"
    },
    {
        "text": "Compensation"
    },
    {
        "text": "Table"
    },
    {
        "text": "Contents"
    },
    {
        "text": "Why"
    },
    {
        "text": "Focus"
    },
    {
        "text": "Workflow"
    },
    {
        "text": "Using"
    },
    {
        "text": "Using Functions"
    },
    {
        "text": "Tful Service Invocations"
    },
    {
        "text": "Async A"
    },
    {
        "text": "I Service Invocations"
    },
    {
        "text": "C Service Invocations"
    },
    {
        "text": "L Service Invocations"
    },
    {
        "text": "Invoking"
    },
    {
        "text": "L Query"
    },
    {
        "text": "L Mutation"
    },
    {
        "text": "Data Service Invocations"
    },
    {
        "text": "Creating"
    },
    {
        "text": "Data Function Definition"
    },
    {
        "text": "Expression Evaluation"
    },
    {
        "text": "Defining"
    },
    {
        "text": "Each State"
    },
    {
        "text": "Properties Definition"
    },
    {
        "text": "On"
    },
    {
        "text": "Events Definition"
    },
    {
        "text": "Ref Definition"
    },
    {
        "text": "Sub"
    },
    {
        "text": "Produced"
    },
    {
        "text": "Retry"
    },
    {
        "text": "Automatic"
    },
    {
        "text": "Exec"
    },
    {
        "text": "Timeout Definition"
    },
    {
        "text": "Active States"
    },
    {
        "text": "Unrecoverable"
    },
    {
        "text": "Continuing"
    },
    {
        "text": "Execution"
    },
    {
        "text": "Continue"
    },
    {
        "text": "As"
    },
    {
        "text": "Comparison"
    },
    {
        "text": "The Serverless Workflow"
    },
    {
        "text": "Workflows"
    },
    {
        "text": "Selecting"
    },
    {
        "text": "Portability"
    },
    {
        "text": "Having"
    },
    {
        "text": "Serverless Workflow Wiki"
    },
    {
        "text": "Cloud"
    },
    {
        "text": "Open"
    },
    {
        "text": "Definitions"
    },
    {
        "text": "Workflow J"
    },
    {
        "text": "N Schema"
    },
    {
        "text": "Software Development Kits"
    },
    {
        "text": "Ks"
    },
    {
        "text": "Go"
    },
    {
        "text": "Typescript"
    },
    {
        "text": "Set"
    },
    {
        "text": "Workflow Extensions"
    },
    {
        "text": "Key Performance Indicators"
    },
    {
        "text": "Rate Limiting"
    },
    {
        "text": "Simulation"
    },
    {
        "text": "Tracing"
    },
    {
        "text": "Technology Compatibility Kit"
    },
    {
        "text": "Following"
    },
    {
        "text": "Workflow Definition Structureand"
    },
    {
        "text": "Workflow Model It"
    },
    {
        "text": "Their"
    },
    {
        "text": "Runtimes"
    },
    {
        "text": "Depending"
    },
    {
        "text": "Each"
    },
    {
        "text": "Timeout"
    },
    {
        "text": "Other"
    },
    {
        "text": "Reusable"
    },
    {
        "text": "Errors"
    },
    {
        "text": "Definition"
    },
    {
        "text": "When"
    },
    {
        "text": "State Data"
    },
    {
        "text": "These"
    },
    {
        "text": "Multiple"
    },
    {
        "text": "Reference"
    },
    {
        "text": "Must"
    },
    {
        "text": "If"
    },
    {
        "text": "There"
    },
    {
        "text": "Click"
    },
    {
        "text": "N\tY"
    },
    {
        "text": "Filter"
    },
    {
        "text": "Orders"
    },
    {
        "text": "Results"
    },
    {
        "text": "Like"
    },
    {
        "text": "Once"
    },
    {
        "text": "Data\tWorkflow"
    },
    {
        "text": "Results\tIf"
    },
    {
        "text": "Default"
    },
    {
        "text": "Select"
    },
    {
        "text": "We"
    },
    {
        "text": "Ref"
    },
    {
        "text": "And"
    },
    {
        "text": "Pasta"
    },
    {
        "text": "Types"
    },
    {
        "text": "Now"
    },
    {
        "text": "Buy"
    },
    {
        "text": "At"
    },
    {
        "text": "With"
    },
    {
        "text": "Data\tIf"
    },
    {
        "text": "Allows"
    },
    {
        "text": "All"
    },
    {
        "text": "Note"
    },
    {
        "text": "Only"
    },
    {
        "text": "As Event"
    },
    {
        "text": "Greet"
    },
    {
        "text": "Customers"
    },
    {
        "text": "Greet Customers"
    },
    {
        "text": "Version"
    },
    {
        "text": "Wait"
    },
    {
        "text": "Customer"
    },
    {
        "text": "Arrive"
    },
    {
        "text": "Refs"
    },
    {
        "text": "Arrives"
    },
    {
        "text": "Info"
    },
    {
        "text": "Message"
    },
    {
        "text": "Result"
    },
    {
        "text": "Greeting"
    },
    {
        "text": "Hola"
    },
    {
        "text": "Hallo"
    },
    {
        "text": "Goodbye"
    },
    {
        "text": "Adi"
    },
    {
        "text": "Auf Wiedersehen"
    },
    {
        "text": "John Michaels"
    },
    {
        "text": "Some Street"
    },
    {
        "text": "City"
    },
    {
        "text": "Country"
    },
    {
        "text": "Its"
    },
    {
        "text": "Before"
    },
    {
        "text": "Time"
    },
    {
        "text": "Hola John Michaels"
    },
    {
        "text": "After"
    },
    {
        "text": "Event State Completes Execution"
    },
    {
        "text": "Because"
    },
    {
        "text": "Namely"
    },
    {
        "text": "Consumed"
    },
    {
        "text": "Merging"
    },
    {
        "text": "John"
    },
    {
        "text": "Jane"
    },
    {
        "text": "Michael"
    },
    {
        "text": "Referencethe"
    },
    {
        "text": "I Specification"
    },
    {
        "text": "Order"
    },
    {
        "text": "Confirmation"
    },
    {
        "text": "Send"
    },
    {
        "text": "Confirm"
    },
    {
        "text": "Streetlights A"
    },
    {
        "text": "The Smartylighting Streetlights A"
    },
    {
        "text": "Apache"
    },
    {
        "text": "Inform"
    },
    {
        "text": "Id"
    },
    {
        "text": "Light"
    },
    {
        "text": "Measured"
    },
    {
        "text": "Date"
    },
    {
        "text": "Measurements"
    },
    {
        "text": "Operation"
    },
    {
        "text": "Also"
    },
    {
        "text": "Our"
    },
    {
        "text": "Publish Measurements"
    },
    {
        "text": "Publish Light Measurements"
    },
    {
        "text": "Similar"
    },
    {
        "text": "For R"
    },
    {
        "text": "Protocol Buffers"
    },
    {
        "text": "Service"
    },
    {
        "text": "Empty"
    },
    {
        "text": "Users"
    },
    {
        "text": "Request"
    },
    {
        "text": "Role"
    },
    {
        "text": "Method"
    },
    {
        "text": "Query"
    },
    {
        "text": "Pet"
    },
    {
        "text": "Int"
    },
    {
        "text": "Mutation"
    },
    {
        "text": "Treat"
    },
    {
        "text": "String"
    },
    {
        "text": "G A G"
    },
    {
        "text": "L Q"
    },
    {
        "text": "One"
    },
    {
        "text": "Which"
    },
    {
        "text": "Snuffles"
    },
    {
        "text": "L M"
    },
    {
        "text": "Likewise"
    },
    {
        "text": "Sadaharu"
    },
    {
        "text": "Dog"
    },
    {
        "text": "Years"
    },
    {
        "text": "Of"
    },
    {
        "text": "Birth"
    },
    {
        "text": "Expressions"
    },
    {
        "text": "L Subscriptions"
    },
    {
        "text": "Functions Definitions"
    },
    {
        "text": "G A"
    },
    {
        "text": "N O"
    },
    {
        "text": "A F"
    },
    {
        "text": "N D"
    },
    {
        "text": "Persons"
    },
    {
        "text": "Person"
    },
    {
        "text": "Detail"
    },
    {
        "text": "Serverless Workflow O"
    },
    {
        "text": "Data Json"
    },
    {
        "text": "Expression"
    },
    {
        "text": "Adult"
    },
    {
        "text": "Minor"
    },
    {
        "text": "Serverless Workflowcan"
    },
    {
        "text": "State Data Filters"
    },
    {
        "text": "Check"
    },
    {
        "text": "Applicant"
    },
    {
        "text": "Conditions"
    },
    {
        "text": "Approve"
    },
    {
        "text": "Application"
    },
    {
        "text": "Reject"
    },
    {
        "text": "Condition"
    },
    {
        "text": "Increment Count Function"
    },
    {
        "text": "Initialize Count"
    },
    {
        "text": "Increment Count"
    },
    {
        "text": "Just"
    },
    {
        "text": "Later"
    },
    {
        "text": "State Data Filtering"
    },
    {
        "text": "Lang"
    },
    {
        "text": "Where"
    },
    {
        "text": "Expr"
    },
    {
        "text": "Func"
    },
    {
        "text": "Address"
    },
    {
        "text": "Naist"
    },
    {
        "text": "Nara"
    },
    {
        "text": "Code"
    },
    {
        "text": "Numbers"
    },
    {
        "text": "Phone"
    },
    {
        "text": "Switch"
    },
    {
        "text": "My"
    },
    {
        "text": "Sample"
    },
    {
        "text": "Sample Workflow"
    },
    {
        "text": "Domain"
    },
    {
        "text": "Schema\tUsed"
    },
    {
        "text": "Output"
    },
    {
        "text": "Version\tServerless Workflow"
    },
    {
        "text": "Lang\tIdentifies"
    },
    {
        "text": "Defines"
    },
    {
        "text": "Active\tIf"
    },
    {
        "text": "Instance"
    },
    {
        "text": "Retries\tIf"
    },
    {
        "text": "Starting"
    },
    {
        "text": "Schema"
    },
    {
        "text": "Validation"
    },
    {
        "text": "Both"
    },
    {
        "text": "Example"
    },
    {
        "text": "Json"
    },
    {
        "text": "Yaml"
    },
    {
        "text": "World"
    },
    {
        "text": "My Basic Auth"
    },
    {
        "text": "An Auth"
    },
    {
        "text": "Referenced"
    },
    {
        "text": "Workflow Functions J"
    },
    {
        "text": "Attribute"
    },
    {
        "text": "Workflow Events J"
    },
    {
        "text": "Setting"
    },
    {
        "text": "Name\tDescription\tConsumes"
    },
    {
        "text": "Produces"
    },
    {
        "text": "Executes"
    },
    {
        "text": "Handles"
    },
    {
        "text": "Makes"
    },
    {
        "text": "Event\tDefine"
    },
    {
        "text": "Operation\tExecute"
    },
    {
        "text": "Switch\tDefine"
    },
    {
        "text": "Sleep\tSleep"
    },
    {
        "text": "Parallel\tCauses"
    },
    {
        "text": "Inject\tInject"
    },
    {
        "text": "Each\tParallel"
    },
    {
        "text": "Callback\tManual"
    },
    {
        "text": "T S"
    },
    {
        "text": "Unique State"
    },
    {
        "text": "Events\tDefine"
    },
    {
        "text": "Filter\tState"
    },
    {
        "text": "Next"
    },
    {
        "text": "Errors\tStates"
    },
    {
        "text": "By\tUnique"
    },
    {
        "text": "Vitals"
    },
    {
        "text": "High"
    },
    {
        "text": "Body"
    },
    {
        "text": "Temperature"
    },
    {
        "text": "Tylenol"
    },
    {
        "text": "Blood"
    },
    {
        "text": "Pressure"
    },
    {
        "text": "Nurse"
    },
    {
        "text": "Respiration"
    },
    {
        "text": "Rate"
    },
    {
        "text": "Pulmonologist"
    },
    {
        "text": "N S"
    },
    {
        "text": "Mode\tShould"
    },
    {
        "text": "Actions"
    },
    {
        "text": "Compensation\tIf"
    },
    {
        "text": "Mode"
    },
    {
        "text": "Rejection"
    },
    {
        "text": "Email"
    },
    {
        "text": "H S"
    },
    {
        "text": "Conditions\tDefined"
    },
    {
        "text": "Condition\tDefault"
    },
    {
        "text": "Visa"
    },
    {
        "text": "Approved"
    },
    {
        "text": "Rejected"
    },
    {
        "text": "Decision"
    },
    {
        "text": "Because A"
    },
    {
        "text": "P S"
    },
    {
        "text": "Duration"
    },
    {
        "text": "Sleep"
    },
    {
        "text": "Five"
    },
    {
        "text": "Seconds"
    },
    {
        "text": "Get"
    },
    {
        "text": "Job"
    },
    {
        "text": "L S"
    },
    {
        "text": "Type\tOption"
    },
    {
        "text": "Completed\tUsed"
    },
    {
        "text": "Completion"
    },
    {
        "text": "Least"
    },
    {
        "text": "Parallel"
    },
    {
        "text": "Branch"
    },
    {
        "text": "Param"
    },
    {
        "text": "Two"
    },
    {
        "text": "Completed"
    },
    {
        "text": "Exceptions"
    },
    {
        "text": "Inject"
    },
    {
        "text": "Simple"
    },
    {
        "text": "Doe"
    },
    {
        "text": "Street"
    },
    {
        "text": "Marry"
    },
    {
        "text": "Allice"
    },
    {
        "text": "Kelly"
    },
    {
        "text": "Mill"
    },
    {
        "text": "Collection\tWorkflow"
    },
    {
        "text": "Param\tName"
    },
    {
        "text": "Collection"
    },
    {
        "text": "Size\tSpecifies"
    },
    {
        "text": "Used"
    },
    {
        "text": "Specifies"
    },
    {
        "text": "Provision"
    },
    {
        "text": "However"
    },
    {
        "text": "Size"
    },
    {
        "text": "Sizeis"
    },
    {
        "text": "In J"
    },
    {
        "text": "Buyer"
    },
    {
        "text": "State For"
    },
    {
        "text": "The For"
    },
    {
        "text": "So"
    },
    {
        "text": "Workflow Timeoutssection"
    },
    {
        "text": "K S"
    },
    {
        "text": "Ref\tReferences"
    },
    {
        "text": "Filter\tCallback"
    },
    {
        "text": "By\tUniaue"
    },
    {
        "text": "Credit"
    },
    {
        "text": "Microservice"
    },
    {
        "text": "While"
    },
    {
        "text": "The Callback"
    },
    {
        "text": "Callback"
    },
    {
        "text": "Unique"
    },
    {
        "text": "Api"
    },
    {
        "text": "Products"
    },
    {
        "text": "Take"
    },
    {
        "text": "Docker"
    },
    {
        "text": "Parameters"
    },
    {
        "text": "Secured"
    },
    {
        "text": "Invocation"
    },
    {
        "text": "My O"
    },
    {
        "text": "C Auth"
    },
    {
        "text": "My Api Key Auth"
    },
    {
        "text": "My Api"
    },
    {
        "text": "Key Auth"
    },
    {
        "text": "Mundo"
    },
    {
        "text": "T D"
    },
    {
        "text": "Define"
    },
    {
        "text": "Only\tIf"
    },
    {
        "text": "Otherwise"
    },
    {
        "text": "Correlating"
    },
    {
        "text": "The Cloud"
    },
    {
        "text": "Extension Context Attributesand"
    },
    {
        "text": "Extension"
    },
    {
        "text": "System"
    },
    {
        "text": "Heart"
    },
    {
        "text": "Reading"
    },
    {
        "text": "Z"
    },
    {
        "text": "Urgent"
    },
    {
        "text": "Care"
    },
    {
        "text": "H D"
    },
    {
        "text": "Basic"
    },
    {
        "text": "Bearer"
    },
    {
        "text": "See"
    },
    {
        "text": "Basic Authentication"
    },
    {
        "text": "The Basic"
    },
    {
        "text": "Contains"
    },
    {
        "text": "Bearer Authentication"
    },
    {
        "text": "Authentication"
    },
    {
        "text": "Type\tDefines"
    },
    {
        "text": "Credentials"
    },
    {
        "text": "Exchange"
    },
    {
        "text": "Id\tString"
    },
    {
        "text": "Secret\tWorkflow"
    },
    {
        "text": "Array"
    },
    {
        "text": "Owner"
    },
    {
        "text": "Token\tString"
    },
    {
        "text": "Subject\tString"
    },
    {
        "text": "Issuer\tString"
    },
    {
        "text": "Name\tCloud"
    },
    {
        "text": "Event Extension Context Attribute"
    },
    {
        "text": "Value\tCloud"
    },
    {
        "text": "S D"
    },
    {
        "text": "Refs\tReferences"
    },
    {
        "text": "Mode\tSpecifies"
    },
    {
        "text": "Filter\tEvent"
    },
    {
        "text": "Call"
    },
    {
        "text": "Unique Action"
    },
    {
        "text": "Retryable"
    },
    {
        "text": "Errors\tList"
    },
    {
        "text": "Retries"
    },
    {
        "text": "Filter\tAction"
    },
    {
        "text": "Finalize Application Action"
    },
    {
        "text": "W A"
    },
    {
        "text": "Often"
    },
    {
        "text": "F D"
    },
    {
        "text": "Name\tName"
    },
    {
        "text": "Arguments"
    },
    {
        "text": "Set\tUsed"
    },
    {
        "text": "Funds"
    },
    {
        "text": "Availabe"
    },
    {
        "text": "Amount"
    },
    {
        "text": "Ref\tReference"
    },
    {
        "text": "Timeout\tMaximum"
    },
    {
        "text": "Attributes\tAdd"
    },
    {
        "text": "Vet"
    },
    {
        "text": "Appointment"
    },
    {
        "text": "Attributes"
    },
    {
        "text": "Id\tSub"
    },
    {
        "text": "Parent"
    },
    {
        "text": "Complete\tIf"
    },
    {
        "text": "Usually"
    },
    {
        "text": "Subflows"
    },
    {
        "text": "Complete"
    },
    {
        "text": "R D"
    },
    {
        "text": "Refs\tReference"
    },
    {
        "text": "Item"
    },
    {
        "text": "Issue"
    },
    {
        "text": "Refund"
    },
    {
        "text": "Refsproperty"
    },
    {
        "text": "Usable"
    },
    {
        "text": "Y D"
    },
    {
        "text": "Attempts\tMaximum"
    },
    {
        "text": "Delay\tMaximum"
    },
    {
        "text": "Static"
    },
    {
        "text": "Float"
    },
    {
        "text": "Strat"
    },
    {
        "text": "Attempts"
    },
    {
        "text": "Timeout Errors Strategy"
    },
    {
        "text": "Adding"
    },
    {
        "text": "Alternatively"
    },
    {
        "text": "Delay"
    },
    {
        "text": "State\tName"
    },
    {
        "text": "Events\tArray"
    },
    {
        "text": "Eval"
    },
    {
        "text": "E D"
    },
    {
        "text": "A C"
    },
    {
        "text": "Eighteen"
    },
    {
        "text": "E E"
    },
    {
        "text": "T C"
    },
    {
        "text": "Upon"
    },
    {
        "text": "E B"
    },
    {
        "text": "E H"
    },
    {
        "text": "G E"
    },
    {
        "text": "Startingstate"
    },
    {
        "text": "Scheduled"
    },
    {
        "text": "Cron"
    },
    {
        "text": "Declares"
    },
    {
        "text": "Timezone"
    },
    {
        "text": "Unlike"
    },
    {
        "text": "March"
    },
    {
        "text": "May"
    },
    {
        "text": "O I"
    },
    {
        "text": "For I"
    },
    {
        "text": "Until"
    },
    {
        "text": "Eventdefining"
    },
    {
        "text": "Until\tSpecific"
    },
    {
        "text": "November"
    },
    {
        "text": "S Eastern Standard Timeas"
    },
    {
        "text": "D D"
    },
    {
        "text": "As\tDefines"
    },
    {
        "text": "Producing"
    },
    {
        "text": "Being"
    },
    {
        "text": "Implementers"
    },
    {
        "text": "Workflow Compensationsection"
    },
    {
        "text": "L P"
    },
    {
        "text": "Specifying"
    },
    {
        "text": "Additional"
    },
    {
        "text": "Implementations"
    },
    {
        "text": "My Test Workflow"
    },
    {
        "text": "My First State"
    },
    {
        "text": "Production"
    },
    {
        "text": "Sales"
    },
    {
        "text": "Py Test Workflow"
    },
    {
        "text": "Unknown"
    },
    {
        "text": "Within"
    },
    {
        "text": "Illegal"
    },
    {
        "text": "Runtime"
    },
    {
        "text": "Known"
    },
    {
        "text": "Referencing"
    },
    {
        "text": "Server"
    },
    {
        "text": "Retrying"
    },
    {
        "text": "Regardless"
    },
    {
        "text": "First"
    },
    {
        "text": "Strategy"
    },
    {
        "text": "Second"
    },
    {
        "text": "Three"
    },
    {
        "text": "Third"
    },
    {
        "text": "Do"
    },
    {
        "text": "Not"
    },
    {
        "text": "Fourth"
    },
    {
        "text": "Strategyretry"
    },
    {
        "text": "Since"
    },
    {
        "text": "Timeout\tWorkflow"
    },
    {
        "text": "Timeout\tActions"
    },
    {
        "text": "Timeout\tBranch"
    },
    {
        "text": "Timeout\tDefault"
    },
    {
        "text": "If Object"
    },
    {
        "text": "Before\tName"
    },
    {
        "text": "Inject States"
    },
    {
        "text": "The Event"
    },
    {
        "text": "Compensating"
    },
    {
        "text": "Instead"
    },
    {
        "text": "New"
    },
    {
        "text": "Purchase"
    },
    {
        "text": "Debit"
    },
    {
        "text": "Cancellation"
    },
    {
        "text": "State C"
    },
    {
        "text": "State A"
    },
    {
        "text": "Eachstates"
    },
    {
        "text": "Serverless Workflow D"
    },
    {
        "text": "Id\tUnique"
    },
    {
        "text": "Overwrites"
    },
    {
        "text": "In Serverless Workflow D"
    },
    {
        "text": "Ref Definitionin"
    },
    {
        "text": "Versioning"
    },
    {
        "text": "Versions"
    },
    {
        "text": "Top"
    },
    {
        "text": "Constants"
    },
    {
        "text": "Translations"
    },
    {
        "text": "Serbian"
    },
    {
        "text": "Spanish"
    },
    {
        "text": "French"
    },
    {
        "text": "Azure"
    },
    {
        "text": "Process Sales Orders"
    },
    {
        "text": "Author Name"
    },
    {
        "text": "Team Name"
    },
    {
        "text": "Logging"
    },
    {
        "text": "Labels"
    },
    {
        "text": "Model"
    },
    {
        "text": "Even"
    },
    {
        "text": "That"
    },
    {
        "text": "New Extension Request"
    },
    {
        "text": "Apache License"
    },
    {
        "text": "Passing"
    },
    {
        "text": "Filters"
    },
    {
        "text": "Custom"
    },
    {
        "text": "Related Definitions"
    },
    {
        "text": "Py"
    },
    {
        "text": "Torch"
    },
    {
        "text": "N Editor Online"
    },
    {
        "text": "Pandas Data"
    },
    {
        "text": "Frame"
    },
    {
        "text": "True"
    },
    {
        "text": "Faker"
    },
    {
        "text": "Tensor"
    },
    {
        "text": "Flow Dataset"
    },
    {
        "text": "Mary"
    },
    {
        "text": "Steven"
    },
    {
        "text": "David"
    },
    {
        "text": "Sophia"
    },
    {
        "text": "Alice"
    },
    {
        "text": "Lee"
    },
    {
        "text": "Smith"
    },
    {
        "text": "Richards"
    },
    {
        "text": "Willis"
    },
    {
        "text": "Brooks"
    },
    {
        "text": "Green"
    },
    {
        "text": "Best"
    },
    {
        "text": "Local"
    },
    {
        "text": "Sports"
    },
    {
        "text": "Summer"
    },
    {
        "text": "Latest"
    },
    {
        "text": "Donna Howard"
    },
    {
        "text": "Mike Scott"
    },
    {
        "text": "Lisa Brown"
    },
    {
        "text": "Tom Wilson"
    },
    {
        "text": "Julia Bell"
    },
    {
        "text": "Sam Williams"
    },
    {
        "text": "Chris Smith"
    },
    {
        "text": "Tomorrow"
    },
    {
        "text": "Mark"
    },
    {
        "text": "Linda"
    },
    {
        "text": "James"
    },
    {
        "text": "Brown"
    },
    {
        "text": "Davis"
    },
    {
        "text": "Wilson"
    },
    {
        "text": "Movie"
    },
    {
        "text": "Amanda Clark"
    },
    {
        "text": "David Lee"
    },
    {
        "text": "Ryan Bell"
    },
    {
        "text": "Pandas"
    },
    {
        "text": "Bob"
    },
    {
        "text": "Charlie"
    },
    {
        "text": "Football"
    },
    {
        "text": "Kate"
    },
    {
        "text": "Sam"
    },
    {
        "text": "Dave"
    },
    {
        "text": "Fashion"
    },
    {
        "text": "Peter"
    },
    {
        "text": "Chris"
    },
    {
        "text": "Emma"
    },
    {
        "text": "Alex"
    },
    {
        "text": "Mike"
    },
    {
        "text": "Dataset"
    },
    {
        "text": "Pickle"
    },
    {
        "text": "Word"
    },
    {
        "text": "Vec"
    },
    {
        "text": "Keras"
    },
    {
        "text": "Logistic"
    },
    {
        "text": "Regression"
    },
    {
        "text": "Read"
    },
    {
        "text": "Classifies"
    },
    {
        "text": "Recommends"
    },
    {
        "text": "Detects"
    },
    {
        "text": "Chatbot Genius"
    },
    {
        "text": "Clicked"
    },
    {
        "text": "Searched"
    },
    {
        "text": "Uploaded"
    },
    {
        "text": "Logged"
    },
    {
        "text": "Accessed"
    },
    {
        "text": "Downloaded"
    },
    {
        "text": "Supports"
    },
    {
        "text": "Anyone"
    },
    {
        "text": "Need"
    },
    {
        "text": "Microsoft"
    },
    {
        "text": "Visual Studio"
    },
    {
        "text": "Datasets"
    },
    {
        "text": "Right"
    },
    {
        "text": "Data Sources"
    },
    {
        "text": "Solution Explorer"
    },
    {
        "text": "Add New Data Source"
    },
    {
        "text": "Configure"
    },
    {
        "text": "The Dataset Designer"
    },
    {
        "text": "Drag"
    },
    {
        "text": "Preview"
    },
    {
        "text": "Typed Datasets"
    },
    {
        "text": "Typed Dataset"
    },
    {
        "text": "Adapters"
    },
    {
        "text": "Fill"
    },
    {
        "text": "Insert"
    },
    {
        "text": "Delete"
    },
    {
        "text": "Path"
    },
    {
        "text": "Found"
    },
    {
        "text": "Scanned"
    },
    {
        "text": "Lab"
    },
    {
        "text": "Graphviz"
    },
    {
        "text": "The Dockerfile"
    },
    {
        "text": "Dockerfile"
    },
    {
        "text": "Ubuntu"
    },
    {
        "text": "This Docker"
    },
    {
        "text": "Unfortunately I"
    },
    {
        "text": "Graphviz Docker"
    },
    {
        "text": "Specifically"
    },
    {
        "text": "Matplotlib"
    },
    {
        "text": "Scikit"
    },
    {
        "text": "Workflow Description Language"
    },
    {
        "text": "Dockstore"
    },
    {
        "text": "Bio"
    },
    {
        "text": "Cromwell"
    },
    {
        "text": "Mini"
    },
    {
        "text": "Inte"
    },
    {
        "text": "Ri"
    },
    {
        "text": "Sama"
    },
    {
        "text": "Blog"
    },
    {
        "text": "Memory"
    },
    {
        "text": "Catcher"
    },
    {
        "text": "Create New Genius"
    },
    {
        "text": "Subscription"
    },
    {
        "text": "Unlimited"
    },
    {
        "text": "Mo"
    },
    {
        "text": "Tus"
    },
    {
        "text": "Marketplace"
    },
    {
        "text": "Search"
    },
    {
        "text": "Lazarus"
    },
    {
        "text": "Trip Advisor"
    },
    {
        "text": "Stock Analyst"
    },
    {
        "text": "Genie"
    },
    {
        "text": "Product Hunter"
    },
    {
        "text": "Minda"
    },
    {
        "text": "Summa"
    },
    {
        "text": "Link"
    },
    {
        "text": "Youtube"
    },
    {
        "text": "Midjourney Helper"
    },
    {
        "text": "Midjourney"
    },
    {
        "text": "Kexin"
    },
    {
        "text": "Morty"
    },
    {
        "text": "Mindverse"
    },
    {
        "text": "Dream Interpreter"
    },
    {
        "text": "Rap God"
    },
    {
        "text": "Hub Trend Watcher"
    },
    {
        "text": "Wise"
    },
    {
        "text": "Buy Assistant"
    },
    {
        "text": "Amazon"
    },
    {
        "text": "Tutor"
    },
    {
        "text": "Movie Critique"
    },
    {
        "text": "Unnamed"
    },
    {
        "text": "Speak"
    },
    {
        "text": "Buddhism"
    },
    {
        "text": "Genious"
    },
    {
        "text": "Ask"
    },
    {
        "text": "Candy"
    },
    {
        "text": "Babe"
    },
    {
        "text": "Eulaw"
    },
    {
        "text": "Awwsum"
    },
    {
        "text": "Naval"
    },
    {
        "text": "Autism Aware"
    },
    {
        "text": "Thought"
    },
    {
        "text": "Zn"
    },
    {
        "text": "Bell"
    },
    {
        "text": "Crypto"
    },
    {
        "text": "I Genius"
    },
    {
        "text": "Knows U"
    },
    {
        "text": "I Design"
    },
    {
        "text": "P Support"
    },
    {
        "text": "Beer Awards"
    },
    {
        "text": "Genshin"
    },
    {
        "text": "Fan"
    },
    {
        "text": "C Legal Help"
    },
    {
        "text": "Allow Law Genuis"
    },
    {
        "text": "He"
    },
    {
        "text": "Lluvia"
    },
    {
        "text": "Sparrow"
    },
    {
        "text": "Professor"
    },
    {
        "text": "Ele"
    },
    {
        "text": "Guy"
    },
    {
        "text": "Knowall"
    },
    {
        "text": "Idan"
    },
    {
        "text": "Michaelim"
    },
    {
        "text": "The Defect Doctor"
    },
    {
        "text": "K Prints"
    },
    {
        "text": "K Prints Assitant"
    },
    {
        "text": "Congming Da"
    },
    {
        "text": "Game"
    },
    {
        "text": "Master"
    },
    {
        "text": "Dark Souls"
    },
    {
        "text": "Gs"
    },
    {
        "text": "Dr"
    },
    {
        "text": "Adeli"
    },
    {
        "text": "I Geniuses"
    },
    {
        "text": "Geniuses"
    },
    {
        "text": "Featured"
    },
    {
        "text": "Trending"
    },
    {
        "text": "Newest"
    },
    {
        "text": "My Geniuses"
    },
    {
        "text": "Industry Analyst"
    },
    {
        "text": "S Stock Analyst"
    },
    {
        "text": "Template"
    },
    {
        "text": "Persona"
    },
    {
        "text": "Knowledge"
    },
    {
        "text": "Skills"
    },
    {
        "text": "Autonomy"
    },
    {
        "text": "Wisebuy Assistant"
    },
    {
        "text": "I Copilots"
    },
    {
        "text": "Book"
    },
    {
        "text": "Jira"
    },
    {
        "text": "Book A"
    },
    {
        "text": "I Lens"
    },
    {
        "text": "Aktxn"
    },
    {
        "text": "Oh"
    },
    {
        "text": "Vt"
    },
    {
        "text": "S A"
    },
    {
        "text": "I Agent Engine"
    },
    {
        "text": "Enterprise"
    },
    {
        "text": "Pro"
    },
    {
        "text": "I Open"
    },
    {
        "text": "Socket"
    },
    {
        "text": "S Marketplace"
    },
    {
        "text": "I Copilot"
    },
    {
        "text": "Learned"
    },
    {
        "text": "Chat"
    },
    {
        "text": "Chatbot"
    },
    {
        "text": "Avatar"
    },
    {
        "text": "Ready"
    },
    {
        "text": "Player"
    },
    {
        "text": "Me"
    },
    {
        "text": "Picture"
    },
    {
        "text": "Learning Knowledge"
    },
    {
        "text": "Genius Updated"
    },
    {
        "text": "Learning A"
    },
    {
        "text": "Library"
    },
    {
        "text": "Validated"
    },
    {
        "text": "Google"
    },
    {
        "text": "Serper"
    },
    {
        "text": "From Library"
    },
    {
        "text": "Skill"
    },
    {
        "text": "Assistant"
    },
    {
        "text": "Tube"
    },
    {
        "text": "Get Started"
    },
    {
        "text": "Voice"
    },
    {
        "text": "Biography"
    },
    {
        "text": "Add Knowledge"
    },
    {
        "text": "View Knowledge"
    },
    {
        "text": "Edit"
    },
    {
        "text": "Books"
    },
    {
        "text": "Add Skills"
    },
    {
        "text": "View Skills"
    },
    {
        "text": "Google Books A"
    },
    {
        "text": "Content"
    },
    {
        "text": "Accept"
    },
    {
        "text": "Book Search"
    },
    {
        "text": "Authorization"
    },
    {
        "text": "Weather Search"
    },
    {
        "text": "Map"
    },
    {
        "text": "Workflow Book Search"
    },
    {
        "text": "Call A"
    },
    {
        "text": "I Book Search"
    },
    {
        "text": "Book Search Workflow"
    },
    {
        "text": "Else"
    },
    {
        "text": "Add Memory"
    },
    {
        "text": "View Memory"
    },
    {
        "text": "Harry Potter"
    },
    {
        "text": "Philosopher"
    },
    {
        "text": "Stone"
    },
    {
        "text": "The Lord"
    },
    {
        "text": "Rings"
    },
    {
        "text": "Benzinga"
    },
    {
        "text": "Virtual"
    },
    {
        "text": "Creation"
    },
    {
        "text": "Launch"
    },
    {
        "text": "Closed"
    },
    {
        "text": "Beta"
    },
    {
        "text": "D H"
    },
    {
        "text": "Load Data"
    },
    {
        "text": "Find Result"
    },
    {
        "text": "Marketpl"
    },
    {
        "text": "Mind A"
    },
    {
        "text": "Num"
    },
    {
        "text": "Spa"
    },
    {
        "text": "Cy"
    },
    {
        "text": "Twitter"
    },
    {
        "text": "Beautiful"
    },
    {
        "text": "Soup"
    },
    {
        "text": "Selenium"
    },
    {
        "text": "Telegram"
    },
    {
        "text": "Connecting Text"
    },
    {
        "text": "Images"
    },
    {
        "text": "Xiv"
    },
    {
        "text": "Contrastive Language"
    },
    {
        "text": "Image Pre"
    },
    {
        "text": "Image Pretraining"
    },
    {
        "text": "Image Encoder"
    },
    {
        "text": "Text Encoder"
    },
    {
        "text": "Res"
    },
    {
        "text": "Net"
    },
    {
        "text": "Guided Language"
    },
    {
        "text": "Image Diffusion"
    },
    {
        "text": "Generation"
    },
    {
        "text": "Editing"
    },
    {
        "text": "Diffusion"
    },
    {
        "text": "Score"
    },
    {
        "text": "Add Key"
    },
    {
        "text": "Input Keyscontent"
    },
    {
        "text": "Model Name"
    },
    {
        "text": "Turbo"
    },
    {
        "text": "Prompt Template"
    },
    {
        "text": "Iam"
    },
    {
        "text": "Then"
    },
    {
        "text": "Through Discord"
    },
    {
        "text": "Interact"
    },
    {
        "text": "Midjourney Bot"
    },
    {
        "text": "Discord"
    },
    {
        "text": "Command"
    },
    {
        "text": "Commands"
    },
    {
        "text": "The Midjourney Bot"
    },
    {
        "text": "Ratherthan"
    },
    {
        "text": "Show"
    },
    {
        "text": "California"
    },
    {
        "text": "Vibrant"
    },
    {
        "text": "Trial"
    },
    {
        "text": "Jobs"
    },
    {
        "text": "A Job"
    },
    {
        "text": "Fast Time Remaining"
    },
    {
        "text": "Prompt Length"
    },
    {
        "text": "Prompts"
    },
    {
        "text": "Single"
    },
    {
        "text": "Very"
    },
    {
        "text": "Concentrate"
    },
    {
        "text": "Grammar"
    },
    {
        "text": "More"
    },
    {
        "text": "Remove"
    },
    {
        "text": "Fewer"
    },
    {
        "text": "Usecommas"
    },
    {
        "text": "Midjourney Model Version"
    },
    {
        "text": "Want"
    },
    {
        "text": "Think About What Details Matter"
    },
    {
        "text": "Anything"
    },
    {
        "text": "Be"
    },
    {
        "text": "Try"
    },
    {
        "text": "Thinkabout"
    },
    {
        "text": "Subject"
    },
    {
        "text": "Medium"
    },
    {
        "text": "Environment"
    },
    {
        "text": "Narnia"
    },
    {
        "text": "Emerald"
    },
    {
        "text": "Lighting"
    },
    {
        "text": "Color"
    },
    {
        "text": "Mood"
    },
    {
        "text": "Sedate"
    },
    {
        "text": "Composition"
    },
    {
        "text": "Portrait"
    },
    {
        "text": "Use Collective Nouns"
    },
    {
        "text": "Plural"
    },
    {
        "text": "Collective"
    },
    {
        "text": "Parameters Available"
    },
    {
        "text": "Aspect Ratios"
    },
    {
        "text": "Change"
    },
    {
        "text": "Chaos"
    },
    {
        "text": "Higher"
    },
    {
        "text": "Negative"
    },
    {
        "text": "Quality"
    },
    {
        "text": "Repeat"
    },
    {
        "text": "Seed"
    },
    {
        "text": "The Midjourney"
    },
    {
        "text": "Stop"
    },
    {
        "text": "Stopping"
    },
    {
        "text": "Style"
    },
    {
        "text": "Niji Model Version"
    },
    {
        "text": "Stylize"
    },
    {
        "text": "Uplight"
    },
    {
        "text": "Upbeta"
    },
    {
        "text": "Different"
    },
    {
        "text": "Niji"
    },
    {
        "text": "An"
    },
    {
        "text": "Testp"
    },
    {
        "text": "Midjourneyalgorithm"
    },
    {
        "text": "Mid"
    },
    {
        "text": "Journey"
    },
    {
        "text": "Erlenmeyer Flask"
    },
    {
        "text": "Dreamy"
    },
    {
        "text": "Mamiya"
    },
    {
        "text": "Fujifilm Pro"
    },
    {
        "text": "Leica"
    },
    {
        "text": "Kodak"
    },
    {
        "text": "American"
    },
    {
        "text": "Mysteriousadventure"
    },
    {
        "text": "Plants"
    },
    {
        "text": "Fireflies"
    },
    {
        "text": "Pixar"
    },
    {
        "text": "Whatever I"
    },
    {
        "text": "Act"
    },
    {
        "text": "Another"
    },
    {
        "text": "Teenage"
    },
    {
        "text": "Tips"
    },
    {
        "text": "C Painting"
    },
    {
        "text": "Hide Display"
    },
    {
        "text": "Endpoint"
    },
    {
        "text": "Draw"
    },
    {
        "text": "Request Bodyprompt"
    },
    {
        "text": "Drawing"
    },
    {
        "text": "Dream Painting"
    },
    {
        "text": "Test Run"
    },
    {
        "text": "Exit"
    },
    {
        "text": "Io"
    },
    {
        "text": "Chamfer"
    },
    {
        "text": "Block"
    },
    {
        "text": "Blocknameparameterscontentfunctionsconnectconnections"
    },
    {
        "text": "Blockconnectconnections"
    },
    {
        "text": "8241"
    },
    {
        "text": "8252"
    },
    {
        "text": "8244"
    },
    {
        "text": "8245"
    },
    {
        "text": "8246"
    },
    {
        "text": "8250"
    },
    {
        "text": "8256"
    },
    {
        "text": "0"
    },
    {
        "text": "200"
    },
    {
        "text": "8249"
    },
    {
        "text": "8251"
    },
    {
        "text": "8253"
    },
    {
        "text": "8254"
    },
    {
        "text": "8255"
    },
    {
        "text": "8243"
    },
    {
        "text": "23"
    },
    {
        "text": "07"
    },
    {
        "text": "2023"
    },
    {
        "text": "80"
    },
    {
        "text": "82"
    },
    {
        "text": "85"
    },
    {
        "text": "8242"
    },
    {
        "text": "51"
    },
    {
        "text": "505"
    },
    {
        "text": "09"
    },
    {
        "text": "20230420005959"
    },
    {
        "text": "21"
    },
    {
        "text": "11179"
    },
    {
        "text": "2015"
    },
    {
        "text": "61932"
    },
    {
        "text": "20200821"
    },
    {
        "text": "00"
    },
    {
        "text": "104112"
    },
    {
        "text": "64"
    },
    {
        "text": "50"
    },
    {
        "text": "60"
    },
    {
        "text": "111"
    },
    {
        "text": "40"
    },
    {
        "text": "1234"
    },
    {
        "text": "12345"
    },
    {
        "text": "54321"
    },
    {
        "text": "4321"
    },
    {
        "text": "6789"
    },
    {
        "text": "30"
    },
    {
        "text": "20"
    },
    {
        "text": "42"
    },
    {
        "text": "9001"
    },
    {
        "text": "43"
    },
    {
        "text": "18"
    },
    {
        "text": "26"
    },
    {
        "text": "630"
    },
    {
        "text": "0192"
    },
    {
        "text": "0123"
    },
    {
        "text": "4567"
    },
    {
        "text": "8888"
    },
    {
        "text": "8910"
    },
    {
        "text": "8080"
    },
    {
        "text": "8601"
    },
    {
        "text": "15"
    },
    {
        "text": "25"
    },
    {
        "text": "55"
    },
    {
        "text": "5678"
    },
    {
        "text": "9910"
    },
    {
        "text": "2020"
    },
    {
        "text": "01"
    },
    {
        "text": "31"
    },
    {
        "text": "02"
    },
    {
        "text": "110"
    },
    {
        "text": "70"
    },
    {
        "text": "16"
    },
    {
        "text": "100"
    },
    {
        "text": "03"
    },
    {
        "text": "05"
    },
    {
        "text": "2019"
    },
    {
        "text": "45"
    },
    {
        "text": "2021"
    },
    {
        "text": "404"
    },
    {
        "text": "22"
    },
    {
        "text": "32"
    },
    {
        "text": "27"
    },
    {
        "text": "36"
    },
    {
        "text": "29"
    },
    {
        "text": "04"
    },
    {
        "text": "06"
    },
    {
        "text": "08"
    },
    {
        "text": "41"
    },
    {
        "text": "24"
    },
    {
        "text": "28"
    },
    {
        "text": "37"
    },
    {
        "text": "19"
    },
    {
        "text": "1000"
    },
    {
        "text": "8765"
    },
    {
        "text": "34"
    },
    {
        "text": "56"
    },
    {
        "text": "2022"
    },
    {
        "text": "1746675"
    },
    {
        "text": "8081"
    },
    {
        "text": "467431"
    },
    {
        "text": "216719"
    },
    {
        "text": "135215"
    },
    {
        "text": "11988"
    },
    {
        "text": "64712"
    },
    {
        "text": "7607"
    },
    {
        "text": "5398"
    },
    {
        "text": "40811"
    },
    {
        "text": "3088"
    },
    {
        "text": "2726"
    },
    {
        "text": "2784"
    },
    {
        "text": "1524"
    },
    {
        "text": "3482"
    },
    {
        "text": "2164"
    },
    {
        "text": "1693"
    },
    {
        "text": "663"
    },
    {
        "text": "1323"
    },
    {
        "text": "1103"
    },
    {
        "text": "672"
    },
    {
        "text": "912"
    },
    {
        "text": "1170"
    },
    {
        "text": "281"
    },
    {
        "text": "1099"
    },
    {
        "text": "1027549"
    },
    {
        "text": "99"
    },
    {
        "text": "49"
    },
    {
        "text": "1016053"
    },
    {
        "text": "8443"
    },
    {
        "text": "20230404005229"
    },
    {
        "text": "2201"
    },
    {
        "text": "11903"
    },
    {
        "text": "2302"
    },
    {
        "text": "08043"
    },
    {
        "text": "64903"
    },
    {
        "text": "64902"
    },
    {
        "text": "4294967295"
    },
    {
        "text": "911"
    },
    {
        "text": "800"
    },
    {
        "text": "900"
    },
    {
        "text": "64905"
    },
    {
        "text": "Cloud"
    },
    {
        "text": "Extracting response text from JSON"
    },
    {
        "text": "Checking the quality of the response"
    },
    {
        "text": "Caching of frequent queries"
    },
    {
        "text": "Scaling to multiple nodes"
    },
    {
        "text": "Performance monitoring"
    },
    {
        "text": "Copy"
    },
    {
        "text": "The block type is \"code\""
    },
    {
        "text": "Unique identifier"
    },
    {
        "text": "Input parameter with selection from a list"
    },
    {
        "text": "Python code block"
    },
    {
        "text": "Output data description"
    },
    {
        "text": "Usage hint"
    },
    {
        "text": "This JSON can be imported into the diagram editor to create a code block"
    },
    {
        "text": "Moneybox"
    },
    {
        "text": "//"
    },
    {
        "text": "configuration as in a regular LLM"
    },
    {
        "text": "These blocks can be used as a basis for demo workflows"
    },
    {
        "text": "Workflow Build Process - DNAnexus Documentation - documentation for building workflows on the DNAnexus platform, which uses the same JSON format as the MindOS platform"
    },
    {
        "text": "Serverless Workflow Specification - GitHub - The standard on which the MindOS platform metadata specification is based"
    },
    {
        "text": "Workflow Builder error messages in the server log file - IBM - documentation on debugging workflow builder errors on the IBM platform, which may also be useful for the MindOS platform"
    },
    {
        "text": "1"
    },
    {
        "text": "github"
    },
    {
        "text": "com"
    },
    {
        "text": "2"
    },
    {
        "text": "documentation"
    },
    {
        "text": "dnanexus"
    },
    {
        "text": "com"
    },
    {
        "text": "3"
    },
    {
        "text": "ibm"
    },
    {
        "text": "com"
    },
    {
        "text": "The Serverless Workflow project defines a vendor-neutral and declarative workflow language,"
    },
    {
        "text": "targeting the Serverless computing technology domain"
    },
    {
        "text": "This document represents the current state of the specification"
    },
    {
        "text": "It includes all features so far released"
    },
    {
        "text": "as well as all features planned to be added in the next release"
    },
    {
        "text": "Workflows allow us to capture and organize business requirements in a unified manner"
    },
    {
        "text": "They can bridge the gap between how we express and model business logic"
    },
    {
        "text": "business logic and solutions"
    },
    {
        "text": "Selecting the appropriate workflow language for our business and technology domains is"
    },
    {
        "text": "a very important decision to be considered"
    },
    {
        "text": "Serverless Workflow focuses on defining a **vendor-neutral**, **platform-independent**, and **declarative** workflow"
    },
    {
        "text": "language that targets the serverless computing technology domain"
    },
    {
        "text": "It can be used to significantly bridge the gap between your unique business domain and the target technology domain"
    },
    {
        "text": "The lack of a common way to define and model workflows means that we must constantly re-learn"
    },
    {
        "text": "how to write them"
    },
    {
        "text": "This also limits the potential for common libraries, tooling and"
    },
    {
        "text": "infrastructure to aid workflow modeling and execution across different platforms"
    },
    {
        "text": "Portability as well as productivity that can be achieved from workflow orchestration is hindered overall"
    },
    {
        "text": "Serverless Workflow addresses the need for a community-driven, vendor-neutral and a platform-independent"
    },
    {
        "text": "workflow language specification that targets the serverless computing technology domain"
    },
    {
        "text": "Having and using a specification-based workflow language allows us to model our workflows once and deploy them"
    },
    {
        "text": "onto many different container/cloud platforms, expecting the same execution results"
    },
    {
        "text": "</p>"
    },
    {
        "text": "allow users to define additional, non-execution-related workflow information"
    },
    {
        "text": "This information can be used to improve"
    },
    {
        "text": "workflow performance"
    },
    {
        "text": "A workflow definition is a JSON or YAML file that conforms to the Serverless Workflow specification DSL"
    },
    {
        "text": "A business solution can be composed of any number of related workflow definitions"
    },
    {
        "text": "A workflow instance represents a single Workflow Execution corresponding to the instructions provided by a"
    },
    {
        "text": "workflow definition"
    },
    {
        "text": "A workflow instance can be short or long-running"
    },
    {
        "text": "A single workflow instance"
    },
    {
        "text": "should be isolated, meaning it should not share state and data with other workflow instances"
    },
    {
        "text": "Workflow instances should be able to communicate with each other via events"
    },
    {
        "text": "Depending on their workflow definition, workflow instances can be short-lived or"
    },
    {
        "text": "can execute for days, weeks, or years"
    },
    {
        "text": "Each workflow instances should have its unique identifier, which should remain"
    },
    {
        "text": "unchanged throughout its execution"
    },
    {
        "text": "Workflow instances can be started providing some data input"
    },
    {
        "text": "This is described in detail in the"
    },
    {
        "text": "Workflow instances can also wait for examples to start their execution, which is the case"
    },
    {
        "text": "The workflow definition also explicitly defines when a workflow instance should be completed"
    },
    {
        "text": "For long-running workflow-executions, you can utilize the `keepActive` workflow property which"
    },
    {
        "text": "provides more control as to when exactly to terminate Workflow Execution"
    },
    {
        "text": "In cases where a"
    },
    {
        "text": "Workflow Execution should be continued as a new one, the DSL also provides the `continueAs` property which is described"
    },
    {
        "text": "Data flow and execution logic go hand in hand, meaning as Workflow Execution follows the workflow definition"
    },
    {
        "text": "States can also consume events as well as invoke services"
    },
    {
        "text": "These event payloads and service invocation results"
    },
    {
        "text": "input and output, action inputs and results, and event payloads"
    },
    {
        "text": "Multiple filters can be combined to gain high level of control of your workflow state data"
    },
    {
        "text": "You can find an example of that in"
    },
    {
        "text": "Data from consumed events,and action execution results are added/merged"
    },
    {
        "text": "```json"
    },
    {
        "text": "When a state completes its execution, its data output is passed to the state's data input it transitions to"
    },
    {
        "text": "Each Workflow Execution should produce a data output"
    },
    {
        "text": "The workflow data output is the data output of the last executed workflow state"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "The state data filters `input` property expression is applied when the workflow transitions to the current state and receives its data input"
    },
    {
        "text": "It can be used to select only data that is needed and disregard what is not needed"
    },
    {
        "text": "If `input` is not defined or does not select any parts of the state's data input, its data input is not filtered"
    },
    {
        "text": "The state data filter `output` property expression is applied right before the state transitions to the next state defined"
    },
    {
        "text": "It filters the state's data output to be passed as data input to the transitioning state"
    },
    {
        "text": "If the current state is the workflow end state, the filtered state's data output becomes the workflow data output"
    },
    {
        "text": "If `output` is not defined or does not select any parts of the state's data output, its data output is not filtered"
    },
    {
        "text": "Results of the `input` expression should become the state data input"
    },
    {
        "text": "Results of the `output` expression should become the state data output"
    },
    {
        "text": "For the first example, our state only cares about fruits data, and we want to disregard the vegetables"
    },
    {
        "text": "To do this"
    },
    {
        "text": "For our second example, let's say that we are interested in the only vegetable \"veggie-like\""
    },
    {
        "text": "Here we have two ways of filtering our data, depending on if actions within our state need access to all vegetables, or"
    },
    {
        "text": "only the ones that are \"veggie-like\""
    },
    {
        "text": "The states data input filter selects all the vegetables from the main data input"
    },
    {
        "text": "Once all actions have performed, before the state transition"
    },
    {
        "text": "* Filter the state data to select only the data that can be used within function definition arguments using its `fromStateData` property"
    },
    {
        "text": "* Filter the action results to select only the result data that should be added/merged back into the state data"
    },
    {
        "text": "using its `results` property"
    },
    {
        "text": "* Select the part of state data which the action data results should be added/merged to"
    },
    {
        "text": "using the `toStateData` property"
    },
    {
        "text": "To give an example, let's say we have an action which returns a list of breads and pasta types"
    },
    {
        "text": "For our workflow, we are only interested into breads and not the pasta"
    },
    {
        "text": "In this case, our `results` select the first bread and the second element of the pasta array"
    },
    {
        "text": "The `toStateData` expression then selects the `itemsToBuyAtStore` array of the state data to add/merge these results"
    },
    {
        "text": "In the case action results should not be added/merged to state data, we can set the `useResults` property to `false`"
    },
    {
        "text": "In this case, the `results` and `toStateData` properties should be ignored, and nothing is added/merged to state data"
    },
    {
        "text": "Event data filters can be used to filter consumed event payloads"
    },
    {
        "text": "* Filter the event payload to select only the data that should be added/merged into the state data"
    },
    {
        "text": "using its `data` property"
    },
    {
        "text": "* Select the part of state data into which the event payload should be added/merged into"
    },
    {
        "text": "Allows event data to be filtered and added to or merged with the state data"
    },
    {
        "text": "All events have to be in the CloudEvents format"
    },
    {
        "text": "In the case event data/payload should not be added/merged to state data, we can set the `useData` property to `false`"
    },
    {
        "text": "In this case, the `data` and `toStateData` properties should be ignored, and nothing is added/merged to state data"
    },
    {
        "text": "a workflow with a single event state and show how data filters can be combined"
    },
    {
        "text": "Here is a sample diagram showing our workflow, each numbered step on this diagram shows a certain defined point during"
    },
    {
        "text": "Workflow Execution at which data filters are invoked and correspond to the numbered items below"
    },
    {
        "text": "Workflow executes its starting state, namely the \"WaitForCustomerToArrive\" event state"
    },
    {
        "text": "The event state **stateDataFilter** is invoked to filter its data input"
    },
    {
        "text": "The filters \"input\" expression is evaluated and"
    },
    {
        "text": "selects only the \"greetings\" data"
    },
    {
        "text": "The rest of the state data input should be disregarded"
    },
    {
        "text": "Its \"data\" expression selects the \"customer\" object from the events data"
    },
    {
        "text": "The \"toStateData\" expression"
    },
    {
        "text": "says that we should add/merge this selected event data to the state data in its \"customerInfo\" property"
    },
    {
        "text": "If this property"
    },
    {
        "text": "exists it should be merged, if it does not exist, one should be created"
    },
    {
        "text": "Before the first action is executed, its actionDataFilter is invoked"
    },
    {
        "text": "Its \"fromStateData\" expression filters"
    },
    {
        "text": "the current state data to select from its data that should be available to action arguments"
    },
    {
        "text": "In this example"
    },
    {
        "text": "it selects the \"hello\" and \"customerInfo\" properties from the current state data"
    },
    {
        "text": "At this point the action is executed"
    },
    {
        "text": "The action filters \"toStateData\" expression then defines that we want to add/merge this action result to"
    },
    {
        "text": "state data under the \"finalCustomerGreeting\" element"
    },
    {
        "text": "When our event state finishes its execution, the states \"stateDataFilter\" \"output\" filter expression is executed"
    },
    {
        "text": "to filter the state data to create the final state data output"
    },
    {
        "text": "Event and action data filters can be used to give more details about this operation"
    },
    {
        "text": "to the state data"
    },
    {
        "text": "Merging should be applied to the entire state data JSON element"
    },
    {
        "text": "In case of event and action filters, their \"toStateData\" property can be defined to select a specific element"
    },
    {
        "text": "of the state data with which merging should be done against"
    },
    {
        "text": "If this element does not exist, a new one should"
    },
    {
        "text": "be created first"
    },
    {
        "text": "that you should not merge arrays with objects or objects with arrays etc"
    },
    {
        "text": "When merging elements of type object should be done by inserting all the key-value pairs from both objects into"
    },
    {
        "text": "a single combined object"
    },
    {
        "text": "If both objects contain a value for the same key, the object of the event data/action results"
    },
    {
        "text": "Merging array types should be done by concatenating them into a larger array including unique elements of both arrays"
    },
    {
        "text": "Merging number types should be done by overwriting the data from events data/action results into the merging element of the state data"
    },
    {
        "text": "We can define if functions are invoked sync or async"
    },
    {
        "text": "Reference"
    },
    {
        "text": "define when the service operations should be invoked during Workflow Execution, as well as the data parameters"
    },
    {
        "text": "passed to them if needed"
    },
    {
        "text": "Note that with Serverless Workflow, we can also define invocation of services which are triggered via an event"
    },
    {
        "text": "Because of an overall lack of a common way to describe different services and their operations,"
    },
    {
        "text": "many workflow languages typically chose to define custom function definitions"
    },
    {
        "text": "This approach, however, often runs into issues such as lack of portability, limited capabilities, as well as"
    },
    {
        "text": "forcing non-workflow-specific information, such as service authentication, to be added inside the workflow language"
    },
    {
        "text": "To avoid these issues, the Serverless Workflow specification mandates that details about"
    },
    {
        "text": "OpenAPI is a language-agnostic standard that describes discovery of RESTful services"
    },
    {
        "text": "This allows Serverless Workflow language to describe RESTful services in a portable"
    },
    {
        "text": "way, as well as workflow runtimes to utilize OpenAPI tooling and APIs to invoke service operations"
    },
    {
        "text": "It can, as previously mentioned be referenced during Workflow Execution when the invocation of this service is desired"
    },
    {
        "text": "```text"
    },
    {
        "text": "Also note that the referenced function definition type in this case must have the value `asyncapi`"
    },
    {
        "text": "Similar to defining invocations of operations on RESTful services, you can also use the workflow"
    },
    {
        "text": "a widely used RPC system"
    },
    {
        "text": "and the methods on those services that can be invoked"
    },
    {
        "text": "Let's look at an example of invoking a service method using RPC"
    },
    {
        "text": "For this example let's say we have the following"
    },
    {
        "text": "Note that the referenced function definition type in this case must be `rpc`"
    },
    {
        "text": "```graphql"
    },
    {
        "text": "Similar to defining invocations of operations on GraphQL services, you can also use workflow"
    },
    {
        "text": "In order to ensure compatibility of OData support across runtimes,"
    },
    {
        "text": "can also be used to define expressions that should be evaluated during Workflow Execution"
    },
    {
        "text": "Defining expressions as part of function definitions has the benefit of being able to reference"
    },
    {
        "text": "them by their logical name through workflow states where expression evaluation is required"
    },
    {
        "text": "Expression functions must declare their `type` parameter to be `expression`"
    },
    {
        "text": "Here we define two reusable expression functions"
    },
    {
        "text": "Expressions in Serverless Workflow"
    },
    {
        "text": "can be evaluated against the workflow, or workflow state data"
    },
    {
        "text": "Note that different data filters play a big role as to which parts of the"
    },
    {
        "text": "workflow data are being evaluated by the expressions"
    },
    {
        "text": "Reference the"
    },
    {
        "text": "This state defines an invocation of the \"Increment Count Function\" expression function defined in our workflow definition"
    },
    {
        "text": "This triggers the evaluation of the defined expression"
    },
    {
        "text": "The input of this expression is by default the current state data"
    },
    {
        "text": "Just like with \"rest\", and \"rpc\" type functions, expression functions also produce a result"
    },
    {
        "text": "In this case"
    },
    {
        "text": "the result of the expression is just the number 1"
    },
    {
        "text": "``` json"
    },
    {
        "text": "Note that the used function definition type in this case must be `expression`"
    },
    {
        "text": "the specification"
    },
    {
        "text": "Some runtime implementations might support additional function types that extend the ones"
    },
    {
        "text": "When a custom function type is specified, the operation property value has a **custom format**, meaning that"
    },
    {
        "text": "its format is controlled by the runtime which provides the custom function type"
    },
    {
        "text": "Note that different data filters play a big role as to which parts of the states data are to be used when the expression is"
    },
    {
        "text": "evaluated"
    },
    {
        "text": "Reference the"
    },
    {
        "text": "Serverless Workflow does not mandate the use of jq and it's possible to use an expression language"
    },
    {
        "text": "of your choice with the restriction that a single one must be used for all expressions"
    },
    {
        "text": "in a workflow definition"
    },
    {
        "text": "If a different expression language needs to be used, make sure to set the workflow"
    },
    {
        "text": "`expressionLang` property to identify it to runtime implementations"
    },
    {
        "text": "Note that using a non-default expression language could lower the portability of your workflow definitions"
    },
    {
        "text": "across multiple container/cloud platforms"
    },
    {
        "text": "are written using the default jq syntax"
    },
    {
        "text": "Where `expression` can be either an in-line expression, or a reference to a"
    },
    {
        "text": "Where `fn` is the namespace of the defined expression functions and"
    },
    {
        "text": "`myExprName` is the unique expression function name"
    },
    {
        "text": "We will get back to this function definition in just a bit, but now let's take a look at using"
    },
    {
        "text": "In this case our input parameter `applicantName` would be set to \"John Doe\""
    },
    {
        "text": "Expressions can also be used to select and manipulate state data, this is in particularly useful for"
    },
    {
        "text": "state data filters"
    },
    {
        "text": "As previously mentioned, expressions are evaluated against certain subsets of data"
    },
    {
        "text": "For example"
    },
    {
        "text": "which would set the workflow version to \"1"
    },
    {
        "text": "0"
    },
    {
        "text": "0\""
    },
    {
        "text": "Note that the workflow \"id\" property value is not allowed to use an expression"
    },
    {
        "text": "The workflow"
    },
    {
        "text": "definition \"id\" must be a constant value"
    },
    {
        "text": "Defines the top-level structure of a serverless workflow model"
    },
    {
        "text": "Following figure describes the main workflow definition blocks"
    },
    {
        "text": "The `id` property defines the unique, domain-specific workflow identifier, for example \"orders\", \"payment\", etc"
    },
    {
        "text": "The `key` property defines the unique, domain-specific workflow identifier"
    },
    {
        "text": "It can be used when the `id` property is auto-generated by a content-management system for example"
    },
    {
        "text": "In these cases, you can specify the `key` property to be the domain-specific identifier of the workflow definition"
    },
    {
        "text": "The `id` and `key` properties are mutually exclusive, meaning you cannot define both"
    },
    {
        "text": "The `name` property is the workflow logical name"
    },
    {
        "text": "The `description` property can be used to give further information about the workflow"
    },
    {
        "text": "The `annotations` property defines a list of helpful terms describing the workflows intended purpose, subject areas, or other important qualities,"
    },
    {
        "text": "The `dataInputSchema` and `dataOutputSchema` properties can be used to validate input and output data against a defined JSON Schema"
    },
    {
        "text": "The `failOnValidationErrors` property determines what should be done when the workflow output does not match the provided schema"
    },
    {
        "text": "If `failOnValidationErrors` is true, an error should be thrown"
    },
    {
        "text": "If executed within a subprocess, that error can be be handled by the parent workflow"
    },
    {
        "text": "If `failOnValidationErrors` is false, the error should not be propagated"
    },
    {
        "text": "It is up to the implementor to warn the user about that fact"
    },
    {
        "text": "For example, printing a log"
    },
    {
        "text": "Both properties can be expressed as object or string type"
    },
    {
        "text": "If using object type, their `schema` property might be an URI, which points to the JSON schema used to validate the workflow data input, or it might be the JSON schema object"
    },
    {
        "text": "`failOnValidationErrors` is optional, default value is `true`"
    },
    {
        "text": "If using string type, then the string value is the external schema URI and `failOnValidationErrors` default value of `true` is assumed"
    },
    {
        "text": "The `secrets` property allows you to use sensitive information such as passwords, OAuth tokens, ssh keys, etc"
    },
    {
        "text": "inside your"
    },
    {
        "text": "Workflow expressions"
    },
    {
        "text": "It has two possible types, `string` or `array`"
    },
    {
        "text": "If `string` type, it is an URI pointing to a JSON or YAML document"
    },
    {
        "text": "The `constants` property can be used to define Workflow constants values"
    },
    {
        "text": "It has two possible types, `string` or `object`"
    },
    {
        "text": "This property is not required"
    },
    {
        "text": "If not defined, the workflow starting state has to be"
    },
    {
        "text": "The `specVersion` property is used to set the Serverless Workflow specification release version"
    },
    {
        "text": "the workflow markup adheres to"
    },
    {
        "text": "its value should be set to `\"0"
    },
    {
        "text": "8\"`"
    },
    {
        "text": "The `expressionLang` property can be used to identify the expression language used for all expressions in"
    },
    {
        "text": "with an expression language / syntax other than the default"
    },
    {
        "text": "The `timeouts` property is used to define the default workflow timeouts for workflow, state, action, and branch"
    },
    {
        "text": "The `error` property is used to define checked errors that can be explicitly handled during Workflow Execution"
    },
    {
        "text": "Auth definitions can be used to define authentication that should be used to access"
    },
    {
        "text": "The `authRef` property is used to reference an authentication definition in"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "For more information about"
    },
    {
        "text": "The `keepActive` property allows you to change the default behavior of workflow instances"
    },
    {
        "text": "Setting the `keepActive` property to `true` allows you to change this default behavior in that a workflow instance"
    },
    {
        "text": "The `extensions` property can be used to define extensions for this workflow definition"
    },
    {
        "text": "Workflow states define building blocks of the Workflow Execution instructions"
    },
    {
        "text": "They define the"
    },
    {
        "text": "control flow logic instructions on what the workflow is supposed to do"
    },
    {
        "text": "Event states await one or more events and perform actions when they are received"
    },
    {
        "text": "If defined as the workflow starting state, the event state definition controls when the workflow"
    },
    {
        "text": "instances should be created"
    },
    {
        "text": "The `exclusive` property determines if the state should wait for any of the defined events in the `onEvents` array, or"
    },
    {
        "text": "If the Event state in this case is a workflow starting state, the occurrence of *any* of the defined events would start a new workflow instance"
    },
    {
        "text": "If the Event state in this case is a workflow starting state, the occurrence of *all* defined events would start a new"
    },
    {
        "text": "workflow instance"
    },
    {
        "text": "In order to consider only events that are related to each other, we need to set the `correlation` property in the workflow"
    },
    {
        "text": "extension context attributes"
    },
    {
        "text": "If the Event state is not a workflow starting state, the `timeout` property can be used to define the time duration from the"
    },
    {
        "text": "invocation of the event state"
    },
    {
        "text": "If the defined event, or events have not been received during this time,"
    },
    {
        "text": "The `timeouts` property can be used to define state specific timeout settings"
    },
    {
        "text": "Event states can define the"
    },
    {
        "text": "`stateExecTimeout`, `actionExecTimeout`, and `eventTimeout` properties"
    },
    {
        "text": "Note that `transition` and `end` properties are mutually exclusive, meaning that you cannot define both of them at the same time"
    },
    {
        "text": "Operation state defines a set of actions to be performed in sequence or in parallel"
    },
    {
        "text": "Once all actions have been performed, a transition to another state can occur"
    },
    {
        "text": "The `timeouts` property can be used to define state specific timeout settings"
    },
    {
        "text": "Operation states can define"
    },
    {
        "text": "the `stateExecTimeout` and `actionExecTimeout` settings"
    },
    {
        "text": "For more information on Workflow timeouts reference"
    },
    {
        "text": "At times multiple defined conditions can be evaluated to `true` by runtime implementations"
    },
    {
        "text": "Conditions defined first take precedence over conditions defined later"
    },
    {
        "text": "This is backed by the fact that arrays/sequences"
    },
    {
        "text": "Because A was defined first, its transition will be executed, not B's"
    },
    {
        "text": "In case of data-based conditions definition, switch state controls workflow transitions based on the states data"
    },
    {
        "text": "If no defined conditions can be matched, the state transitions is taken based on the `defaultCondition` property"
    },
    {
        "text": "This property can be either a `transition` to another workflow state, or an `end` definition meaning a workflow end"
    },
    {
        "text": "For event-based conditions, a switch state acts as a workflow wait state"
    },
    {
        "text": "It halts Workflow Execution"
    },
    {
        "text": "until one of the referenced events arrive, then making a transition depending on that event definition"
    },
    {
        "text": "If events defined in event-based conditions do not arrive before the states `eventTimeout` property expires,"
    },
    {
        "text": "state transitions are based on the defined `defaultCondition` property"
    },
    {
        "text": "The `timeouts` property can be used to define state specific timeout settings"
    },
    {
        "text": "Switch states can define the"
    },
    {
        "text": "`stateExecTimeout` setting"
    },
    {
        "text": "If `eventConditions` is defined, the switch state can also define the"
    },
    {
        "text": "Sleep state"
    },
    {
        "text": "suspends Workflow Execution for a given time duration"
    },
    {
        "text": "The delay is defined in its `duration` property using the ISO 8601"
    },
    {
        "text": "duration format"
    },
    {
        "text": "Parallel state defines a collection of `branches` that are executed in parallel"
    },
    {
        "text": "A parallel state can be seen a state which splits up the current workflow instance execution path"
    },
    {
        "text": "into multiple ones, one for each branch"
    },
    {
        "text": "These execution paths are performed in parallel"
    },
    {
        "text": "and are joined back into the current execution path depending on the defined `completionType` parameter value"
    },
    {
        "text": "specify the `numCompleted` property to define this number"
    },
    {
        "text": "The `timeouts` property can be used to set state specific timeout settings"
    },
    {
        "text": "Parallel states can define the"
    },
    {
        "text": "`stateExecTimeout` and `branchExecTimeout` timeout settings"
    },
    {
        "text": "For more information on workflow timeouts"
    },
    {
        "text": "Inject state can be used to inject static data into state data input"
    },
    {
        "text": "Inject state does not perform any actions"
    },
    {
        "text": "It is very useful for debugging, for example, as you can test/simulate Workflow Execution with pre-set data that would typically"
    },
    {
        "text": "The inject state `data` property allows you to statically define a JSON object which gets added to the states data input"
    },
    {
        "text": "You can use the filter property to control the states data output to the transition state"
    },
    {
        "text": "Here is a typical example of how to use the inject state to add static data into its states data input, which then is passed"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "If the inject state already receives a data input from the previous transition state, the inject data should be merged"
    },
    {
        "text": "with its data input"
    },
    {
        "text": "Each iteration of the ForEach state is by default executed in parallel by default"
    },
    {
        "text": "However, executing iterations sequentially is also possible by setting the value of the `mode` property to"
    },
    {
        "text": "`sequential`"
    },
    {
        "text": "The `mode` property defines if iterations should be done sequentially or in parallel"
    },
    {
        "text": "By default,"
    },
    {
        "text": "that can be executed at a time"
    },
    {
        "text": "To give an example, if the number of iterations is 55 and `batchSize`"
    },
    {
        "text": "is set to `10`, 10 iterations are to be executed at a time, meaning that the state would execute 10 iterations in parallel,"
    },
    {
        "text": "then execute the next batch of 10 iterations"
    },
    {
        "text": "After 5 such executions, the remaining 5 iterations are to be executed in the last batch"
    },
    {
        "text": "The `inputCollection` property is a workflow expression which selects an array in the states data"
    },
    {
        "text": "All iterations"
    },
    {
        "text": "are performed against data elements of this array"
    },
    {
        "text": "If this array does not exist, the runtime should throw"
    },
    {
        "text": "The `outputCollection` property is a workflow expression which selects an array in the state data where the results"
    },
    {
        "text": "of each iteration should be added to"
    },
    {
        "text": "If this array does not exist, it should be created"
    },
    {
        "text": "The `iterationParam` property defines the name of the iteration parameter passed to each iteration of the ForEach state"
    },
    {
        "text": "It should contain the unique element of the `inputCollection` array and made available to actions of the ForEach state"
    },
    {
        "text": "If `iterationParam` is not explicitly defined, runtimes should create one and populate it with the value of the unique"
    },
    {
        "text": "iteration parameter for each iteration of the ForEach state"
    },
    {
        "text": "The `actions` property defines actions to be executed in each state iteration"
    },
    {
        "text": "The ForEach state defines an `inputCollection` property which selects all orders that have the `completed` property set to `true`"
    },
    {
        "text": "For each element of the array selected by `inputCollection` a JSON object defined by `iterationParam` should be"
    },
    {
        "text": "created containing an unique element of `inputCollection` and passed as the data input to the parallel executed actions"
    },
    {
        "text": "The results of each parallel action execution are stored as elements in the state data array defined by the `outputCollection` property"
    },
    {
        "text": "The `timeouts` property can be used to set state specific timeout settings"
    },
    {
        "text": "ForEach states can define the"
    },
    {
        "text": "section"
    },
    {
        "text": "Serverless orchestration can at times require manual steps/decisions to be made"
    },
    {
        "text": "While some work performed"
    },
    {
        "text": "The Callback state allows you to explicitly model manual decision steps during Workflow Execution"
    },
    {
        "text": "The action property defines a function call that triggers an external activity/service"
    },
    {
        "text": "Once the action executes,"
    },
    {
        "text": "of the manual decision by the called service"
    },
    {
        "text": "Note that the called decision service is responsible for emitting the callback CloudEvent indicating the completion of the"
    },
    {
        "text": "decision and including the decision results as part of the event payload"
    },
    {
        "text": "This event must be correlated to the"
    },
    {
        "text": "workflow instance using the callback events context attribute defined in the `correlation` property of the"
    },
    {
        "text": "defined workflow state or completes Workflow Execution in case it is an end state"
    },
    {
        "text": "The `timeouts` property defines state specific timeout settings"
    },
    {
        "text": "Callback states can define the"
    },
    {
        "text": "The `name` property defines an unique name of the function definition"
    },
    {
        "text": "The `type` property defines the function type"
    },
    {
        "text": "Its value can be either `rest` or `expression`"
    },
    {
        "text": "Default value is `rest`"
    },
    {
        "text": "* If `type` is `rest`, a combination of the function/service OpenAPI definition document URI and the particular service operation that needs to be invoked, separated by a '#'"
    },
    {
        "text": "* If `type` is `asyncapi`, a combination of the AsyncApi definition document URI and the particular service operation that needs to be invoked, separated by a '#'"
    },
    {
        "text": "* If `type` is `rpc`, a combination of the gRPC proto document URI and the particular service name and service method name that needs to be invoked, separated by a '#'"
    },
    {
        "text": "* If `type` is `graphql`, a combination of the GraphQL schema definition URI and the particular service name and service method name that needs to be invoked, separated by a '#'"
    },
    {
        "text": "* If `type` is `odata`, a combination of the GraphQL schema definition URI and the particular service name and service method name that needs to be invoked, separated by a '#'"
    },
    {
        "text": "It is used to provide authentication info to access the resource defined in the `operation` property and/or to invoke the function"
    },
    {
        "text": "Function definitions themselves do not define data input parameters"
    },
    {
        "text": "Parameters can be"
    },
    {
        "text": "Used to define events and their correlations"
    },
    {
        "text": "These events can be either consumed or produced during Workflow Execution as well"
    },
    {
        "text": "This is to assure consistency and portability of the events format used"
    },
    {
        "text": "The `name` property defines a single name of the event that is unique inside the workflow definition"
    },
    {
        "text": "This event name can be"
    },
    {
        "text": "property of the CloudEvent required attributes"
    },
    {
        "text": "The `kind` property defines this event as either `consumed` or `produced`"
    },
    {
        "text": "In terms of the workflow, this means it is either an event"
    },
    {
        "text": "Note that for `produced` event definitions, implementations must provide the value of the CloudEvent source attribute"
    },
    {
        "text": "Event correlation plays a big role in large event-driven applications"
    },
    {
        "text": "Correlating one or more events with a particular workflow instance"
    },
    {
        "text": "can be done by defining the event correlation rules within the `correlation` property"
    },
    {
        "text": "and the correlation definitions can use these attributes to define clear matching event correlation rules"
    },
    {
        "text": "Extension context attributes are not part of the event payload, so they are serialized the same way as other standard required attributes"
    },
    {
        "text": "This means that the event payload does not have to be inspected by implementations in order to read and evaluate the defined correlation rules"
    },
    {
        "text": "We can then define a correlation rule, through which all consumed events with the \"hospitalMonitorSystem\", and the \"com"
    },
    {
        "text": "hospital"
    },
    {
        "text": "patient"
    },
    {
        "text": "heartRateMonitor\""
    },
    {
        "text": "should then also be associated with the same instance"
    },
    {
        "text": "You can also correlate multiple events together"
    },
    {
        "text": "In the following example, we assume that the workflow consumes two different event types,"
    },
    {
        "text": "all consumed events from this source and type must have the same \"patientId\" to be considered"
    },
    {
        "text": "The second rule"
    },
    {
        "text": "says that these events must all have a context attribute named \"department\" with the value of \"UrgentCare\""
    },
    {
        "text": "This allows developers to write orchestration workflows that are specifically targeted to patients that are in the hospital urgent care unit,"
    },
    {
        "text": "The `dataOnly` property deals with what Event data is accessible by the consuming Workflow states"
    },
    {
        "text": "If `false`, both Event payload and context attributes should be accessible"
    },
    {
        "text": "The `name` property defines the unique auth definition name"
    },
    {
        "text": "The `scheme` property defines the auth scheme to be used"
    },
    {
        "text": "Can be \"bearer\", \"basic\" or \"oauth2\""
    },
    {
        "text": "The `properties` property defines the auth scheme properties information"
    },
    {
        "text": "The Basic properties definition can have two types, either `string` or `object`"
    },
    {
        "text": "Used to define event correlation rules"
    },
    {
        "text": "Only usable for `consumed` event definitions"
    },
    {
        "text": "Note that the values of `eventRefs` array must be unique"
    },
    {
        "text": "The `actionMode` property defines if the defined actions need to be performed sequentially or in parallel"
    },
    {
        "text": "The `actions` property defines a list of actions to be performed"
    },
    {
        "text": "When specifying the `onEvents` definition it is important to consider the Event states `exclusive` property,"
    },
    {
        "text": "because it determines how 'onEvents' is interpreted"
    },
    {
        "text": "]"
    },
    {
        "text": "1"
    },
    {
        "text": "If `exclusive` is set to `true`, the consumption of **either** the `HighBodyTemperature` or `HighBloodPressure` events will trigger action execution"
    },
    {
        "text": "2"
    },
    {
        "text": "If `exclusive` is set to `false`, the consumption of **both** the `HighBodyTemperature` and `HighBloodPressure` events will trigger action execution"
    },
    {
        "text": "Actions specify invocations of services or other workflows during Workflow Execution"
    },
    {
        "text": "* Reference a sub-workflow invocation via the `subFlowRef` property"
    },
    {
        "text": "Note that `functionRef`, `eventRef`, and `subFlowRef` are mutually exclusive, meaning that only one of them can be"
    },
    {
        "text": "specified in a single action definition"
    },
    {
        "text": "The `name` property specifies the action name"
    },
    {
        "text": "In the event-based scenario a service, or a set of services we want to invoke"
    },
    {
        "text": "are not exposed via a specific resource URI for example, but can only be invoked via an event"
    },
    {
        "text": "referenced `produced` event via its `produceEventRef` property and a `consumed` event via its `consumeEventRef` property"
    },
    {
        "text": "The `sleep` property can be used to define time periods that Workflow Execution should sleep"
    },
    {
        "text": "The `retryRef` property references one of the defined workflow retries by it's unique name"
    },
    {
        "text": "If not set, the action"
    },
    {
        "text": "should be retried according to the default retry policy of the runtime implementation"
    },
    {
        "text": "For more information about workflow"
    },
    {
        "text": "The `nonRetryableErrors` property is a list that references one or more unique names of workflow error definitions"
    },
    {
        "text": "This is the list of known errors for which the action should not be retried for"
    },
    {
        "text": "It should be used only when the workflow top-level `autoRetries` property is set to `true`"
    },
    {
        "text": "The `retryableErrors` property is a list that references one or more unique names of workflow error definitions"
    },
    {
        "text": "This is the list of known errors for which the action should be retried for"
    },
    {
        "text": "It should be used only when the workflow top-level `autoRetries` property is set to `false`"
    },
    {
        "text": "If the `condition` property is not defined, the action is always performed"
    },
    {
        "text": "Often you want to group your workflows into small logical units that solve a particular business problem and can be reused in"
    },
    {
        "text": "multiple other workflow definitions"
    },
    {
        "text": "Reusable workflows are referenced by their `id` property via the SubFlow action `workflowId` parameter"
    },
    {
        "text": "For the simple case, `subFlowRef` can be a string containing the `id` of the sub-workflow to invoke"
    },
    {
        "text": "`FunctionRef` definition can have two types, either `string` or `object`"
    },
    {
        "text": "Note that if used with `string` type, the invocation of the function is synchronous"
    },
    {
        "text": "If you need to define parameters in your `functionRef` definition, you can define"
    },
    {
        "text": "The `arguments` property defines the arguments that are to be passed to the referenced function"
    },
    {
        "text": "`sync`, meaning that Workflow Execution should wait until the function completes"
    },
    {
        "text": "If set to `async`, Workflow Execution should just invoke the function and should not wait until its completion"
    },
    {
        "text": "Note that in this case the action does not produce any results and the associated actions actionDataFilter as well as"
    },
    {
        "text": "its retry definition, if defined, should be ignored"
    },
    {
        "text": "In addition, functions that are invoked async do not propagate their errors to the associated action definition and the"
    },
    {
        "text": "workflow state, meaning that any errors that happen during their execution cannot be handled in the workflow states"
    },
    {
        "text": "onErrors definition"
    },
    {
        "text": "Note that errors raised during functions that are invoked async should not fail Workflow Execution"
    },
    {
        "text": "Allows defining invocation of a function via event"
    },
    {
        "text": "to be used as payload of the event referenced by `produceEventRef`"
    },
    {
        "text": "If it is of object type, you can define a custom object to be the event payload"
    },
    {
        "text": "to the trigger/produced event"
    },
    {
        "text": "If the event defined by the `consumeEventRef` property is not received in that set time, action invocation should raise an error"
    },
    {
        "text": "that can be handled in the states `onErrors` definition"
    },
    {
        "text": "In case the `consumeEventRef` is not defined, the `consumeEventTimeout` property is ignored"
    },
    {
        "text": "If set to `async`, Workflow Execution should just produce the trigger event and should not wait for the result event"
    },
    {
        "text": "workflow state, meaning that any errors that happen during their execution cannot be handled in the workflow states"
    },
    {
        "text": "onErrors definition"
    },
    {
        "text": "Note that errors raised during functions that are invoked sync or async in this case"
    },
    {
        "text": "should not fail Workflow Execution"
    },
    {
        "text": "`SubFlowRef` definition can have two types, namely `string` or `object`"
    },
    {
        "text": "If `string` type, it defines the unique id of the sub-workflow to be invoked"
    },
    {
        "text": "This short-hand definition can be used if sub-workflow lookup is done only by its `id`"
    },
    {
        "text": "property and not its `version` property"
    },
    {
        "text": "The `workflowId` property define the unique ID of the sub-workflow to be invoked"
    },
    {
        "text": "Usually, the workflow id should not be the same id of the workflow where the action is defined"
    },
    {
        "text": "Otherwise, it may occur undesired recurring calls to the same workflow"
    },
    {
        "text": "The `version` property defined the unique version of the sub-workflow to be invoked"
    },
    {
        "text": "If this property is defined, runtimes should match both the `id` and the `version` properties"
    },
    {
        "text": "defined in the sub-workflow definition"
    },
    {
        "text": "`sync`, meaning that Workflow Execution should wait until the subflow completes"
    },
    {
        "text": "If set to `async`, Workflow Execution should just invoke the subflow and not wait for its results"
    },
    {
        "text": "Note that in this case the action does not produce any results, and the associated actions actionDataFilter as well as"
    },
    {
        "text": "Subflows that are invoked async do not propagate their errors to the associated action definition and the"
    },
    {
        "text": "onErrors definition"
    },
    {
        "text": "Note that errors raised during subflows that are invoked async"
    },
    {
        "text": "The `onParentComplete` property defines how subflow execution that is invoked async should behave if the parent workflow"
    },
    {
        "text": "completes execution before the subflow completes its own execution"
    },
    {
        "text": "completes, execution of the subflow should be terminated"
    },
    {
        "text": "If it is set to `continue`, if the parent workflow completes, the subflow execution is allowed to continue its own execution"
    },
    {
        "text": "The `errorRef` property references the unique workflow error definition"
    },
    {
        "text": "For more info on workflow error handling"
    },
    {
        "text": "The `errorRefs`property references at least one of the defined workflow error definitions"
    },
    {
        "text": "Can be used when `errorRef` is not used"
    },
    {
        "text": "Usable when you want to define multiple error refs for which the same transition"
    },
    {
        "text": "or end definition should be applied"
    },
    {
        "text": "For more info on workflow error handling"
    },
    {
        "text": "Note that the `errorRef` and `errorRefs` properties are mutually exclusive, meaning that you can only specify one or the other,"
    },
    {
        "text": "but not both at the same time"
    },
    {
        "text": "The `transition` property defines the transition to the next workflow state in cases when the defined"
    },
    {
        "text": "error happens during runtime execution"
    },
    {
        "text": "If `transition` is not defined you can also define the `end` property which will end Workflow Execution at that point"
    },
    {
        "text": "Note that the `transition` and `end` properties are mutually exclusive, meaning that you can only specify one or the other,"
    },
    {
        "text": "The `increment` property specifies a static duration which will be added to the delay between successive retries"
    },
    {
        "text": "in this example 10, 12, 14, and 16 seconds between retries"
    },
    {
        "text": "The `multiplier` property specifies the value by which the interval time is increased for each of the retry attempts"
    },
    {
        "text": "in this example 10, 20, 40, and 80 seconds between retries"
    },
    {
        "text": "If both `increment` and `multiplier` properties are defined, `increment` should be applied first and then"
    },
    {
        "text": "the `multiplier` when determining the next retry time"
    },
    {
        "text": "The `maxAttempts` property determines the maximum number of retry attempts allowed and is a positive integer value"
    },
    {
        "text": "The `jitter` property is important to prevent certain scenarios where clients"
    },
    {
        "text": "are retrying in sync, possibly causing or contributing to a transient failure"
    },
    {
        "text": "precisely because they're retrying at the same time"
    },
    {
        "text": "Adding a typically small,"
    },
    {
        "text": "bounded random amount of time to the period between retries serves the purpose"
    },
    {
        "text": "of attempting to prevent these retries from happening simultaneously, possibly"
    },
    {
        "text": "reducing total time to complete requests and overall congestion"
    },
    {
        "text": "How this value"
    },
    {
        "text": "is used in the exponential backoff algorithm is left up to implementations"
    },
    {
        "text": "`jitter` may be specified as a percentage relative to the total delay"
    },
    {
        "text": "Once the next retry attempt delay is calculated, we can apply `jitter` as a percentage value relative to this"
    },
    {
        "text": "calculated delay"
    },
    {
        "text": "For example, if your calculated delay for the next retry is six seconds, and we specify"
    },
    {
        "text": "Alternatively, `jitter` may be defined as an absolute value specified as an ISO"
    },
    {
        "text": "8601 duration"
    },
    {
        "text": "This way, the maximum amount of random time added is fixed and"
    },
    {
        "text": "will not increase as new attempts are made"
    },
    {
        "text": "The `maxDelay` property determines the maximum amount of delay that is desired between retry attempts, and is applied"
    },
    {
        "text": "after `increment`, `multiplier`, and `jitter`"
    },
    {
        "text": "`Transition` definition can have two types, either `string` or `object`"
    },
    {
        "text": "If `string`, it defines the name of the state to transition to"
    },
    {
        "text": "If you need to define additional parameters in your `transition` definition, you can define"
    },
    {
        "text": "The `nextState` property defines the name of the state to transition to next"
    },
    {
        "text": "The `produceEvents` property allows you to define a list of events to produce before the transition happens"
    },
    {
        "text": "Switch state data conditions specify a data-based condition statement, which causes a transition to another"
    },
    {
        "text": "workflow state if evaluated to `true`"
    },
    {
        "text": "parts of the state data input"
    },
    {
        "text": "The condition must evaluate to `true` or `false`"
    },
    {
        "text": "If the condition is evaluated to `true`, you can specify either the `transition` or `end` definitions"
    },
    {
        "text": "to decide what to do, transition to another workflow state, or end Workflow Execution"
    },
    {
        "text": "Note that `transition` and `end`"
    },
    {
        "text": "definitions are mutually exclusive, meaning that you can specify either one or the other, but not both"
    },
    {
        "text": "Switch state event conditions specify events, which the switch state must wait for"
    },
    {
        "text": "Each condition"
    },
    {
        "text": "can reference one workflow-defined event"
    },
    {
        "text": "Upon arrival of this event, the associated transition is taken"
    },
    {
        "text": "The `eventRef` property references a name of one of the defined workflow events"
    },
    {
        "text": "If the referenced event is received, you can specify either the `transition` or `end` definitions"
    },
    {
        "text": "to decide what to do, transition to another workflow state, or end Workflow Execution"
    },
    {
        "text": "The `eventDataFilter` property can be used to filter event data when it is received"
    },
    {
        "text": "Note that `transition` and `end`"
    },
    {
        "text": "The `timeouts` property can be used to set branch specific timeout settings"
    },
    {
        "text": "Parallel state branches can set the"
    },
    {
        "text": "`actionExecTimeout` and `branchExecTimeout` timeout properties"
    },
    {
        "text": "For more information on workflow timeouts reference the"
    },
    {
        "text": "By default, exceptions that are not handled within branches stop branch execution and are propagated"
    },
    {
        "text": "to the Parallel state and should be handled with its `onErrors` definition"
    },
    {
        "text": "are propagated to the parallel state"
    },
    {
        "text": "and can be handled with the parallel states `onErrors` definition"
    },
    {
        "text": "If the parallel states defines a subflow action, exceptions that occur during execution of the called workflow"
    },
    {
        "text": "can choose to handle exceptions on their own"
    },
    {
        "text": "All unhandled exceptions from the called workflow"
    },
    {
        "text": "execution however are propagated back to the parallel state and can be handled with the parallel states"
    },
    {
        "text": "`onErrors` definition"
    },
    {
        "text": "Note that once an error that is propagated to the parallel state from a branch and handled by the"
    },
    {
        "text": "parallel state should be considered as the workflow control flow logic has already moved to a different state"
    },
    {
        "text": "Can be either `string` or `object` type"
    },
    {
        "text": "If type string, it defines the name of the workflow starting state"
    },
    {
        "text": "In this case it's assumed that the `schedule` property is not defined"
    },
    {
        "text": "The start definition can be either `string` or `object` type"
    },
    {
        "text": "If `string` type, it defines the name of the workflow starting state"
    },
    {
        "text": "If `object` type, it provides the ability to set the workflow starting state name, as well as the `schedule` property"
    },
    {
        "text": "The `stateName` property can be set to define the starting workflow state"
    },
    {
        "text": "If not specified, the first state"
    },
    {
        "text": "The `schedule` property allows to define scheduled workflow instance creation"
    },
    {
        "text": "Scheduled starts have two different choices"
    },
    {
        "text": "You can define a recurring time interval or cron-based schedule at which a workflow"
    },
    {
        "text": "One use case for cron-based scheduled starts is a workflow that performs periodical data batch processing"
    },
    {
        "text": "In this case we could use a cron definition"
    },
    {
        "text": "``` text"
    },
    {
        "text": "Defining a cron-based scheduled starts for the runtime implementations would mean that there needs to be an event service that issues"
    },
    {
        "text": "the needed events at the defined times to trigger workflow instance creation"
    },
    {
        "text": "Defining a start definition is not required"
    },
    {
        "text": "If it's not defined, the starting workflow"
    },
    {
        "text": "`Schedule` definition can have two types, either `string` or `object`"
    },
    {
        "text": "If `string` type, it defines time interval describing when the workflow instance should be automatically created"
    },
    {
        "text": "If you need to define the `cron` or the `timezone` parameters in your `schedule` definition, you can define"
    },
    {
        "text": "The `interval` property uses a derivative of ISO 8601 recurring time interval format to describe a series of consecutive time intervals for workflow instances to be automatically created at the start of"
    },
    {
        "text": "Unlike full ISO 8601, this derivative format does not allow expression of an explicit number of recurrences or identification of a series by the date and time at the start and end of its first time interval"
    },
    {
        "text": "instances will be automatically created every 2 hours starting from March 20th 2020 at 1pm UTC"
    },
    {
        "text": "to describe a repeating interval upon which a workflow instance should be created automatically"
    },
    {
        "text": "The `timezone` property is used to define a time zone name to evaluate the cron or interval expression against"
    },
    {
        "text": "If not specified, it should default"
    },
    {
        "text": "defining cron-based scheduled starts for the runtime implementations would mean that there needs to be an event service that issues"
    },
    {
        "text": "`Cron` definition can have two types, either `string` or `object`"
    },
    {
        "text": "If you need to define the `validUntil` parameters in your `cron` definition, you can define"
    },
    {
        "text": "`validUntil` time is reached, the cron expression for instances creations of this workflow"
    },
    {
        "text": "should no longer be valid"
    },
    {
        "text": "This tells the runtime engine to create an instance of this workflow every hour"
    },
    {
        "text": "as defined by the `validUntil` property value"
    },
    {
        "text": "In this case it's assumed that the `terminate` property has its default value of `false`, and the `produceEvents`,"
    },
    {
        "text": "`compensate`, and `continueAs` properties are not defined"
    },
    {
        "text": "End definitions are used to explicitly define execution completion of a workflow instance or Workflow Execution path"
    },
    {
        "text": "define a stop of Workflow Execution"
    },
    {
        "text": "The `terminate` property, if set to `true`, completes the workflow instance execution, this any other active"
    },
    {
        "text": "execution paths"
    },
    {
        "text": "If a terminate end is reached inside a ForEach or Parallel state the entire workflow instance is terminated"
    },
    {
        "text": "by the workflow instance before workflow stops its execution"
    },
    {
        "text": "It's important to mention that if the workflow `keepActive` property is set to`true`,"
    },
    {
        "text": "the only way to complete execution of the workflow instance"
    },
    {
        "text": "is if Workflow Execution reaches a state that defines an end definition with `terminate` property set to `true`,"
    },
    {
        "text": "is reached"
    },
    {
        "text": "execution is completed"
    },
    {
        "text": "and worklow execution should continue as a new instance of a new workflow"
    },
    {
        "text": "When defined, it should be assumed that `terminate` is `true`"
    },
    {
        "text": "If `continueAs` is defined, and `terminate` is explicitly"
    },
    {
        "text": "before the Workflow Execution is stopped, and continued as a new workflow instance with the defined workflow id"
    },
    {
        "text": "The `eventRef` property must match the name of"
    },
    {
        "text": "The `data` property can have two types, object or string"
    },
    {
        "text": "If of string type, it is an expression that can select parts of state data"
    },
    {
        "text": "to be used as the event payload"
    },
    {
        "text": "If of object type, you can define a custom object to be the event payload"
    },
    {
        "text": "to the generated event"
    },
    {
        "text": "Being able to produce events when Workflow Execution completes or during state transition"
    },
    {
        "text": "allows for event-based orchestration communication"
    },
    {
        "text": "For example, completion of an orchestration workflow can notify other orchestration workflows to decide if they need to act upon"
    },
    {
        "text": "the produced event, or notify monitoring services of the current state of Workflow Execution, etc"
    },
    {
        "text": "It can be used to create very dynamic orchestration scenarios"
    },
    {
        "text": "Each state can define a `transition` definition that is used to determine which"
    },
    {
        "text": "state to transition to next"
    },
    {
        "text": "Implementers **must** use the unique State `name` property for determining the transition"
    },
    {
        "text": "Events can be produced during state transitions"
    },
    {
        "text": "The `produceEvents` property of the `transition` definitions allows you"
    },
    {
        "text": "For each of the produced events you can select what parts of state data to be the event payload"
    },
    {
        "text": "section for more information"
    },
    {
        "text": "Specifying additional properties, namely properties which are not defined by the specification"
    },
    {
        "text": "They allow you to enrich the workflow definition with custom information"
    },
    {
        "text": "Additional properties, just like workflow metadata, should not affect Workflow Execution"
    },
    {
        "text": "Implementations may choose to use additional properties or ignore them"
    },
    {
        "text": "In this example, we specify the `loglevel`, `environment`, and `category` additional properties"
    },
    {
        "text": "Serverless Workflow language allows you to define `explicit` error handling, meaning you can define what should happen"
    },
    {
        "text": "in case of errors inside your workflow model rather than some generic error handling entity"
    },
    {
        "text": "This allows error handling to become part of your orchestration activities and as such part of your business problem"
    },
    {
        "text": "solutions"
    },
    {
        "text": "The idea behind the way Serverless Workflow defines error handling is that workflows should only fail due to unknown bugs"
    },
    {
        "text": "during execution"
    },
    {
        "text": "In general, you should always write your workflows so that they do not fail on any known failures"
    },
    {
        "text": "Each workflow state can define error handling, which is related only to errors that may arise during its"
    },
    {
        "text": "execution"
    },
    {
        "text": "Error handling defined in one state cannot be used to handle errors that happened during execution of another state"
    },
    {
        "text": "during Workflow Execution"
    },
    {
        "text": "Unknown errors that may arise during workflow state execution that are not explicitly handled within the workflow definition"
    },
    {
        "text": "should be reported by runtime implementations and halt Workflow Execution"
    },
    {
        "text": "Within workflow definitions, errors defined are `domain specific`, meaning they are defined within"
    },
    {
        "text": "For example, we can define errors such as \"Order not found\", or \"Item not in inventory\", rather than having to"
    },
    {
        "text": "might make little to no sense to our specific problem domain, as well as may not be portable across various runtime implementations"
    },
    {
        "text": "In addition to the domain specific error name, users have the option to also add an optional error code"
    },
    {
        "text": "to help runtime implementations with mapping defined errors to concrete underlying technical ones"
    },
    {
        "text": "to concrete technical errors that arise during Workflow Execution"
    },
    {
        "text": "Known workflow errors, that we know we need to handle during Workflow Execution should be defined in"
    },
    {
        "text": "the workflow top-level 'errors' property"
    },
    {
        "text": "This property can be either a string type, meaning it can reference"
    },
    {
        "text": "a reusable JSON or Yaml definition file including the error definitions, or it can have an array type where you can"
    },
    {
        "text": "define these checked errors in-line in your workflow definition"
    },
    {
        "text": "These defined errors can then be referenced by their unique name in both states `onErrors` definitions as well as in"
    },
    {
        "text": "actions `nonRetryableErrors` and `retryableErrors` properties"
    },
    {
        "text": "Retries allow workflows to deal with intermittent failures of services they are trying to invoke"
    },
    {
        "text": "services and continue execution after they are fixed"
    },
    {
        "text": "Retries are important for both short-lived and long-lived workflows, as well as in both stateless and stateful"
    },
    {
        "text": "scenarios"
    },
    {
        "text": "Which retry option the workflow should use by default is defined via the workflow top-level `autoRetries` property"
    },
    {
        "text": "Regardless of the chosen retries option, note that workflows in general should be designed to not fail"
    },
    {
        "text": "Workflows should be able to recover from intermittent failures"
    },
    {
        "text": "This is the default option when the workflow top-level `autoRetries` property is not specified or is set to `false`"
    },
    {
        "text": "This retry options is suited for stateless / short-running workflows where retries should be performed when specifically"
    },
    {
        "text": "Workflow Execution should fail"
    },
    {
        "text": "Each action can define the retry strategy it wants to use"
    },
    {
        "text": "If it does not define one, the action is in this case not retries"
    },
    {
        "text": "Actions can define a list of known errors in its `retryableErrors` array"
    },
    {
        "text": "If defined, then the action should be retried"
    },
    {
        "text": "In our example, \"MyFirstFunction\" invocation should be retried according to the \"FirstRetryStrategy\" policy only on known errors"
    },
    {
        "text": "\"SomeErrorOne\" and \"SomeErrorTwo\""
    },
    {
        "text": "`onErrors` definition"
    },
    {
        "text": "This is the option used when the workflow top-level `autoRetries` property is set to `true`"
    },
    {
        "text": "Automatic retries are well suited to long-running and stateful workflow orchestrations"
    },
    {
        "text": "It allows workflows"
    },
    {
        "text": "to recover from failures thus providing more resilience"
    },
    {
        "text": "There is a possible cost associated with automatic retries"
    },
    {
        "text": "in terms of resource and computing power utilization"
    },
    {
        "text": "errors"
    },
    {
        "text": "This means that you do not have to define a retry strategy for actions for them to have retried, it's included by default"
    },
    {
        "text": "Users can still define a custom retry strategy for each action via the `retryRef` property"
    },
    {
        "text": "If a retry strategy is not defined, a default retry strategy should be used"
    },
    {
        "text": "* `maxAttempts` to be `unlimited`, meaning that the action should be retried indefinitely until successful"
    },
    {
        "text": "* `delay` to be set to one second, meaning that there is a one second delay between action retries"
    },
    {
        "text": "* `multiplier` to be set to two meaning that the delay should be multiplied by two for each retry attempt"
    },
    {
        "text": "Runtimes should document their default retry strategy to users, so it's clear which"
    },
    {
        "text": "property values they are using for the default"
    },
    {
        "text": "This is done via the actions `nonRetryableErrors` property"
    },
    {
        "text": "If a known error happens during action execution"
    },
    {
        "text": "which is included in the `nonRetryableErrors` property array, that action should not be retried and the error"
    },
    {
        "text": "then should be handled in the workflow states `onErrors` property"
    },
    {
        "text": "Let's take a look at an examples of defining retries when using the automatic retries option"
    },
    {
        "text": "This example assumes that the workfow top level `autoRetries` property is set to `true`"
    },
    {
        "text": "In our example the first action named `MyFirstFunction` is going to be retried according to the `FirstRetryStrategy`"
    },
    {
        "text": "retry policy"
    },
    {
        "text": "The seconds action named `MySecondFunction` is going to be retried according to the `SecondRetryStrategy`"
    },
    {
        "text": "retry policy"
    },
    {
        "text": "The third action named `MyThirdFunction` is going to retried according to the default runtime retry policy"
    },
    {
        "text": "The fourth action named `MyFourthFunction` is going to be retried according to the `DoNotRetryStrategy`"
    },
    {
        "text": "retry policy which has the `maxAttempts` property set to `1`, meaning that this action will not be retried"
    },
    {
        "text": "1"
    },
    {
        "text": "Workflow execution"
    },
    {
        "text": "2"
    },
    {
        "text": "State execution"
    },
    {
        "text": "3"
    },
    {
        "text": "Action execution"
    },
    {
        "text": "4"
    },
    {
        "text": "Branch execution"
    },
    {
        "text": "5"
    },
    {
        "text": "Event consumption time"
    },
    {
        "text": "The specification allows for timeouts to be defined on the top-level workflow definition, as well as"
    },
    {
        "text": "in each of the workflow state definitions"
    },
    {
        "text": "Note that the timeout settings defined in states, and state branches overwrite the top-level"
    },
    {
        "text": "workflow definition for state, action and branch execution"
    },
    {
        "text": "If they are not defined, then the top-level"
    },
    {
        "text": "timeout settings should take in effect"
    },
    {
        "text": "This top-level workflow timeout setting defines that the maximum execution time of all defined workflow states"
    },
    {
        "text": "is two seconds each"
    },
    {
        "text": "Now let's say that we have worfklow states \"A\" and \"B\""
    },
    {
        "text": "State \"A\" does not define a timeout definition, but state"
    },
    {
        "text": "Since state \"A\" does not overwrite the top-level `stateExecTimeout`, its execution timeout should be inherited from"
    },
    {
        "text": "the top-level timeout definition"
    },
    {
        "text": "On the other hand, state \"B\" does define it's own `stateExecTimeout`, in which case it would overwrite the default"
    },
    {
        "text": "setting, meaning that it would its execution time has a max limit of ten seconds"
    },
    {
        "text": "Defining timeouts is not mandatory, meaning that if not defined, all the timeout settings should be assumed to"
    },
    {
        "text": "be \"unlimited\""
    },
    {
        "text": "Note that the defined Workflow Execution timeout has precedence over all other defined timeouts"
    },
    {
        "text": "Just to give an extreme example, let's say we define the Workflow Execution timeout to ten seconds,"
    },
    {
        "text": "and the state execution timeout to twenty seconds"
    },
    {
        "text": "In this case if the Workflow Execution timeout is reached"
    },
    {
        "text": "it should follow the rules of Workflow Execution timeout and end Workflow Execution, no matter what the"
    },
    {
        "text": "state execution time has been set to"
    },
    {
        "text": "Workflow timeouts are defined with the top-level `timeouts` property"
    },
    {
        "text": "It can have two types, `string` and `object`"
    },
    {
        "text": "If `string` type it defines an URI that points to a Json or Yaml file containing the workflow timeout definitions"
    },
    {
        "text": "The `eventTimeout` property defines the maximum amount of time to wait to consume defined events"
    },
    {
        "text": "If not specified it should default to"
    },
    {
        "text": "\"unlimited\""
    },
    {
        "text": "The `branchExecTimeout` property defines the maximum execution time for a single branch"
    },
    {
        "text": "If not specified it should default to"
    },
    {
        "text": "The `actionExecTimeout` property defines the maximum execution time for a single actions definition"
    },
    {
        "text": "If not specified it should default to"
    },
    {
        "text": "\"unlimited\""
    },
    {
        "text": "Note that an action definition can include multiple actions"
    },
    {
        "text": "The `stateExecTimeout` property defines the maximum execution time for a single workflow state"
    },
    {
        "text": "If not specified it should default to"
    },
    {
        "text": "The `workflowExecTimeout` property defines the Workflow Execution timeout"
    },
    {
        "text": "It is defined using the ISO 8601 duration format"
    },
    {
        "text": "If not defined, the Workflow Execution should be given \"unlimited\""
    },
    {
        "text": "amount of time to complete"
    },
    {
        "text": "`workflowExecTimeout` can have two possibly types, either `string` or `object`"
    },
    {
        "text": "If `string` type, it defines the maximum Workflow Execution time"
    },
    {
        "text": "The `duration` property defines the time duration of the execution timeout"
    },
    {
        "text": "Once a workflow instance is created,"
    },
    {
        "text": "and the amount of the defined time is reached, the workflow instance should be terminated"
    },
    {
        "text": "The `interrupt` property defines if the currently running instance should be allowed to finish its current"
    },
    {
        "text": "execution flow before it needs to be terminated"
    },
    {
        "text": "If set to `true`, the current instance execution should stop immediately"
    },
    {
        "text": "The `runBefore` property defines a name of a workflow state to be executed before workflow instance is terminated"
    },
    {
        "text": "at last one must define it"
    },
    {
        "text": "Runtime implementations should raise compile time / parsing exceptions if any of the rules mentioned above are"
    },
    {
        "text": "not obeyed in the workflow definition"
    },
    {
        "text": "All workflow states except Sleep and Inject States can define the `timeouts` property and can define different timeout"
    },
    {
        "text": "settings depending on their state type"
    },
    {
        "text": "timeout settings are available for each state type"
    },
    {
        "text": "Workflow states timeouts cannot define the `workflowExecTimeout` property"
    },
    {
        "text": "Workflow states can set their `stateExecTimeout` property inside the `timeouts` definition"
    },
    {
        "text": "It must be a duration that's greater than zero and defines the total state execution timeout"
    },
    {
        "text": "When this timeout is reached, state execution"
    },
    {
        "text": "should be stopped and can be handled as a timeout error in the states `onErrors` definition"
    },
    {
        "text": "can overwrite this setting to define its own branch execution timeout"
    },
    {
        "text": "If a branch does not define this timeout property, it should be inherited from it's state definition branch timeout setting"
    },
    {
        "text": "If its state does not define it either, it should be inherited from the top-level workflow branch timeout settings"
    },
    {
        "text": "The Event state `timeouts` property can be used to"
    },
    {
        "text": "specify state specific timeout settings"
    },
    {
        "text": "For event state it can contain the `eventTimeout` property"
    },
    {
        "text": "which is defined using the ISO 8601 data and time format"
    },
    {
        "text": "You can specify for example \"PT15M\" to represent 15 minutes or \"P2DT3H4M\" to represent 2 days, 3 hours and 4 minutes"
    },
    {
        "text": "`eventTimeout` values should always be represented as durations and not as specific time intervals"
    },
    {
        "text": "The `eventTimeout` property needs to be described in detail for Event states as it depends on whether or not the Event state is a workflow starting state or not"
    },
    {
        "text": "If the Event state is a workflow starting state, incoming events may trigger workflow instances"
    },
    {
        "text": "In this case,"
    },
    {
        "text": "If the `exclusive` property is set to `false`, in this case, the defined `eventTimeout` represents the time"
    },
    {
        "text": "The first `eventTimeout` would start once any of the referenced events are consumed"
    },
    {
        "text": "If the second event does not occur within"
    },
    {
        "text": "the defined eventTimeout, no workflow instance should be created"
    },
    {
        "text": "If the event state is not a workflow starting state, the `eventTimeout` property is relative to the time when the"
    },
    {
        "text": "are not satisfied within the defined timeout period, the event state should transition to the next state or end the workflow"
    },
    {
        "text": "instance in case it is an end state without performing any actions"
    },
    {
        "text": "Compensation deals with undoing or reversing the work of one or more states which have"
    },
    {
        "text": "already successfully completed"
    },
    {
        "text": "For example, let's say that we have charged a customer $100 for an item"
    },
    {
        "text": "purchase"
    },
    {
        "text": "In the case customer laster on decides to cancel this purchase we need to undo it"
    },
    {
        "text": "One way of"
    },
    {
        "text": "doing that is to credit the customer $100"
    },
    {
        "text": "It's important to understand that compensation with workflows is not the same as for example rolling back"
    },
    {
        "text": "might involve multiple logical steps and thus is part of the overall business logic that must be"
    },
    {
        "text": "defined within the workflow itself"
    },
    {
        "text": "To explain this let's use our previous example and say that when our"
    },
    {
        "text": "customer made the item purchase, our workflow has sent her/him a confirmation email"
    },
    {
        "text": "In the case, to"
    },
    {
        "text": "compensate this purchase, we cannot just \"undo\" the confirmation email sent"
    },
    {
        "text": "Instead, we want to"
    },
    {
        "text": "send a second email to the customer which includes purchase cancellation information"
    },
    {
        "text": "Compensation in Serverless Workflow must be explicitly defined by the workflow control flow logic"
    },
    {
        "text": "It cannot be dynamically triggered by initial workflow data, event payloads, results of service invocations, or"
    },
    {
        "text": "errors"
    },
    {
        "text": "Each workflow state can define how it should be compensated via its `compensatedBy` property"
    },
    {
        "text": "* They must define the `usedForCompensation` property and set it to `true`"
    },
    {
        "text": "* They can transition only to states which also have their `usedForCompensation` property set to `true`"
    },
    {
        "text": "Let's take a look at an example workflow state which defines its `compensatedBy` property, and the compensation"
    },
    {
        "text": "debits the customer and sends them a purchase confirmation email"
    },
    {
        "text": "It defines that it's compensated by the"
    },
    {
        "text": "purchase amount to customer and sends them a purchase cancellation email"
    },
    {
        "text": "As previously mentioned, compensation must be explicitly triggered by the workflows control-flow logic"
    },
    {
        "text": "Transitions can trigger compensations by specifying the `compensate` property and setting it to `true`"
    },
    {
        "text": "workflow compensation must be performed"
    },
    {
        "text": "End definitions can trigger compensations by specifying the `compensate` property and setting it to `true`"
    },
    {
        "text": "This means that before workflow finishes its execution workflow compensation must be performed"
    },
    {
        "text": "Note that"
    },
    {
        "text": "in case when the end definition has its `produceEvents` property set, compensation must be performed before"
    },
    {
        "text": "producing the specified events and ending Workflow Execution"
    },
    {
        "text": "In the case the end definition has a `continueAs` property defined, compensation must be performed before"
    },
    {
        "text": "Workflow Execution continues as a new workflow invocation"
    },
    {
        "text": "In the case where the end definition has both `produceEvents`, and `continueAs` compensation is performed first,"
    },
    {
        "text": "then the event should be produced, and then the workflow should continue its execution as a new workflow invocation"
    },
    {
        "text": "Now that we have seen how to define and trigger compensation, we need to go into details on how compensation should be executed"
    },
    {
        "text": "Compensation is always done in sequential order, and should not be executed in parallel"
    },
    {
        "text": "In this example lets say our Workflow Execution is at the \"End\" state which defines the `compensate` property to `true`"
    },
    {
        "text": "as shown in the previous section"
    },
    {
        "text": "States with a red border, namely \"A\", \"B\", \"D\" and \"E\" are states which have so far"
    },
    {
        "text": "been executed successfully"
    },
    {
        "text": "State \"C\" has not been executed during Workflow Execution in our example"
    },
    {
        "text": "1"
    },
    {
        "text": "State \"E\" is not compensated as it does not define a `compensatedBy` state"
    },
    {
        "text": "2"
    },
    {
        "text": "State \"D\" is compensated by executing compensation \"D1\""
    },
    {
        "text": "3"
    },
    {
        "text": "State \"B\" is compensated by executing \"B1\" and then \"B1-2\""
    },
    {
        "text": "4"
    },
    {
        "text": "State C is not compensated as it was never active during Workflow Execution"
    },
    {
        "text": "5"
    },
    {
        "text": "State A is not comped as it does not define a `compensatedBy` state"
    },
    {
        "text": "In our example, when compensation triggers,"
    },
    {
        "text": "the current workflow data is passed as input to the \"D1\" state, the first compensation state for our example"
    },
    {
        "text": "The states data output is then passed as states data input to \"B1\", and so on"
    },
    {
        "text": "states can still be \"active\", meaning they still might have some async executions that are being performed"
    },
    {
        "text": "If compensation needs to performed on such still active states, the state execution must be first cancelled"
    },
    {
        "text": "After it is cancelled, compensation should be performed"
    },
    {
        "text": "`onErrors` property just like any other workflow states"
    },
    {
        "text": "In case of unrecoverable errors during their execution"
    },
    {
        "text": "Workflow Execution should be stopped, which is the same behavior as when not using compensation as well"
    },
    {
        "text": "In some cases our workflows are deployed and executed on runtimes and/or cloud platforms that expose some"
    },
    {
        "text": "execution limitations such as finite execution duration, finite number of workflow transitions, etc"
    },
    {
        "text": "Some runtimes, especially when dealing with stateful workflow orchestrations have a finite limit of"
    },
    {
        "text": "execution history log sizes, meaning that once a long-running workflow reaches these limits Workflow Executions is"
    },
    {
        "text": "likely to be forced to stop before reaching its completion"
    },
    {
        "text": "This can result in unexpected issues, especially with"
    },
    {
        "text": "mission-critical workflows"
    },
    {
        "text": "For those cases, the Serverless Workflow DSL provides a way to explicitly define stopping the current workflow"
    },
    {
        "text": "The end definitions `continueAs` can be either of type `string` or `object`"
    },
    {
        "text": "Defining this should stop the current Workflow Execution, and continue execution as a new workflow instance of the"
    },
    {
        "text": "workflow which defines the workflow id of \"myworkflowid\""
    },
    {
        "text": "The state data where this is define should"
    },
    {
        "text": "become the workflow data input of the workflow that is continuing the current Workflow Execution"
    },
    {
        "text": "Note that any defined `produceEvents` and `compensate` definitions should be honored before `continueAs` is applied"
    },
    {
        "text": "Continuing execution with `continueAs` can also be used inside sub-Workflow Executions, which brings its next use case"
    },
    {
        "text": "Workflows can invoke sub-workflows during their execution"
    },
    {
        "text": "In Serverless Workflow DSL, sub-workflows are invoked"
    },
    {
        "text": "Just like \"parent\" workflows, sub-workflow can also be long-running, and can run into the same type of runtime/serverless platform"
    },
    {
        "text": "limitations as previously discussed"
    },
    {
        "text": "As such they can also use `continueAs` to stop their current execution and continue it as"
    },
    {
        "text": "a new one of the same or different workflow id"
    },
    {
        "text": "Note that when a sub-workflow is invoked it can produce a result that is then merged into the parent workflow state data"
    },
    {
        "text": "This may bring up a question as to what happens when a sub-workflow calls `continueAs` in terms of what is returned as"
    },
    {
        "text": "result to of its invocation by the parent workflow"
    },
    {
        "text": "No matter how many times sub-workflow may use `continueAs`, to the parent workflow it should be as a single invocation is performed,"
    },
    {
        "text": "data returned by the invocation of the sub-workflow to the parent workflow"
    },
    {
        "text": "Versioning your workflow definitions is an important task to consider"
    },
    {
        "text": "Versions indicate"
    },
    {
        "text": "changes or updates of your workflow definitions to the associated execution runtimes"
    },
    {
        "text": "1"
    },
    {
        "text": "Top level workflow definition `version` property"
    },
    {
        "text": "Constants can only be accessed inside Workflow expressions via the `$CONST` variable"
    },
    {
        "text": "Runtimes must make `$CONST` available to expressions as a predefined variable"
    },
    {
        "text": "Workflow constants values should only contain static data, meaning that their value should not"
    },
    {
        "text": "contain Workflow expressions"
    },
    {
        "text": "Workflow constants data must be immutable"
    },
    {
        "text": "Secrets allow you access sensitive information, such as passwords, OAuth tokens, ssh keys, etc"
    },
    {
        "text": "If secrets are defined in a Workflow definition, runtimes must assure to provide their values"
    },
    {
        "text": "during Workflow execution"
    },
    {
        "text": "Runtimes must make `$SECRETS` available to expressions as a predefined variable"
    },
    {
        "text": "Metadata enables you to enrich the serverless workflow model with information beyond its core definitions"
    },
    {
        "text": "It is intended to be used by clients, such as tools and libraries, as well as users that find this information relevant"
    },
    {
        "text": "Metadata should not affect Workflow Execution"
    },
    {
        "text": "Implementations may choose to use metadata information or ignore it"
    },
    {
        "text": "Note, however, that using metadata to control Workflow Execution can lead to vendor-locked implementations that do not comply with the main goals of this specification, which is to be completely vendor-neutral"
    },
    {
        "text": "- UI tooling information such as sizing or scaling factors"
    },
    {
        "text": "- Build, release, or image information such as timestamps, release ids, git branches, PR numbers, etc"
    },
    {
        "text": "- Logging, monitoring, analytics, or audit repository information"
    },
    {
        "text": "- Labels used for organizing/indexing purposes, such as \"release\" \"stable\", \"track\", \"daily\", etc"
    },
    {
        "text": "Specify resources for the model"
    },
    {
        "text": "Configure authentication"
    },
    {
        "text": "Specify endpoint"
    },
    {
        "text": "Write logic for processing the result"
    },
    {
        "text": "Make sure that all objects, arrays, strings are closed"
    },
    {
        "text": "Check JSON string encoding and correct it to the correct form ]"
    },
    {
        "text": "\ufeff# Serverless Workflow Specification"
    },
    {
        "text": "The Serverless Workflow project defines a vendor-neutral and declarative workflow language,"
    },
    {
        "text": "targeting the Serverless computing technology domain"
    },
    {
        "text": "This document represents the current state of the specification"
    },
    {
        "text": "It includes all features so far released"
    },
    {
        "text": "as well as all features planned to be added in the next release"
    },
    {
        "text": "Workflows allow us to capture and organize business requirements in a unified manner"
    },
    {
        "text": "They can bridge the gap between how we express and model business logic"
    },
    {
        "text": "business logic and solutions"
    },
    {
        "text": "Selecting the appropriate workflow language for our business and technology domains is"
    },
    {
        "text": "a very important decision to be considered"
    },
    {
        "text": "Serverless Workflow focuses on defining a **vendor-neutral**, **platform-independent**, and **declarative** workflow"
    },
    {
        "text": "language that targets the serverless computing technology domain"
    },
    {
        "text": "It can be used to significantly bridge the gap between your unique business domain and the target technology domain"
    },
    {
        "text": "The lack of a common way to define and model workflows means that we must constantly re-learn"
    },
    {
        "text": "how to write them"
    },
    {
        "text": "This also limits the potential for common libraries, tooling and"
    },
    {
        "text": "infrastructure to aid workflow modeling and execution across different platforms"
    },
    {
        "text": "Portability as well as productivity that can be achieved from workflow orchestration is hindered overall"
    },
    {
        "text": "Serverless Workflow addresses the need for a community-driven, vendor-neutral and a platform-independent"
    },
    {
        "text": "workflow language specification that targets the serverless computing technology domain"
    },
    {
        "text": "Having and using a specification-based workflow language allows us to model our workflows once and deploy them"
    },
    {
        "text": "onto many different container/cloud platforms, expecting the same execution results"
    },
    {
        "text": "</p>"
    },
    {
        "text": "</p>"
    },
    {
        "text": "</p>"
    },
    {
        "text": "allow users to define additional, non-execution-related workflow information"
    },
    {
        "text": "This information can be used to improve"
    },
    {
        "text": "workflow performance"
    },
    {
        "text": "Following sections provide detailed descriptions of all parts of the Serverless Workflow language"
    },
    {
        "text": "A workflow definition is a JSON or YAML file that conforms to the Serverless Workflow specification DSL"
    },
    {
        "text": "A business solution can be composed of any number of related workflow definitions"
    },
    {
        "text": "Runtimes can initialize workflow definitions for some particular set of data inputs or events"
    },
    {
        "text": "A workflow instance represents a single Workflow Execution corresponding to the instructions provided by a"
    },
    {
        "text": "workflow definition"
    },
    {
        "text": "A workflow instance can be short or long-running"
    },
    {
        "text": "A single workflow instance"
    },
    {
        "text": "should be isolated, meaning it should not share state and data with other workflow instances"
    },
    {
        "text": "Workflow instances should be able to communicate with each other via events"
    },
    {
        "text": "Depending on their workflow definition, workflow instances can be short-lived or"
    },
    {
        "text": "can execute for days, weeks, or years"
    },
    {
        "text": "Each workflow instances should have its unique identifier, which should remain"
    },
    {
        "text": "unchanged throughout its execution"
    },
    {
        "text": "Workflow instances can be started providing some data input"
    },
    {
        "text": "This is described in detail in the"
    },
    {
        "text": "Workflow instances can also wait for examples to start their execution, which is the case"
    },
    {
        "text": "The workflow definition also explicitly defines when a workflow instance should be completed"
    },
    {
        "text": "For long-running workflow-executions, you can utilize the `keepActive` workflow property which"
    },
    {
        "text": "provides more control as to when exactly to terminate Workflow Execution"
    },
    {
        "text": "In cases where a"
    },
    {
        "text": "Workflow Execution should be continued as a new one, the DSL also provides the `continueAs` property which is described"
    },
    {
        "text": "Data flow and execution logic go hand in hand, meaning as Workflow Execution follows the workflow definition"
    },
    {
        "text": "</p>"
    },
    {
        "text": "States can also consume events as well as invoke services"
    },
    {
        "text": "These event payloads and service invocation results"
    },
    {
        "text": "input and output, action inputs and results, and event payloads"
    },
    {
        "text": "Multiple filters can be combined to gain high level of control of your workflow state data"
    },
    {
        "text": "You can find an example of that in"
    },
    {
        "text": "Data from consumed events,and action execution results are added/merged"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Workflow data input is passed to the workflow starting state as its data input"
    },
    {
        "text": "</p>"
    },
    {
        "text": "When a state completes its execution, its data output is passed to the state's data input it transitions to"
    },
    {
        "text": "</p>"
    },
    {
        "text": "Each Workflow Execution should produce a data output"
    },
    {
        "text": "The workflow data output is the data output of the last executed workflow state"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "State data filters can be used to filter the state's data input and output"
    },
    {
        "text": "The state data filters `input` property expression is applied when the workflow transitions to the current state and receives its data input"
    },
    {
        "text": "It can be used to select only data that is needed and disregard what is not needed"
    },
    {
        "text": "If `input` is not defined or does not select any parts of the state's data input, its data input is not filtered"
    },
    {
        "text": "The state data filter `output` property expression is applied right before the state transitions to the next state defined"
    },
    {
        "text": "It filters the state's data output to be passed as data input to the transitioning state"
    },
    {
        "text": "If the current state is the workflow end state, the filtered state's data output becomes the workflow data output"
    },
    {
        "text": "If `output` is not defined or does not select any parts of the state's data output, its data output is not filtered"
    },
    {
        "text": "Results of the `input` expression should become the state data input"
    },
    {
        "text": "Results of the `output` expression should become the state data output"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "For the first example, our state only cares about fruits data, and we want to disregard the vegetables"
    },
    {
        "text": "To do this"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</p>"
    },
    {
        "text": "For our second example, let's say that we are interested in the only vegetable \"veggie-like\""
    },
    {
        "text": "Here we have two ways of filtering our data, depending on if actions within our state need access to all vegetables, or"
    },
    {
        "text": "only the ones that are \"veggie-like\""
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "The states data input filter selects all the vegetables from the main data input"
    },
    {
        "text": "Once all actions have performed, before the state transition"
    },
    {
        "text": "</p>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "* Filter the state data to select only the data that can be used within function definition arguments using its `fromStateData` property"
    },
    {
        "text": "* Filter the action results to select only the result data that should be added/merged back into the state data"
    },
    {
        "text": "using its `results` property"
    },
    {
        "text": "* Select the part of state data which the action data results should be added/merged to"
    },
    {
        "text": "using the `toStateData` property"
    },
    {
        "text": "To give an example, let's say we have an action which returns a list of breads and pasta types"
    },
    {
        "text": "For our workflow, we are only interested into breads and not the pasta"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "\"baguette\","
    },
    {
        "text": "\"brioche\","
    },
    {
        "text": "\"rye\""
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "In this case, our `results` select the first bread and the second element of the pasta array"
    },
    {
        "text": "The `toStateData` expression then selects the `itemsToBuyAtStore` array of the state data to add/merge these results"
    },
    {
        "text": "```json"
    },
    {
        "text": "\"baguette\","
    },
    {
        "text": "\"spaghetti\""
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "In the case action results should not be added/merged to state data, we can set the `useResults` property to `false`"
    },
    {
        "text": "In this case, the `results` and `toStateData` properties should be ignored, and nothing is added/merged to state data"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Event data filters can be used to filter consumed event payloads"
    },
    {
        "text": "* Filter the event payload to select only the data that should be added/merged into the state data"
    },
    {
        "text": "using its `data` property"
    },
    {
        "text": "* Select the part of state data into which the event payload should be added/merged into"
    },
    {
        "text": "using the `toStateData` property"
    },
    {
        "text": "Allows event data to be filtered and added to or merged with the state data"
    },
    {
        "text": "All events have to be in the CloudEvents format"
    },
    {
        "text": "</p>"
    },
    {
        "text": "In the case event data/payload should not be added/merged to state data, we can set the `useData` property to `false`"
    },
    {
        "text": "In this case, the `data` and `toStateData` properties should be ignored, and nothing is added/merged to state data"
    },
    {
        "text": "a workflow with a single event state and show how data filters can be combined"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "],"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "The workflow data input then becomes the data input of the starting workflow state"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Here is a sample diagram showing our workflow, each numbered step on this diagram shows a certain defined point during"
    },
    {
        "text": "Workflow Execution at which data filters are invoked and correspond to the numbered items below"
    },
    {
        "text": "</p>"
    },
    {
        "text": "Workflow executes its starting state, namely the \"WaitForCustomerToArrive\" event state"
    },
    {
        "text": "The event state **stateDataFilter** is invoked to filter its data input"
    },
    {
        "text": "The filters \"input\" expression is evaluated and"
    },
    {
        "text": "selects only the \"greetings\" data"
    },
    {
        "text": "The rest of the state data input should be disregarded"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Its \"data\" expression selects the \"customer\" object from the events data"
    },
    {
        "text": "The \"toStateData\" expression"
    },
    {
        "text": "says that we should add/merge this selected event data to the state data in its \"customerInfo\" property"
    },
    {
        "text": "If this property"
    },
    {
        "text": "exists it should be merged, if it does not exist, one should be created"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Before the first action is executed, its actionDataFilter is invoked"
    },
    {
        "text": "Its \"fromStateData\" expression filters"
    },
    {
        "text": "the current state data to select from its data that should be available to action arguments"
    },
    {
        "text": "In this example"
    },
    {
        "text": "it selects the \"hello\" and \"customerInfo\" properties from the current state data"
    },
    {
        "text": "At this point the action is executed"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "After the action is executed, the actionDataFilter \"results\" expression is evaluated to filter the results returned from the action execution"
    },
    {
        "text": "In this case, we select only the \"greetingMessageResult\" element from the results"
    },
    {
        "text": "The action filters \"toStateData\" expression then defines that we want to add/merge this action result to"
    },
    {
        "text": "state data under the \"finalCustomerGreeting\" element"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "When our event state finishes its execution, the states \"stateDataFilter\" \"output\" filter expression is executed"
    },
    {
        "text": "to filter the state data to create the final state data output"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Event and action data filters can be used to give more details about this operation"
    },
    {
        "text": "to the state data"
    },
    {
        "text": "Merging should be applied to the entire state data JSON element"
    },
    {
        "text": "In case of event and action filters, their \"toStateData\" property can be defined to select a specific element"
    },
    {
        "text": "of the state data with which merging should be done against"
    },
    {
        "text": "If this element does not exist, a new one should"
    },
    {
        "text": "be created first"
    },
    {
        "text": "that you should not merge arrays with objects or objects with arrays etc"
    },
    {
        "text": "When merging elements of type object should be done by inserting all the key-value pairs from both objects into"
    },
    {
        "text": "a single combined object"
    },
    {
        "text": "If both objects contain a value for the same key, the object of the event data/action results"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Merging array types should be done by concatenating them into a larger array including unique elements of both arrays"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "Merging number types should be done by overwriting the data from events data/action results into the merging element of the state data"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Merging string types should be done by overwriting the data from events data/action results into the merging element of the state data"
    },
    {
        "text": "We can define if functions are invoked sync or async"
    },
    {
        "text": "Reference"
    },
    {
        "text": "define when the service operations should be invoked during Workflow Execution, as well as the data parameters"
    },
    {
        "text": "passed to them if needed"
    },
    {
        "text": "Note that with Serverless Workflow, we can also define invocation of services which are triggered via an event"
    },
    {
        "text": "Because of an overall lack of a common way to describe different services and their operations,"
    },
    {
        "text": "many workflow languages typically chose to define custom function definitions"
    },
    {
        "text": "This approach, however, often runs into issues such as lack of portability, limited capabilities, as well as"
    },
    {
        "text": "forcing non-workflow-specific information, such as service authentication, to be added inside the workflow language"
    },
    {
        "text": "To avoid these issues, the Serverless Workflow specification mandates that details about"
    },
    {
        "text": "OpenAPI is a language-agnostic standard that describes discovery of RESTful services"
    },
    {
        "text": "This allows Serverless Workflow language to describe RESTful services in a portable"
    },
    {
        "text": "way, as well as workflow runtimes to utilize OpenAPI tooling and APIs to invoke service operations"
    },
    {
        "text": "Here is an example function definition for a RESTful service operation"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "It can, as previously mentioned be referenced during Workflow Execution when the invocation of this service is desired"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "The Smartylighting Streetlights API allows you"
    },
    {
        "text": "to remotely manage the city lights"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```text"
    },
    {
        "text": "<URI_to_asyncapi_file>#<OperationId>"
    },
    {
        "text": "```"
    },
    {
        "text": "Also note that the referenced function definition type in this case must have the value `asyncapi`"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "Similar to defining invocations of operations on RESTful services, you can also use the workflow"
    },
    {
        "text": "a widely used RPC system"
    },
    {
        "text": "and the methods on those services that can be invoked"
    },
    {
        "text": "Let's look at an example of invoking a service method using RPC"
    },
    {
        "text": "For this example let's say we have the following"
    },
    {
        "text": "```text"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```text"
    },
    {
        "text": "<URI_to_proto_file>#<Service_Name>#<Service_Method_Name>"
    },
    {
        "text": "```"
    },
    {
        "text": "Note that the referenced function definition type in this case must be `rpc`"
    },
    {
        "text": "If you want to use GraphQL services, you can also invoke them using a similar syntax to the above methods"
    },
    {
        "text": "```graphql"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```text"
    },
    {
        "text": "<url_to_graphql_endpoint>#<literal \"mutation\" or \"query\">#<mutation_or_query_field>"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Expressions must be evaluated before executing the operation"
    },
    {
        "text": "Note that GraphQL Subscriptions are not supported at this time"
    },
    {
        "text": "Similar to defining invocations of operations on GraphQL services, you can also use workflow"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```text"
    },
    {
        "text": "<URI_to_odata_service>#<Entity_Set_Name>"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "In order to ensure compatibility of OData support across runtimes,"
    },
    {
        "text": "can also be used to define expressions that should be evaluated during Workflow Execution"
    },
    {
        "text": "Defining expressions as part of function definitions has the benefit of being able to reference"
    },
    {
        "text": "them by their logical name through workflow states where expression evaluation is required"
    },
    {
        "text": "Expression functions must declare their `type` parameter to be `expression`"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "Here we define two reusable expression functions"
    },
    {
        "text": "Expressions in Serverless Workflow"
    },
    {
        "text": "can be evaluated against the workflow, or workflow state data"
    },
    {
        "text": "Note that different data filters play a big role as to which parts of the"
    },
    {
        "text": "workflow data are being evaluated by the expressions"
    },
    {
        "text": "Reference the"
    },
    {
        "text": "```json"
    },
    {
        "text": "],"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "],"
    },
    {
        "text": "],"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "This state defines an invocation of the \"Increment Count Function\" expression function defined in our workflow definition"
    },
    {
        "text": "This triggers the evaluation of the defined expression"
    },
    {
        "text": "The input of this expression is by default the current state data"
    },
    {
        "text": "Just like with \"rest\", and \"rpc\" type functions, expression functions also produce a result"
    },
    {
        "text": "In this case"
    },
    {
        "text": "the result of the expression is just the number 1"
    },
    {
        "text": "``` json"
    },
    {
        "text": "```"
    },
    {
        "text": "Note that the used function definition type in this case must be `expression`"
    },
    {
        "text": "the specification"
    },
    {
        "text": "Some runtime implementations might support additional function types that extend the ones"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "When a custom function type is specified, the operation property value has a **custom format**, meaning that"
    },
    {
        "text": "its format is controlled by the runtime which provides the custom function type"
    },
    {
        "text": "```json"
    },
    {
        "text": "],"
    },
    {
        "text": "```"
    },
    {
        "text": "Note that custom function types are not portable across runtimes"
    },
    {
        "text": "Workflow model parameters can use expressions to select/manipulate workflow and/or state data"
    },
    {
        "text": "Note that different data filters play a big role as to which parts of the states data are to be used when the expression is"
    },
    {
        "text": "evaluated"
    },
    {
        "text": "Reference the"
    },
    {
        "text": "Serverless Workflow does not mandate the use of jq and it's possible to use an expression language"
    },
    {
        "text": "of your choice with the restriction that a single one must be used for all expressions"
    },
    {
        "text": "in a workflow definition"
    },
    {
        "text": "If a different expression language needs to be used, make sure to set the workflow"
    },
    {
        "text": "`expressionLang` property to identify it to runtime implementations"
    },
    {
        "text": "Note that using a non-default expression language could lower the portability of your workflow definitions"
    },
    {
        "text": "across multiple container/cloud platforms"
    },
    {
        "text": "are written using the default jq syntax"
    },
    {
        "text": "```text"
    },
    {
        "text": "```"
    },
    {
        "text": "Where `expression` can be either an in-line expression, or a reference to a"
    },
    {
        "text": "```text"
    },
    {
        "text": "```"
    },
    {
        "text": "Where `fn` is the namespace of the defined expression functions and"
    },
    {
        "text": "`myExprName` is the unique expression function name"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "We will get back to this function definition in just a bit, but now let's take a look at using"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "In this case our input parameter `applicantName` would be set to \"John Doe\""
    },
    {
        "text": "Expressions can also be used to select and manipulate state data, this is in particularly useful for"
    },
    {
        "text": "state data filters"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "As previously mentioned, expressions are evaluated against certain subsets of data"
    },
    {
        "text": "For example"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "which would set the workflow version to \"1"
    },
    {
        "text": "0"
    },
    {
        "text": "0\""
    },
    {
        "text": "Note that the workflow \"id\" property value is not allowed to use an expression"
    },
    {
        "text": "The workflow"
    },
    {
        "text": "definition \"id\" must be a constant value"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Defines the top-level structure of a serverless workflow model"
    },
    {
        "text": "Following figure describes the main workflow definition blocks"
    },
    {
        "text": "</p>"
    },
    {
        "text": "The `id` property defines the unique, domain-specific workflow identifier, for example \"orders\", \"payment\", etc"
    },
    {
        "text": "The `key` property defines the unique, domain-specific workflow identifier"
    },
    {
        "text": "It can be used when the `id` property is auto-generated by a content-management system for example"
    },
    {
        "text": "In these cases, you can specify the `key` property to be the domain-specific identifier of the workflow definition"
    },
    {
        "text": "The `id` and `key` properties are mutually exclusive, meaning you cannot define both"
    },
    {
        "text": "The `name` property is the workflow logical name"
    },
    {
        "text": "The `description` property can be used to give further information about the workflow"
    },
    {
        "text": "The `annotations` property defines a list of helpful terms describing the workflows intended purpose, subject areas, or other important qualities,"
    },
    {
        "text": "The `dataInputSchema` and `dataOutputSchema` properties can be used to validate input and output data against a defined JSON Schema"
    },
    {
        "text": "The `failOnValidationErrors` property determines what should be done when the workflow output does not match the provided schema"
    },
    {
        "text": "If `failOnValidationErrors` is true, an error should be thrown"
    },
    {
        "text": "If executed within a subprocess, that error can be be handled by the parent workflow"
    },
    {
        "text": "If `failOnValidationErrors` is false, the error should not be propagated"
    },
    {
        "text": "It is up to the implementor to warn the user about that fact"
    },
    {
        "text": "For example, printing a log"
    },
    {
        "text": "Both properties can be expressed as object or string type"
    },
    {
        "text": "If using object type, their `schema` property might be an URI, which points to the JSON schema used to validate the workflow data input, or it might be the JSON schema object"
    },
    {
        "text": "`failOnValidationErrors` is optional, default value is `true`"
    },
    {
        "text": "Example for Json schema reference"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Example for Json schema included in the workflow file"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "If using string type, then the string value is the external schema URI and `failOnValidationErrors` default value of `true` is assumed"
    },
    {
        "text": "Example using string type"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "The `secrets` property allows you to use sensitive information such as passwords, OAuth tokens, ssh keys, etc"
    },
    {
        "text": "inside your"
    },
    {
        "text": "Workflow expressions"
    },
    {
        "text": "It has two possible types, `string` or `array`"
    },
    {
        "text": "If `string` type, it is an URI pointing to a JSON or YAML document"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "The `constants` property can be used to define Workflow constants values"
    },
    {
        "text": "It has two possible types, `string` or `object`"
    },
    {
        "text": "If `string` type, it is an URI pointing to a JSON or YAML document"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "This property is not required"
    },
    {
        "text": "If not defined, the workflow starting state has to be"
    },
    {
        "text": "The `specVersion` property is used to set the Serverless Workflow specification release version"
    },
    {
        "text": "the workflow markup adheres to"
    },
    {
        "text": "its value should be set to `\"0"
    },
    {
        "text": "8\"`"
    },
    {
        "text": "The `expressionLang` property can be used to identify the expression language used for all expressions in"
    },
    {
        "text": "with an expression language / syntax other than the default"
    },
    {
        "text": "The `timeouts` property is used to define the default workflow timeouts for workflow, state, action, and branch"
    },
    {
        "text": "The `error` property is used to define checked errors that can be explicitly handled during Workflow Execution"
    },
    {
        "text": "Auth definitions can be used to define authentication that should be used to access"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "The `authRef` property is used to reference an authentication definition in"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "For more information about"
    },
    {
        "text": "The `keepActive` property allows you to change the default behavior of workflow instances"
    },
    {
        "text": "Setting the `keepActive` property to `true` allows you to change this default behavior in that a workflow instance"
    },
    {
        "text": "The `extensions` property can be used to define extensions for this workflow definition"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "Workflow states define building blocks of the Workflow Execution instructions"
    },
    {
        "text": "They define the"
    },
    {
        "text": "control flow logic instructions on what the workflow is supposed to do"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "],"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "- HighBodyTemperature"
    },
    {
        "text": "- HighBloodPressure"
    },
    {
        "text": "- HighRespirationRate"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Event states await one or more events and perform actions when they are received"
    },
    {
        "text": "If defined as the workflow starting state, the event state definition controls when the workflow"
    },
    {
        "text": "instances should be created"
    },
    {
        "text": "The `exclusive` property determines if the state should wait for any of the defined events in the `onEvents` array, or"
    },
    {
        "text": "</p>"
    },
    {
        "text": "If the Event state in this case is a workflow starting state, the occurrence of *any* of the defined events would start a new workflow instance"
    },
    {
        "text": "</p>"
    },
    {
        "text": "If the Event state in this case is a workflow starting state, the occurrence of *all* defined events would start a new"
    },
    {
        "text": "workflow instance"
    },
    {
        "text": "In order to consider only events that are related to each other, we need to set the `correlation` property in the workflow"
    },
    {
        "text": "extension context attributes"
    },
    {
        "text": "If the Event state is not a workflow starting state, the `timeout` property can be used to define the time duration from the"
    },
    {
        "text": "invocation of the event state"
    },
    {
        "text": "If the defined event, or events have not been received during this time,"
    },
    {
        "text": "The `timeouts` property can be used to define state specific timeout settings"
    },
    {
        "text": "Event states can define the"
    },
    {
        "text": "`stateExecTimeout`, `actionExecTimeout`, and `eventTimeout` properties"
    },
    {
        "text": "Note that `transition` and `end` properties are mutually exclusive, meaning that you cannot define both of them at the same time"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "],"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Operation state defines a set of actions to be performed in sequence or in parallel"
    },
    {
        "text": "Once all actions have been performed, a transition to another state can occur"
    },
    {
        "text": "The `timeouts` property can be used to define state specific timeout settings"
    },
    {
        "text": "Operation states can define"
    },
    {
        "text": "the `stateExecTimeout` and `actionExecTimeout` settings"
    },
    {
        "text": "For more information on Workflow timeouts reference"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "],"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "These are exclusive, meaning that a switch state can define one or the other condition type, but not both"
    },
    {
        "text": "At times multiple defined conditions can be evaluated to `true` by runtime implementations"
    },
    {
        "text": "Conditions defined first take precedence over conditions defined later"
    },
    {
        "text": "This is backed by the fact that arrays/sequences"
    },
    {
        "text": "Because A was defined first, its transition will be executed, not B's"
    },
    {
        "text": "In case of data-based conditions definition, switch state controls workflow transitions based on the states data"
    },
    {
        "text": "If no defined conditions can be matched, the state transitions is taken based on the `defaultCondition` property"
    },
    {
        "text": "This property can be either a `transition` to another workflow state, or an `end` definition meaning a workflow end"
    },
    {
        "text": "For event-based conditions, a switch state acts as a workflow wait state"
    },
    {
        "text": "It halts Workflow Execution"
    },
    {
        "text": "until one of the referenced events arrive, then making a transition depending on that event definition"
    },
    {
        "text": "If events defined in event-based conditions do not arrive before the states `eventTimeout` property expires,"
    },
    {
        "text": "state transitions are based on the defined `defaultCondition` property"
    },
    {
        "text": "The `timeouts` property can be used to define state specific timeout settings"
    },
    {
        "text": "Switch states can define the"
    },
    {
        "text": "`stateExecTimeout` setting"
    },
    {
        "text": "If `eventConditions` is defined, the switch state can also define the"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Sleep state"
    },
    {
        "text": "suspends Workflow Execution for a given time duration"
    },
    {
        "text": "The delay is defined in its `duration` property using the ISO 8601"
    },
    {
        "text": "duration format"
    },
    {
        "text": "Note that `transition` and `end` properties are mutually exclusive, meaning that you cannot define both of them at the same time"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "],"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Parallel state defines a collection of `branches` that are executed in parallel"
    },
    {
        "text": "A parallel state can be seen a state which splits up the current workflow instance execution path"
    },
    {
        "text": "into multiple ones, one for each branch"
    },
    {
        "text": "These execution paths are performed in parallel"
    },
    {
        "text": "and are joined back into the current execution path depending on the defined `completionType` parameter value"
    },
    {
        "text": "specify the `numCompleted` property to define this number"
    },
    {
        "text": "The `timeouts` property can be used to set state specific timeout settings"
    },
    {
        "text": "Parallel states can define the"
    },
    {
        "text": "`stateExecTimeout` and `branchExecTimeout` timeout settings"
    },
    {
        "text": "For more information on workflow timeouts"
    },
    {
        "text": "Note that `transition` and `end` properties are mutually exclusive, meaning that you cannot define both of them at the same time"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Inject state can be used to inject static data into state data input"
    },
    {
        "text": "Inject state does not perform any actions"
    },
    {
        "text": "It is very useful for debugging, for example, as you can test/simulate Workflow Execution with pre-set data that would typically"
    },
    {
        "text": "The inject state `data` property allows you to statically define a JSON object which gets added to the states data input"
    },
    {
        "text": "You can use the filter property to control the states data output to the transition state"
    },
    {
        "text": "Here is a typical example of how to use the inject state to add static data into its states data input, which then is passed"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "If the inject state already receives a data input from the previous transition state, the inject data should be merged"
    },
    {
        "text": "with its data input"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```text"
    },
    {
        "text": "```"
    },
    {
        "text": "This allows you to test if your workflow behaves properly for cases when there are people whose age is greater or equal 40"
    },
    {
        "text": "Note that `transition` and `end` properties are mutually exclusive, meaning that you cannot define both of them at the same time"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Each iteration of the ForEach state is by default executed in parallel by default"
    },
    {
        "text": "However, executing iterations sequentially is also possible by setting the value of the `mode` property to"
    },
    {
        "text": "`sequential`"
    },
    {
        "text": "The `mode` property defines if iterations should be done sequentially or in parallel"
    },
    {
        "text": "By default,"
    },
    {
        "text": "that can be executed at a time"
    },
    {
        "text": "To give an example, if the number of iterations is 55 and `batchSize`"
    },
    {
        "text": "is set to `10`, 10 iterations are to be executed at a time, meaning that the state would execute 10 iterations in parallel,"
    },
    {
        "text": "then execute the next batch of 10 iterations"
    },
    {
        "text": "After 5 such executions, the remaining 5 iterations are to be executed in the last batch"
    },
    {
        "text": "The `inputCollection` property is a workflow expression which selects an array in the states data"
    },
    {
        "text": "All iterations"
    },
    {
        "text": "are performed against data elements of this array"
    },
    {
        "text": "If this array does not exist, the runtime should throw"
    },
    {
        "text": "The `outputCollection` property is a workflow expression which selects an array in the state data where the results"
    },
    {
        "text": "of each iteration should be added to"
    },
    {
        "text": "If this array does not exist, it should be created"
    },
    {
        "text": "The `iterationParam` property defines the name of the iteration parameter passed to each iteration of the ForEach state"
    },
    {
        "text": "It should contain the unique element of the `inputCollection` array and made available to actions of the ForEach state"
    },
    {
        "text": "If `iterationParam` is not explicitly defined, runtimes should create one and populate it with the value of the unique"
    },
    {
        "text": "iteration parameter for each iteration of the ForEach state"
    },
    {
        "text": "The `actions` property defines actions to be executed in each state iteration"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "],"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "The ForEach state defines an `inputCollection` property which selects all orders that have the `completed` property set to `true`"
    },
    {
        "text": "For each element of the array selected by `inputCollection` a JSON object defined by `iterationParam` should be"
    },
    {
        "text": "created containing an unique element of `inputCollection` and passed as the data input to the parallel executed actions"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "The results of each parallel action execution are stored as elements in the state data array defined by the `outputCollection` property"
    },
    {
        "text": "The `timeouts` property can be used to set state specific timeout settings"
    },
    {
        "text": "ForEach states can define the"
    },
    {
        "text": "section"
    },
    {
        "text": "Note that `transition` and `end` properties are mutually exclusive, meaning that you cannot define both of them at the same time"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Serverless orchestration can at times require manual steps/decisions to be made"
    },
    {
        "text": "While some work performed"
    },
    {
        "text": "The Callback state allows you to explicitly model manual decision steps during Workflow Execution"
    },
    {
        "text": "The action property defines a function call that triggers an external activity/service"
    },
    {
        "text": "Once the action executes,"
    },
    {
        "text": "of the manual decision by the called service"
    },
    {
        "text": "Note that the called decision service is responsible for emitting the callback CloudEvent indicating the completion of the"
    },
    {
        "text": "decision and including the decision results as part of the event payload"
    },
    {
        "text": "This event must be correlated to the"
    },
    {
        "text": "workflow instance using the callback events context attribute defined in the `correlation` property of the"
    },
    {
        "text": "defined workflow state or completes Workflow Execution in case it is an end state"
    },
    {
        "text": "The callback event payload is merged with the Callback state data and can be filtered via the \"eventDataFilter\" definition"
    },
    {
        "text": "If the defined callback event has not been received during this time period, the state should transition to the next state or end Workflow Execution if it is an end state"
    },
    {
        "text": "The `timeouts` property defines state specific timeout settings"
    },
    {
        "text": "Callback states can define the"
    },
    {
        "text": "`stateExecTimeout`, `actionExecTimeout`, and `eventTimeout` properties"
    },
    {
        "text": "section"
    },
    {
        "text": "Note that `transition` and `end` properties are mutually exclusive, meaning that you cannot define both of them at the same time"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "The `name` property defines an unique name of the function definition"
    },
    {
        "text": "The `type` property defines the function type"
    },
    {
        "text": "Its value can be either `rest` or `expression`"
    },
    {
        "text": "Default value is `rest`"
    },
    {
        "text": "* If `type` is `rest`, a combination of the function/service OpenAPI definition document URI and the particular service operation that needs to be invoked, separated by a '#'"
    },
    {
        "text": "* If `type` is `asyncapi`, a combination of the AsyncApi definition document URI and the particular service operation that needs to be invoked, separated by a '#'"
    },
    {
        "text": "* If `type` is `rpc`, a combination of the gRPC proto document URI and the particular service name and service method name that needs to be invoked, separated by a '#'"
    },
    {
        "text": "* If `type` is `graphql`, a combination of the GraphQL schema definition URI and the particular service name and service method name that needs to be invoked, separated by a '#'"
    },
    {
        "text": "* If `type` is `odata`, a combination of the GraphQL schema definition URI and the particular service name and service method name that needs to be invoked, separated by a '#'"
    },
    {
        "text": "It is used to provide authentication info to access the resource defined in the `operation` property and/or to invoke the function"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "Note that using metadata for cases such as above heavily reduces the portability of your workflow markup"
    },
    {
        "text": "Function definitions themselves do not define data input parameters"
    },
    {
        "text": "Parameters can be"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Used to define events and their correlations"
    },
    {
        "text": "These events can be either consumed or produced during Workflow Execution as well"
    },
    {
        "text": "This is to assure consistency and portability of the events format used"
    },
    {
        "text": "The `name` property defines a single name of the event that is unique inside the workflow definition"
    },
    {
        "text": "This event name can be"
    },
    {
        "text": "property of the CloudEvent required attributes"
    },
    {
        "text": "The `kind` property defines this event as either `consumed` or `produced`"
    },
    {
        "text": "In terms of the workflow, this means it is either an event"
    },
    {
        "text": "Note that for `produced` event definitions, implementations must provide the value of the CloudEvent source attribute"
    },
    {
        "text": "Event correlation plays a big role in large event-driven applications"
    },
    {
        "text": "Correlating one or more events with a particular workflow instance"
    },
    {
        "text": "can be done by defining the event correlation rules within the `correlation` property"
    },
    {
        "text": "and the correlation definitions can use these attributes to define clear matching event correlation rules"
    },
    {
        "text": "Extension context attributes are not part of the event payload, so they are serialized the same way as other standard required attributes"
    },
    {
        "text": "This means that the event payload does not have to be inspected by implementations in order to read and evaluate the defined correlation rules"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "and"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "We can then define a correlation rule, through which all consumed events with the \"hospitalMonitorSystem\", and the \"com"
    },
    {
        "text": "hospital"
    },
    {
        "text": "patient"
    },
    {
        "text": "heartRateMonitor\""
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "should then also be associated with the same instance"
    },
    {
        "text": "You can also correlate multiple events together"
    },
    {
        "text": "In the following example, we assume that the workflow consumes two different event types,"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "all consumed events from this source and type must have the same \"patientId\" to be considered"
    },
    {
        "text": "The second rule"
    },
    {
        "text": "says that these events must all have a context attribute named \"department\" with the value of \"UrgentCare\""
    },
    {
        "text": "This allows developers to write orchestration workflows that are specifically targeted to patients that are in the hospital urgent care unit,"
    },
    {
        "text": "The `dataOnly` property deals with what Event data is accessible by the consuming Workflow states"
    },
    {
        "text": "If `false`, both Event payload and context attributes should be accessible"
    },
    {
        "text": "The `name` property defines the unique auth definition name"
    },
    {
        "text": "The `scheme` property defines the auth scheme to be used"
    },
    {
        "text": "Can be \"bearer\", \"basic\" or \"oauth2\""
    },
    {
        "text": "The `properties` property defines the auth scheme properties information"
    },
    {
        "text": "The Basic properties definition can have two types, either `string` or `object`"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Used to define event correlation rules"
    },
    {
        "text": "Only usable for `consumed` event definitions"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "- HighBodyTemperature"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Note that the values of `eventRefs` array must be unique"
    },
    {
        "text": "The `actionMode` property defines if the defined actions need to be performed sequentially or in parallel"
    },
    {
        "text": "The `actions` property defines a list of actions to be performed"
    },
    {
        "text": "When specifying the `onEvents` definition it is important to consider the Event states `exclusive` property,"
    },
    {
        "text": "because it determines how 'onEvents' is interpreted"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "1"
    },
    {
        "text": "If `exclusive` is set to `true`, the consumption of **either** the `HighBodyTemperature` or `HighBloodPressure` events will trigger action execution"
    },
    {
        "text": "2"
    },
    {
        "text": "If `exclusive` is set to `false`, the consumption of **both** the `HighBodyTemperature` and `HighBloodPressure` events will trigger action execution"
    },
    {
        "text": "</p>"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Actions specify invocations of services or other workflows during Workflow Execution"
    },
    {
        "text": "* Reference a sub-workflow invocation via the `subFlowRef` property"
    },
    {
        "text": "Note that `functionRef`, `eventRef`, and `subFlowRef` are mutually exclusive, meaning that only one of them can be"
    },
    {
        "text": "specified in a single action definition"
    },
    {
        "text": "The `name` property specifies the action name"
    },
    {
        "text": "In the event-based scenario a service, or a set of services we want to invoke"
    },
    {
        "text": "are not exposed via a specific resource URI for example, but can only be invoked via an event"
    },
    {
        "text": "referenced `produced` event via its `produceEventRef` property and a `consumed` event via its `consumeEventRef` property"
    },
    {
        "text": "The `sleep` property can be used to define time periods that Workflow Execution should sleep"
    },
    {
        "text": "The `retryRef` property references one of the defined workflow retries by it's unique name"
    },
    {
        "text": "If not set, the action"
    },
    {
        "text": "should be retried according to the default retry policy of the runtime implementation"
    },
    {
        "text": "For more information about workflow"
    },
    {
        "text": "The `nonRetryableErrors` property is a list that references one or more unique names of workflow error definitions"
    },
    {
        "text": "This is the list of known errors for which the action should not be retried for"
    },
    {
        "text": "It should be used only when the workflow top-level `autoRetries` property is set to `true`"
    },
    {
        "text": "The `retryableErrors` property is a list that references one or more unique names of workflow error definitions"
    },
    {
        "text": "This is the list of known errors for which the action should be retried for"
    },
    {
        "text": "It should be used only when the workflow top-level `autoRetries` property is set to `false`"
    },
    {
        "text": "If the `condition` property is not defined, the action is always performed"
    },
    {
        "text": "Often you want to group your workflows into small logical units that solve a particular business problem and can be reused in"
    },
    {
        "text": "multiple other workflow definitions"
    },
    {
        "text": "</p>"
    },
    {
        "text": "Reusable workflows are referenced by their `id` property via the SubFlow action `workflowId` parameter"
    },
    {
        "text": "For the simple case, `subFlowRef` can be a string containing the `id` of the sub-workflow to invoke"
    },
    {
        "text": "Each referenced workflow receives the SubFlow actions data as workflow data input"
    },
    {
        "text": "`FunctionRef` definition can have two types, either `string` or `object`"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Note that if used with `string` type, the invocation of the function is synchronous"
    },
    {
        "text": "If you need to define parameters in your `functionRef` definition, you can define"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "The `arguments` property defines the arguments that are to be passed to the referenced function"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "`sync`, meaning that Workflow Execution should wait until the function completes"
    },
    {
        "text": "If set to `async`, Workflow Execution should just invoke the function and should not wait until its completion"
    },
    {
        "text": "Note that in this case the action does not produce any results and the associated actions actionDataFilter as well as"
    },
    {
        "text": "its retry definition, if defined, should be ignored"
    },
    {
        "text": "In addition, functions that are invoked async do not propagate their errors to the associated action definition and the"
    },
    {
        "text": "workflow state, meaning that any errors that happen during their execution cannot be handled in the workflow states"
    },
    {
        "text": "onErrors definition"
    },
    {
        "text": "Note that errors raised during functions that are invoked async should not fail Workflow Execution"
    },
    {
        "text": "Allows defining invocation of a function via event"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "to be used as payload of the event referenced by `produceEventRef`"
    },
    {
        "text": "If it is of object type, you can define a custom object to be the event payload"
    },
    {
        "text": "to the trigger/produced event"
    },
    {
        "text": "If the event defined by the `consumeEventRef` property is not received in that set time, action invocation should raise an error"
    },
    {
        "text": "that can be handled in the states `onErrors` definition"
    },
    {
        "text": "In case the `consumeEventRef` is not defined, the `consumeEventTimeout` property is ignored"
    },
    {
        "text": "If set to `async`, Workflow Execution should just produce the trigger event and should not wait for the result event"
    },
    {
        "text": "its retry definition, if defined, should be ignored"
    },
    {
        "text": "workflow state, meaning that any errors that happen during their execution cannot be handled in the workflow states"
    },
    {
        "text": "onErrors definition"
    },
    {
        "text": "Note that errors raised during functions that are invoked sync or async in this case"
    },
    {
        "text": "should not fail Workflow Execution"
    },
    {
        "text": "`SubFlowRef` definition can have two types, namely `string` or `object`"
    },
    {
        "text": "If `string` type, it defines the unique id of the sub-workflow to be invoked"
    },
    {
        "text": "This short-hand definition can be used if sub-workflow lookup is done only by its `id`"
    },
    {
        "text": "property and not its `version` property"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "The `workflowId` property define the unique ID of the sub-workflow to be invoked"
    },
    {
        "text": "Usually, the workflow id should not be the same id of the workflow where the action is defined"
    },
    {
        "text": "Otherwise, it may occur undesired recurring calls to the same workflow"
    },
    {
        "text": "The `version` property defined the unique version of the sub-workflow to be invoked"
    },
    {
        "text": "If this property is defined, runtimes should match both the `id` and the `version` properties"
    },
    {
        "text": "defined in the sub-workflow definition"
    },
    {
        "text": "`sync`, meaning that Workflow Execution should wait until the subflow completes"
    },
    {
        "text": "If set to `async`, Workflow Execution should just invoke the subflow and not wait for its results"
    },
    {
        "text": "Note that in this case the action does not produce any results, and the associated actions actionDataFilter as well as"
    },
    {
        "text": "its retry definition, if defined, should be ignored"
    },
    {
        "text": "Subflows that are invoked async do not propagate their errors to the associated action definition and the"
    },
    {
        "text": "workflow state, meaning that any errors that happen during their execution cannot be handled in the workflow states"
    },
    {
        "text": "onErrors definition"
    },
    {
        "text": "Note that errors raised during subflows that are invoked async"
    },
    {
        "text": "should not fail Workflow Execution"
    },
    {
        "text": "The `onParentComplete` property defines how subflow execution that is invoked async should behave if the parent workflow"
    },
    {
        "text": "completes execution before the subflow completes its own execution"
    },
    {
        "text": "completes, execution of the subflow should be terminated"
    },
    {
        "text": "If it is set to `continue`, if the parent workflow completes, the subflow execution is allowed to continue its own execution"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Error definitions describe checked errors that can occur during Workflow Execution and how to handle them"
    },
    {
        "text": "The `errorRef` property references the unique workflow error definition"
    },
    {
        "text": "For more info on workflow error handling"
    },
    {
        "text": "The `errorRefs`property references at least one of the defined workflow error definitions"
    },
    {
        "text": "Can be used when `errorRef` is not used"
    },
    {
        "text": "Usable when you want to define multiple error refs for which the same transition"
    },
    {
        "text": "or end definition should be applied"
    },
    {
        "text": "For more info on workflow error handling"
    },
    {
        "text": "Note that the `errorRef` and `errorRefs` properties are mutually exclusive, meaning that you can only specify one or the other,"
    },
    {
        "text": "but not both at the same time"
    },
    {
        "text": "The `transition` property defines the transition to the next workflow state in cases when the defined"
    },
    {
        "text": "error happens during runtime execution"
    },
    {
        "text": "If `transition` is not defined you can also define the `end` property which will end Workflow Execution at that point"
    },
    {
        "text": "Note that the `transition` and `end` properties are mutually exclusive, meaning that you can only specify one or the other,"
    },
    {
        "text": "but not both at the same time"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "The `increment` property specifies a static duration which will be added to the delay between successive retries"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "in this example 10, 12, 14, and 16 seconds between retries"
    },
    {
        "text": "The `multiplier` property specifies the value by which the interval time is increased for each of the retry attempts"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "in this example 10, 20, 40, and 80 seconds between retries"
    },
    {
        "text": "If both `increment` and `multiplier` properties are defined, `increment` should be applied first and then"
    },
    {
        "text": "the `multiplier` when determining the next retry time"
    },
    {
        "text": "The `maxAttempts` property determines the maximum number of retry attempts allowed and is a positive integer value"
    },
    {
        "text": "The `jitter` property is important to prevent certain scenarios where clients"
    },
    {
        "text": "are retrying in sync, possibly causing or contributing to a transient failure"
    },
    {
        "text": "precisely because they're retrying at the same time"
    },
    {
        "text": "Adding a typically small,"
    },
    {
        "text": "bounded random amount of time to the period between retries serves the purpose"
    },
    {
        "text": "of attempting to prevent these retries from happening simultaneously, possibly"
    },
    {
        "text": "reducing total time to complete requests and overall congestion"
    },
    {
        "text": "How this value"
    },
    {
        "text": "is used in the exponential backoff algorithm is left up to implementations"
    },
    {
        "text": "`jitter` may be specified as a percentage relative to the total delay"
    },
    {
        "text": "Once the next retry attempt delay is calculated, we can apply `jitter` as a percentage value relative to this"
    },
    {
        "text": "calculated delay"
    },
    {
        "text": "For example, if your calculated delay for the next retry is six seconds, and we specify"
    },
    {
        "text": "Alternatively, `jitter` may be defined as an absolute value specified as an ISO"
    },
    {
        "text": "8601 duration"
    },
    {
        "text": "This way, the maximum amount of random time added is fixed and"
    },
    {
        "text": "will not increase as new attempts are made"
    },
    {
        "text": "The `maxDelay` property determines the maximum amount of delay that is desired between retry attempts, and is applied"
    },
    {
        "text": "after `increment`, `multiplier`, and `jitter`"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "`Transition` definition can have two types, either `string` or `object`"
    },
    {
        "text": "If `string`, it defines the name of the state to transition to"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "If you need to define additional parameters in your `transition` definition, you can define"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "The `nextState` property defines the name of the state to transition to next"
    },
    {
        "text": "The `produceEvents` property allows you to define a list of events to produce before the transition happens"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Switch state data conditions specify a data-based condition statement, which causes a transition to another"
    },
    {
        "text": "workflow state if evaluated to `true`"
    },
    {
        "text": "parts of the state data input"
    },
    {
        "text": "The condition must evaluate to `true` or `false`"
    },
    {
        "text": "If the condition is evaluated to `true`, you can specify either the `transition` or `end` definitions"
    },
    {
        "text": "to decide what to do, transition to another workflow state, or end Workflow Execution"
    },
    {
        "text": "Note that `transition` and `end`"
    },
    {
        "text": "definitions are mutually exclusive, meaning that you can specify either one or the other, but not both"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Switch state event conditions specify events, which the switch state must wait for"
    },
    {
        "text": "Each condition"
    },
    {
        "text": "can reference one workflow-defined event"
    },
    {
        "text": "Upon arrival of this event, the associated transition is taken"
    },
    {
        "text": "The `eventRef` property references a name of one of the defined workflow events"
    },
    {
        "text": "If the referenced event is received, you can specify either the `transition` or `end` definitions"
    },
    {
        "text": "to decide what to do, transition to another workflow state, or end Workflow Execution"
    },
    {
        "text": "The `eventDataFilter` property can be used to filter event data when it is received"
    },
    {
        "text": "Note that `transition` and `end`"
    },
    {
        "text": "definitions are mutually exclusive, meaning that you can specify either one or the other, but not both"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Each branch receives the same copy of the Parallel state's data input"
    },
    {
        "text": "The `timeouts` property can be used to set branch specific timeout settings"
    },
    {
        "text": "Parallel state branches can set the"
    },
    {
        "text": "`actionExecTimeout` and `branchExecTimeout` timeout properties"
    },
    {
        "text": "For more information on workflow timeouts reference the"
    },
    {
        "text": "Exceptions can occur during execution of Parallel state branches"
    },
    {
        "text": "By default, exceptions that are not handled within branches stop branch execution and are propagated"
    },
    {
        "text": "to the Parallel state and should be handled with its `onErrors` definition"
    },
    {
        "text": "are propagated to the parallel state"
    },
    {
        "text": "and can be handled with the parallel states `onErrors` definition"
    },
    {
        "text": "If the parallel states defines a subflow action, exceptions that occur during execution of the called workflow"
    },
    {
        "text": "can choose to handle exceptions on their own"
    },
    {
        "text": "All unhandled exceptions from the called workflow"
    },
    {
        "text": "execution however are propagated back to the parallel state and can be handled with the parallel states"
    },
    {
        "text": "`onErrors` definition"
    },
    {
        "text": "Note that once an error that is propagated to the parallel state from a branch and handled by the"
    },
    {
        "text": "parallel state should be considered as the workflow control flow logic has already moved to a different state"
    },
    {
        "text": "Can be either `string` or `object` type"
    },
    {
        "text": "If type string, it defines the name of the workflow starting state"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "In this case it's assumed that the `schedule` property is not defined"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "Start definition explicitly defines how/when workflow instances should be created and what the workflow starting state is"
    },
    {
        "text": "The start definition can be either `string` or `object` type"
    },
    {
        "text": "If `string` type, it defines the name of the workflow starting state"
    },
    {
        "text": "If `object` type, it provides the ability to set the workflow starting state name, as well as the `schedule` property"
    },
    {
        "text": "The `stateName` property can be set to define the starting workflow state"
    },
    {
        "text": "If not specified, the first state"
    },
    {
        "text": "The `schedule` property allows to define scheduled workflow instance creation"
    },
    {
        "text": "Scheduled starts have two different choices"
    },
    {
        "text": "You can define a recurring time interval or cron-based schedule at which a workflow"
    },
    {
        "text": "One use case for cron-based scheduled starts is a workflow that performs periodical data batch processing"
    },
    {
        "text": "In this case we could use a cron definition"
    },
    {
        "text": "``` text"
    },
    {
        "text": "0 0/5 * * * ?"
    },
    {
        "text": "```"
    },
    {
        "text": "to define that a workflow instance from the workflow definition should be created every 5 minutes, starting at full hour"
    },
    {
        "text": "``` text"
    },
    {
        "text": "* * * * * - Create workflow instance at the top of every minute"
    },
    {
        "text": "0 * * * * - Create workflow instance at the top of every hour"
    },
    {
        "text": "0 */2 * * * - Create workflow instance every 2 hours"
    },
    {
        "text": "```"
    },
    {
        "text": "Defining a cron-based scheduled starts for the runtime implementations would mean that there needs to be an event service that issues"
    },
    {
        "text": "the needed events at the defined times to trigger workflow instance creation"
    },
    {
        "text": "Defining a start definition is not required"
    },
    {
        "text": "If it's not defined, the starting workflow"
    },
    {
        "text": "`Schedule` definition can have two types, either `string` or `object`"
    },
    {
        "text": "If `string` type, it defines time interval describing when the workflow instance should be automatically created"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "If you need to define the `cron` or the `timezone` parameters in your `schedule` definition, you can define"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "The `interval` property uses a derivative of ISO 8601 recurring time interval format to describe a series of consecutive time intervals for workflow instances to be automatically created at the start of"
    },
    {
        "text": "Unlike full ISO 8601, this derivative format does not allow expression of an explicit number of recurrences or identification of a series by the date and time at the start and end of its first time interval"
    },
    {
        "text": "instances will be automatically created every 2 hours starting from March 20th 2020 at 1pm UTC"
    },
    {
        "text": "to describe a repeating interval upon which a workflow instance should be created automatically"
    },
    {
        "text": "The `timezone` property is used to define a time zone name to evaluate the cron or interval expression against"
    },
    {
        "text": "If not specified, it should default"
    },
    {
        "text": "defining cron-based scheduled starts for the runtime implementations would mean that there needs to be an event service that issues"
    },
    {
        "text": "the needed events at the defined times to trigger workflow instance creation"
    },
    {
        "text": "`Cron` definition can have two types, either `string` or `object`"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "If you need to define the `validUntil` parameters in your `cron` definition, you can define"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "`validUntil` time is reached, the cron expression for instances creations of this workflow"
    },
    {
        "text": "should no longer be valid"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "This tells the runtime engine to create an instance of this workflow every hour"
    },
    {
        "text": "as defined by the `validUntil` property value"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "In this case it's assumed that the `terminate` property has its default value of `false`, and the `produceEvents`,"
    },
    {
        "text": "`compensate`, and `continueAs` properties are not defined"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "End definitions are used to explicitly define execution completion of a workflow instance or Workflow Execution path"
    },
    {
        "text": "define a stop of Workflow Execution"
    },
    {
        "text": "The `terminate` property, if set to `true`, completes the workflow instance execution, this any other active"
    },
    {
        "text": "execution paths"
    },
    {
        "text": "If a terminate end is reached inside a ForEach or Parallel state the entire workflow instance is terminated"
    },
    {
        "text": "by the workflow instance before workflow stops its execution"
    },
    {
        "text": "It's important to mention that if the workflow `keepActive` property is set to`true`,"
    },
    {
        "text": "the only way to complete execution of the workflow instance"
    },
    {
        "text": "is if Workflow Execution reaches a state that defines an end definition with `terminate` property set to `true`,"
    },
    {
        "text": "is reached"
    },
    {
        "text": "execution is completed"
    },
    {
        "text": "and worklow execution should continue as a new instance of a new workflow"
    },
    {
        "text": "When defined, it should be assumed that `terminate` is `true`"
    },
    {
        "text": "If `continueAs` is defined, and `terminate` is explicitly"
    },
    {
        "text": "before the Workflow Execution is stopped, and continued as a new workflow instance with the defined workflow id"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "The `eventRef` property must match the name of"
    },
    {
        "text": "The `data` property can have two types, object or string"
    },
    {
        "text": "If of string type, it is an expression that can select parts of state data"
    },
    {
        "text": "to be used as the event payload"
    },
    {
        "text": "If of object type, you can define a custom object to be the event payload"
    },
    {
        "text": "to the generated event"
    },
    {
        "text": "Being able to produce events when Workflow Execution completes or during state transition"
    },
    {
        "text": "allows for event-based orchestration communication"
    },
    {
        "text": "For example, completion of an orchestration workflow can notify other orchestration workflows to decide if they need to act upon"
    },
    {
        "text": "the produced event, or notify monitoring services of the current state of Workflow Execution, etc"
    },
    {
        "text": "It can be used to create very dynamic orchestration scenarios"
    },
    {
        "text": "Each state can define a `transition` definition that is used to determine which"
    },
    {
        "text": "state to transition to next"
    },
    {
        "text": "Implementers **must** use the unique State `name` property for determining the transition"
    },
    {
        "text": "Events can be produced during state transitions"
    },
    {
        "text": "The `produceEvents` property of the `transition` definitions allows you"
    },
    {
        "text": "For each of the produced events you can select what parts of state data to be the event payload"
    },
    {
        "text": "section for more information"
    },
    {
        "text": "Specifying additional properties, namely properties which are not defined by the specification"
    },
    {
        "text": "They allow you to enrich the workflow definition with custom information"
    },
    {
        "text": "Additional properties, just like workflow metadata, should not affect Workflow Execution"
    },
    {
        "text": "Implementations may choose to use additional properties or ignore them"
    },
    {
        "text": "It is recommended to use workflow metadata instead of additional properties in the workflow definition"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "In this example, we specify the `loglevel`, `environment`, and `category` additional properties"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Serverless Workflow language allows you to define `explicit` error handling, meaning you can define what should happen"
    },
    {
        "text": "in case of errors inside your workflow model rather than some generic error handling entity"
    },
    {
        "text": "This allows error handling to become part of your orchestration activities and as such part of your business problem"
    },
    {
        "text": "solutions"
    },
    {
        "text": "The idea behind the way Serverless Workflow defines error handling is that workflows should only fail due to unknown bugs"
    },
    {
        "text": "during execution"
    },
    {
        "text": "In general, you should always write your workflows so that they do not fail on any known failures"
    },
    {
        "text": "Each workflow state can define error handling, which is related only to errors that may arise during its"
    },
    {
        "text": "execution"
    },
    {
        "text": "Error handling defined in one state cannot be used to handle errors that happened during execution of another state"
    },
    {
        "text": "during Workflow Execution"
    },
    {
        "text": "Unknown errors that may arise during workflow state execution that are not explicitly handled within the workflow definition"
    },
    {
        "text": "should be reported by runtime implementations and halt Workflow Execution"
    },
    {
        "text": "Within workflow definitions, errors defined are `domain specific`, meaning they are defined within"
    },
    {
        "text": "For example, we can define errors such as \"Order not found\", or \"Item not in inventory\", rather than having to"
    },
    {
        "text": "might make little to no sense to our specific problem domain, as well as may not be portable across various runtime implementations"
    },
    {
        "text": "In addition to the domain specific error name, users have the option to also add an optional error code"
    },
    {
        "text": "to help runtime implementations with mapping defined errors to concrete underlying technical ones"
    },
    {
        "text": "to concrete technical errors that arise during Workflow Execution"
    },
    {
        "text": "Known workflow errors, that we know we need to handle during Workflow Execution should be defined in"
    },
    {
        "text": "the workflow top-level 'errors' property"
    },
    {
        "text": "This property can be either a string type, meaning it can reference"
    },
    {
        "text": "a reusable JSON or Yaml definition file including the error definitions, or it can have an array type where you can"
    },
    {
        "text": "define these checked errors in-line in your workflow definition"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "information"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "These defined errors can then be referenced by their unique name in both states `onErrors` definitions as well as in"
    },
    {
        "text": "actions `nonRetryableErrors` and `retryableErrors` properties"
    },
    {
        "text": "Retries allow workflows to deal with intermittent failures of services they are trying to invoke"
    },
    {
        "text": "services and continue execution after they are fixed"
    },
    {
        "text": "Retries are important for both short-lived and long-lived workflows, as well as in both stateless and stateful"
    },
    {
        "text": "scenarios"
    },
    {
        "text": "Which retry option the workflow should use by default is defined via the workflow top-level `autoRetries` property"
    },
    {
        "text": "Regardless of the chosen retries option, note that workflows in general should be designed to not fail"
    },
    {
        "text": "Workflows should be able to recover from intermittent failures"
    },
    {
        "text": "The next sections provide more details to each action retry option"
    },
    {
        "text": "This is the default option when the workflow top-level `autoRetries` property is not specified or is set to `false`"
    },
    {
        "text": "This retry options is suited for stateless / short-running workflows where retries should be performed when specifically"
    },
    {
        "text": "Workflow Execution should fail"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "- SomeErrorOne"
    },
    {
        "text": "- SomeErrorTwo"
    },
    {
        "text": "- SomeErrorTwo"
    },
    {
        "text": "- SomeErrorThree"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "Each action can define the retry strategy it wants to use"
    },
    {
        "text": "If it does not define one, the action is in this case not retries"
    },
    {
        "text": "Actions can define a list of known errors in its `retryableErrors` array"
    },
    {
        "text": "If defined, then the action should be retried"
    },
    {
        "text": "In our example, \"MyFirstFunction\" invocation should be retried according to the \"FirstRetryStrategy\" policy only on known errors"
    },
    {
        "text": "\"SomeErrorOne\" and \"SomeErrorTwo\""
    },
    {
        "text": "`onErrors` definition"
    },
    {
        "text": "Workflow Execution should fail"
    },
    {
        "text": "This is the option used when the workflow top-level `autoRetries` property is set to `true`"
    },
    {
        "text": "Automatic retries are well suited to long-running and stateful workflow orchestrations"
    },
    {
        "text": "It allows workflows"
    },
    {
        "text": "to recover from failures thus providing more resilience"
    },
    {
        "text": "There is a possible cost associated with automatic retries"
    },
    {
        "text": "in terms of resource and computing power utilization"
    },
    {
        "text": "errors"
    },
    {
        "text": "This means that you do not have to define a retry strategy for actions for them to have retried, it's included by default"
    },
    {
        "text": "Users can still define a custom retry strategy for each action via the `retryRef` property"
    },
    {
        "text": "If a retry strategy is not defined, a default retry strategy should be used"
    },
    {
        "text": "* `maxAttempts` to be `unlimited`, meaning that the action should be retried indefinitely until successful"
    },
    {
        "text": "* `delay` to be set to one second, meaning that there is a one second delay between action retries"
    },
    {
        "text": "* `multiplier` to be set to two meaning that the delay should be multiplied by two for each retry attempt"
    },
    {
        "text": "Runtimes should document their default retry strategy to users, so it's clear which"
    },
    {
        "text": "property values they are using for the default"
    },
    {
        "text": "This is done via the actions `nonRetryableErrors` property"
    },
    {
        "text": "If a known error happens during action execution"
    },
    {
        "text": "which is included in the `nonRetryableErrors` property array, that action should not be retried and the error"
    },
    {
        "text": "then should be handled in the workflow states `onErrors` property"
    },
    {
        "text": "Let's take a look at an examples of defining retries when using the automatic retries option"
    },
    {
        "text": "This example assumes that the workfow top level `autoRetries` property is set to `true`"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "- SomeErrorOne"
    },
    {
        "text": "- SomeErrorTwo"
    },
    {
        "text": "- SomeErrorTwo"
    },
    {
        "text": "- SomeErrorThree"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "In our example the first action named `MyFirstFunction` is going to be retried according to the `FirstRetryStrategy`"
    },
    {
        "text": "retry policy"
    },
    {
        "text": "The seconds action named `MySecondFunction` is going to be retried according to the `SecondRetryStrategy`"
    },
    {
        "text": "retry policy"
    },
    {
        "text": "The third action named `MyThirdFunction` is going to retried according to the default runtime retry policy"
    },
    {
        "text": "The fourth action named `MyFourthFunction` is going to be retried according to the `DoNotRetryStrategy`"
    },
    {
        "text": "retry policy which has the `maxAttempts` property set to `1`, meaning that this action will not be retried"
    },
    {
        "text": "1"
    },
    {
        "text": "Workflow execution"
    },
    {
        "text": "2"
    },
    {
        "text": "State execution"
    },
    {
        "text": "3"
    },
    {
        "text": "Action execution"
    },
    {
        "text": "4"
    },
    {
        "text": "Branch execution"
    },
    {
        "text": "5"
    },
    {
        "text": "Event consumption time"
    },
    {
        "text": "The specification allows for timeouts to be defined on the top-level workflow definition, as well as"
    },
    {
        "text": "in each of the workflow state definitions"
    },
    {
        "text": "Note that the timeout settings defined in states, and state branches overwrite the top-level"
    },
    {
        "text": "workflow definition for state, action and branch execution"
    },
    {
        "text": "If they are not defined, then the top-level"
    },
    {
        "text": "timeout settings should take in effect"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "This top-level workflow timeout setting defines that the maximum execution time of all defined workflow states"
    },
    {
        "text": "is two seconds each"
    },
    {
        "text": "Now let's say that we have worfklow states \"A\" and \"B\""
    },
    {
        "text": "State \"A\" does not define a timeout definition, but state"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Since state \"A\" does not overwrite the top-level `stateExecTimeout`, its execution timeout should be inherited from"
    },
    {
        "text": "the top-level timeout definition"
    },
    {
        "text": "On the other hand, state \"B\" does define it's own `stateExecTimeout`, in which case it would overwrite the default"
    },
    {
        "text": "setting, meaning that it would its execution time has a max limit of ten seconds"
    },
    {
        "text": "Defining timeouts is not mandatory, meaning that if not defined, all the timeout settings should be assumed to"
    },
    {
        "text": "be \"unlimited\""
    },
    {
        "text": "Note that the defined Workflow Execution timeout has precedence over all other defined timeouts"
    },
    {
        "text": "Just to give an extreme example, let's say we define the Workflow Execution timeout to ten seconds,"
    },
    {
        "text": "and the state execution timeout to twenty seconds"
    },
    {
        "text": "In this case if the Workflow Execution timeout is reached"
    },
    {
        "text": "it should follow the rules of Workflow Execution timeout and end Workflow Execution, no matter what the"
    },
    {
        "text": "state execution time has been set to"
    },
    {
        "text": "Workflow timeouts are defined with the top-level `timeouts` property"
    },
    {
        "text": "It can have two types, `string` and `object`"
    },
    {
        "text": "If `string` type it defines an URI that points to a Json or Yaml file containing the workflow timeout definitions"
    },
    {
        "text": "The `eventTimeout` property defines the maximum amount of time to wait to consume defined events"
    },
    {
        "text": "If not specified it should default to"
    },
    {
        "text": "\"unlimited\""
    },
    {
        "text": "The `branchExecTimeout` property defines the maximum execution time for a single branch"
    },
    {
        "text": "If not specified it should default to"
    },
    {
        "text": "\"unlimited\""
    },
    {
        "text": "The `actionExecTimeout` property defines the maximum execution time for a single actions definition"
    },
    {
        "text": "If not specified it should default to"
    },
    {
        "text": "\"unlimited\""
    },
    {
        "text": "Note that an action definition can include multiple actions"
    },
    {
        "text": "The `stateExecTimeout` property defines the maximum execution time for a single workflow state"
    },
    {
        "text": "If not specified it should default to"
    },
    {
        "text": "\"unlimited\""
    },
    {
        "text": "The `workflowExecTimeout` property defines the Workflow Execution timeout"
    },
    {
        "text": "It is defined using the ISO 8601 duration format"
    },
    {
        "text": "If not defined, the Workflow Execution should be given \"unlimited\""
    },
    {
        "text": "amount of time to complete"
    },
    {
        "text": "`workflowExecTimeout` can have two possibly types, either `string` or `object`"
    },
    {
        "text": "If `string` type, it defines the maximum Workflow Execution time"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "The `duration` property defines the time duration of the execution timeout"
    },
    {
        "text": "Once a workflow instance is created,"
    },
    {
        "text": "and the amount of the defined time is reached, the workflow instance should be terminated"
    },
    {
        "text": "The `interrupt` property defines if the currently running instance should be allowed to finish its current"
    },
    {
        "text": "execution flow before it needs to be terminated"
    },
    {
        "text": "If set to `true`, the current instance execution should stop immediately"
    },
    {
        "text": "The `runBefore` property defines a name of a workflow state to be executed before workflow instance is terminated"
    },
    {
        "text": "at last one must define it"
    },
    {
        "text": "Runtime implementations should raise compile time / parsing exceptions if any of the rules mentioned above are"
    },
    {
        "text": "not obeyed in the workflow definition"
    },
    {
        "text": "All workflow states except Sleep and Inject States can define the `timeouts` property and can define different timeout"
    },
    {
        "text": "settings depending on their state type"
    },
    {
        "text": "timeout settings are available for each state type"
    },
    {
        "text": "Workflow states timeouts cannot define the `workflowExecTimeout` property"
    },
    {
        "text": "Workflow states can set their `stateExecTimeout` property inside the `timeouts` definition"
    },
    {
        "text": "It must be a duration that's greater than zero and defines the total state execution timeout"
    },
    {
        "text": "When this timeout is reached, state execution"
    },
    {
        "text": "should be stopped and can be handled as a timeout error in the states `onErrors` definition"
    },
    {
        "text": "can overwrite this setting to define its own branch execution timeout"
    },
    {
        "text": "If a branch does not define this timeout property, it should be inherited from it's state definition branch timeout setting"
    },
    {
        "text": "If its state does not define it either, it should be inherited from the top-level workflow branch timeout settings"
    },
    {
        "text": "The Event state `timeouts` property can be used to"
    },
    {
        "text": "specify state specific timeout settings"
    },
    {
        "text": "For event state it can contain the `eventTimeout` property"
    },
    {
        "text": "which is defined using the ISO 8601 data and time format"
    },
    {
        "text": "You can specify for example \"PT15M\" to represent 15 minutes or \"P2DT3H4M\" to represent 2 days, 3 hours and 4 minutes"
    },
    {
        "text": "`eventTimeout` values should always be represented as durations and not as specific time intervals"
    },
    {
        "text": "The `eventTimeout` property needs to be described in detail for Event states as it depends on whether or not the Event state is a workflow starting state or not"
    },
    {
        "text": "If the Event state is a workflow starting state, incoming events may trigger workflow instances"
    },
    {
        "text": "In this case,"
    },
    {
        "text": "If the `exclusive` property is set to `false`, in this case, the defined `eventTimeout` represents the time"
    },
    {
        "text": "```json"
    },
    {
        "text": "\"ExampleEvent1\","
    },
    {
        "text": "\"ExampleEvent2\""
    },
    {
        "text": "],"
    },
    {
        "text": "]"
    },
    {
        "text": "],"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "The first `eventTimeout` would start once any of the referenced events are consumed"
    },
    {
        "text": "If the second event does not occur within"
    },
    {
        "text": "the defined eventTimeout, no workflow instance should be created"
    },
    {
        "text": "If the event state is not a workflow starting state, the `eventTimeout` property is relative to the time when the"
    },
    {
        "text": "are not satisfied within the defined timeout period, the event state should transition to the next state or end the workflow"
    },
    {
        "text": "instance in case it is an end state without performing any actions"
    },
    {
        "text": "Compensation deals with undoing or reversing the work of one or more states which have"
    },
    {
        "text": "already successfully completed"
    },
    {
        "text": "For example, let's say that we have charged a customer $100 for an item"
    },
    {
        "text": "purchase"
    },
    {
        "text": "In the case customer laster on decides to cancel this purchase we need to undo it"
    },
    {
        "text": "One way of"
    },
    {
        "text": "doing that is to credit the customer $100"
    },
    {
        "text": "It's important to understand that compensation with workflows is not the same as for example rolling back"
    },
    {
        "text": "might involve multiple logical steps and thus is part of the overall business logic that must be"
    },
    {
        "text": "defined within the workflow itself"
    },
    {
        "text": "To explain this let's use our previous example and say that when our"
    },
    {
        "text": "customer made the item purchase, our workflow has sent her/him a confirmation email"
    },
    {
        "text": "In the case, to"
    },
    {
        "text": "compensate this purchase, we cannot just \"undo\" the confirmation email sent"
    },
    {
        "text": "Instead, we want to"
    },
    {
        "text": "send a second email to the customer which includes purchase cancellation information"
    },
    {
        "text": "Compensation in Serverless Workflow must be explicitly defined by the workflow control flow logic"
    },
    {
        "text": "It cannot be dynamically triggered by initial workflow data, event payloads, results of service invocations, or"
    },
    {
        "text": "errors"
    },
    {
        "text": "Each workflow state can define how it should be compensated via its `compensatedBy` property"
    },
    {
        "text": "* They must define the `usedForCompensation` property and set it to `true`"
    },
    {
        "text": "* They can transition only to states which also have their `usedForCompensation` property set to `true`"
    },
    {
        "text": "Runtime implementations should raise compile time / parsing exceptions if any of the rules mentioned above are"
    },
    {
        "text": "not obeyed in the workflow definition"
    },
    {
        "text": "Let's take a look at an example workflow state which defines its `compensatedBy` property, and the compensation"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "\"NewPurchase\""
    },
    {
        "text": "],"
    },
    {
        "text": "]"
    },
    {
        "text": "],"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "- NewPurchase"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "debits the customer and sends them a purchase confirmation email"
    },
    {
        "text": "It defines that it's compensated by the"
    },
    {
        "text": "purchase amount to customer and sends them a purchase cancellation email"
    },
    {
        "text": "As previously mentioned, compensation must be explicitly triggered by the workflows control-flow logic"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "Transitions can trigger compensations by specifying the `compensate` property and setting it to `true`"
    },
    {
        "text": "workflow compensation must be performed"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "```"
    },
    {
        "text": "</td>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</table>"
    },
    {
        "text": "End definitions can trigger compensations by specifying the `compensate` property and setting it to `true`"
    },
    {
        "text": "This means that before workflow finishes its execution workflow compensation must be performed"
    },
    {
        "text": "Note that"
    },
    {
        "text": "in case when the end definition has its `produceEvents` property set, compensation must be performed before"
    },
    {
        "text": "producing the specified events and ending Workflow Execution"
    },
    {
        "text": "In the case the end definition has a `continueAs` property defined, compensation must be performed before"
    },
    {
        "text": "Workflow Execution continues as a new workflow invocation"
    },
    {
        "text": "In the case where the end definition has both `produceEvents`, and `continueAs` compensation is performed first,"
    },
    {
        "text": "then the event should be produced, and then the workflow should continue its execution as a new workflow invocation"
    },
    {
        "text": "Now that we have seen how to define and trigger compensation, we need to go into details on how compensation should be executed"
    },
    {
        "text": "Compensation is always done in sequential order, and should not be executed in parallel"
    },
    {
        "text": "</p>"
    },
    {
        "text": "In this example lets say our Workflow Execution is at the \"End\" state which defines the `compensate` property to `true`"
    },
    {
        "text": "as shown in the previous section"
    },
    {
        "text": "States with a red border, namely \"A\", \"B\", \"D\" and \"E\" are states which have so far"
    },
    {
        "text": "been executed successfully"
    },
    {
        "text": "State \"C\" has not been executed during Workflow Execution in our example"
    },
    {
        "text": "1"
    },
    {
        "text": "State \"E\" is not compensated as it does not define a `compensatedBy` state"
    },
    {
        "text": "2"
    },
    {
        "text": "State \"D\" is compensated by executing compensation \"D1\""
    },
    {
        "text": "3"
    },
    {
        "text": "State \"B\" is compensated by executing \"B1\" and then \"B1-2\""
    },
    {
        "text": "4"
    },
    {
        "text": "State C is not compensated as it was never active during Workflow Execution"
    },
    {
        "text": "5"
    },
    {
        "text": "State A is not comped as it does not define a `compensatedBy` state"
    },
    {
        "text": "</p>"
    },
    {
        "text": "In our example, when compensation triggers,"
    },
    {
        "text": "the current workflow data is passed as input to the \"D1\" state, the first compensation state for our example"
    },
    {
        "text": "The states data output is then passed as states data input to \"B1\", and so on"
    },
    {
        "text": "states can still be \"active\", meaning they still might have some async executions that are being performed"
    },
    {
        "text": "If compensation needs to performed on such still active states, the state execution must be first cancelled"
    },
    {
        "text": "After it is cancelled, compensation should be performed"
    },
    {
        "text": "`onErrors` property just like any other workflow states"
    },
    {
        "text": "In case of unrecoverable errors during their execution"
    },
    {
        "text": "Workflow Execution should be stopped, which is the same behavior as when not using compensation as well"
    },
    {
        "text": "In some cases our workflows are deployed and executed on runtimes and/or cloud platforms that expose some"
    },
    {
        "text": "execution limitations such as finite execution duration, finite number of workflow transitions, etc"
    },
    {
        "text": "Some runtimes, especially when dealing with stateful workflow orchestrations have a finite limit of"
    },
    {
        "text": "execution history log sizes, meaning that once a long-running workflow reaches these limits Workflow Executions is"
    },
    {
        "text": "likely to be forced to stop before reaching its completion"
    },
    {
        "text": "This can result in unexpected issues, especially with"
    },
    {
        "text": "mission-critical workflows"
    },
    {
        "text": "For those cases, the Serverless Workflow DSL provides a way to explicitly define stopping the current workflow"
    },
    {
        "text": "The end definitions `continueAs` can be either of type `string` or `object`"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Defining this should stop the current Workflow Execution, and continue execution as a new workflow instance of the"
    },
    {
        "text": "workflow which defines the workflow id of \"myworkflowid\""
    },
    {
        "text": "The state data where this is define should"
    },
    {
        "text": "become the workflow data input of the workflow that is continuing the current Workflow Execution"
    },
    {
        "text": "Note that any defined `produceEvents` and `compensate` definitions should be honored before `continueAs` is applied"
    },
    {
        "text": "Continuing execution with `continueAs` can also be used inside sub-Workflow Executions, which brings its next use case"
    },
    {
        "text": "Workflows can invoke sub-workflows during their execution"
    },
    {
        "text": "In Serverless Workflow DSL, sub-workflows are invoked"
    },
    {
        "text": "Just like \"parent\" workflows, sub-workflow can also be long-running, and can run into the same type of runtime/serverless platform"
    },
    {
        "text": "limitations as previously discussed"
    },
    {
        "text": "As such they can also use `continueAs` to stop their current execution and continue it as"
    },
    {
        "text": "a new one of the same or different workflow id"
    },
    {
        "text": "Note that when a sub-workflow is invoked it can produce a result that is then merged into the parent workflow state data"
    },
    {
        "text": "This may bring up a question as to what happens when a sub-workflow calls `continueAs` in terms of what is returned as"
    },
    {
        "text": "result to of its invocation by the parent workflow"
    },
    {
        "text": "No matter how many times sub-workflow may use `continueAs`, to the parent workflow it should be as a single invocation is performed,"
    },
    {
        "text": "data returned by the invocation of the sub-workflow to the parent workflow"
    },
    {
        "text": "Versioning your workflow definitions is an important task to consider"
    },
    {
        "text": "Versions indicate"
    },
    {
        "text": "changes or updates of your workflow definitions to the associated execution runtimes"
    },
    {
        "text": "1"
    },
    {
        "text": "Top level workflow definition `version` property"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Constants can only be accessed inside Workflow expressions via the `$CONST` variable"
    },
    {
        "text": "Runtimes must make `$CONST` available to expressions as a predefined variable"
    },
    {
        "text": "```json"
    },
    {
        "text": ","
    },
    {
        "text": "],"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "Workflow constants values should only contain static data, meaning that their value should not"
    },
    {
        "text": "contain Workflow expressions"
    },
    {
        "text": "Workflow constants data must be immutable"
    },
    {
        "text": "Secrets allow you access sensitive information, such as passwords, OAuth tokens, ssh keys, etc"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "If secrets are defined in a Workflow definition, runtimes must assure to provide their values"
    },
    {
        "text": "during Workflow execution"
    },
    {
        "text": "Runtimes must make `$SECRETS` available to expressions as a predefined variable"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "Secrets are immutable, meaning that workflow expressions are not allowed to change their values"
    },
    {
        "text": "Metadata enables you to enrich the serverless workflow model with information beyond its core definitions"
    },
    {
        "text": "It is intended to be used by clients, such as tools and libraries, as well as users that find this information relevant"
    },
    {
        "text": "Metadata should not affect Workflow Execution"
    },
    {
        "text": "Implementations may choose to use metadata information or ignore it"
    },
    {
        "text": "Note, however, that using metadata to control Workflow Execution can lead to vendor-locked implementations that do not comply with the main goals of this specification, which is to be completely vendor-neutral"
    },
    {
        "text": "```json"
    },
    {
        "text": "]"
    },
    {
        "text": "```"
    },
    {
        "text": "- UI tooling information such as sizing or scaling factors"
    },
    {
        "text": "- Build, release, or image information such as timestamps, release ids, git branches, PR numbers, etc"
    },
    {
        "text": "- Logging, monitoring, analytics, or audit repository information"
    },
    {
        "text": "- Labels used for organizing/indexing purposes, such as \"release\" \"stable\", \"track\", \"daily\", etc"
    },
    {
        "text": "```json"
    },
    {
        "text": "```"
    },
    {
        "text": "In this use case, a third-party service may require information from the caller for traceability purposes"
    },
    {
        "text": "The specification doesn't define any specific variable within the `WORKFLOW` bucket, but it's considered a reserved keyword"
    },
    {
        "text": "The workflow extension mechanism allows you to enhance your model definitions with additional information useful for"
    },
    {
        "text": "things like analytics, rate limiting, logging, simulation, debugging, tracing, etc"
    },
    {
        "text": "They enhance it with extra information that can be consumed by runtime systems or tooling and"
    },
    {
        "text": "evaluated with the end goal being overall workflow improvements in terms of time, cost, efficiency, etc"
    },
    {
        "text": "You can define extensions in your workflow definition using its top-level `extensions` property"
    },
    {
        "text": "For more information about this property, see the `extensions` property in the"
    },
    {
        "text": "Even tho users can define their own extensions, it is encouraged to use the ones provided by the specification"
    },
    {
        "text": "We also encourage users to contribute their extensions to the specification"
    },
    {
        "text": "That way they can be shared"
    },
    {
        "text": "with the rest of the community"
    },
    {
        "text": "If you have an idea for a new workflow extension, or would like to enhance an existing one,"
    },
    {
        "text": "please open an `New Extension Request` issue in this repository"
    },
    {
        "text": "You can find info how the Serverless Workflow language compares with"
    },
    {
        "text": "Serverless Workflow specification operates under the"
    },
    {
        "text": "\"schema\","
    },
    {
        "text": "\"failOnValidationErrors\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"id\","
    },
    {
        "text": "\"specVersion\","
    },
    {
        "text": "\"states\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"key\","
    },
    {
        "text": "\"specVersion\","
    },
    {
        "text": "\"states\""
    },
    {
        "text": "]"
    },
    {
        "text": "],"
    },
    {
        "text": "\"before\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"after\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"before\","
    },
    {
        "text": "\"after\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"expression\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"string\","
    },
    {
        "text": "\"object\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"workflowId\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"nextState\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"errorRef\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"errorRef\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"errorRefs\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"errorRefs\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"sequential\","
    },
    {
        "text": "\"parallel\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"eventRefs\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"functionRef\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"eventRef\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"subFlowRef\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"sync\","
    },
    {
        "text": "\"async\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"refName\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"string\","
    },
    {
        "text": "\"object\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"sync\","
    },
    {
        "text": "\"async\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"triggerEventRef\","
    },
    {
        "text": "\"resultEventRef\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"continue\","
    },
    {
        "text": "\"terminate\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"sync\","
    },
    {
        "text": "\"async\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"workflowId\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"actions\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"usedForCompensation\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"duration\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"duration\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"duration\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"onEvents\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"onEvents\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"sequential\","
    },
    {
        "text": "\"parallel\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"usedForCompensation\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"actions\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"actions\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"actions\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"allOf\","
    },
    {
        "text": "\"atLeast\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"number\","
    },
    {
        "text": "\"string\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"usedForCompensation\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"branches\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"branches\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"branches\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"eventConditions\","
    },
    {
        "text": "\"defaultCondition\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"dataConditions\","
    },
    {
        "text": "\"defaultCondition\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"eventRef\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"eventRef\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"condition\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"condition\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"usedForCompensation\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"data\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"data\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"data\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"number\","
    },
    {
        "text": "\"string\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"sequential\","
    },
    {
        "text": "\"parallel\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"usedForCompensation\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"inputCollection\","
    },
    {
        "text": "\"actions\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"inputCollection\","
    },
    {
        "text": "\"actions\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"inputCollection\","
    },
    {
        "text": "\"actions\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"usedForCompensation\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"action\","
    },
    {
        "text": "\"eventRef\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"action\","
    },
    {
        "text": "\"eventRef\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"action\","
    },
    {
        "text": "\"eventRef\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"stateName\","
    },
    {
        "text": "\"schedule\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"interval\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"cron\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"string\","
    },
    {
        "text": "\"object\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"eventRef\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"schema\","
    },
    {
        "text": "\"failOnValidationErrors\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"id\","
    },
    {
        "text": "\"specVersion\","
    },
    {
        "text": "\"states\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"key\","
    },
    {
        "text": "\"specVersion\","
    },
    {
        "text": "\"states\""
    },
    {
        "text": "]"
    },
    {
        "text": "],"
    },
    {
        "text": "\"before\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"after\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"before\","
    },
    {
        "text": "\"after\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"expression\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"string\","
    },
    {
        "text": "\"object\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"workflowId\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"nextState\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"errorRef\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"errorRef\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"errorRefs\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"errorRefs\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"sequential\","
    },
    {
        "text": "\"parallel\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"eventRefs\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"functionRef\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"eventRef\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"subFlowRef\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"sync\","
    },
    {
        "text": "\"async\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"refName\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"string\","
    },
    {
        "text": "\"object\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"sync\","
    },
    {
        "text": "\"async\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"triggerEventRef\","
    },
    {
        "text": "\"resultEventRef\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"continue\","
    },
    {
        "text": "\"terminate\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"sync\","
    },
    {
        "text": "\"async\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"workflowId\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"actions\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"usedForCompensation\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"duration\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"duration\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"duration\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"onEvents\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"onEvents\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"sequential\","
    },
    {
        "text": "\"parallel\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"usedForCompensation\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"actions\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"actions\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"actions\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"allOf\","
    },
    {
        "text": "\"atLeast\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"number\","
    },
    {
        "text": "\"string\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"usedForCompensation\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"branches\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"branches\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"branches\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"eventConditions\","
    },
    {
        "text": "\"defaultCondition\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"dataConditions\","
    },
    {
        "text": "\"defaultCondition\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"eventRef\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"eventRef\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"condition\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"condition\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"usedForCompensation\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"data\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"data\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"data\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"number\","
    },
    {
        "text": "\"string\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"sequential\","
    },
    {
        "text": "\"parallel\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"usedForCompensation\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"inputCollection\","
    },
    {
        "text": "\"actions\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"inputCollection\","
    },
    {
        "text": "\"actions\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"inputCollection\","
    },
    {
        "text": "\"actions\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"usedForCompensation\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"action\","
    },
    {
        "text": "\"eventRef\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"action\","
    },
    {
        "text": "\"eventRef\","
    },
    {
        "text": "\"end\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"name\","
    },
    {
        "text": "\"type\","
    },
    {
        "text": "\"action\","
    },
    {
        "text": "\"eventRef\","
    },
    {
        "text": "\"transition\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"stateName\","
    },
    {
        "text": "\"schedule\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"interval\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"cron\""
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\"string\","
    },
    {
        "text": "\"object\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"eventRef\""
    },
    {
        "text": "]"
    },
    {
        "text": "The switch state allows routing workflow execution based on data or events"
    },
    {
        "text": "Data-based Switch Details"
    },
    {
        "text": "condition - expression evaluated against state data"
    },
    {
        "text": "transition - next transition if condition is true"
    },
    {
        "text": "This routes orders over $100 to the \"processLargeOrder\" state"
    },
    {
        "text": "Event-based Switch Details"
    },
    {
        "text": "eventRef - name of event"
    },
    {
        "text": "transition - next transition if event occurs"
    },
    {
        "text": "This routes to \"handleCancellation\" state if \"orderCancelled\" event occurs"
    },
    {
        "text": "Default Condition"
    },
    {
        "text": "transition - next transition if no condition matches"
    },
    {
        "text": "end - end workflow execution"
    },
    {
        "text": "So in summary, switch states allow flexible data-based and event-based routing in workflows"
    },
    {
        "text": "Let me know if any part needs more explanation!"
    },
    {
        "text": "- \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u0435 Name \u043d\u0435 \u043f\u0443\u0441\u0442\u043e\u0435, \u0442\u043e \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0448\u0430\u0433\u0443"
    },
    {
        "text": "\u0418\u043d\u0430\u0447\u0435, \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \"Please enter a name for your Genius\" \u0432 \u043f\u043e\u043b\u0435 Status"
    },
    {
        "text": "- \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u0435 Personality \u043d\u0435 \u0440\u0430\u0432\u043d\u043e \"Random\", \u0442\u043e \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0448\u0430\u0433\u0443"
    },
    {
        "text": "\u0418\u043d\u0430\u0447\u0435, \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c \u0435\u0433\u043e \u043f\u043e\u043b\u044e Personality"
    },
    {
        "text": "```mermaid"
    },
    {
        "text": "graph TD"
    },
    {
        "text": "G -- Yes --> H[Pick a random option]"
    },
    {
        "text": "G -- No --> I[Create Genius]"
    },
    {
        "text": "H --> I"
    },
    {
        "text": "+-----------------+     +-----------------+     +-----------------+"
    },
    {
        "text": "+-----------------+"
    },
    {
        "text": "+-----------------+"
    },
    {
        "text": "v"
    },
    {
        "text": "+---------+"
    },
    {
        "text": "/      \\"
    },
    {
        "text": "/ Yes    \\ No"
    },
    {
        "text": "/          \\"
    },
    {
        "text": "v            v"
    },
    {
        "text": "+-----------------+      +-----------------+"
    },
    {
        "text": "/              \\"
    },
    {
        "text": "/ Yes            \\ No"
    },
    {
        "text": "/                  \\"
    },
    {
        "text": "v                    v"
    },
    {
        "text": "+-----------------+    +-----------------+"
    },
    {
        "text": "\\                    /"
    },
    {
        "text": "\\                  /"
    },
    {
        "text": "\\                /"
    },
    {
        "text": "v              v"
    },
    {
        "text": "+---------+"
    },
    {
        "text": "/      \\"
    },
    {
        "text": "/ Yes    \\ No"
    },
    {
        "text": "/          \\"
    },
    {
        "text": "v            v"
    },
    {
        "text": "+-----------------+   +-----------------+"
    },
    {
        "text": "```]"
    },
    {
        "text": "+-----------------------------------+-----------------------------------+"
    },
    {
        "text": "]"
    },
    {
        "text": "1"
    },
    {
        "text": "\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0438\u043c\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u0418\u0418 \u0432 \u043f\u043e\u043b\u0435 Input \u0441 \u0438\u043c\u0435\u043d\u0435\u043c Name \u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u044c \u0441\u0432\u043e\u0435\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u0418\u0418 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 Dropdown \u0441 \u0438\u043c\u0435\u043d\u0435\u043c Personality"
    },
    {
        "text": "2"
    },
    {
        "text": "\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 Button \u0441 \u0438\u043c\u0435\u043d\u0435\u043c Create, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0432\u043e\u0435\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u0418\u0418"
    },
    {
        "text": "3"
    },
    {
        "text": "\u041d\u0430\u0432\u044b\u043a \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u043d\u0435 \u043f\u0443\u0441\u0442\u043e\u0435 \u043b\u0438 \u043f\u043e\u043b\u0435 Name"
    },
    {
        "text": "\u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \"Please enter a name for your Genius\" \u0432 \u043f\u043e\u043b\u0435 Label \u0441 \u0438\u043c\u0435\u043d\u0435\u043c Status \u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443"
    },
    {
        "text": "\u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u0442\u043e \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0448\u0430\u0433\u0443"
    },
    {
        "text": "4"
    },
    {
        "text": "\u041d\u0430\u0432\u044b\u043a \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0440\u0430\u0432\u043d\u043e \u043b\u0438 \u043f\u043e\u043b\u0435 Personality \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \"Random\""
    },
    {
        "text": "\u0415\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442 \u0435\u0433\u043e \u043f\u043e\u043b\u044e Personality"
    },
    {
        "text": "\u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u0442\u043e \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0448\u0430\u0433\u0443"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u043f\u043e\u043b\u0435\u043c Company Name \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 Company_Name \u0432 \u0431\u043b\u043e\u043a \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c \u0441\u0442\u0430\u0440\u0442\u0430 8241 \u0438 \u0431\u043b\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c 8250"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c \u0441\u0442\u0430\u0440\u0442\u0430 8241 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 Company_Name \u0432 \u0431\u043b\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c 8250 \u0438 \u0431\u043b\u043e\u043a \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c LLM 8249"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u043f\u043e\u043b\u0435\u043c q \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 q \u0432 \u0431\u043b\u043e\u043a \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c LLM 8242"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c LLM 8242 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 result \u0432 \u0431\u043b\u043e\u043a \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u0431\u043b\u043e\u043a\u043e\u043c Link List \u0438 \u0431\u043b\u043e\u043a \u0441 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c 8243"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u0431\u043b\u043e\u043a\u043e\u043c Link List \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 linksList \u0432 \u0431\u043b\u043e\u043a \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 8245 \u0438 \u0431\u043b\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c 8251"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c 8243 \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c \u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 8245 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 data \u0432 \u0431\u043b\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c 8246 \u0438 \u0431\u043b\u043e\u043a \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u0431\u043b\u043e\u043a\u043e\u043c Summary List"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c 8246 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 linksList \u0432 \u0431\u043b\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c 8251"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u0431\u043b\u043e\u043a\u043e\u043c Summary List \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 summary_list \u0432 \u0431\u043b\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c 8251"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c 8250 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 output \u0432 \u0431\u043b\u043e\u043a \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c LLM 8249"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c LLM 8249 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 result1 \u0432 \u0431\u043b\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c 8255"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c 8251 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 result \u0432 \u0431\u043b\u043e\u043a \u0441 \u0432\u044b\u0432\u043e\u0434\u043e\u043c \u0432 \u0444\u0430\u0439\u043b id 8253"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c 8254 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 title \u0432 \u0431\u043b\u043e\u043a \u0441 \u0432\u044b\u0432\u043e\u0434\u043e\u043c \u0432 \u0444\u0430\u0439\u043b id 8253"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u043a\u043e\u0434\u043e\u043c 8255 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 result \u0432 \u0431\u043b\u043e\u043a \u0441 \u0432\u044b\u0432\u043e\u0434\u043e\u043c \u0432 \u0444\u0430\u0439\u043b id 8253"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u0432\u044b\u0432\u043e\u0434\u043e\u043c \u0432 \u0444\u0430\u0439\u043b id 8253 \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 HTML-\u0444\u0430\u0439\u043b \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u043d\u0430 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0443\u044e \u043f\u043e\u0447\u0442\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "- \u0411\u043b\u043e\u043a \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u0431\u043b\u043e\u043a\u043e\u043c Final Report \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0447\u0435\u0442 \u043e \u043d\u043e\u0432\u043e\u0441\u0442\u044f\u0445 \u0430\u043a\u0446\u0438\u0439 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 Markdown"
    },
    {
        "text": "\u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u0430\u043a\u0438\u0435-\u043b\u0438\u0431\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u0438\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u0430 \u043f\u043e\u043c\u043e\u0449\u044c \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443-\u043b\u0438\u0431\u043e \u0430\u0441\u043f\u0435\u043a\u0442\u0443 \u0432\u0430\u0448\u0435\u0433\u043e \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 WMS, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0434\u0430\u0439\u0442\u0435 \u043c\u043d\u0435 \u0437\u043d\u0430\u0442\u044c, \u0438 \u044f \u0431\u0443\u0434\u0443 \u0440\u0430\u0434 \u043f\u043e\u043c\u043e\u0447\u044c \u0432\u0430\u043c \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c"
    },
    {
        "text": "\u043d\u0430\u043f\u0438\u0448\u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 WMS \u043d\u0430\u0432\u044b\u043a\u0430 , \u0432\u044b\u0431\u0435\u0440\u0438 \u0441\u0430\u043c\u0430 \u0434\u043b\u044f \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f , \u041b\u043e\u0433\u0438\u043a\u0430 \u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0442\u043e\u043a\u0430"
    },
    {
        "text": "\u041c\u044b\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441"
    },
    {
        "text": "\u041d\u0430\u0432\u044b\u043a WMS \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c \u0435\u0433\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u043a\u043b\u0430\u0434\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445"
    },
    {
        "text": "\u042d\u0442\u043e\u0442 \u043d\u0430\u0432\u044b\u043a \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0441\u043a\u043b\u0430\u0434 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u0441\u043a\u043b\u0430\u0434\u0430, \u043c\u0435\u0441\u0442 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0437\u0430\u043f\u0430\u0441\u043e\u0432"
    },
    {
        "text": "\u041d\u0430\u0432\u044b\u043a \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0430\u0441\u0430\u043c\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u043e\u0432, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0440\u043e\u0432\u043d\u0435\u0439 \u0437\u0430\u043f\u0430\u0441\u043e\u0432 \u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0430\u0441\u043e\u0432 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434\u0435"
    },
    {
        "text": "\u041d\u0430\u0432\u044b\u043a \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043a\u0430\u0437\u0430\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u043e\u0432, \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u043e\u0432"
    },
    {
        "text": "\u042d\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u0438 \u0441\u0432\u043e\u0435\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0443"
    },
    {
        "text": "\u042d\u0442\u043e\u0442 \u043d\u0430\u0432\u044b\u043a \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u0438 \u0438 \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0438 \u043c\u0435\u0442\u043e\u0434\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u043e\u0432"
    },
    {
        "text": "\u041e\u043d \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0442\u0430\u043a\u0438\u0435 \u0444\u0430\u043a\u0442\u043e\u0440\u044b, \u043a\u0430\u043a \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430, \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 \u0437\u0430\u043a\u0430\u0437\u0430 \u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0435"
    },
    {
        "text": "\u042d\u0442\u043e\u0442 \u043d\u0430\u0432\u044b\u043a \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0437\u0447\u0438\u043a\u0430\u043c\u0438 \u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a\u0430\u043c\u0438 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0443\u0441\u043b\u0443\u0433 \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438"
    },
    {
        "text": "\u041e\u043d \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0435 \u044d\u0442\u0438\u043a\u0435\u0442\u043a\u0438, \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u0442\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u0438\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438"
    },
    {
        "text": "\u042d\u0442\u043e\u0442 \u043d\u0430\u0432\u044b\u043a \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u0438 \u0438 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u043a\u043b\u0430\u0434\u0430, \u0443\u0440\u043e\u0432\u043d\u044f\u0445 \u0437\u0430\u043f\u0430\u0441\u043e\u0432, \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f\u0445"
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0431\u043b\u0430\u0441\u0442\u0438, \u0442\u0440\u0435\u0431\u0443\u044e\u0449\u0438\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f, \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u041d\u0430\u0432\u044b\u043a \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043f\u043e\u043c\u043e\u0449\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0431\u0435\u0441\u043f\u0435\u0440\u0435\u0431\u043e\u0439\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 WMS"
    },
    {
        "text": "\u0421\u043b\u0435\u0434\u0443\u044f \u044d\u0442\u043e\u043c\u0443 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 \u043f\u043e\u0442\u043e\u043a\u0443, \u043d\u0430\u0432\u044b\u043a WMS \u043c\u043e\u0436\u0435\u0442 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043a\u043b\u0430\u0434\u0441\u043a\u0438\u043c\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438, \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438 \u043f\u043e\u0432\u044b\u0441\u0438\u0442\u044c \u043e\u0431\u0449\u0443\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"
    },
    {
        "text": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u044d\u0442\u043e \u043e\u0431\u0449\u0438\u0439 \u043e\u0431\u0437\u043e\u0440, \u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0434\u0435\u0442\u0430\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u0430\u0440\u044c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b WMS"
    },
    {
        "text": "\u0412\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0433\u043e\u0434\u044b"
    },
    {
        "text": "\u041f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u043d \u0445\u043e\u0447\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0433\u043e\u0434\u044b"
    },
    {
        "text": "\u041f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "\u041f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 API \u0438\u043b\u0438 \u0441\u043b\u0443\u0436\u0431\u0443 \u043f\u043e\u0433\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u043e\u0433\u043e\u0434\u0435 \u0434\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u041f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a API \u043f\u043e\u0433\u043e\u0434\u044b, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "\u041f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u0433\u043e\u0434\u0435 \u0438\u0437 \u043e\u0442\u0432\u0435\u0442\u0430 API"
    },
    {
        "text": "\u041f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e, \u0442\u0430\u043a\u0443\u044e \u043a\u0430\u043a \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430, \u0432\u043b\u0430\u0436\u043d\u043e\u0441\u0442\u044c, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0432\u0435\u0442\u0440\u0430 \u0438 \u043f\u043e\u0433\u043e\u0434\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f"
    },
    {
        "text": "\u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043b\u0430\u043a\u043e\u043d\u0438\u0447\u043d\u043e\u0435 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0433\u043e\u0434\u044b"
    },
    {
        "text": "\u0412\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0433\u043e\u0434\u044b"
    },
    {
        "text": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0434\u0435\u0442\u0430\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 API \u043f\u043e\u0433\u043e\u0434\u044b \u0438 \u0444\u043e\u0440\u043c\u0430\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0433\u043e\u0434\u044b, \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0442\u044c\u0441\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u043c\u0435\u0442\u0435\u043e\u0440\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043b\u0443\u0436\u0431\u044b \u0438 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a"
    },
    {
        "text": "\u042f \u043d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u044d\u0442\u043e\u0442 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u043e\u0442\u043e\u043a \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0433\u043e\u0434\u044b \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u043c\u043d\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u043e\u043c\u043e\u0449\u044c!"
    },
    {
        "text": "asciiart"
    },
    {
        "text": "eu/faq"
    },
    {
        "text": "\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \"\u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\""
    },
    {
        "text": "st->input->api->process->generate->output->e"
    },
    {
        "text": "\u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u0443\u0437\u043b\u0430 \u00ab\u041f\u0443\u0441\u043a\u00bb"
    },
    {
        "text": "\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0432 \u0443\u0437\u043b\u0435 \u00ab\u0421\u0431\u043e\u0440 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0438\u00bb"
    },
    {
        "text": "\u041f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u0433\u043e\u0434\u0435 \u0438\u0437 API \u0432 \u0443\u0437\u043b\u0435 \u00ab\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u0433\u043e\u0434\u0435\u00bb"
    },
    {
        "text": "\u0414\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u0433\u043e\u0434\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u0443\u0437\u043b\u0435 \u00ab\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u043e\u0433\u043e\u0434\u0435\u00bb"
    },
    {
        "text": "\u041f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0433\u043e\u0434\u044b \u043d\u0430 \u0443\u0437\u043b\u0435 \u00abGenerate Weather Update\u00bb"
    },
    {
        "text": "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0433\u043e\u0434\u044b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u0443\u0437\u043b\u0435 \u00ab\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0433\u043e\u0434\u044b\u00bb"
    },
    {
        "text": "\u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0443\u0437\u043b\u0435 \u00ab\u041a\u043e\u043d\u0435\u0446\u00bb"
    },
    {
        "text": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u044d\u0442\u043e \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430, \u0438 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0448\u0430\u0433\u0438 \u0438\u043b\u0438 \u0442\u043e\u0447\u043a\u0438 \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u0445 \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430"
    },
    {
        "text": "\u042f \u043d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0433\u043e\u0434\u044b"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u043c\u043d\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u043e\u043c\u043e\u0449\u044c!"
    },
    {
        "text": "\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"
    },
    {
        "text": "\u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043e\u0448\u0438\u0431\u043e\u043a, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0432\u0432\u043e\u0434\u0430 \u0438 \u0443\u0434\u043e\u0431\u043d\u044b\u0435 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c"
    },
    {
        "text": "\u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u043e\u0432 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u0441\u0432\u0435\u0441\u0442\u0438 \u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c\u0443 \u0432\u044b\u0437\u043e\u0432\u044b API \u0438 \u043f\u043e\u0432\u044b\u0441\u0438\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"
    },
    {
        "text": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0434\u0435\u0442\u0430\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0442\u044c\u0441\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u044f\u0437\u044b\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u0438 \u0441\u043b\u0443\u0436\u0431\u044b API \u043f\u043e\u0433\u043e\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u044b \u0440\u0435\u0448\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c"
    },
    {
        "text": "\u042f \u043d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0433\u043e\u0434\u044b \u0432 \u0432\u0430\u0448\u0435\u043c \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0435 \u043f\u043e \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u043c\u043d\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b!"
    },
    {
        "text": "\u042d\u0442\u0430\u043f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u043b\u043e\u043a\u0430 \u0432 \u0440\u0430\u0431\u043e\u0447\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435"
    },
    {
        "text": "\u041f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432\u0432\u0435\u0441\u0442\u0438 \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0435 \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0433\u043e\u0434\u044b"
    },
    {
        "text": "\u0417\u0430\u0445\u0432\u0430\u0442 \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u0432\u043e\u0434\u0430 \u0438\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430"
    },
    {
        "text": "\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u044d\u0442\u043e \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438, \u0442\u0430\u043a\u043e\u0439 \u043a\u0430\u043a \u0441\u0432\u0435\u0440\u043a\u0430 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0445 \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0433\u0435\u043e\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0441\u043e \u0441\u043b\u0443\u0436\u0431\u043e\u0439 API \u043f\u043e\u0433\u043e\u0434\u044b, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0432 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u043a \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0435 API"
    },
    {
        "text": "\u041f\u0435\u0440\u0435\u0434\u0430\u0439\u0442\u0435 \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 API"
    },
    {
        "text": "\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0439\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 API, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u044b\u0447\u043d\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON, \u043f\u0443\u0442\u0435\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0439\u0442\u0435 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u043e\u0433\u043e\u0434\u0435, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0438\u0437 \u043e\u0442\u0432\u0435\u0442\u0430 API"
    },
    {
        "text": "\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044f\u043c \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 JSON, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0435, \u0432\u043b\u0430\u0436\u043d\u043e\u0441\u0442\u0438, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0432\u0435\u0442\u0440\u0430 \u0438 \u043f\u043e\u0433\u043e\u0434\u043d\u044b\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u0433\u043e\u0434\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0440\u0430\u0442\u043a\u043e\u0433\u043e \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0433\u043e\u0434\u044b"
    },
    {
        "text": "\u041e\u0442\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043f\u043e\u0433\u043e\u0434\u044b \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u043c \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u043c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0438\u043b\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c"
    },
    {
        "text": "\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0433\u043e\u0434\u044b \u043f\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c\u0443 \u043a\u0430\u043d\u0430\u043b\u0443, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0441\u043f\u0435\u0447\u0430\u0442\u0430\u0439\u0442\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u043e\u043d\u0441\u043e\u043b\u0438, \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0438\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043d\u0435\u0441\u0438\u0442\u0435 \u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u0440\u0435\u0447\u044c"
    },
    {
        "text": "\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043b\u0443\u0447\u0430\u0435\u0432, \u043a\u043e\u0433\u0434\u0430 \u0437\u0430\u043f\u0440\u043e\u0441 API \u043f\u043e\u0433\u043e\u0434\u044b \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f \u0441\u0431\u043e\u0435\u043c \u0438\u043b\u0438 \u0432\u0432\u043e\u0434 \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u043b\u043e\u043a\u0438 try-catch \u0438\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a, \u0447\u0442\u043e\u0431\u044b \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445"
    },
    {
        "text": "\u0422\u0449\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0433\u043e\u0434\u044b, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0435\u0435 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u043d\u0430\u0434\u0435\u0436\u043d\u043e\u0441\u0442\u0438"
    },
    {
        "text": "\u041d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u043e\u0434 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0432\u0440\u0435\u043c\u044f \u043e\u0442\u043a\u043b\u0438\u043a\u0430 \u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u0430 \u043e\u0448\u0438\u0431\u043e\u043a"
    },
    {
        "text": "\u041d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0439\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438\u043b\u0438 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 API, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 JSON \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u0430\u043c\u0438 \u044f\u0437\u044b\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"
    },
    {
        "text": "\u042f \u043d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0432 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u043b\u043e\u043a\u0430 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0433\u043e\u0434\u044b"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u043c\u043d\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b!"
    },
    {
        "text": "\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f"
    },
    {
        "text": "return data"
    },
    {
        "text": "return temperature, humidity, wind_speed, weather_condition"
    },
    {
        "text": "\u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u043b\u0443\u0436\u0431\u0443 WeatherAPI \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u043e\u0433\u043e\u0434\u0435 \u0434\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 GET \u0432 \u043a\u043e\u043d\u0435\u0447\u043d\u0443\u044e \u0442\u043e\u0447\u043a\u0443 API, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u044f \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430"
    },
    {
        "text": "\u0417\u0430\u0442\u0435\u043c \u043e\u0442\u0432\u0435\u0442 API \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0442\u0430\u043a\u043e\u0439 \u043a\u0430\u043a \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430, \u0432\u043b\u0430\u0436\u043d\u043e\u0441\u0442\u044c, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0432\u0435\u0442\u0440\u0430 \u0438 \u043f\u043e\u0433\u043e\u0434\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f"
    },
    {
        "text": "\u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0433\u043e\u0434\u044b \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e"
    },
    {
        "text": "get_weather_dataprocess_weather_data"
    },
    {
        "text": "\u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0433\u043e \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043a\u043b\u044e\u0447\u043e\u043c API \u043e\u0442 \u0441\u043b\u0443\u0436\u0431\u044b \u043f\u043e\u0433\u043e\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435"
    },
    {
        "text": "\u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0432\u0430\u043c \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443, \u0435\u0441\u043b\u0438 \u043e\u043d\u0430 \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430"
    },
    {
        "text": "\"YOUR_API_KEY\"requestspip install requests"
    },
    {
        "text": "\u042f \u043d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u043f\u043e\u043d\u044f\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u043e\u0433\u043e\u0434\u0435 \u0438\u0437 API \u043f\u043e\u0433\u043e\u0434\u044b"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u043c\u043d\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b!"
    },
    {
        "text": "\u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f"
    },
    {
        "text": "\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0441\u0432\u0435\u0440\u043a\u0430 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0445 \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0433\u0435\u043e\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439"
    },
    {
        "text": "\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0438\u0441 API \u043f\u043e\u0433\u043e\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u0433\u043e\u0434\u0435"
    },
    {
        "text": "\u041f\u043e\u0434\u043f\u0438\u0448\u0438\u0442\u0435\u0441\u044c \u043d\u0430 \u043a\u043b\u044e\u0447 API \u043e\u0442 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u0442\u0430\u0432\u0449\u0438\u043a\u0430 \u043c\u0435\u0442\u0435\u043e\u0440\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0443\u0441\u043b\u0443\u0433"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043b\u044e\u0447 API \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a API \u043f\u043e\u0433\u043e\u0434\u044b"
    },
    {
        "text": "\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u043a \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u0435 API \u043f\u043e\u0433\u043e\u0434\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u0432 \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430"
    },
    {
        "text": "\u041a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0439\u0442\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0439\u0442\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445"
    },
    {
        "text": "\u042f \u043d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u043f\u043e\u043d\u044f\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0433\u043e\u0434\u044b"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u043c\u043d\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b!"
    },
    {
        "text": "\u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"
    },
    {
        "text": "\u041a\u043e\u043d\u0435\u0447\u043d\u043e! \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0430\u0436\u043d\u044b\u043c \u0430\u0441\u043f\u0435\u043a\u0442\u043e\u043c \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 \u0418\u0418"
    },
    {
        "text": "\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e WorkflowSlyAI \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0438\u0441\u0443\u043d\u043a\u0438 ASCII \u0438 HTML-\u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0438 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 \u043f\u043e \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0447\u0435\u0440\u0442\u0435\u0436\u0438 ASCII \u0438\u043b\u0438 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u044b, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 \u043f\u043e \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443"
    },
    {
        "text": "\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0448\u0430\u0433\u0438 \u0438\u043b\u0438 \u0431\u043b\u043e\u043a\u0438 \u0432 \u0440\u0430\u0431\u043e\u0447\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0438 \u0438\u0445 \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0438"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0440\u0435\u043b\u043a\u0438 \u0438\u043b\u0438 \u043b\u0438\u043d\u0438\u0438, \u0447\u0442\u043e\u0431\u044b \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0442\u043e\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0448\u0430\u0433\u0430\u043c\u0438"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0438\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0432 \u0441\u0432\u043e\u0435\u043c \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0435 \u043f\u043e \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 ASCII-\u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u0438\u043b\u0438 \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u043a\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430"
    },
    {
        "text": "\u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c \u0438 \u0438\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c \u0438\u0445 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f"
    },
    {
        "text": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0439\u0442\u0435 \u0440\u0438\u0441\u0443\u043d\u043a\u0438 ASCII \u0438\u043b\u0438 \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 HTML-\u0448\u0430\u0431\u043b\u043e\u043d\u044b"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0442\u0435\u0433\u0438 HTML \u0438 \u0441\u0442\u0438\u043b\u0438 CSS \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0432\u043b\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439"
    },
    {
        "text": "\u0412\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0439\u0442\u0435 HTML-\u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0438\u043b\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 \u043f\u043e \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443 \u0434\u043b\u044f \u043b\u0435\u0433\u043a\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0438 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f"
    },
    {
        "text": "\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 \u0441 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u043e\u043c, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u0442\u043a\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0435\u0433\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0443\u0437\u043a\u0438\u0435 \u043c\u0435\u0441\u0442\u0430 \u0438\u043b\u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u043e \u0435\u0433\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u0440\u0443\u0433\u0438\u043c"
    },
    {
        "text": "\u042f \u043d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 \u0441 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u043e\u043c"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u043c\u043d\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b!"
    },
    {
        "text": "\u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 WMS"
    },
    {
        "text": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0434\u043b\u044f \u0432\u0430\u0441"
    },
    {
        "text": "<!DOCTYPE html>"
    },
    {
        "text": "<html>"
    },
    {
        "text": "<head>"
    },
    {
        "text": "<style>"
    },
    {
        "text": "</style>"
    },
    {
        "text": "</head>"
    },
    {
        "text": "<body>"
    },
    {
        "text": "<script>"
    },
    {
        "text": "// Create a new WMS layer"
    },
    {
        "text": "// Create a map and add the WMS layer"
    },
    {
        "text": "</script>"
    },
    {
        "text": "</body>"
    },
    {
        "text": "</html>"
    },
    {
        "text": "\u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 Leaflet, \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 JavaScript \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u0430\u0440\u0442, \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043b\u043e\u044f WMS"
    },
    {
        "text": "\u041a\u043e\u0434 HTML \u0438 CSS \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 div \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c \"map\", \u0433\u0434\u0435 \u043a\u0430\u0440\u0442\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f"
    },
    {
        "text": "\u041a\u043e\u0434 JavaScript \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u0441\u043b\u043e\u0439 WMS \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044f URL-\u0430\u0434\u0440\u0435\u0441 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 WMS, \u043d\u0443\u0436\u043d\u044b\u0435 \u0441\u043b\u043e\u0438, \u0444\u043e\u0440\u043c\u0430\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u0438"
    },
    {
        "text": "\u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u0441\u043b\u043e\u0439 WMS \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u043a\u0430\u0440\u0442\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430"
    },
    {
        "text": "L"
    },
    {
        "text": "tileLayer"
    },
    {
        "text": "wmsaddTo"
    },
    {
        "text": "The WMS skill starts by interacting with the user to understand their specific requirements and gather relevant information about the warehouse operations"
    },
    {
        "text": "The skill guides the user through the process of setting up the warehouse in the system, including defining the warehouse layout, storage locations, and inventory categories"
    },
    {
        "text": "The skill provides functionalities for managing inventory, such as receiving goods, updating stock levels, and tracking inventory movements within the warehouse"
    },
    {
        "text": "The skill enables the user to manage customer orders, including order creation, order fulfillment, and order tracking"
    },
    {
        "text": "It ensures efficient order processing and timely delivery"
    },
    {
        "text": "The skill assists in optimizing the picking and packing process by suggesting the most efficient routes and methods for order fulfillment"
    },
    {
        "text": "It considers factors like product location, order priority, and packaging requirements"
    },
    {
        "text": "The skill integrates with shipping carriers and logistics providers to streamline the shipping process"
    },
    {
        "text": "It generates shipping labels, tracks shipments, and provides real-time visibility into the delivery status"
    },
    {
        "text": "The skill offers reporting and analytics capabilities to provide insights into warehouse performance, inventory levels, order fulfillment rates, and other key metrics"
    },
    {
        "text": "It helps identify areas for improvement and supports data-driven decision-making"
    },
    {
        "text": "The skill provides maintenance and support features, including system updates, bug fixes, and user assistance, to ensure the smooth operation of the WMS"
    },
    {
        "text": "By following this logical flow, the WMS skill can effectively manage warehouse operations, optimize processes, and enhance overall productivity"
    },
    {
        "text": "Please note that this is a high-level overview, and the specific implementation details may vary based on the requirements and capabilities of the WMS system"
    },
    {
        "text": "The virtual Genius receives a user request for weather updates"
    },
    {
        "text": "The Genius prompts the user to provide the location for which they want to receive weather updates"
    },
    {
        "text": "The Genius captures the user's location input"
    },
    {
        "text": "The Genius uses a weather API or service to fetch the current weather data for the specified location"
    },
    {
        "text": "The Genius sends a request to the weather API, including the user's location information"
    },
    {
        "text": "Prompt the user to enter their desired location for weather updates"
    },
    {
        "text": "Capture the user's input using an input function or a user interface element"
    },
    {
        "text": "Validate the user's input to ensure it is a valid location"
    },
    {
        "text": "Use a validation mechanism such as checking against a list of valid locations or using a geocoding service to verify the location"
    },
    {
        "text": "Integrate with a weather API service by making an HTTP request to the API endpoint"
    },
    {
        "text": "Pass the user's location as a parameter in the API request"
    },
    {
        "text": "Handle the API response, which typically comes in JSON format, by parsing the data"
    },
    {
        "text": "Extract relevant information from the weather data received from the API response"
    },
    {
        "text": "Access specific fields in the JSON data structure to retrieve temperature, humidity, wind speed, and weather conditions"
    },
    {
        "text": "Use the extracted weather information to generate a concise and informative weather update"
    },
    {
        "text": "Format the weather update message according to your desired output format, such as a text string or a structured object"
    },
    {
        "text": "Provide the weather update to the user through the appropriate channel, such as printing the update to the console, displaying it on a web page, or speaking it out using text-to-speech capabilities"
    },
    {
        "text": "Implement error handling mechanisms to handle cases where the weather API request fails or the location input is invalid"
    },
    {
        "text": "Use try-catch blocks or error handling functions to gracefully handle exceptions and provide meaningful error messages to the user"
    },
    {
        "text": "Test the weather update feature thoroughly to ensure its accuracy and reliability"
    },
    {
        "text": "Continuously optimize the code based on user feedback and performance metrics, such as response time and error rates"
    },
    {
        "text": "Remember to use appropriate libraries or frameworks for making API requests, handling JSON data, and validating user input based on your programming language of choice"
    },
    {
        "text": "I hope this helps you in writing the code for each block in the weather update feature"
    },
    {
        "text": "Let me know if you have any further questions!"
    },
    {
        "text": "In this example, we use the WeatherAPI service to fetch the current weather data for the specified location"
    },
    {
        "text": "The get_weather_data function sends an HTTP GET request to the API endpoint, passing the user's location as a parameter"
    },
    {
        "text": "The API response is then processed using the process_weather_data function to extract relevant information such as temperature, humidity, wind speed, and weather conditions"
    },
    {
        "text": "Finally, the weather update is generated and provided to the user"
    },
    {
        "text": "Remember to replace \"YOUR_API_KEY\" with your actual API key from the weather service you are using"
    },
    {
        "text": "Additionally, you may need to install the requests library using pip install requests if it is not already installed"
    },
    {
        "text": "I hope this example helps you understand the integration process for retrieving weather data from a weather API"
    },
    {
        "text": "Let me know if you have any further questions!"
    },
    {
        "text": "You can use various methods for location validation, such as checking against a list of valid locations, using a geocoding service to verify the location, or implementing a regular expression pattern matching"
    },
    {
        "text": "Choose a weather API service that provides the necessary weather data"
    },
    {
        "text": "Sign up for an API key from the chosen weather service provider"
    },
    {
        "text": "Use the API key to authenticate your requests to the weather API"
    },
    {
        "text": "Make an HTTP request to the weather API endpoint, passing the user's location as a parameter"
    },
    {
        "text": "Handle exceptions gracefully and provide meaningful error messages to the user"
    },
    {
        "text": "Remember to use the appropriate libraries or frameworks for making API requests, handling JSON data, and validating user input based on your programming language of choice"
    },
    {
        "text": "I hope this detailed explanation helps you understand the integration process for the weather update feature"
    },
    {
        "text": "Let me know if you have any further questions!"
    },
    {
        "text": "Certainly! Visualization is an essential aspect of understanding and communicating the structure and components of an Genius"
    },
    {
        "text": "With WorkflowSlyAI, you can utilize ASCII drawings and HTML templates to create visual representations of your Genius's workflow and architecture"
    },
    {
        "text": "Use ASCII drawings or flowchart diagrams to represent the workflow of your Genius"
    },
    {
        "text": "Identify the different steps or blocks in the workflow and their relationships"
    },
    {
        "text": "Use arrows or lines to indicate the flow of information or control between the steps"
    },
    {
        "text": "Create visual representations of the various components or modules in your Genius"
    },
    {
        "text": "Use ASCII art or graphical icons to represent each component"
    },
    {
        "text": "Arrange the components in a logical and intuitive manner to depict their relationships and interactions"
    },
    {
        "text": "Convert your ASCII drawings or graphical representations into HTML templates"
    },
    {
        "text": "Use HTML tags and CSS styling to create visually appealing and interactive visualizations"
    },
    {
        "text": "Embed the HTML templates into your Genius's user interface or documentation for easy access and understanding"
    },
    {
        "text": "By visualizing your Genius, you can gain a clearer understanding of its structure, identify potential bottlenecks or areas for improvement, and effectively communicate its functionality to others"
    },
    {
        "text": "I hope this helps you in visualizing your Genius"
    },
    {
        "text": "Let me know if you have any further questions!"
    },
    {
        "text": "In this example, we use the Leaflet library, a popular JavaScript library for interactive maps, to visualize the WMS layer"
    },
    {
        "text": "The HTML and CSS code provide a container div with the id \"map\" where the map will be displayed"
    },
    {
        "text": "The JavaScript code creates a new WMS layer using the L"
    },
    {
        "text": "tileLayer"
    },
    {
        "text": "wms method, specifying the URL of the WMS service, the desired layers, image format, and transparency settings"
    },
    {
        "text": "Finally, the WMS layer is added to the map using the addTo method"
    },
    {
        "text": "The Genius receives the weather data from the API response"
    },
    {
        "text": "The Genius extracts relevant information such as temperature, humidity, wind speed, and weather conditions from the data"
    },
    {
        "text": "The Genius generates a concise and informative weather update based on the extracted information"
    },
    {
        "text": "The virtual Genius concludes the weather update process"
    },
    {
        "text": "Please note that the specific implementation details, including the weather API used and the format of the weather update, may vary based on the chosen weather service and the platform on which the virtual Genius operates"
    },
    {
        "text": "I hope this logical flow helps you in designing the weather update feature for your virtual Genius"
    },
    {
        "text": "Let me know if you need any further assistance!"
    },
    {
        "text": "The process starts with the \"Start\" node"
    },
    {
        "text": "The user provides the location information at the \"Gather Location Information\" node"
    },
    {
        "text": "The Genius retrieves weather data from the API at the \"Retrieve Weather Data\" node"
    },
    {
        "text": "The weather data is processed at the \"Process Weather Data\" node"
    },
    {
        "text": "The Genius generates a weather update at the \"Generate Weather Update\" node"
    },
    {
        "text": "The weather update is provided to the user at the \"Provide Weather Update\" node"
    },
    {
        "text": "The process ends at the \"End\" node"
    },
    {
        "text": "Please note that this is a simplified representation of the workflow, and the actual implementation may involve additional steps or decision points based on the specific requirements and capabilities of the virtual Genius"
    },
    {
        "text": "I hope this workflow representation helps you visualize the sequence of actions in the weather update feature"
    },
    {
        "text": "Let me know if you need any further assistance!]"
    },
    {
        "text": "- **\u041e\u0431\u0440\u0430\u0437**"
    },
    {
        "text": "\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0430\u0432\u0430\u0442\u0430\u0440\u043e\u0432 \u0438\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u0432\u0430\u0442\u0430\u0440 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b Ready Player Me"
    },
    {
        "text": "\u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0441\u0432\u043e\u044e \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0438\u043b\u0438 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0430\u0432\u0430\u0442\u0430\u0440\u044b \u0441 \u043b\u044e\u0431\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u0430\u0432\u0430\u0442\u0430\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0430\u0435\u0442 \u0441 MindOS\u00b9"
    },
    {
        "text": "- **\u0413\u043e\u043b\u043e\u0441**"
    },
    {
        "text": "\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0448\u0438\u0440\u043e\u043a\u043e\u0433\u043e \u0441\u043f\u0435\u043a\u0442\u0440\u0430 \u0433\u043e\u043b\u043e\u0441\u043e\u0432 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0435\u0439, \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u0443\u044f \u043f\u043e\u043b, \u0442\u043e\u043d, \u0432\u044b\u0441\u043e\u0442\u0443 \u0442\u043e\u043d\u0430 \u0438 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0440\u0435\u0447\u0438"
    },
    {
        "text": "\u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0433\u043e\u043b\u043e\u0441\u0430 \u0434\u0430\u0436\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u0432 \u0441\u0435\u0431\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0440\u0430\u0436\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u044d\u043c\u043e\u0446\u0438\u0438, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0432\u0430\u0448\u0435\u043c\u0443 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0443 \u0431\u043e\u043b\u0435\u0435 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0438 \u043f\u043b\u0430\u0432\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0441\u0430\u043c\u043e\u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u00b9"
    },
    {
        "text": "- **\u0411\u0438\u043e\u0433\u0440\u0430\u0444\u0438\u044f**"
    },
    {
        "text": "\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0435\u0433\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u0438, \u0446\u0435\u043b\u0435\u0439 \u0438 \u0442"
    },
    {
        "text": "\u0434"
    },
    {
        "text": "\u0422\u043e, \u0447\u0442\u043e \u0432\u044b \u0432\u0432\u043e\u0434\u0438\u0442\u0435 \u0441\u044e\u0434\u0430, \u0447\u0430\u0441\u0442\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0432\u043e\u0435 \u0432\u043f\u0435\u0447\u0430\u0442\u043b\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0445\u00b9"
    },
    {
        "text": "- **\u0412\u0441\u0442\u0443\u043f\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0434\u0438\u0430\u043b\u043e\u0433**"
    },
    {
        "text": "\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u0438\u0430\u043b\u043e\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0431\u044f"
    },
    {
        "text": "\u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440 \u043c\u0435\u0436\u0434\u0443 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043e\u043c \u0438 \u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u0440\u0443\u0441\u043b\u043e, \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0432 \u0432\u0441\u0442\u0443\u043f\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0434\u0438\u0430\u043b\u043e\u0433 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u043c\u00b9"
    },
    {
        "text": "- **\u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f**"
    },
    {
        "text": "\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u0430\u0442\u044c \u0441\u0432\u043e\u0435\u043c\u0443 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0443 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043b\u044c\u0437\u044f \u043d\u0430\u0440\u0443\u0448\u0430\u0442\u044c, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0435\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u043e\u0432"
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430\u00b9"
    },
    {
        "text": "\u0412\u043a\u043b\u0430\u0434\u043a\u0430 **\u041f\u0435\u0440\u0441\u043e\u043d\u0430** \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043a \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0443 \u0442\u0435\u043c, \u0447\u0442\u043e \u043e\u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u0441\u0442\u0438\u043b\u044c \u043e\u0431\u0449\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u041e\u043d\u0430 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0432\u0430\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0448\u0438\u043c \u0446\u0435\u043b\u044f\u043c \u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u044f\u043c, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0438 \u0443\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u042f \u043d\u0430\u0434\u0435\u044e\u0441\u044c, \u0447\u0442\u043e \u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u043d\u044f\u043b \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b \u0432\u0430\u0448\u0443 \u0437\u0430\u0434\u0430\u0447\u0443"
    },
    {
        "text": "\u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u0430\u043a\u0438\u0435-\u043b\u0438\u0431\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u0438\u043b\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441\u0432\u044f\u0436\u0438\u0442\u0435\u0441\u044c \u0441\u043e \u0441\u043b\u0443\u0436\u0431\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 Bing"
    },
    {
        "text": "\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Bing! \ud83d\ude0a"
    },
    {
        "text": "- \u041e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0440\u0435\u0441\u0443\u0440\u0441 \u0434\u043b\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0430\u0432\u0442\u043e\u0440 \u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f"
    },
    {
        "text": "- \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043d\u043e\u043c\u0435\u0440 \u0432\u0435\u0440\u0441\u0438\u0438, \u0434\u0430\u0442\u0430 \u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0434\u0440\u0443\u0433\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0439 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u0430\u043c\u0438, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u0432\u0430\u043c\u0438 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f"
    },
    {
        "text": "- \u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 - \u044d\u0442\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u043b\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u043e\u0432 \u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439"
    },
    {
        "text": "- \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 - \u044d\u0442\u043e \u0444\u0430\u0437\u0430 \u0438\u043b\u0438 \u0448\u0430\u0433 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439, \u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c, \u0441\u043e\u043d, \u0438\u043d\u044a\u0435\u043a\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u0446\u0438\u043a\u043b \u043f\u043e \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0438 \u0442"
    },
    {
        "text": "\u0434"
    },
    {
        "text": "- \u0424\u0443\u043d\u043a\u0446\u0438\u044f - \u044d\u0442\u043e \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u043d\u0430\u0434 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u043c \u0438\u043b\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0435\u0434\u0438\u043d\u0438\u0446\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u0438\u0437 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438"
    },
    {
        "text": "\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u044b \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a RESTful, AsyncAPI, RPC, GraphQL \u0438\u043b\u0438 OData"
    },
    {
        "text": "- \u0421\u043e\u0431\u044b\u0442\u0438\u0435 - \u044d\u0442\u043e \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u043d\u0430\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0444\u0430\u043a\u0442\u0430 \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0432\u043e \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0438\u043b\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0435"
    },
    {
        "text": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0438\u043b\u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432"
    },
    {
        "text": "- \u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 - \u044d\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0438\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438"
    },
    {
        "text": "\u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0443\u0441\u043b\u043e\u0432\u0438\u0439 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u043e\u0432, \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438 \u0442"
    },
    {
        "text": "\u0434"
    },
    {
        "text": "- \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 - \u044d\u0442\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0440\u0430\u0431\u043e\u0447\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0438\u043b\u0438 \u0435\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445, \u0442\u0430\u043a\u0430\u044f \u043a\u0430\u043a \u0438\u043c\u044f, \u0432\u0435\u0440\u0441\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0430\u0432\u0442\u043e\u0440\u0441\u0442\u0432\u043e \u0438 \u0442"
    },
    {
        "text": "\u0434"
    },
    {
        "text": "- \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 MindOS \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438, \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u043e\u0439 \u0438 \u0442"
    },
    {
        "text": "\u0434"
    },
    {
        "text": "- \u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 MindOS \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u0438 \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a JavaScript, Python \u0438\u043b\u0438 SQL"
    },
    {
        "text": "\"\u041a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430?\","
    },
    {
        "text": "\"\u041a\u0430\u043a \u0435\u0433\u043e \u043e\u0431\u0443\u0447\u0438\u0442\u044c?\","
    },
    {
        "text": "\"\u041a\u0430\u043a\u0438\u0435 \u0435\u0441\u0442\u044c \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"\u041d\u0443\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\","
    },
    {
        "text": "\"\u041c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c machine learning \u0438 natural language processing\","
    },
    {
        "text": "\"\u041f\u043e\u043b\u0435\u0437\u043d\u044b \u0441\u0445\u0435\u043c\u044b, \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0435 3D-\u043c\u043e\u0434\u0435\u043b\u0438\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"\u041a\u0430\u043a \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f?\","
    },
    {
        "text": "\"\u041a\u0430\u043a\u0438\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c?\","
    },
    {
        "text": "\"\u041a\u0430\u043a \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"\u0425\u043e\u0440\u043e\u0448\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0444\u043e\u0440\u043c\u0430\u0442 JSON\","
    },
    {
        "text": "\"\u041c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442, \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0430\u0443\u0434\u0438\u043e\","
    },
    {
        "text": "\"\u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044e\u0442\u0441\u044f \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"Genius_architecture"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"data_flow"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"training_loop"
    },
    {
        "text": "png\""
    },
    {
        "text": "]"
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438"
    },
    {
        "text": "\u041e\u043d\u0430 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0434\u0438\u0430\u043b\u043e\u0433\u0438, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0424\u043e\u0440\u043c\u0430\u0442 JSON \u0443\u0434\u043e\u0431\u0435\u043d \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 Python"
    },
    {
        "text": "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0439"
    },
    {
        "text": "// previous data"
    },
    {
        "text": "// links"
    },
    {
        "text": "// images"
    },
    {
        "text": "\"NLP helps Geniuss understand natural language\","
    },
    {
        "text": "\"Important techniques are tokenization, lemmatization, entity recognition\""
    },
    {
        "text": "\"Computer vision extracts information from visual inputs\","
    },
    {
        "text": "\"Useful for image classification, object detection, face recognition\""
    },
    {
        "text": "\"Weather API call based on geolocation\","
    },
    {
        "text": "\"Parse JSON response to extract forecast\""
    },
    {
        "text": "\"Integrate with Google Calendar API\","
    },
    {
        "text": "\"Support adding, editing, removing events\""
    },
    {
        "text": "\"User name\","
    },
    {
        "text": "\"Current topic\","
    },
    {
        "text": "\"Recent questions and answers\""
    },
    {
        "text": "\"Interactions history\","
    },
    {
        "text": "\"User preferences\""
    },
    {
        "text": "\u0411\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439"
    },
    {
        "text": "\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043d\u0430\u0432\u044b\u043a\u043e\u0432"
    },
    {
        "text": "\u0422\u0438\u043f\u044b \u043f\u0430\u043c\u044f\u0442\u0438"
    },
    {
        "text": "\u042d\u0442\u0443 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438"
    },
    {
        "text": "\u043f\u0438\u0448\u0438 \u043f\u043e\u043b\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b ,\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0439"
    },
    {
        "text": "\"What is the best way to create an Genius?\","
    },
    {
        "text": "\"How can I train a conversational Genius?\","
    },
    {
        "text": "\"What visualization methods are helpful for understanding processes?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"You need to define the use cases and collect training data"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Machine learning and NLP can be used for training"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Diagrams, flowcharts, interactive 3D models are useful"
    },
    {
        "text": "\""
    },
    {
        "text": "]"
    },
    {
        "text": "],"
    },
    {
        "text": "\"Genius_arch_diagram"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"conversation_flowchart"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"model_training_loop"
    },
    {
        "text": "png\""
    },
    {
        "text": "\"NLP techniques help Geniuss understand natural human language"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Important techniques include tokenization, lemmatization, named entity recognition"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Computer vision extracts high-level information from visual inputs like images and videos"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Useful CV tasks are image classification, object detection, face recognition"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Call OpenWeatherMap API with geolocation coordinates"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Parse JSON response to extract weather data like temperature, humidity, description"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Use Google Calendar API to add, edit, and delete events"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Integrate with OAuth for authentication and access control"
    },
    {
        "text": "\""
    },
    {
        "text": "\"User name, location, current topic"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Recent questions and answers"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Past conversation history and topics"
    },
    {
        "text": "\","
    },
    {
        "text": "\"User preferences and personal details"
    },
    {
        "text": "\""
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u041c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435"
    },
    {
        "text": "\u0440\u0430\u0441\u0448\u0438\u0440\u044c \u0434\u043e \u0441\u0432\u043e\u0435\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0435\u043b\u0430 , \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 , \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u0442\u0435\u0440\u0438\u043d\u043e\u043b\u0434\u043e\u0433\u0438\u044e \u0434\u043b\u044f \u0438\u0437\u0431\u0435\u0436\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430"
    },
    {
        "text": "\"What are the main approaches for building a conversational Genius?\","
    },
    {
        "text": "\"How can I leverage machine learning to create a robust Genius?\","
    },
    {
        "text": "\"What data structure is best for storing conversational logs?\""
    },
    {
        "text": "\"The main approaches are rule-based, retrieval-based, and generative models"
    },
    {
        "text": "Combining them works best"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Supervised learning with labeled datasets is effective"
    },
    {
        "text": "Neural networks like LSTM, BERT are useful"
    },
    {
        "text": "\","
    },
    {
        "text": "\"JSON provides a flexible schema for storing chat history, context, entities"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Genius_architecture_diagram"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"conversation_flow_diagram"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"neural_network_training_loop"
    },
    {
        "text": "png\""
    },
    {
        "text": "\"NLP techniques enable Geniuss to process human language input"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Key NLP tasks are language modeling, named entity recognition, sentiment analysis"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Machine learning models can learn from data without explicit programming"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Common algorithms used are regression, decision trees, neural networks"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Integrate OpenWeatherMap API to get weather data"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Process JSON response to extract temperature, humidity, weather conditions"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Use Google Calendar API to manage calendar"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Implement OAuth 2"
    },
    {
        "text": "0 for secure user authentication and access"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Recent questions and responses"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Past conversations and topics discussed"
    },
    {
        "text": "\","
    },
    {
        "text": "\"User preferences, personal details"
    },
    {
        "text": "\""
    },
    {
        "text": "]"
    },
    {
        "text": "\u041e\u0431\u043d\u043e\u0432\u0438\u043b \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 \u0438 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u044f\u0441\u043d\u043e\u0441\u0442\u0438"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u0438\u043b \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u041c\u043e\u0433\u0443 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438"
    },
    {
        "text": "\u044f \u0436\u0435 \u0441\u043a\u0430\u0437\u0430\u043b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0433\u043e ? \u041f\u0438\u0448\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0432\u0451\u0440\u043d\u0443\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0439 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0439 ,\u0443\u043b\u0443\u0447\u0448\u0430\u0439 ,\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439 , 5 \u0446\u0438\u043a\u043b\u043e\u0432 ,\u0441\u0442\u0430\u0440\u0442"
    },
    {
        "text": "\"What are the best practices for creating a conversational Genius?\","
    },
    {
        "text": "\"How can I leverage machine learning and NLP for robust language understanding?\","
    },
    {
        "text": "\"What tools and frameworks do you recommend for deployment?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"Follow principles of utility, natural flow, personality"
    },
    {
        "text": "Combine rules, ML, and external APIs"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Build training datasets for intents, entities"
    },
    {
        "text": "Use transformers like BERT, GPT-3"
    },
    {
        "text": "Try Rasa, Dialogflow"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Start with chat widgets"
    },
    {
        "text": "For scale, use channels like Facebook Messenger, Slack"
    },
    {
        "text": "Host on cloud platforms"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Genius_design_architecture"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"rasa_nlu_pipeline"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"dialogflow_essentials"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"azure_bot_service_channels"
    },
    {
        "text": "png\""
    },
    {
        "text": "\"Goal of conversational AI is natural dialog between humans and machines"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Key principles are utility, natural flow, context tracking, personality"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Common architectures combine NLU, dialogue manager, NLG"
    },
    {
        "text": "\""
    },
    {
        "text": "\"NLP enables Geniuss to analyze textual data and extract meaning"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Tasks include language modeling, intent recognition, named entity extraction"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Integrate OpenWeatherMap API to fetch weather data"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Process JSON response to extract temperature, precipitation chance, weather state"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Recent questions and responses"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Detected intents and entities"
    },
    {
        "text": "\""
    },
    {
        "text": "\"User preferences, personal details"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Interaction frequency, common questions"
    },
    {
        "text": "\""
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u0438\u043b \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432\u043e \u0432\u0441\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b"
    },
    {
        "text": "\u0412 skills \u0434\u043e\u0431\u0430\u0432\u0438\u043b intents \u0438 entities"
    },
    {
        "text": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c \u0442\u0435\u0440\u043c\u0438\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b"
    },
    {
        "text": "\u0413\u043e\u0442\u043e\u0432 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u0443\u043b\u0443\u0447\u0448\u0430\u0442\u044c \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435"
    },
    {
        "text": "10 \u0438\u0442\u0442\u0435\u0440\u0430\u0446\u0438\u0439"
    },
    {
        "text": "// \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432"
    },
    {
        "text": "// \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e"
    },
    {
        "text": "// \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b, \u0441\u0445\u0435\u043c\u044b"
    },
    {
        "text": "// \u0444\u0430\u043a\u0442\u044b \u0438 \u0434\u0430\u043d\u043d\u044b\u0435"
    },
    {
        "text": "// \u0434\u0430\u043d\u043d\u044b\u0435"
    },
    {
        "text": "// \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438"
    },
    {
        "text": "// \u043d\u0430\u043c\u0435\u0440\u0435\u043d\u0438\u044f"
    },
    {
        "text": "// \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432"
    },
    {
        "text": "// \u0434\u0440\u0443\u0433\u0438\u0435 \u043d\u0430\u0432\u044b\u043a\u0438"
    },
    {
        "text": "// \u043a\u0440\u0430\u0442\u043a\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f"
    },
    {
        "text": "// \u0434\u043e\u043b\u0433\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f"
    },
    {
        "text": "// \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f"
    },
    {
        "text": "// \u043e \u043f\u043e\u0433\u043e\u0434\u0435"
    },
    {
        "text": "// \u0434\u0438\u0430\u043b\u043e\u0433"
    },
    {
        "text": "// \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0439 \u043e\u0442\u0432\u0435\u0442"
    },
    {
        "text": "// \u0432\u0435\u0431-\u043a\u0430\u043d\u0430\u043b\u044b"
    },
    {
        "text": "]"
    },
    {
        "text": "// \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0435"
    },
    {
        "text": "// \u043c\u0435\u0442\u0440\u0438\u043a\u0438"
    },
    {
        "text": "// \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b"
    },
    {
        "text": "// \u043c\u0435\u0442\u043e\u0434\u044b \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f"
    },
    {
        "text": "],"
    },
    {
        "text": "// \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0438\u0442\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u0438\u043b \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0434\u043b\u044f \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f, \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0438 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0420\u0430\u0441\u0448\u0438\u0440\u0438\u043b \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432\u043e \u0432\u0441\u0435\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u0445"
    },
    {
        "text": "\u041c\u043e\u0433\u0443 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443"
    },
    {
        "text": "\u043d\u0435 \u043f\u0438\u0448\u0438 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b ,"
    },
    {
        "text": "\u0425\u043e\u0440\u043e\u0448\u043e, \u044f \u0443\u0447\u0442\u0443 \u044d\u0442\u043e \u0438 \u0431\u0443\u0434\u0443 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430"
    },
    {
        "text": "\"Hello, how are you doing today?\","
    },
    {
        "text": "\"What is the weather forecast for Seattle tomorrow?\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"Hello! I'm doing great thanks for asking"
    },
    {
        "text": "How can I help you today?\","
    },
    {
        "text": "\"Let me check the weather forecast for Seattle tomorrow"
    },
    {
        "text": "According to the Weather Channel API, tomorrow in Seattle there is a high of 64\u00b0F and a low of 50\u00b0F, with a 60% chance of rain showers"
    },
    {
        "text": "\""
    },
    {
        "text": "]"
    },
    {
        "text": "\"Can you help me find a nice restaurant in Paris for a romantic dinner next Friday at 8pm?\""
    },
    {
        "text": "],"
    },
    {
        "text": "Le Meurice Alain Ducasse - 5-star fine dining with stunning views of Paris"
    },
    {
        "text": "They have availability for 8pm next Friday"
    },
    {
        "text": "L'Avant Comptoir de la Mer - Charming and cozy seafood tapas place near the Saint-Germain-des-Pr\u00e9s"
    },
    {
        "text": "I can book a table for two at 8pm"
    },
    {
        "text": "Le Caf\u00e9 de l'Homme - Elegant bistro inside the Mus\u00e9e de l'Homme"
    },
    {
        "text": "They have a lovely terrace and can take a reservation at your preferred time"
    },
    {
        "text": "\""
    },
    {
        "text": "\u042f \u0431\u0443\u0434\u0443 \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0434\u0445\u043e\u0434\u0443 \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432\u043e \u0432\u0441\u0435\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438"
    },
    {
        "text": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u0435, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u044b \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0443\u0442\u043e\u0447\u043d\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0439 \u0438 \u0443\u043b\u0443\u0447\u0448\u0430\u0439 \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u0447\u043a\u0438 \u043a\u043e\u0434\u0430"
    },
    {
        "text": "\"Machine learning is a subset of artificial intelligence that enables computers to learn patterns from data in order to make decisions and predictions without being explicitly programmed"
    },
    {
        "text": "It involves training statistical models on sample data to perform tasks like classification, regression, clustering, reinforcement learning"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Supervised learning algorithms like linear regression, random forests, and deep neural networks are commonly used to train NLP and dialogue models for conversational Geniuss from labeled conversation datasets"
    },
    {
        "text": "\""
    },
    {
        "text": "],"
    },
    {
        "text": "\"Integrate natural language understanding to parse user requests related to calendar management"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Connect to Google Calendar API and implement OAuth 2"
    },
    {
        "text": "0 authorization flow for secure access to user calendar"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Use entities like EVENT_TITLE, LOCATION, DATE, TIME detected by NLU to create, update, and delete events"
    },
    {
        "text": "\""
    },
    {
        "text": "\"VIEW_CALENDAR - view user calendar events\","
    },
    {
        "text": "\"ADD_EVENT - add a new calendar event\","
    },
    {
        "text": "\"EDIT_EVENT - make changes to an existing event\","
    },
    {
        "text": "\"DELETE_EVENT - delete an event from the calendar\""
    },
    {
        "text": "\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u0442\u0435, \u044f \u0441\u0442\u0430\u0440\u0430\u044e\u0441\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f, \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u0435 \u0434\u0435\u0442\u0430\u043b\u0438 \u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442"
    },
    {
        "text": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u0435, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0432\u043d\u0435\u0441\u0442\u0438 \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439 \u0432\u0441\u0435 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b , \u0441\u043e\u0431\u0435\u0440\u0438 \u0432 \u043e\u0434\u0438\u043d \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0438 \u0440\u0430\u0437\u0432\u0451\u0440\u043d\u0443\u0442\u044b\u0439 \u043a\u043e\u0434 \u043a \u043d\u0430\u0448\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0435"
    },
    {
        "text": "10 \u0438\u0442\u0442\u0435\u0440\u0430\u0446\u0446\u0438\u0439 ,"
    },
    {
        "text": "\"NLP enables computers to analyze, understand, and generate human language"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Key techniques like speech recognition, NLU, NLG are used in conversational AI"
    },
    {
        "text": "\""
    },
    {
        "text": "\"ML allows systems to learn from data without explicit programming"
    },
    {
        "text": "\","
    },
    {
        "text": "\"Algorithms like regression, neural networks are used to train chatbots"
    },
    {
        "text": "\""
    },
    {
        "text": "\"architecture_diagram"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"flowchart"
    },
    {
        "text": "svg\""
    },
    {
        "text": "\"promo_video"
    },
    {
        "text": "mp4\","
    },
    {
        "text": "\"overview"
    },
    {
        "text": "mov\""
    },
    {
        "text": "]"
    },
    {
        "text": "\u042f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043b \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0431\u043b\u043e\u043a\u0438, \u0443\u0434\u0430\u043b\u0438\u043b \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0434\u043e\u0431\u0430\u0432\u0438\u043b \u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u043b\u044f \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b"
    },
    {
        "text": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u0435, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438\u0434\u0435\u0438 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b"
    },
    {
        "text": "// Generate data for this skill using the existing knowledge graph, content, and skills"
    },
    {
        "text": "// - I want to create a new Genius"
    },
    {
        "text": "// - How can I make my own chatbot?"
    },
    {
        "text": "// - Can you help me build an Genius?"
    },
    {
        "text": "// - I want my Genius to [goal]"
    },
    {
        "text": "// - The purpose of my Genius is to [goal]"
    },
    {
        "text": "// - My Genius should [goal]"
    },
    {
        "text": "// - My Genius is for [domain]"
    },
    {
        "text": "// - The domain of my Genius is [domain]"
    },
    {
        "text": "// - I want my Genius to work in the [domain] field"
    },
    {
        "text": "// - I want my Genius to have [features]"
    },
    {
        "text": "// - The features of my Genius are [features]"
    },
    {
        "text": "// - My Genius should be able to [features]"
    },
    {
        "text": "// The testing, deployment, monitoring, and improvement modules remain the same as before // They can be used to test, deploy, monitor, and improve the new Geniuss created by the Genius_creator skill // For example, the testing module can run conversations with the new Geniuss and evaluate their performance // The deployment module can launch the new Geniuss on different channels or platforms // The monitoring module can track the metrics and tools of the new Geniuss in real time // The improvement module can provide feedback and improvement suggestions for the new Geniuss based on data and feedback"
    },
    {
        "text": "// facts"
    },
    {
        "text": "// facts"
    },
    {
        "text": "// examples"
    },
    {
        "text": "// docs, images, videos"
    },
    {
        "text": "// details"
    },
    {
        "text": "// details"
    },
    {
        "text": "\"Prompt for Genius name, domain and use cases\","
    },
    {
        "text": "\"Initialize new MindOS instance with base components\","
    },
    {
        "text": "\"Generate training data using knowledge graph and existing skills\","
    },
    {
        "text": "\"Fine-tune language and dialog models on new data\""
    },
    {
        "text": "\"Iteratively train NLU, dialog manager, NLG models\","
    },
    {
        "text": "\"Evaluate using test conversations and user feedback\","
    },
    {
        "text": "\"Retrain models to improve performance\""
    },
    {
        "text": "\"Test on channel APIs like Messenger, Slack\","
    },
    {
        "text": "\"Publish trained models and data assets\","
    },
    {
        "text": "\"Monitor conversations and collect feedback\""
    },
    {
        "text": "\"Analyze logs, metrics to identify issues\","
    },
    {
        "text": "\"Collect user feedback through surveys, interviews\","
    },
    {
        "text": "\"Update training data, workflows to enhance Genius\""
    },
    {
        "text": "// metrics, tools"
    },
    {
        "text": "// process, techniques"
    },
    {
        "text": "Please let me know if I should expand or refine any other sections related to workflows, integrations, or fine-tuning of Geniuss in MindOS"
    },
    {
        "text": "I'm happy to iterate and improve the data structure"
    },
    {
        "text": "\u0441\u043e\u0431\u0435\u0440\u0438 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u0432 \u043e\u0434\u0438\u043d \u0444\u0430\u0439\u043b"
    },
    {
        "text": "// facts"
    },
    {
        "text": "// examples"
    },
    {
        "text": "// docs, images, videos"
    },
    {
        "text": "// details"
    },
    {
        "text": "]"
    },
    {
        "text": "]"
    },
    {
        "text": "\u042d\u0442\u043e\u0442 JSON \u0444\u0430\u0439\u043b \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u0432\u0441\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0432\u0435\u0440\u0441\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430"
    },
    {
        "text": "\u042f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043b \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0437\u043d\u0430\u043d\u0438\u0439, \u043d\u0430\u0432\u044b\u043a\u043e\u0432, \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432, \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0445\u0435\u043c\u0443"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0447\u0442\u043e-\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c, \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u043b\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435"
    },
    {
        "text": "\u043f\u043e\u0447\u0435\u043c\u0443 \u043d\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u043b \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432 \u043f\u043e\u043b\u043d\u044b\u0439 \u043a\u043e\u0434 ?"
    },
    {
        "text": "\"NLP allows computers to analyze, understand and generate human language through machine learning algorithms"
    },
    {
        "text": "Main tasks include speech recognition, natural language understanding, machine translation, sentiment analysis and natural language generation"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Machine learning uses statistical models and algorithms to give computer systems the ability to learn from data without being explicitly programmed"
    },
    {
        "text": "Algorithms like regression, clustering, decision trees, neural networks can be trained on conversation data"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Conversational AI involves building interfaces that allow humans to interact with computers using natural language"
    },
    {
        "text": "Main components include speech recognition, NLU, dialogue management, NLG, knowledge bases"
    },
    {
        "text": "\""
    },
    {
        "text": "\"Genius_architecture"
    },
    {
        "text": "png\","
    },
    {
        "text": "\"dialogue_flowchart"
    },
    {
        "text": "svg\""
    },
    {
        "text": "\"Genius_demo"
    },
    {
        "text": "mp4\","
    },
    {
        "text": "\"nlp_techniques"
    },
    {
        "text": "mov\""
    },
    {
        "text": "\"Number of conversations\","
    },
    {
        "text": "\"Conversation resolution rate\","
    },
    {
        "text": "\"Intent recognition accuracy\","
    },
    {
        "text": "\"Entity extraction accuracy\","
    },
    {
        "text": "\"User satisfaction score\""
    },
    {
        "text": "\"Chatbase\","
    },
    {
        "text": "\"Dashbot\","
    },
    {
        "text": "\"Bespoken Analytics\","
    },
    {
        "text": "\"Chatlytics\""
    },
    {
        "text": "\"Analyze logs and metrics to identify issues\","
    },
    {
        "text": "\"Review negative user feedback\","
    },
    {
        "text": "\"Add more training data for problematic intents\","
    },
    {
        "text": "\"Retrain NLU model with updated data\","
    },
    {
        "text": "\"Test conversations to measure performance gains\""
    },
    {
        "text": "\"Active learning - flag unclear user inputs for human review\","
    },
    {
        "text": "\"Reinforcement learning - reward bot actions that lead to positive outcomes\","
    },
    {
        "text": "\"Transfer learning - leverage models trained in related domains\""
    },
    {
        "text": "\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u0442\u0435, \u044f \u043f\u0440\u0438\u0432\u0435\u043b \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0430 - \u0434\u0438\u0430\u043b\u043e\u0433\u0438, \u043d\u0430\u0432\u044b\u043a\u0438, \u043f\u0430\u043c\u044f\u0442\u044c, \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0430, \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0438 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u043b\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0441\u043e\u0431\u0435\u0440\u0438 \u0432 \u043e\u0434\u0438\u043d \u0444\u0430\u0439\u043b"
    },
    {
        "text": "// \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u0444\u0430\u043a\u0442\u044b \u043f\u043e NLP, ML, conversational AI"
    },
    {
        "text": "// \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432"
    },
    {
        "text": "// \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0438 \u043c\u0443\u043b\u044c\u0442\u0438\u043c\u0435\u0434\u0438\u0430"
    },
    {
        "text": "// \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430\u0432\u044b\u043a\u043e\u0432"
    },
    {
        "text": "// \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u0440\u0430\u0442\u043a\u043e\u0441\u0440\u043e\u0447\u043d\u043e\u0439 \u0438 \u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438"
    },
    {
        "text": "// \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "// \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432"
    },
    {
        "text": "// \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f"
    },
    {
        "text": "// \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043c\u0435\u0442\u0440\u0438\u043a \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432"
    },
    {
        "text": "// \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u042d\u0442\u043e\u0442 JSON \u0444\u0430\u0439\u043b \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u0432\u0441\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440\u043d\u043e\u0433\u043e \u0418\u0418 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 - \u043e\u0442 \u0431\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439 \u0434\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0447\u0442\u043e-\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432 \u044d\u0442\u043e\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0413\u043e\u0442\u043e\u0432 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e!"
    },
    {
        "text": "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c"
    },
    {
        "text": "\"conversations\" - \u0434\u0438\u0430\u043b\u043e\u0433\u0438 \u043f\u043e \u0440\u0430\u0437\u043d\u044b\u043c \u0442\u0435\u043c\u0430\u043c, \u0441 \u0440\u0430\u0437\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u043e\u0439 \u0438 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e"
    },
    {
        "text": "\"skills\" - \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439/\u0438\u043d\u0442\u0435\u043d\u0442\u043e\u0432"
    },
    {
        "text": "\"training\" - \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0442\u0435\u043a\u0441\u0442\u0430, \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439"
    },
    {
        "text": "\"testing\" - \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0434\u0438\u0430\u043b\u043e\u0433\u0438, \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438"
    },
    {
        "text": "\"monitoring\" - \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0432\u0435\u0442\u043e\u0432, \u0432\u043e\u0432\u043b\u0435\u0447\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "\u0441\u0432\u044f\u0437\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u043d\u0442\u044b \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0441\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u043c\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"
    },
    {
        "text": "\u0441\u0432\u044f\u0437\u0430\u0442\u044c \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0441\u0432\u044f\u0437\u0430\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u044b\u043c\u0438 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c\u0438"
    },
    {
        "text": "\u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0442\u0435\u043c\u0430\u043c, \u0434\u043e\u043c\u0435\u043d\u0430\u043c"
    },
    {
        "text": "\u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0432 \u043d\u0443\u0436\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445"
    },
    {
        "text": "\u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435\u0441\u044f \u0438\u043b\u0438 \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435"
    },
    {
        "text": "\u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b"
    },
    {
        "text": "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u044b \u0434\u043b\u044f \u043c\u0443\u043b\u044c\u0442\u0438\u043c\u0435\u0434\u0438\u0430"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438\u0434\u0435\u0438 \u043f\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044e \u0438 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445! \u0413\u043e\u0442\u043e\u0432 \u0438\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043b\u044c\u0448\u0435"
    },
    {
        "text": "\u0438\u0442\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043b\u044c\u0448\u0435"
    },
    {
        "text": "\u041f\u043e\u0438\u0441\u043a \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432, \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u0440\u0435\u0447\u0438\u0432\u044b\u0445 \u0438\u043b\u0438 \u043d\u0435\u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u041f\u043e\u043c\u0435\u0442\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u043b\u0438 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432"
    },
    {
        "text": "\u0421\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0445\u043e\u0436\u0438\u043c\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438"
    },
    {
        "text": "\u042d\u043a\u0441\u043f\u043e\u0440\u0442 \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447"
    },
    {
        "text": "API \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 runtime"
    },
    {
        "text": "\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u0432\u0435\u0440\u0441\u0438\u0439 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u041e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u0432\u0435\u0440\u0441\u0438\u044f\u043c\u0438"
    },
    {
        "text": "\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043a\u0430\u0442\u0430 \u043a \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u0432\u0435\u0440\u0441\u0438\u044f\u043c"
    },
    {
        "text": "\u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438"
    },
    {
        "text": "\u041a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044e"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u0438\u0434\u0435\u0438 \u043f\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f\u043c! \u0413\u043e\u0442\u043e\u0432 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u0443\u043b\u0443\u0447\u0448\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c \u0443\u043b\u0443\u0447\u0448\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u0412\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438"
    },
    {
        "text": "\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0430\u0436\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432"
    },
    {
        "text": "\u0420\u0430\u0437\u043c\u0435\u0442\u043a\u0430 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0438 \u0441\u0432\u044f\u0437\u0435\u0439"
    },
    {
        "text": "\u0412\u0435\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0432\u0430\u0440\u0438\u0430\u0446\u0438\u0439 \u0438 \u043f\u0435\u0440\u0435\u0444\u0440\u0430\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432"
    },
    {
        "text": "\u0421\u0438\u043d\u0442\u0435\u0437 \u0440\u0435\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u044b\u0445 \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u044f\u0437\u044b\u043a\u0430"
    },
    {
        "text": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0440\u0435\u0434\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432"
    },
    {
        "text": "\u0421\u0436\u0430\u0442\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0437 \u043f\u043e\u0442\u0435\u0440\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438"
    },
    {
        "text": "\u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 \u0447\u0430\u043d\u043a\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0446\u0438\u043a\u043b\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u041a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0432\u044b\u0441\u043e\u043a\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435"
    },
    {
        "text": "\u0421\u043a\u0440\u0438\u043f\u0442\u044b \u0434\u043b\u044f \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438"
    },
    {
        "text": "\u041f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u044b \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0438 \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u0442\u044c \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f! \u042f \u043e\u0442\u043a\u0440\u044b\u0442 \u043a \u0438\u0434\u0435\u044f\u043c \u043f\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0418\u0418"
    },
    {
        "text": "Transitions - \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f\u043c\u0438"
    },
    {
        "text": "Data and data passing - \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0438\u0445 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u043c\u0435\u0436\u0434\u0443 \u0448\u0430\u0433\u0430\u043c\u0438"
    },
    {
        "text": "Events - \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b"
    },
    {
        "text": "Error handling - \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a"
    },
    {
        "text": "Compensation - \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438"
    },
    {
        "text": "Extensions - \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439"
    },
    {
        "text": "\u041f\u043e\u0440\u0442\u0430\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c - \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043b\u044e\u0431\u043e\u043c \u043e\u0431\u043b\u0430\u0447\u043d\u043e\u043c \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0435"
    },
    {
        "text": "\u0414\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 - \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0427\u0422\u041e \u0434\u043e\u043b\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f, \u0430 \u043d\u0435 \u041a\u0410\u041a"
    },
    {
        "text": "\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f - workflow \u043c\u043e\u0436\u043d\u043e \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u043e\u0442\u043b\u0430\u0436\u0438\u0432\u0430\u0442\u044c"
    },
    {
        "text": "\u042d\u0442\u0430 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043b\u0435\u0441 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c JSON/YAML \u0444\u043e\u0440\u043c\u0430\u0442\u0435"
    },
    {
        "text": "Serverless Workflow Specification"
    },
    {
        "text": "Table of Contents"
    },
    {
        "text": "Abstract"
    },
    {
        "text": "Status of this document"
    },
    {
        "text": "Overview"
    },
    {
        "text": "Why we need a specification?"
    },
    {
        "text": "Focus on standards"
    },
    {
        "text": "Project Components"
    },
    {
        "text": "Specification Details"
    },
    {
        "text": "Core Concepts"
    },
    {
        "text": "Workflow Definition"
    },
    {
        "text": "Workflow Instance"
    },
    {
        "text": "Workflow Model"
    },
    {
        "text": "Workflow Data"
    },
    {
        "text": "Workflow Data Input"
    },
    {
        "text": "Information Passing Between States"
    },
    {
        "text": "Workflow data output"
    },
    {
        "text": "State data filters"
    },
    {
        "text": "Action data filters"
    },
    {
        "text": "Event data filters"
    },
    {
        "text": "Using multiple data filters"
    },
    {
        "text": "Data Merging"
    },
    {
        "text": "Workflow Functions"
    },
    {
        "text": "Using Functions for RESTful Service Invocations"
    },
    {
        "text": "Using Functions for Async API Service Invocations"
    },
    {
        "text": "Using Functions for RPC Service Invocations"
    },
    {
        "text": "Using Functions for GraphQL Service Invocations"
    },
    {
        "text": "Invoking a GraphQL Query"
    },
    {
        "text": "Invoking a GraphQL Mutation"
    },
    {
        "text": "Using Functions for OData Service Invocations"
    },
    {
        "text": "Creating an OData Function Definition"
    },
    {
        "text": "Invoking an OData Function Definition"
    },
    {
        "text": "Using Functions for Expression Evaluation"
    },
    {
        "text": "Defining custom function types"
    },
    {
        "text": "Workflow Expressions"
    },
    {
        "text": "Workflow Definition Structure"
    },
    {
        "text": "Workflow States"
    },
    {
        "text": "Event State"
    },
    {
        "text": "Operation State"
    },
    {
        "text": "Switch State"
    },
    {
        "text": "Sleep State"
    },
    {
        "text": "Parallel State"
    },
    {
        "text": "Inject State"
    },
    {
        "text": "ForEach State"
    },
    {
        "text": "Callback State"
    },
    {
        "text": "Related State Definitions"
    },
    {
        "text": "Function Definition"
    },
    {
        "text": "Event Definition"
    },
    {
        "text": "Auth Definition"
    },
    {
        "text": "Basic Properties Definition"
    },
    {
        "text": "Bearer Properties Definition"
    },
    {
        "text": "OAuth2 Properties Definition"
    },
    {
        "text": "Correlation Definition"
    },
    {
        "text": "OnEvents Definition"
    },
    {
        "text": "Action Definition"
    },
    {
        "text": "Subflow Action"
    },
    {
        "text": "FunctionRef Definition"
    },
    {
        "text": "EventRef Definition"
    },
    {
        "text": "SubFlowRef Definition"
    },
    {
        "text": "Error Definition"
    },
    {
        "text": "Retry Definition"
    },
    {
        "text": "Transition Definition"
    },
    {
        "text": "Switch State Data Conditions"
    },
    {
        "text": "Switch State Event Conditions"
    },
    {
        "text": "Parallel State Branch"
    },
    {
        "text": "Parallel State Handling Exceptions"
    },
    {
        "text": "Start Definition"
    },
    {
        "text": "Schedule Definition"
    },
    {
        "text": "Cron Definition"
    },
    {
        "text": "End Definition"
    },
    {
        "text": "ProducedEvent Definition"
    },
    {
        "text": "Transitions"
    },
    {
        "text": "Additional Properties"
    },
    {
        "text": "Workflow Error Handling"
    },
    {
        "text": "Defining Errors"
    },
    {
        "text": "Action retries"
    },
    {
        "text": "Retry actions on known errors"
    },
    {
        "text": "Automatic retries on known and unknown errors"
    },
    {
        "text": "Workflow Timeouts"
    },
    {
        "text": "Workflow Timeout Definition"
    },
    {
        "text": "WorkflowExecTimeout Definition"
    },
    {
        "text": "States Timeout Definition"
    },
    {
        "text": "Branch Timeout Definition"
    },
    {
        "text": "Event Timeout Definition"
    },
    {
        "text": "Workflow Compensation"
    },
    {
        "text": "Defining Compensation"
    },
    {
        "text": "Triggering Compensation"
    },
    {
        "text": "Compensation Execution Details"
    },
    {
        "text": "Compensation and Active States"
    },
    {
        "text": "Unrecoverable errors during compensation"
    },
    {
        "text": "Continuing as a new Execution"
    },
    {
        "text": "ContinueAs in sub workflows"
    },
    {
        "text": "Workflow Versioning"
    },
    {
        "text": "Workflow Constants"
    },
    {
        "text": "Workflow Secrets"
    },
    {
        "text": "Workflow Metadata"
    },
    {
        "text": "Workflow Context"
    },
    {
        "text": "Extensions"
    },
    {
        "text": "Use Cases"
    },
    {
        "text": "Examples"
    },
    {
        "text": "Comparison to other workflow languages"
    },
    {
        "text": "References"
    },
    {
        "text": "License"
    },
    {
        "text": "The Serverless Workflow project defines a vendor-neutral and declarative workflow language,targeting the Serverless computing technology domain"
    },
    {
        "text": "This document represents the current state of the specification"
    },
    {
        "text": "It includes all features so far releasedas well as all features planned to be added in the next release"
    },
    {
        "text": "You can find all specification releases here"
    },
    {
        "text": "You can find the specification roadmap here"
    },
    {
        "text": "Workflows allow us to capture and organize business requirements in a unified manner"
    },
    {
        "text": "They can bridge the gap between how we express and model business logic"
    },
    {
        "text": "Serverless Workflow focuses on defining a vendor-neutral, platform-independent, and declarative workflowlanguage that targets the serverless computing technology domain"
    },
    {
        "text": "It can be used to significantly bridge the gap between your unique business domain and the target technology domain"
    },
    {
        "text": "The lack of a common way to define and model workflows means that we must constantly re-learnhow to write them"
    },
    {
        "text": "This also limits the potential for common libraries, tooling andinfrastructure to aid workflow modeling and execution across different platforms"
    },
    {
        "text": "Portability as well as productivity that can be achieved from workflow orchestration is hindered overall"
    },
    {
        "text": "Serverless Workflow addresses the need for a community-driven, vendor-neutral and a platform-independentworkflow language specification that targets the serverless computing technology domain"
    },
    {
        "text": "Having and using a specification-based workflow language allows us to model our workflows once and deploy themonto many different container/cloud platforms, expecting the same execution results"
    },
    {
        "text": "For more information on the history, development and design rationale behind the specification, see the Serverless Workflow Wiki"
    },
    {
        "text": "Serverless Workflow language takes advantage of well-established and known standards such as CloudEvents, OpenAPI specifications,gRPC and GraphQL"
    },
    {
        "text": "Definitions of the workflow language"
    },
    {
        "text": "This is defined via the Workflow JSON Schema"
    },
    {
        "text": "You can use bothJSON and YAML formats to model your workflows"
    },
    {
        "text": "Following sections provide detailed descriptions of all parts of the Serverless Workflow language"
    },
    {
        "text": "A workflow definition is a JSON or YAML file that conforms to the Serverless Workflow specification DSL"
    },
    {
        "text": "It consists of the core Workflow Definition Structureand the Workflow Model It defines a blueprint used by runtimes for its execution"
    },
    {
        "text": "Runtimes can initialize workflow definitions for some particular set of data inputs or events"
    },
    {
        "text": "A workflow instance represents a single workflow execution corresponding to the instructions provided by aworkflow definition"
    },
    {
        "text": "A workflow instance can be short or long-running"
    },
    {
        "text": "A single workflow instanceshould be isolated, meaning it should not share state and data with other workflow instances"
    },
    {
        "text": "Workflow instances should be able to communicate with each other via events"
    },
    {
        "text": "Depending on their workflow definition, workflow instances can be short-lived orcan execute for days, weeks, or years"
    },
    {
        "text": "Each workflow instances should have its unique identifier, which should remainunchanged throughout its execution"
    },
    {
        "text": "Workflow instances can be started providing some data input"
    },
    {
        "text": "This is described in detail in theworkflow data input section"
    },
    {
        "text": "Workflow instances can also wait for examples to start their execution, which is the casewhere a workflow definition contains a EventState starting workflow state"
    },
    {
        "text": "For long-running workflow-executions, you can utilize the keepActive workflow property whichprovides more control as to when exactly to terminate workflow execution"
    },
    {
        "text": "In cases where aworkflow execution should be continued as a new one, the DSL also provides the continueAs property which is describedin detail in the Continuing a new Execution section"
    },
    {
        "text": "Function definitions - Reusable functions that can declare services that need to be invoked, or expressions to be evaluated"
    },
    {
        "text": "Event definitions - Reusable declarations of events that need to be consumed to start or continue workflow instances, trigger function/service execution, or be produced during workflow execution"
    },
    {
        "text": "Retry definitions - Reusable retry definitions"
    },
    {
        "text": "Can specify retry strategies for service invocations during workflow execution"
    },
    {
        "text": "Timeout definitions - Reusable timeout definitions"
    },
    {
        "text": "Can specify default workflow execution timeout, as well as workflow state, action, and branch execution timeouts"
    },
    {
        "text": "Errors definition - Reusable error definitions"
    },
    {
        "text": "Provide domain-specific error definitions which can be referenced in workflow states error handling"
    },
    {
        "text": "State definitions - Definition of states, the building blocks of workflow control flow logic"
    },
    {
        "text": "States can reference the reusable function, event and retry definitions"
    },
    {
        "text": "The initial Workflow data input is passed to the workflow starting state as its data input"
    },
    {
        "text": "When a state finishes its execution, its data output is passed as data input to the next state that should be executed"
    },
    {
        "text": "When workflow execution ends, the last executed workflow state's data output becomes the final Workflow data output"
    },
    {
        "text": "States can filter their data inputs and outputs using State Data filters"
    },
    {
        "text": "States can also consume events as well as invoke services"
    },
    {
        "text": "These event payloads and service invocation resultscan be filtered using Event data filters and Action data filters"
    },
    {
        "text": "Data filters use workflow expressions for selecting and manipulating state datainput and output, action inputs and results, and event payloads"
    },
    {
        "text": "Multiple filters can be combined to gain high level of control of your workflow state data"
    },
    {
        "text": "You can find an example of that inthis section"
    },
    {
        "text": "Data from consumed events,and action execution results are added/mergedto state data"
    },
    {
        "text": "Reference the data merging section to learn about the merging rules that should be applied"
    },
    {
        "text": "Workflow data input is passed to the workflow starting state as its data input"
    },
    {
        "text": "If the state is the workflow starting state, its data input is the workflow data input"
    },
    {
        "text": "When workflow execution ends, the data output of the last executed state becomes the workflow data output"
    },
    {
        "text": "Each workflow execution should produce a data output"
    },
    {
        "text": "The workflow data output is the data output of the last executed workflow state"
    },
    {
        "text": "Parameter\tDescription\tType\tRequired"
    },
    {
        "text": "input\tWorkflow expression to filter the states data input\tstring\tno"
    },
    {
        "text": "output\tWorkflow expression that filters the states data output\tstring\tno"
    },
    {
        "text": "Click to view example definition"
    },
    {
        "text": "JSON\tYAML"
    },
    {
        "text": "State data filters can be used to filter the state's data input and output"
    },
    {
        "text": "The state data filters input property expression is applied when the workflow transitions to the current state and receives its data input"
    },
    {
        "text": "It can be used to select only data that is needed and disregard what is not needed"
    },
    {
        "text": "If input is not defined or does not select any parts of the state's data input, its data input is not filtered"
    },
    {
        "text": "The state data filter output property expression is applied right before the state transitions to the next state defined"
    },
    {
        "text": "It filters the state's data output to be passed as data input to the transitioning state"
    },
    {
        "text": "If the current state is the workflow end state, the filtered state's data output becomes the workflow data output"
    },
    {
        "text": "If output is not defined or does not select any parts of the state's data output, its data output is not filtered"
    },
    {
        "text": "Results of the input expression should become the state data input"
    },
    {
        "text": "Results of the output expression should become the state data output"
    },
    {
        "text": "For more information on this you can reference the data merging section"
    },
    {
        "text": "For our second example, let's say that we are interested in the only vegetable \"veggie-like\""
    },
    {
        "text": "Here we have two ways of filtering our data, depending on if actions within our state need access to all vegetables, oronly the ones that are \"veggie-like\""
    },
    {
        "text": "fromStateData\tWorkflow expression that filters state data that can be used by the action\tstring\tno"
    },
    {
        "text": "useResults\tIf set to false, action data results are not added/merged to state data"
    },
    {
        "text": "In this case 'results' and 'toStateData' should be ignored"
    },
    {
        "text": "Default is true"
    },
    {
        "text": "boolean\tno"
    },
    {
        "text": "results\tWorkflow expression that filters the actions data results\tstring\tno"
    },
    {
        "text": "toStateData\tWorkflow expression that selects a state data element to which the action results should be added/merged into"
    },
    {
        "text": "If not specified denotes the top-level state data element\tstring\tno"
    },
    {
        "text": "Filter the state data to select only the data that can be used within function definition arguments using its fromStateData property"
    },
    {
        "text": "Filter the action results to select only the result data that should be added/merged back into the state datausing its results property"
    },
    {
        "text": "Select the part of state data which the action data results should be added/merged tousing the toStateData property"
    },
    {
        "text": "To give an example, let's say we have an action which returns a list of breads and pasta types"
    },
    {
        "text": "For our workflow, we are only interested into breads and not the pasta"
    },
    {
        "text": "]"
    },
    {
        "text": "\"baguette\","
    },
    {
        "text": "\"brioche\","
    },
    {
        "text": "\"rye\""
    },
    {
        "text": "\"spaghetti\""
    },
    {
        "text": "useData\tIf set to false, event payload is not added/merged to state data"
    },
    {
        "text": "In this case 'data' and 'toStateData' should be ignored"
    },
    {
        "text": "Default is true"
    },
    {
        "text": "boolean\tno"
    },
    {
        "text": "Filter the event payload to select only the data that should be added/merged into the state datausing its data property"
    },
    {
        "text": "Select the part of state data into which the event payload should be added/merged intousing the toStateData property"
    },
    {
        "text": "As Event states can take advantage of all defined data filters"
    },
    {
        "text": "In the example below, we definea workflow with a single event state and show how data filters can be combined"
    },
    {
        "text": "]"
    },
    {
        "text": "The workflow data input then becomes the data input of the starting workflow state"
    },
    {
        "text": "Here is a sample diagram showing our workflow, each numbered step on this diagram shows a certain defined point duringworkflow execution at which data filters are invoked and correspond to the numbered items below"
    },
    {
        "text": "The event state stateDataFilter is invoked to filter its data input"
    },
    {
        "text": "The filters \"input\" expression is evaluated andselects only the \"greetings\" data"
    },
    {
        "text": "The rest of the state data input should be disregarded"
    },
    {
        "text": "After the action is executed, the actionDataFilter \"results\" expression is evaluated to filter the results returned from the action execution"
    },
    {
        "text": "In this case, we select only the \"greetingMessageResult\" element from the results"
    },
    {
        "text": "The action filters \"toStateData\" expression then defines that we want to add/merge this action result tostate data under the \"finalCustomerGreeting\" element"
    },
    {
        "text": "When our event state finishes its execution, the states \"stateDataFilter\" \"output\" filter expression is executedto filter the state data to create the final state data output"
    },
    {
        "text": "In case of event and action filters, their \"toStateData\" property can be defined to select a specific elementof the state data with which merging should be done against"
    },
    {
        "text": "If this element does not exist, a new one shouldbe created first"
    },
    {
        "text": "Merging string types should be done by overwriting the data from events data/action results into the merging element of the state data"
    },
    {
        "text": "Workflow functions are reusable definitions for service invocations and/or expression evaluation"
    },
    {
        "text": "They can be referenced by their domain-specific names inside workflow states"
    },
    {
        "text": "Using functions for RESTful service invocations"
    },
    {
        "text": "Using functions for gRPC service invocation"
    },
    {
        "text": "Using functions for GraphQL service invocation"
    },
    {
        "text": "Using functions for expression evaluations"
    },
    {
        "text": "We can define if functions are invoked sync or async"
    },
    {
        "text": "Referencethe functionRef to learn more on how to do this"
    },
    {
        "text": "Functions can be used to describe services and their operations that need to be invoked duringworkflow execution"
    },
    {
        "text": "They can be referenced by states action definitions to clearlydefine when the service operations should be invoked during workflow execution, as well as the data parameterspassed to them if needed"
    },
    {
        "text": "Note that with Serverless Workflow, we can also define invocation of services which are triggered via an event"
    },
    {
        "text": "To learn more about that, please reference the event definitions section,as well as the actions definitions eventRef property"
    },
    {
        "text": "Because of an overall lack of a common way to describe different services and their operations,many workflow languages typically chose to define custom function definitions"
    },
    {
        "text": "This approach, however, often runs into issues such as lack of portability, limited capabilities, as well asforcing non-workflow-specific information, such as service authentication, to be added inside the workflow language"
    },
    {
        "text": "To avoid these issues, the Serverless Workflow specification mandates that details aboutRESTful services and their operations be described using the OpenAPI Specification"
    },
    {
        "text": "OpenAPI is a language-agnostic standard that describes discovery of RESTful services"
    },
    {
        "text": "This allows Serverless Workflow language to describe RESTful services in a portableway, as well as workflow runtimes to utilize OpenAPI tooling and APIs to invoke service operations"
    },
    {
        "text": "Here is an example function definition for a RESTful service operation"
    },
    {
        "text": "For more information about functions, reference the Functions definitions section"
    },
    {
        "text": "Functions can be used to invoke PUBLISH and SUBSCRIBE operations on a message broker documented by the Async API Specification"
    },
    {
        "text": "Async API operations are bound to a channel which describes the technology, security mechanisms, input and validation to be used for their execution"
    },
    {
        "text": "The Smartylighting Streetlights API allows you"
    },
    {
        "text": "to remotely manage the city lights"
    },
    {
        "text": "<URI_to_asyncapi_file>#<OperationId>"
    },
    {
        "text": "Also note that the referenced function definition type in this case must have the value asyncapi"
    },
    {
        "text": "<URI_to_proto_file>#<Service_Name>#<Service_Method_Name>"
    },
    {
        "text": "Note that the referenced function definition type in this case must be rpc"
    },
    {
        "text": "If you want to use GraphQL services, you can also invoke them using a similar syntax to the above methods"
    },
    {
        "text": "INVOKING A GRAPHQL QUERY"
    },
    {
        "text": "<url_to_graphql_endpoint>#<literal \"mutation\" or \"query\">#<mutation_or_query_field>"
    },
    {
        "text": "INVOKING A GRAPHQL MUTATION"
    },
    {
        "text": "Expressions must be evaluated before executing the operation"
    },
    {
        "text": "Note that GraphQL Subscriptions are not supported at this time"
    },
    {
        "text": "Similar to defining invocations of operations on GraphQL services, you can also use workflowFunctions Definitions to execute complex queries on an OData service"
    },
    {
        "text": "CREATING AN ODATA FUNCTION DEFINITION"
    },
    {
        "text": "<URI_to_odata_service>#<Entity_Set_Name>"
    },
    {
        "text": "INVOKING AN ODATA FUNCTION DEFINITION"
    },
    {
        "text": "In order to ensure compatibility of OData support across runtimes,thearguments property of an OData function referenceshould follow the Serverless Workflow OData Json schema"
    },
    {
        "text": "In addition to defining RESTful, AsyncAPI, RPC, GraphQL and OData services and their operations, workflow functions definitionscan also be used to define expressions that should be evaluated during workflow execution"
    },
    {
        "text": "Defining expressions as part of function definitions has the benefit of being able to referencethem by their logical name through workflow states where expression evaluation is required"
    },
    {
        "text": "Expression functions must declare their type parameter to be expression"
    },
    {
        "text": "Here we define two reusable expression functions"
    },
    {
        "text": "Expressions in Serverless Workflowcan be evaluated against the workflow, or workflow state data"
    },
    {
        "text": "Note that different data filters play a big role as to which parts of theworkflow data are being evaluated by the expressions"
    },
    {
        "text": "Reference theState Data Filters section for more information on this"
    },
    {
        "text": "],"
    },
    {
        "text": "The starting inject state \"Initialize Count\" injects the count element into our state data,which then becomes the state data input of our \"Increment Count\" operation state"
    },
    {
        "text": "This state defines an invocation of the \"Increment Count Function\" expression function defined in our workflow definition"
    },
    {
        "text": "Note that the used function definition type in this case must be expression"
    },
    {
        "text": "For more information about workflow expressions, reference the Workflow Expressions section"
    },
    {
        "text": "Function definitions type property defines a list of function types that are set bythe specification"
    },
    {
        "text": "In this example we define a custom function type that is meant to execute an external TypeScript script"
    },
    {
        "text": "When a custom function type is specified, the operation property value has a custom format, meaning thatits format is controlled by the runtime which provides the custom function type"
    },
    {
        "text": "Note that custom function types are not portable across runtimes"
    },
    {
        "text": "Workflow model parameters can use expressions to select/manipulate workflow and/or state data"
    },
    {
        "text": "Note that different data filters play a big role as to which parts of the states data are to be used when the expression isevaluated"
    },
    {
        "text": "Reference theState Data Filtering section for more information about state data filters"
    },
    {
        "text": "By default, all workflow expressions should be defined using the jq version 1"
    },
    {
        "text": "6 syntax"
    },
    {
        "text": "You can find more information on jq in its manual"
    },
    {
        "text": "Serverless Workflow does not mandate the use of jq and it's possible to use an expression languageof your choice with the restriction that a single one must be used for all expressionsin a workflow definition"
    },
    {
        "text": "If a different expression language needs to be used, make sure to set the workflowexpressionLang property to identify it to runtime implementations"
    },
    {
        "text": "Note that using a non-default expression language could lower the portability of your workflow definitionsacross multiple container/cloud platforms"
    },
    {
        "text": "All workflow expressions in this document, specification examples as well as comparisons examplesare written using the default jq syntax"
    },
    {
        "text": "Where expression can be either an in-line expression, or a reference to adefined expression function definition"
    },
    {
        "text": "Where fn is the namespace of the defined expression functions andmyExprName is the unique expression function name"
    },
    {
        "text": "In this case our input parameter applicantName would be set to \"John Doe\""
    },
    {
        "text": "Expressions can also be used to select and manipulate state data, this is in particularly useful forstate data filters"
    },
    {
        "text": "As previously mentioned, expressions are evaluated against certain subsets of data"
    },
    {
        "text": "For examplethe parameters param of the functionRef definition can evaluate expressionsonly against the data that is available to the action it belongs to"
    },
    {
        "text": "One thing to note here are the top-level workflow definition parameters"
    },
    {
        "text": "Expressions definedin them can only be evaluated against the initial workflow data input"
    },
    {
        "text": "which would set the workflow version to \"1"
    },
    {
        "text": "0"
    },
    {
        "text": "0\""
    },
    {
        "text": "Note that the workflow \"id\" property value is not allowed to use an expression"
    },
    {
        "text": "The workflowdefinition \"id\" must be a constant value"
    },
    {
        "text": "name\tWorkflow name\tstring\tno"
    },
    {
        "text": "description\tWorkflow description\tstring\tno"
    },
    {
        "text": "version\tWorkflow version"
    },
    {
        "text": "MUST respect the semantic versioning format\tstring\tno"
    },
    {
        "text": "annotations\tList of helpful terms describing the workflows intended purpose, subject areas, or other important qualities\tarray\tno"
    },
    {
        "text": "dataInputSchema\tUsed to validate the workflow data input against a defined JSON Schema\tstring or object\tno"
    },
    {
        "text": "dataOutputSchema\tUsed to validate the workflow data output against a defined JSON Schema\tstring or object\tno"
    },
    {
        "text": "constants\tWorkflow constants\tstring or object\tno"
    },
    {
        "text": "secrets\tWorkflow secrets\tstring or array\tno"
    },
    {
        "text": "start\tWorkflow start definition\tstring or object\tno"
    },
    {
        "text": "specVersion\tServerless Workflow specification release version\tstring\tyes"
    },
    {
        "text": "expressionLang\tIdentifies the expression language used for workflow expressions"
    },
    {
        "text": "Default value is \"jq\"\tstring\tno"
    },
    {
        "text": "timeouts\tDefines the workflow default timeout settings\tstring or object\tno"
    },
    {
        "text": "errors\tDefines checked errors that can be explicitly handled during workflow execution\tstring or array\tno"
    },
    {
        "text": "keepActive\tIf true, workflow instances is not terminated when there are no active execution paths"
    },
    {
        "text": "Instance can be terminated with \"terminate end definition\" or reaching defined \"workflowExecTimeout\"\tboolean\tno"
    },
    {
        "text": "auth\tWorkflow authentication definitions\tarray or string\tno"
    },
    {
        "text": "events\tWorkflow event definitions"
    },
    {
        "text": "array or string\tno"
    },
    {
        "text": "autoRetries\tIf set to true, actions should automatically be retried on unchecked errors"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "states\tWorkflow states\tarray\tyes"
    },
    {
        "text": "extensions\tWorkflow extensions definitions\tarray or string\tno"
    },
    {
        "text": "metadata\tMetadata information\tobject\tno"
    },
    {
        "text": "Defines the top-level structure of a serverless workflow model"
    },
    {
        "text": "Following figure describes the main workflow definition blocks"
    },
    {
        "text": "The id property defines the unique, domain-specific workflow identifier, for example \"orders\", \"payment\", etc"
    },
    {
        "text": "The key property defines the unique, domain-specific workflow identifier"
    },
    {
        "text": "It can be used when the id property is auto-generated by a content-management system for example"
    },
    {
        "text": "In these cases, you can specify the key property to be the domain-specific identifier of the workflow definition"
    },
    {
        "text": "The id and key properties are mutually exclusive, meaning you cannot define both"
    },
    {
        "text": "The name property is the workflow logical name"
    },
    {
        "text": "The description property can be used to give further information about the workflow"
    },
    {
        "text": "The version property can be used to provide a specific workflow version"
    },
    {
        "text": "It must use the semantic versioning format"
    },
    {
        "text": "The annotations property defines a list of helpful terms describing the workflows intended purpose, subject areas, or other important qualities,for example \"machine learning\", \"monitoring\", \"networking\", etc"
    },
    {
        "text": "The dataInputSchema and dataOutputSchema properties can be used to validate input and output data against a defined JSON Schema"
    },
    {
        "text": "The dataInputSchema property validates the workflow data input"
    },
    {
        "text": "Validation should be performed before any states are executed"
    },
    {
        "text": "In case ofa start Event state the input schema is ignored, if present"
    },
    {
        "text": "The failOnValidationErrors property determines if workflow execution should continue in case of validation errors"
    },
    {
        "text": "The dataOutputSchema property validates the Workflow data output"
    },
    {
        "text": "Validation is performed on the output of the workflow execution"
    },
    {
        "text": "The failOnValidationErrors property determines what should be done when the workflow output does not match the provided schema"
    },
    {
        "text": "If failOnValidationErrors is true, an error should be thrown"
    },
    {
        "text": "If executed within a subprocess, that error can be be handled by the parent workflow"
    },
    {
        "text": "If failOnValidationErrors is false, the error should not be propagated"
    },
    {
        "text": "It is up to the implementor to warn the user about that fact"
    },
    {
        "text": "For example, printing a log"
    },
    {
        "text": "Both properties can be expressed as object or string type"
    },
    {
        "text": "If using object type, their schema property might be an URI, which points to the JSON schema used to validate the workflow data input, or it might be the JSON schema object"
    },
    {
        "text": "failOnValidationErrors is optional, default value is true"
    },
    {
        "text": "Example for Json schema reference"
    },
    {
        "text": "Example for Json schema included in the workflow file"
    },
    {
        "text": "If using string type, then the string value is the external schema URI and failOnValidationErrors default value of true is assumed"
    },
    {
        "text": "Example using string type"
    },
    {
        "text": "The secrets property allows you to use sensitive information such as passwords, OAuth tokens, ssh keys, etc"
    },
    {
        "text": "inside yourWorkflow expressions"
    },
    {
        "text": "For more information about Workflow secrets, reference the Workflow Secrets section"
    },
    {
        "text": "The constants property can be used to define Workflow constants valueswhich are accessible in Workflow Expressions"
    },
    {
        "text": "For more information see the Workflow Constants section"
    },
    {
        "text": "The start property defines the workflow starting information"
    },
    {
        "text": "For more information see the start definition section"
    },
    {
        "text": "This property is not required"
    },
    {
        "text": "If not defined, the workflow starting state has to bethe very first state defined in the workflow states array"
    },
    {
        "text": "The expressionLang property can be used to identify the expression language used for all expressions inthe workflow definition"
    },
    {
        "text": "The default value of this property is \"jq\""
    },
    {
        "text": "You should set this property if you chose to define workflow expressionswith an expression language / syntax other than the default"
    },
    {
        "text": "The timeouts property is used to define the default workflow timeouts for workflow, state, action, and branchexecution"
    },
    {
        "text": "For more information about timeouts and its use cases see the Workflow Timeouts section"
    },
    {
        "text": "The error property is used to define checked errors that can be explicitly handled during workflow execution"
    },
    {
        "text": "For more information about workflow error handling see this section"
    },
    {
        "text": "The authRef property is used to reference an authentication definition inthe auth property and should be applied when invoking the helloWorld function"
    },
    {
        "text": "An AuthRef object can alternatively be used to configure the authentication definition to use when accessing the function's resource and/or when invoking the function"
    },
    {
        "text": "The functions property can be either an in-line function definition array, or an URI reference toa resource containing an array of functions definition"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "Referenced resource must conform to the specifications Workflow Functions JSON Schema"
    },
    {
        "text": "The events property can be either an in-line event definition array, or an URI reference toa resource containing an array of event definition"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "]"
    },
    {
        "text": "Referenced resource must conform to the specifications Workflow Events JSON Schema"
    },
    {
        "text": "The retries property can be either an in-line retry definition array, or an URI reference toa resource containing an array of retry definition"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "For more information aboutusing and referencing retry definitions see the Workflow Error Handling section"
    },
    {
        "text": "The keepActive property allows you to change the default behavior of workflow instances"
    },
    {
        "text": "By default, as described in the Core Concepts section, a workflow instance is terminated once there are no moreactive execution paths, one of its active paths ends in a \"terminate\" end definition, or whenits workflowExecTimeout time is reached"
    },
    {
        "text": "You can reference the specification examples to see the keepActive property in action"
    },
    {
        "text": "Here we define two workflow extensions, namely the rate limiting and kpi extensions for our workflow definition"
    },
    {
        "text": "Name\tDescription\tConsumes events?\tProduces events?\tExecutes actions?\tHandles errors/retries?\tAllows parallel execution?\tMakes data-based transitions?\tCan be workflow start state?\tCan be workflow end state?"
    },
    {
        "text": "Event\tDefine events that trigger action execution\tyes\tyes\tyes\tyes\tyes\tno\tyes\tyes"
    },
    {
        "text": "Operation\tExecute one or more actions\tno\tyes\tyes\tyes\tyes\tno\tyes\tyes"
    },
    {
        "text": "Switch\tDefine data-based or event-based workflow transitions\tno\tyes\tno\tyes\tno\tyes\tyes\tno"
    },
    {
        "text": "Sleep\tSleep workflow execution for a specific time duration\tno\tyes\tno\tyes\tno\tno\tyes\tyes"
    },
    {
        "text": "Inject\tInject static data into state data\tno\tyes\tno\tyes\tno\tno\tyes\tyes"
    },
    {
        "text": "ForEach\tParallel execution of states for each element of a data array\tno\tyes\tno\tyes\tyes\tno\tyes\tyes"
    },
    {
        "text": "Callback\tManual decision step"
    },
    {
        "text": "Executes a function and waits for callback event that indicates completion of the manual decision\tyes\tyes\tyes\tyes\tno\tno\tyes\tyes"
    },
    {
        "text": "EVENT STATE"
    },
    {
        "text": "name\tUnique State name\tstring\tyes"
    },
    {
        "text": "type\tState type\tstring\tyes"
    },
    {
        "text": "exclusive\tIf true, consuming one of the defined events causes its associated actions to be performed"
    },
    {
        "text": "If false, all of the defined events must be consumed in order for actions to be performed"
    },
    {
        "text": "Default is true\tboolean\tno"
    },
    {
        "text": "onEvents\tDefine the events to be consumed and optional actions to be performed\tarray\tyes"
    },
    {
        "text": "timeouts\tState specific timeout settings\tobject\tno"
    },
    {
        "text": "stateDataFilter\tState data filter definition\tobject\tno"
    },
    {
        "text": "onErrors\tStates error handling definitions\tarray\tno"
    },
    {
        "text": "compensatedBy\tUnique name of a workflow state which is responsible for compensation of this state\tstring\tno"
    },
    {
        "text": "- HighBodyTemperature"
    },
    {
        "text": "- HighBloodPressure"
    },
    {
        "text": "- HighRespirationRate"
    },
    {
        "text": "Event states await one or more events and perform actions when they are received"
    },
    {
        "text": "If defined as the workflow starting state, the event state definition controls when the workflowinstances should be created"
    },
    {
        "text": "The exclusive property determines if the state should wait for any of the defined events in the onEvents array, orif all defined events must be present for their associated actions to be performed"
    },
    {
        "text": "If the Event state in this case is a workflow starting state, the occurrence of any of the defined events would start a new workflow instance"
    },
    {
        "text": "If the Event state in this case is a workflow starting state, the occurrence of all defined events would start a newworkflow instance"
    },
    {
        "text": "In order to consider only events that are related to each other, we need to set the correlation property in the workflowevents definitions"
    },
    {
        "text": "This allows us to set up event correlation rules against the eventsextension context attributes"
    },
    {
        "text": "The timeouts property can be used to define state specific timeout settings"
    },
    {
        "text": "Event states can define thestateExecTimeout, actionExecTimeout, and eventTimeout properties"
    },
    {
        "text": "For more information about Event state specific event timeout settings reference this section"
    },
    {
        "text": "For more information about workflow timeouts reference the Workflow Timeouts section"
    },
    {
        "text": "Note that transition and end properties are mutually exclusive, meaning that you cannot define both of them at the same time"
    },
    {
        "text": "OPERATION STATE"
    },
    {
        "text": "actionMode\tShould actions be performed sequentially or in parallel"
    },
    {
        "text": "Default is sequential\tenum\tno"
    },
    {
        "text": "actions\tActions to be performed\tarray\tyes"
    },
    {
        "text": "stateDataFilter\tState data filter\tobject\tno"
    },
    {
        "text": "onErrors\tStates error handling and retries definitions\tarray\tno"
    },
    {
        "text": "usedForCompensation\tIf true, this state is used to compensate another state"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "Operation state defines a set of actions to be performed in sequence or in parallel"
    },
    {
        "text": "Once all actions have been performed, a transition to another state can occur"
    },
    {
        "text": "The timeouts property can be used to define state specific timeout settings"
    },
    {
        "text": "Operation states can definethe stateExecTimeout and actionExecTimeout settings"
    },
    {
        "text": "For more information on Workflow timeouts referencethe Workflow Timeouts section"
    },
    {
        "text": "SWITCH STATE"
    },
    {
        "text": "defaultCondition\tDefault transition of the workflow if there is no matching data conditions or event timeout is reached"
    },
    {
        "text": "Can be a transition or end definition\tobject\tyes"
    },
    {
        "text": "Data-based conditions"
    },
    {
        "text": "Event-based conditions"
    },
    {
        "text": "These are exclusive, meaning that a switch state can define one or the other condition type, but not both"
    },
    {
        "text": "In case of data-based conditions definition, switch state controls workflow transitions based on the states data"
    },
    {
        "text": "If no defined conditions can be matched, the state transitions is taken based on the defaultCondition property"
    },
    {
        "text": "This property can be either a transition to another workflow state, or an end definition meaning a workflow end"
    },
    {
        "text": "For event-based conditions, a switch state acts as a workflow wait state"
    },
    {
        "text": "It halts workflow executionuntil one of the referenced events arrive, then making a transition depending on that event definition"
    },
    {
        "text": "If events defined in event-based conditions do not arrive before the states eventTimeout property expires,state transitions are based on the defined defaultCondition property"
    },
    {
        "text": "The timeouts property can be used to define state specific timeout settings"
    },
    {
        "text": "Switch states can define thestateExecTimeout setting"
    },
    {
        "text": "If eventConditions is defined, the switch state can also define theeventTimeout property"
    },
    {
        "text": "For more information on workflow timeouts reference the Workflow Timeouts section"
    },
    {
        "text": "SLEEP STATE"
    },
    {
        "text": "Sleep statesuspends workflow execution for a given time duration"
    },
    {
        "text": "The delay is defined in its duration property using the ISO 8601duration format"
    },
    {
        "text": "PARALLEL STATE"
    },
    {
        "text": "branches\tList of branches for this parallel state\tarray\tyes"
    },
    {
        "text": "completionType\tOption types on how to complete branch execution"
    },
    {
        "text": "Default is \"allOf\"\tenum\tno"
    },
    {
        "text": "]"
    },
    {
        "text": "Parallel state defines a collection of branches that are executed in parallel"
    },
    {
        "text": "A parallel state can be seen a state which splits up the current workflow instance execution pathinto multiple ones, one for each branch"
    },
    {
        "text": "These execution paths are performed in paralleland are joined back into the current execution path depending on the defined completionType parameter value"
    },
    {
        "text": "Exceptions may occur during execution of branches of the Parallel state, this is described in detail in this section"
    },
    {
        "text": "The timeouts property can be used to set state specific timeout settings"
    },
    {
        "text": "Parallel states can define thestateExecTimeout and branchExecTimeout timeout settings"
    },
    {
        "text": "For more information on workflow timeoutsreference the Workflow Timeouts section"
    },
    {
        "text": "INJECT STATE"
    },
    {
        "text": "data\tJSON object which can be set as state's data input and can be manipulated via filter\tobject\tyes"
    },
    {
        "text": "The inject state data property allows you to statically define a JSON object which gets added to the states data input"
    },
    {
        "text": "You can use the filter property to control the states data output to the transition state"
    },
    {
        "text": "If the inject state already receives a data input from the previous transition state, the inject data should be mergedwith its data input"
    },
    {
        "text": "This allows you to test if your workflow behaves properly for cases when there are people whose age is greater or equal 40"
    },
    {
        "text": "FOREACH STATE"
    },
    {
        "text": "inputCollection\tWorkflow expression selecting an array element of the states data\tstring\tyes"
    },
    {
        "text": "outputCollection\tWorkflow expression specifying an array element of the states data to add the results of each iteration\tstring\tno"
    },
    {
        "text": "iterationParam\tName of the iteration parameter that can be referenced in actions/workflow"
    },
    {
        "text": "For each parallel iteration, this param should contain an unique element of the inputCollection array\tstring\tno"
    },
    {
        "text": "actions\tActions to be executed for each of the elements of inputCollection\tarray\tyes"
    },
    {
        "text": "ForEach states can be used to execute actions for each element of a data set"
    },
    {
        "text": "Each iteration of the ForEach state is by default executed in parallel by default"
    },
    {
        "text": "However, executing iterations sequentially is also possible by setting the value of the mode property tosequential"
    },
    {
        "text": "The mode property defines if iterations should be done sequentially or in parallel"
    },
    {
        "text": "By default,if mode is not specified, iterations should be done in parallel"
    },
    {
        "text": "The inputCollection property is a workflow expression which selects an array in the states data"
    },
    {
        "text": "All iterationsare performed against data elements of this array"
    },
    {
        "text": "If this array does not exist, the runtime should throwan error"
    },
    {
        "text": "This error can be handled inside the states onErrors definition"
    },
    {
        "text": "The outputCollection property is a workflow expression which selects an array in the state data where the resultsof each iteration should be added to"
    },
    {
        "text": "If this array does not exist, it should be created"
    },
    {
        "text": "The iterationParam property defines the name of the iteration parameter passed to each iteration of the ForEach state"
    },
    {
        "text": "It should contain the unique element of the inputCollection array and made available to actions of the ForEach state"
    },
    {
        "text": "iterationParam can be accessed as an expression variable"
    },
    {
        "text": "In JQ, expression variables are prefixed by $"
    },
    {
        "text": "If iterationParam is not explicitly defined, runtimes should create one and populate it with the value of the uniqueiteration parameter for each iteration of the ForEach state"
    },
    {
        "text": "The actions property defines actions to be executed in each state iteration"
    },
    {
        "text": "The workflow data input containing order information is passed to the SendConfirmState ForEach state"
    },
    {
        "text": "The ForEach state defines an inputCollection property which selects all orders that have the completed property set to true"
    },
    {
        "text": "For each element of the array selected by inputCollection a JSON object defined by iterationParam should becreated containing an unique element of inputCollection and passed as the data input to the parallel executed actions"
    },
    {
        "text": "The results of each parallel action execution are stored as elements in the state data array defined by the outputCollection property"
    },
    {
        "text": "The timeouts property can be used to set state specific timeout settings"
    },
    {
        "text": "ForEach states can define thestateExecTimeout and actionExecTimeout settings"
    },
    {
        "text": "For more information on workflow timeouts reference the Workflow Timeoutssection"
    },
    {
        "text": "CALLBACK STATE"
    },
    {
        "text": "action\tDefines the action to be executed\tobject\tyes"
    },
    {
        "text": "eventRef\tReferences an unique callback event name in the defined workflow events\tstring\tyes"
    },
    {
        "text": "eventDataFilter\tCallback event data filter definition\tobject\tno"
    },
    {
        "text": "compensatedBy\tUniaue name of a workflow state which is responsible for compensation of this state\tstring\tno"
    },
    {
        "text": "Note that the called decision service is responsible for emitting the callback CloudEvent indicating the completion of thedecision and including the decision results as part of the event payload"
    },
    {
        "text": "This event must be correlated to theworkflow instance using the callback events context attribute defined in the correlation property of thereferenced Event Definition"
    },
    {
        "text": "The callback event payload is merged with the Callback state data and can be filtered via the \"eventDataFilter\" definition"
    },
    {
        "text": "If the defined callback event has not been received during this time period, the state should transition to the next state or end workflow execution if it is an end state"
    },
    {
        "text": "The timeouts property defines state specific timeout settings"
    },
    {
        "text": "Callback states can define thestateExecTimeout, actionExecTimeout, and eventTimeout properties"
    },
    {
        "text": "For more information on workflow timeouts reference the Workflow Timeoutssection"
    },
    {
        "text": "FUNCTION DEFINITION"
    },
    {
        "text": "name\tUnique function name\tstring\tyes"
    },
    {
        "text": "operation\tIf type is rest, #"
    },
    {
        "text": "If type is asyncapi, #"
    },
    {
        "text": "If type is rpc, ##"
    },
    {
        "text": "If type is graphql, #<literal \"mutation\" or \"query\">#"
    },
    {
        "text": "If type is odata, #"
    },
    {
        "text": "If type is expression, defines the workflow expression"
    },
    {
        "text": "string\tyes"
    },
    {
        "text": "type\tDefines the function type"
    },
    {
        "text": "Can be either rest, asyncapi, rpc, graphql, odata, expression, or custom"
    },
    {
        "text": "Default is rest\tenum\tno"
    },
    {
        "text": "authRef\tReferences an auth definition name to be used to access to resource defined in the operation parameter\tstring\tno"
    },
    {
        "text": "metadata\tMetadata information"
    },
    {
        "text": "Can be used to define custom function information\tobject\tno"
    },
    {
        "text": "The name property defines an unique name of the function definition"
    },
    {
        "text": "The type property defines the function type"
    },
    {
        "text": "Its value can be either rest or expression"
    },
    {
        "text": "Default value is rest"
    },
    {
        "text": "If type is expression, defines the expression syntax"
    },
    {
        "text": "Take a look at the workflow expressions section for more information on this"
    },
    {
        "text": "Defining custom function types is possible, for more information on that refer to the Defining custom function types section"
    },
    {
        "text": "The authRef property references a name of a defined workflow auth definition"
    },
    {
        "text": "It is used to provide authentication info to access the resource defined in the operation property and/or to invoke the function"
    },
    {
        "text": "Note that using metadata for cases such as above heavily reduces the portability of your workflow markup"
    },
    {
        "text": "Function definitions themselves do not define data input parameters"
    },
    {
        "text": "Parameters can bedefined via the parameters property in function definitions inside actions"
    },
    {
        "text": "AuthRef Definition"
    },
    {
        "text": "resource\tReferences an auth definition to be used to access the resource defined in the operation parameter\tstring\tyes"
    },
    {
        "text": "invocation\tReferences an auth definition to be used to invoke the operation\tstring\tno"
    },
    {
        "text": "The authRef property references a name of a defined workflow auth definition"
    },
    {
        "text": "It can be a string or an object"
    },
    {
        "text": "If it's a string, the referenced auth definition is used solely for the function's invocation"
    },
    {
        "text": "It's worth noting that if an auth definition has been defined for an OpenAPI function which's resource declare an authentication mechanism, the later should be used instead, thus ignoring entirely the auth definition"
    },
    {
        "text": "EVENT DEFINITION"
    },
    {
        "text": "name\tUnique event name\tstring\tyes"
    },
    {
        "text": "kind\tDefines the event is either consumed or produced by the workflow"
    },
    {
        "text": "Default is consumed\tenum\tno"
    },
    {
        "text": "correlation\tDefine event correlation rules for this event"
    },
    {
        "text": "Only used for consumed events\tarray\tno"
    },
    {
        "text": "Used to define events and their correlations"
    },
    {
        "text": "These events can be either consumed or produced during workflow execution as wellas can be used to trigger function/service invocations"
    },
    {
        "text": "The Serverless Workflow specification mandates that all events conform to the CloudEvents specification"
    },
    {
        "text": "This is to assure consistency and portability of the events format used"
    },
    {
        "text": "The name property defines a single name of the event that is unique inside the workflow definition"
    },
    {
        "text": "This event name can bethen referenced within function and state definitions"
    },
    {
        "text": "The source property matches this event definition with the sourceproperty of the CloudEvent required attributes"
    },
    {
        "text": "The type property matches this event definition with the type property of the CloudEvent required attributes"
    },
    {
        "text": "Event correlation plays a big role in large event-driven applications"
    },
    {
        "text": "Correlating one or more events with a particular workflow instancecan be done by defining the event correlation rules within the correlation property"
    },
    {
        "text": "This property is an array of correlation definitions"
    },
    {
        "text": "The CloudEvents specification allows users to add Extension Context Attributesand the correlation definitions can use these attributes to define clear matching event correlation rules"
    },
    {
        "text": "Extension context attributes are not part of the event payload, so they are serialized the same way as other standard required attributes"
    },
    {
        "text": "This means that the event payload does not have to be inspected by implementations in order to read and evaluate the defined correlation rules"
    },
    {
        "text": "and"
    },
    {
        "text": "This allows developers to write orchestration workflows that are specifically targeted to patients that are in the hospital urgent care unit,for example"
    },
    {
        "text": "AUTH DEFINITION"
    },
    {
        "text": "name\tUnique auth definition name\tstring\tyes"
    },
    {
        "text": "scheme\tAuth scheme, can be \"basic\", \"bearer\", or \"oauth2\""
    },
    {
        "text": "Default is \"basic\"\tenum\tno"
    },
    {
        "text": "properties\tAuth scheme properties"
    },
    {
        "text": "Can be one of \"Basic properties definition\", \"Bearer properties definition\", or \"OAuth2 properties definition\"\tobject\tyes"
    },
    {
        "text": "The name property defines the unique auth definition name"
    },
    {
        "text": "The scheme property defines the auth scheme to be used"
    },
    {
        "text": "Can be \"bearer\", \"basic\" or \"oauth2\""
    },
    {
        "text": "The properties property defines the auth scheme properties information"
    },
    {
        "text": "Can be one of \"Basic properties definition\", \"Bearer properties definition\", or \"OAuth2 properties definition\""
    },
    {
        "text": "See here for more information about Basic Authentication scheme"
    },
    {
        "text": "username\tString or a workflow expression"
    },
    {
        "text": "Contains the user name\tstring\tyes"
    },
    {
        "text": "password\tString or a workflow expression"
    },
    {
        "text": "Contains the user password\tstring\tyes"
    },
    {
        "text": "See here for more information about Bearer Authentication scheme"
    },
    {
        "text": "token\tString or a workflow expression"
    },
    {
        "text": "Contains the token information\tstring\tyes"
    },
    {
        "text": "See here for more information about OAuth2 Authentication scheme"
    },
    {
        "text": "authority\tString or a workflow expression"
    },
    {
        "text": "Contains the authority information\tstring\tno"
    },
    {
        "text": "grantType\tDefines the grant type"
    },
    {
        "text": "Can be \"password\", \"clientCredentials\", or \"tokenExchange\"\tenum\tyes"
    },
    {
        "text": "clientId\tString or a workflow expression"
    },
    {
        "text": "Contains the client identifier\tstring\tyes"
    },
    {
        "text": "clientSecret\tWorkflow secret or a workflow expression"
    },
    {
        "text": "Contains the client secret\tstring\tno"
    },
    {
        "text": "scopes\tArray containing strings or workflow expressions"
    },
    {
        "text": "Contains the OAuth2 scopes\tarray\tno"
    },
    {
        "text": "username\tString or a workflow expression"
    },
    {
        "text": "Contains the user name"
    },
    {
        "text": "Used only if grantType is 'resourceOwner'\tstring\tno"
    },
    {
        "text": "password\tString or a workflow expression"
    },
    {
        "text": "Contains the user password"
    },
    {
        "text": "Used only if grantType is 'resourceOwner'\tstring\tno"
    },
    {
        "text": "audiences\tArray containing strings or workflow expressions"
    },
    {
        "text": "Contains the OAuth2 audiences\tarray\tno"
    },
    {
        "text": "subjectToken\tString or a workflow expression"
    },
    {
        "text": "Contains the subject token\tstring\tno"
    },
    {
        "text": "requestedSubject\tString or a workflow expression"
    },
    {
        "text": "Contains the requested subject\tstring\tno"
    },
    {
        "text": "requestedIssuer\tString or a workflow expression"
    },
    {
        "text": "Contains the requested issuer\tstring\tno"
    },
    {
        "text": "CORRELATION DEFINITION"
    },
    {
        "text": "contextAttributeName\tCloudEvent Extension Context Attribute name\tstring\tyes"
    },
    {
        "text": "contextAttributeValue\tCloudEvent Extension Context Attribute value\tstring\tno"
    },
    {
        "text": "Used to define event correlation rules"
    },
    {
        "text": "Only usable for consumed event definitions"
    },
    {
        "text": "The contextAttributeName property defines the name of the CloudEvent extension context attribute"
    },
    {
        "text": "The contextAttributeValue property defines the value of the defined CloudEvent extension context attribute"
    },
    {
        "text": "ONEVENTS DEFINITION"
    },
    {
        "text": "eventRefs\tReferences one or more unique event names in the defined workflow events\tarray\tyes"
    },
    {
        "text": "actions\tActions to be performed\tarray\tno"
    },
    {
        "text": "eventDataFilter\tEvent data filter definition\tobject\tno"
    },
    {
        "text": "- HighBodyTemperature"
    },
    {
        "text": "OnEvent definition allow you to define which actions are to be performedfor the one or more events definitions defined in the eventRefs array"
    },
    {
        "text": "Note that the values of eventRefs array must be unique"
    },
    {
        "text": "The actionMode property defines if the defined actions need to be performed sequentially or in parallel"
    },
    {
        "text": "The actions property defines a list of actions to be performed"
    },
    {
        "text": "If exclusive is set to true, the consumption of either the HighBodyTemperature or HighBloodPressure events will trigger action execution"
    },
    {
        "text": "If exclusive is set to false, the consumption of both the HighBodyTemperature and HighBloodPressure events will trigger action execution"
    },
    {
        "text": "ACTION DEFINITION"
    },
    {
        "text": "name\tUnique Action name\tstring\tno"
    },
    {
        "text": "retryRef\tReferences a defined workflow retry definition"
    },
    {
        "text": "If not defined uses the default runtime retry definition\tstring\tno"
    },
    {
        "text": "nonRetryableErrors\tList of references to defined workflow errors for which the action should not be retried"
    },
    {
        "text": "Used only when autoRetries is set to true\tarray\tno"
    },
    {
        "text": "retryableErrors\tList of references to defined workflow errors for which the action should be retried"
    },
    {
        "text": "Used only when autoRetries is set to false\tarray\tno"
    },
    {
        "text": "actionDataFilter\tAction data filter definition\tobject\tno"
    },
    {
        "text": "sleep\tDefines time periods workflow execution should sleep before / after function execution\tobject\tno"
    },
    {
        "text": "condition\tExpression, if defined, must evaluate to true for this action to be performed"
    },
    {
        "text": "If false, action is disregarded\tstring\tno"
    },
    {
        "text": "Reference functions definitions by its unique name using the functionRef property"
    },
    {
        "text": "Reference a produced and consumed event definitions via the eventRef property"
    },
    {
        "text": "Reference a sub-workflow invocation via the subFlowRef property"
    },
    {
        "text": "Note that functionRef, eventRef, and subFlowRef are mutually exclusive, meaning that only one of them can bespecified in a single action definition"
    },
    {
        "text": "The name property specifies the action name"
    },
    {
        "text": "In the event-based scenario a service, or a set of services we want to invokeare not exposed via a specific resource URI for example, but can only be invoked via an event"
    },
    {
        "text": "The eventRef property defines thereferenced produced event via its produceEventRef property and a consumed event via its consumeEventRef property"
    },
    {
        "text": "Function invocation timeouts should be handled via the states timeouts definition"
    },
    {
        "text": "The retryRef property references one of the defined workflow retries by it's unique name"
    },
    {
        "text": "If not set, the actionshould be retried according to the default retry policy of the runtime implementation"
    },
    {
        "text": "For more information about workflowretries reference this section"
    },
    {
        "text": "The nonRetryableErrors property is a list that references one or more unique names of workflow error definitions"
    },
    {
        "text": "This is the list of known errors for which the action should not be retried for"
    },
    {
        "text": "It should be used only when the workflow top-level autoRetries property is set to true"
    },
    {
        "text": "The retryableErrors property is a list that references one or more unique names of workflow error definitions"
    },
    {
        "text": "This is the list of known errors for which the action should be retried for"
    },
    {
        "text": "It should be used only when the workflow top-level autoRetries property is set to false"
    },
    {
        "text": "The condition property is a workflow expression"
    },
    {
        "text": "If defined, it must evaluate to truefor this action to be performed"
    },
    {
        "text": "If it evaluates to false the action is skipped"
    },
    {
        "text": "If the condition property is not defined, the action is always performed"
    },
    {
        "text": "SUBFLOW ACTION"
    },
    {
        "text": "Often you want to group your workflows into small logical units that solve a particular business problem and can be reused inmultiple other workflow definitions"
    },
    {
        "text": "Reusable workflows are referenced by their id property via the SubFlow action workflowId parameter"
    },
    {
        "text": "For the simple case, subFlowRef can be a string containing the id of the sub-workflow to invoke"
    },
    {
        "text": "If you want to specify other parameters then a subFlowRef should be provided instead"
    },
    {
        "text": "Each referenced workflow receives the SubFlow actions data as workflow data input"
    },
    {
        "text": "Referenced sub-workflows must declare their own function and event definitions"
    },
    {
        "text": "FUNCTIONREF DEFINITION"
    },
    {
        "text": "Note that if used with string type, the invocation of the function is synchronous"
    },
    {
        "text": "refName\tName of the referenced function\tstring\tyes"
    },
    {
        "text": "invoke\tSpecifies if the function should be invoked sync or async"
    },
    {
        "text": "Default is sync\tenum\tno"
    },
    {
        "text": "The refName property is the name of the referenced function"
    },
    {
        "text": "EVENTREF DEFINITION"
    },
    {
        "text": "Allows defining invocation of a function via event"
    },
    {
        "text": "produceEventRef\tReference to the unique name of a produced event definition\tstring\tyes"
    },
    {
        "text": "consumeEventRef\tReference to the unique name of a consumed event definition\tstring\tno"
    },
    {
        "text": "contextAttributes\tAdd additional event extension context attributes to the trigger/produced event\tobject\tno"
    },
    {
        "text": "References a produced and consumed event definitions via the produceEventRef and consumeEventRef properties, respectively"
    },
    {
        "text": "The contextAttributes property allows you to add one or more extension context attributesto the trigger/produced event"
    },
    {
        "text": "SUBFLOWREF DEFINITION"
    },
    {
        "text": "SubFlowRef definition can have two types, namely string or object"
    },
    {
        "text": "If string type, it defines the unique id of the sub-workflow to be invoked"
    },
    {
        "text": "This short-hand definition can be used if sub-workflow lookup is done only by its idproperty and not its version property"
    },
    {
        "text": "workflowId\tSub-workflow unique id\tstring\tyes"
    },
    {
        "text": "version\tSub-workflow version\tstring\tno"
    },
    {
        "text": "invoke\tSpecifies if the subflow should be invoked sync or async"
    },
    {
        "text": "Default is sync\tenum\tno"
    },
    {
        "text": "onParentComplete\tIf invoke is async, specifies if subflow execution should terminate or continue when parent workflow completes"
    },
    {
        "text": "Default is terminate\tenum\tno"
    },
    {
        "text": "The workflowId property define the unique ID of the sub-workflow to be invoked"
    },
    {
        "text": "Usually, the workflow id should not be the same id of the workflow where the action is defined"
    },
    {
        "text": "Otherwise, it may occur undesired recurring calls to the same workflow"
    },
    {
        "text": "The version property defined the unique version of the sub-workflow to be invoked"
    },
    {
        "text": "If this property is defined, runtimes should match both the id and the version propertiesdefined in the sub-workflow definition"
    },
    {
        "text": "ERROR DEFINITION"
    },
    {
        "text": "Error definitions describe checked errors that can occur during workflow execution and how to handle them"
    },
    {
        "text": "The errorRef property references the unique workflow error definition"
    },
    {
        "text": "For more info on workflow error handlingreferece this section"
    },
    {
        "text": "The errorRefsproperty references at least one of the defined workflow error definitions"
    },
    {
        "text": "Can be used when errorRef is not used"
    },
    {
        "text": "Usable when you want to define multiple error refs for which the same transitionor end definition should be applied"
    },
    {
        "text": "For more info on workflow error handlingreferece this section"
    },
    {
        "text": "Note that the errorRef and errorRefs properties are mutually exclusive, meaning that you can only specify one or the other,but not both at the same time"
    },
    {
        "text": "The transition property defines the transition to the next workflow state in cases when the definederror happens during runtime execution"
    },
    {
        "text": "If transition is not defined you can also define the end property which will end workflow execution at that point"
    },
    {
        "text": "Note that the transition and end properties are mutually exclusive, meaning that you can only specify one or the other,but not both at the same time"
    },
    {
        "text": "For more information, see the Workflow Error Handling sections"
    },
    {
        "text": "RETRY DEFINITION"
    },
    {
        "text": "name\tUnique retry strategy name\tstring\tyes"
    },
    {
        "text": "maxAttempts\tMaximum number of retry attempts"
    },
    {
        "text": "Value of 1 means no retries are performed\tstring or number\tyes"
    },
    {
        "text": "If both increment and multiplier properties are defined, increment should be applied first and thenthe multiplier when determining the next retry time"
    },
    {
        "text": "The maxAttempts property determines the maximum number of retry attempts allowed and is a positive integer value"
    },
    {
        "text": "The jitter property is important to prevent certain scenarios where clientsare retrying in sync, possibly causing or contributing to a transient failureprecisely because they're retrying at the same time"
    },
    {
        "text": "Adding a typically small,bounded random amount of time to the period between retries serves the purposeof attempting to prevent these retries from happening simultaneously, possiblyreducing total time to complete requests and overall congestion"
    },
    {
        "text": "How this valueis used in the exponential backoff algorithm is left up to implementations"
    },
    {
        "text": "Alternatively, jitter may be defined as an absolute value specified as an ISO8601 duration"
    },
    {
        "text": "This way, the maximum amount of random time added is fixed andwill not increase as new attempts are made"
    },
    {
        "text": "The maxDelay property determines the maximum amount of delay that is desired between retry attempts, and is appliedafter increment, multiplier, and jitter"
    },
    {
        "text": "TRANSITION DEFINITION"
    },
    {
        "text": "nextState\tName of the state to transition to next\tstring\tyes"
    },
    {
        "text": "compensate\tIf set to true, triggers workflow compensation before this transition is taken"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "produceEvents\tArray of producedEvent definitions"
    },
    {
        "text": "Events to be produced before the transition takes place\tarray\tno"
    },
    {
        "text": "SWITCH STATE DATA CONDITIONS"
    },
    {
        "text": "name\tData condition name\tstring\tno"
    },
    {
        "text": "condition\tWorkflow expression evaluated against state data"
    },
    {
        "text": "Must evaluate to true or false\tstring\tyes"
    },
    {
        "text": "If the condition is evaluated to true, you can specify either the transition or end definitionsto decide what to do, transition to another workflow state, or end workflow execution"
    },
    {
        "text": "Note that transition and enddefinitions are mutually exclusive, meaning that you can specify either one or the other, but not both"
    },
    {
        "text": "SWITCH STATE EVENT CONDITIONS"
    },
    {
        "text": "name\tEvent condition name\tstring\tno"
    },
    {
        "text": "eventRef\tReferences an unique event name in the defined workflow events\tstring\tyes"
    },
    {
        "text": "Switch state event conditions specify events, which the switch state must wait for"
    },
    {
        "text": "Each conditioncan reference one workflow-defined event"
    },
    {
        "text": "Upon arrival of this event, the associated transition is taken"
    },
    {
        "text": "The eventRef property references a name of one of the defined workflow events"
    },
    {
        "text": "If the referenced event is received, you can specify either the transition or end definitionsto decide what to do, transition to another workflow state, or end workflow execution"
    },
    {
        "text": "The eventDataFilter property can be used to filter event data when it is received"
    },
    {
        "text": "Note that transition and enddefinitions are mutually exclusive, meaning that you can specify either one or the other, but not both"
    },
    {
        "text": "PARALLEL STATE BRANCH"
    },
    {
        "text": "name\tBranch name\tstring\tyes"
    },
    {
        "text": "actions\tActions to be executed in this branch\tarray\tyes"
    },
    {
        "text": "timeouts\tBranch specific timeout settings\tobject\tno"
    },
    {
        "text": "Each branch receives the same copy of the Parallel state's data input"
    },
    {
        "text": "A branch can define actions that need to be executed"
    },
    {
        "text": "For the SubFlowRef action, the workflow id should not be the same id of the workflow where the branch is defined"
    },
    {
        "text": "Otherwise, it may occur undesired recurring calls to the same workflow"
    },
    {
        "text": "The timeouts property can be used to set branch specific timeout settings"
    },
    {
        "text": "Parallel state branches can set theactionExecTimeout and branchExecTimeout timeout properties"
    },
    {
        "text": "For more information on workflow timeouts reference theWorkflow Timeouts section"
    },
    {
        "text": "PARALLEL STATE HANDLING EXCEPTIONS"
    },
    {
        "text": "Exceptions can occur during execution of Parallel state branches"
    },
    {
        "text": "By default, exceptions that are not handled within branches stop branch execution and are propagatedto the Parallel state and should be handled with its onErrors definition"
    },
    {
        "text": "If the parallel states defines a subflow action, exceptions that occur during execution of the called workflowcan choose to handle exceptions on their own"
    },
    {
        "text": "All unhandled exceptions from the called workflowexecution however are propagated back to the parallel state and can be handled with the parallel statesonErrors definition"
    },
    {
        "text": "START DEFINITION"
    },
    {
        "text": "Can be either string or object type"
    },
    {
        "text": "If type string, it defines the name of the workflow starting state"
    },
    {
        "text": "In this case it's assumed that the schedule property is not defined"
    },
    {
        "text": "stateName\tName of the starting workflow state\tstring\tno"
    },
    {
        "text": "schedule\tDefine the recurring time intervals or cron expressions at which workflow instances should be automatically started"
    },
    {
        "text": "string or object\tyes"
    },
    {
        "text": "Start definition explicitly defines how/when workflow instances should be created and what the workflow starting state is"
    },
    {
        "text": "The start definition can be either string or object type"
    },
    {
        "text": "If string type, it defines the name of the workflow starting state"
    },
    {
        "text": "If object type, it provides the ability to set the workflow starting state name, as well as the schedule property"
    },
    {
        "text": "The stateName property can be set to define the starting workflow state"
    },
    {
        "text": "If not specified, the first statein the workflow states definition should be used as the starting workflow state"
    },
    {
        "text": "0 0/5 * * * ?"
    },
    {
        "text": "to define that a workflow instance from the workflow definition should be created every 5 minutes, starting at full hour"
    },
    {
        "text": "* * * * *   - Create workflow instance at the top of every minute"
    },
    {
        "text": "0 * * * *   - Create workflow instance at the top of every hour"
    },
    {
        "text": "0 */2 * * * - Create workflow instance every 2 hours"
    },
    {
        "text": "See here to get more information on defining cron expressions"
    },
    {
        "text": "Defining a start definition is not required"
    },
    {
        "text": "If it's not defined, the starting workflowstate has to be the very first state defined in the workflow states array"
    },
    {
        "text": "SCHEDULE DEFINITION"
    },
    {
        "text": "The cron property uses a cron expressionto describe a repeating interval upon which a workflow instance should be created automatically"
    },
    {
        "text": "For more information see the cron definition section"
    },
    {
        "text": "Note that when the workflow starting state is an Eventdefining cron-based scheduled starts for the runtime implementations would mean that there needs to be an event service that issuesthe needed events at the defined times to trigger workflow instance creation"
    },
    {
        "text": "CRON DEFINITION"
    },
    {
        "text": "END DEFINITION"
    },
    {
        "text": "In this case it's assumed that the terminate property has its default value of false, and the produceEvents,compensate, and continueAs properties are not defined"
    },
    {
        "text": "terminate\tIf true"
    },
    {
        "text": "terminates workflow instance execution\tboolean\tno"
    },
    {
        "text": "produceEvents\tArray of producedEvent definitions"
    },
    {
        "text": "Defines events that should be produced"
    },
    {
        "text": "array\tno"
    },
    {
        "text": "compensate\tIf set to true, triggers workflow compensation before workflow execution completes"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "continueAs\tDefines that current workflow execution should stop, and execution should continue as a new workflow instance of the provided id\tstring or object\tno"
    },
    {
        "text": "End definitions are used to explicitly define execution completion of a workflow instance or workflow execution path"
    },
    {
        "text": "A workflow definition must include at least one workflow state"
    },
    {
        "text": "Note that Switch states cannot declare to be workflow end states"
    },
    {
        "text": "Their conditions however candefine a stop of workflow execution"
    },
    {
        "text": "The terminate property, if set to true, completes the workflow instance execution, this any other activeexecution paths"
    },
    {
        "text": "If a terminate end is reached inside a ForEach or Parallel state the entire workflow instance is terminated"
    },
    {
        "text": "The produceEvents allows defining events which should be producedby the workflow instance before workflow stops its execution"
    },
    {
        "text": "It's important to mention that if the workflow keepActive property is set totrue,the only way to complete execution of the workflow instanceis if workflow execution reaches a state that defines an end definition with terminate property set to true,or, if the workflowExecTimeout property is defined, the time defined in its intervalis reached"
    },
    {
        "text": "The compensate property defines that workflow compensation should be performed before the workflowexecution is completed"
    },
    {
        "text": "PRODUCEDEVENT DEFINITION"
    },
    {
        "text": "eventRef\tReference to a defined unique event name in the events definition\tstring\tyes"
    },
    {
        "text": "contextAttributes\tAdd additional event extension context attributes\tobject\tno"
    },
    {
        "text": "The data property can have two types, object or string"
    },
    {
        "text": "If of string type, it is an expression that can select parts of state datato be used as the event payload"
    },
    {
        "text": "If of object type, you can define a custom object to be the event payload"
    },
    {
        "text": "The contextAttributes property allows you to add one or more extension context attributesto the generated event"
    },
    {
        "text": "Being able to produce events when workflow execution completes or during state transitionallows for event-based orchestration communication"
    },
    {
        "text": "For example, completion of an orchestration workflow can notify other orchestration workflows to decide if they need to act uponthe produced event, or notify monitoring services of the current state of workflow execution, etc"
    },
    {
        "text": "It can be used to create very dynamic orchestration scenarios"
    },
    {
        "text": "TRANSITIONS"
    },
    {
        "text": "Implementers must use the unique State name property for determining the transition"
    },
    {
        "text": "Events can be produced during state transitions"
    },
    {
        "text": "The produceEvents property of the transition definitions allows youto reference one or more defined produced events in the workflow events definitions"
    },
    {
        "text": "For each of the produced events you can select what parts of state data to be the event payload"
    },
    {
        "text": "Transitions can trigger compensation via their compensate property"
    },
    {
        "text": "See the Workflow Compensationsection for more information"
    },
    {
        "text": "ADDITIONAL PROPERTIES"
    },
    {
        "text": "Specifying additional properties, namely properties which are not defined by the specificationare only allowed in the Workflow Definition"
    },
    {
        "text": "Additional properties serve the same purpose as Workflow Metadata"
    },
    {
        "text": "They allow you to enrich the workflow definition with custom information"
    },
    {
        "text": "Additional properties, just like workflow metadata, should not affect workflow execution"
    },
    {
        "text": "Implementations may choose to use additional properties or ignore them"
    },
    {
        "text": "It is recommended to use workflow metadata instead of additional properties in the workflow definition"
    },
    {
        "text": "In this example, we specify the loglevel, environment, and category additional properties"
    },
    {
        "text": "Serverless Workflow language allows you to define explicit error handling, meaning you can define what should happenin case of errors inside your workflow model rather than some generic error handling entity"
    },
    {
        "text": "This allows error handling to become part of your orchestration activities and as such part of your business problemsolutions"
    },
    {
        "text": "The idea behind the way Serverless Workflow defines error handling is that workflows should only fail due to unknown bugsduring execution"
    },
    {
        "text": "In general, you should always write your workflows so that they do not fail on any known failures"
    },
    {
        "text": "Each workflow state can define error handling, which is related only to errors that may arise during itsexecution"
    },
    {
        "text": "Error handling defined in one state cannot be used to handle errors that happened during execution of another stateduring workflow execution"
    },
    {
        "text": "Unknown errors that may arise during workflow state execution that are not explicitly handled within the workflow definitionshould be reported by runtime implementations and halt workflow execution"
    },
    {
        "text": "In addition to the domain specific error name, users have the option to also add an optional error codeto help runtime implementations with mapping defined errors to concrete underlying technical ones"
    },
    {
        "text": "Known workflow errors, that we know we need to handle during workflow execution should be defined inthe workflow top-level 'errors' property"
    },
    {
        "text": "This property can be either a string type, meaning it can referencea reusable JSON or Yaml definition file including the error definitions, or it can have an array type where you candefine these checked errors in-line in your workflow definition"
    },
    {
        "text": "information"
    },
    {
        "text": "These defined errors can then be referenced by their unique name in both states onErrors definitions as well as inactions nonRetryableErrors and retryableErrors properties"
    },
    {
        "text": "Regardless of the chosen retries option, note that workflows in general should be designed to not fail"
    },
    {
        "text": "Workflows should be able to recover from intermittent failures"
    },
    {
        "text": "The next sections provide more details to each action retry option"
    },
    {
        "text": "- SomeErrorOne"
    },
    {
        "text": "- SomeErrorTwo"
    },
    {
        "text": "- SomeErrorThree"
    },
    {
        "text": "Each action can define the retry strategy it wants to use"
    },
    {
        "text": "If it does not define one, the action is in this case not retries"
    },
    {
        "text": "Actions can define a list of known errors in its retryableErrors array"
    },
    {
        "text": "If defined, then the action should be retriedfor those errors according to the referenced retry strategy"
    },
    {
        "text": "In our example, \"MyFirstFunction\" invocation should be retried according to the \"FirstRetryStrategy\" policy only on known errors\"SomeErrorOne\" and \"SomeErrorTwo\""
    },
    {
        "text": "This is the option used when the workflow top-level autoRetries property is set to true"
    },
    {
        "text": "Automatic retries are well suited to long-running and stateful workflow orchestrations"
    },
    {
        "text": "It allows workflowsto recover from failures thus providing more resilience"
    },
    {
        "text": "There is a possible cost associated with automatic retriesin terms of resource and computing power utilization"
    },
    {
        "text": "maxAttempts to be unlimited, meaning that the action should be retried indefinitely until successful"
    },
    {
        "text": "delay to be set to one second, meaning that there is a one second delay between action retries"
    },
    {
        "text": "multiplier to be set to two meaning that the delay should be multiplied by two for each retry attempt"
    },
    {
        "text": "Runtimes should document their default retry strategy to users, so it's clear whichproperty values they are using for the default"
    },
    {
        "text": "In our example the first action named MyFirstFunction is going to be retried according to the FirstRetryStrategyretry policyfor all errors except SomeErrorOne and SomeErrorTwo"
    },
    {
        "text": "The seconds action named MySecondFunction is going to be retried according to the SecondRetryStrategyretry policyfor all errors except SomeErrorTwo and SomeErrorThree"
    },
    {
        "text": "The fourth action named MyFourthFunction is going to be retried according to the DoNotRetryStrategyretry policy which has the maxAttempts property set to 1, meaning that this action will not be retried"
    },
    {
        "text": "Workflow execution"
    },
    {
        "text": "State execution"
    },
    {
        "text": "Action execution"
    },
    {
        "text": "Branch execution"
    },
    {
        "text": "Event consumption time"
    },
    {
        "text": "The specification allows for timeouts to be defined on the top-level workflow definition, as well asin each of the workflow state definitions"
    },
    {
        "text": "Note that the timeout settings defined in states, and state branches overwrite the top-levelworkflow definition for state, action and branch execution"
    },
    {
        "text": "If they are not defined, then the top-leveltimeout settings should take in effect"
    },
    {
        "text": "This top-level workflow timeout setting defines that the maximum execution time of all defined workflow statesis two seconds each"
    },
    {
        "text": "Since state \"A\" does not overwrite the top-level stateExecTimeout, its execution timeout should be inherited fromthe top-level timeout definition"
    },
    {
        "text": "On the other hand, state \"B\" does define it's own stateExecTimeout, in which case it would overwrite the defaultsetting, meaning that it would its execution time has a max limit of ten seconds"
    },
    {
        "text": "Defining timeouts is not mandatory, meaning that if not defined, all the timeout settings should be assumed tobe \"unlimited\""
    },
    {
        "text": "Note that the defined workflow execution timeout has precedence over all other defined timeouts"
    },
    {
        "text": "Just to give an extreme example, let's say we define the workflow execution timeout to ten seconds,and the state execution timeout to twenty seconds"
    },
    {
        "text": "In this case if the workflow execution timeout is reachedit should follow the rules of workflow execution timeout and end workflow execution, no matter what thestate execution time has been set to"
    },
    {
        "text": "The eventTimeout property defines the maximum amount of time to wait to consume defined events"
    },
    {
        "text": "If not specified it should default to\"unlimited\""
    },
    {
        "text": "The branchExecTimeout property defines the maximum execution time for a single branch"
    },
    {
        "text": "If not specified it should default to\"unlimited\""
    },
    {
        "text": "The actionExecTimeout property defines the maximum execution time for a single actions definition"
    },
    {
        "text": "If not specified it should default to\"unlimited\""
    },
    {
        "text": "Note that an action definition can include multiple actions"
    },
    {
        "text": "The stateExecTimeout property defines the maximum execution time for a single workflow state"
    },
    {
        "text": "If not specified it should default to\"unlimited\""
    },
    {
        "text": "WORKFLOWEXECTIMEOUT DEFINITION"
    },
    {
        "text": "interrupt\tIf false, workflow instance is allowed to finish current execution"
    },
    {
        "text": "If true, current workflow execution is stopped immediately"
    },
    {
        "text": "Default is false\tboolean\tno"
    },
    {
        "text": "runBefore\tName of a workflow state to be executed before workflow instance is terminated\tstring\tno"
    },
    {
        "text": "The duration property defines the time duration of the execution timeout"
    },
    {
        "text": "Once a workflow instance is created,and the amount of the defined time is reached, the workflow instance should be terminated"
    },
    {
        "text": "The interrupt property defines if the currently running instance should be allowed to finish its currentexecution flow before it needs to be terminated"
    },
    {
        "text": "If set to true, the current instance execution should stop immediately"
    },
    {
        "text": "If it is a single state, it must define an end definition, if it transitions to other states,at last one must define it"
    },
    {
        "text": "Runtime implementations should raise compile time / parsing exceptions if any of the rules mentioned above arenot obeyed in the workflow definition"
    },
    {
        "text": "All workflow states except Sleep and Inject States can define the timeouts property and can define different timeoutsettings depending on their state type"
    },
    {
        "text": "Please reference each workflow state definitions for more information on whichtimeout settings are available for each state type"
    },
    {
        "text": "Workflow states timeouts cannot define the workflowExecTimeout property"
    },
    {
        "text": "Parallel states can define the branchExecTimeout property"
    },
    {
        "text": "If defined on the statelevel, it applies to each branch of the Parallel state"
    },
    {
        "text": "Note that each parallel state branchcan overwrite this setting to define its own branch execution timeout"
    },
    {
        "text": "If a branch does not define this timeout property, it should be inherited from it's state definition branch timeout setting"
    },
    {
        "text": "If its state does not define it either, it should be inherited from the top-level workflow branch timeout settings"
    },
    {
        "text": "The Event state timeouts property can be used tospecify state specific timeout settings"
    },
    {
        "text": "For event state it can contain the eventTimeout propertywhich is defined using the ISO 8601 data and time format"
    },
    {
        "text": "You can specify for example \"PT15M\" to represent 15 minutes or \"P2DT3H4M\" to represent 2 days, 3 hours and 4 minutes"
    },
    {
        "text": "eventTimeout values should always be represented as durations and not as specific time intervals"
    },
    {
        "text": "The eventTimeout property needs to be described in detail for Event states as it depends on whether or not the Event state is a workflow starting state or not"
    },
    {
        "text": "If the Event state is a workflow starting state, incoming events may trigger workflow instances"
    },
    {
        "text": "In this case,if the exclusive property is set to true, the eventTimeout property should be ignored"
    },
    {
        "text": "\"ExampleEvent1\","
    },
    {
        "text": "\"ExampleEvent2\""
    },
    {
        "text": "]"
    },
    {
        "text": "The first eventTimeout would start once any of the referenced events are consumed"
    },
    {
        "text": "If the second event does not occur withinthe defined eventTimeout, no workflow instance should be created"
    },
    {
        "text": "Compensation deals with undoing or reversing the work of one or more states which havealready successfully completed"
    },
    {
        "text": "For example, let's say that we have charged a customer $100 for an itempurchase"
    },
    {
        "text": "In the case customer laster on decides to cancel this purchase we need to undo it"
    },
    {
        "text": "One way ofdoing that is to credit the customer $100"
    },
    {
        "text": "Compensation in Serverless Workflow must be explicitly defined by the workflow control flow logic"
    },
    {
        "text": "It cannot be dynamically triggered by initial workflow data, event payloads, results of service invocations, orerrors"
    },
    {
        "text": "They cannot be an event state"
    },
    {
        "text": "They cannot define an end definition"
    },
    {
        "text": "If they do, it should be ignored"
    },
    {
        "text": "They must define the usedForCompensation property and set it to true"
    },
    {
        "text": "They can transition only to states which also have their usedForCompensation property set to true"
    },
    {
        "text": "\"NewPurchase\""
    },
    {
        "text": "],"
    },
    {
        "text": "]"
    },
    {
        "text": "],"
    },
    {
        "text": "- NewPurchase"
    },
    {
        "text": "In this example our \"NewItemPurchase\" event state waits for a \"NewPurchase\" event and thendebits the customer and sends them a purchase confirmation email"
    },
    {
        "text": "It defines that it's compensated by the\"CancelPurchase\" operation state which performs two actions, namely credits back thepurchase amount to customer and sends them a purchase cancellation email"
    },
    {
        "text": "As previously mentioned, compensation must be explicitly triggered by the workflows control-flow logic"
    },
    {
        "text": "This can be done via transition and end definitions"
    },
    {
        "text": "End definitions can trigger compensations by specifying the compensate property and setting it to true"
    },
    {
        "text": "This means that before workflow finishes its execution workflow compensation must be performed"
    },
    {
        "text": "Note thatin case when the end definition has its produceEvents property set, compensation must be performed beforeproducing the specified events and ending workflow execution"
    },
    {
        "text": "In the case the end definition has a continueAs property defined, compensation must be performed beforeworkflow execution continues as a new workflow invocation"
    },
    {
        "text": "In the case where the end definition has both produceEvents, and continueAs compensation is performed first,then the event should be produced, and then the workflow should continue its execution as a new workflow invocation"
    },
    {
        "text": "In this example lets say our workflow execution is at the \"End\" state which defines the compensate property to trueas shown in the previous section"
    },
    {
        "text": "States with a red border, namely \"A\", \"B\", \"D\" and \"E\" are states which have so farbeen executed successfully"
    },
    {
        "text": "State \"C\" has not been executed during workflow execution in our example"
    },
    {
        "text": "State \"E\" is not compensated as it does not define a compensatedBy state"
    },
    {
        "text": "State \"D\" is compensated by executing compensation \"D1\""
    },
    {
        "text": "State \"B\" is compensated by executing \"B1\" and then \"B1-2\""
    },
    {
        "text": "State C is not compensated as it was never active during workflow execution"
    },
    {
        "text": "State A is not comped as it does not define a compensatedBy state"
    },
    {
        "text": "In our example, when compensation triggers,the current workflow data is passed as input to the \"D1\" state, the first compensation state for our example"
    },
    {
        "text": "The states data output is then passed as states data input to \"B1\", and so on"
    },
    {
        "text": "In some cases when compensation is triggered, some states such as Parallel and ForEachstates can still be \"active\", meaning they still might have some async executions that are being performed"
    },
    {
        "text": "If compensation needs to performed on such still active states, the state execution must be first cancelled"
    },
    {
        "text": "After it is cancelled, compensation should be performed"
    },
    {
        "text": "In some cases our workflows are deployed and executed on runtimes and/or cloud platforms that expose someexecution limitations such as finite execution duration, finite number of workflow transitions, etc"
    },
    {
        "text": "Some runtimes, especially when dealing with stateful workflow orchestrations have a finite limit ofexecution history log sizes, meaning that once a long-running workflow reaches these limits workflow executions islikely to be forced to stop before reaching its completion"
    },
    {
        "text": "This can result in unexpected issues, especially withmission-critical workflows"
    },
    {
        "text": "Defining this should stop the current workflow execution, and continue execution as a new workflow instance of theworkflow which defines the workflow id of \"myworkflowid\""
    },
    {
        "text": "The state data where this is define shouldbecome the workflow data input of the workflow that is continuing the current workflow execution"
    },
    {
        "text": "Note that any defined produceEvents and compensate definitions should be honored before continueAs is applied"
    },
    {
        "text": "workflowId\tUnique id of the workflow to continue execution as"
    },
    {
        "text": "string\tyes"
    },
    {
        "text": "version\tVersion of the workflow to continue execution as"
    },
    {
        "text": "string\tno"
    },
    {
        "text": "data\tIf string type, a workflow expression which selects parts of the states data output to become the workflow data input of continued execution"
    },
    {
        "text": "If object type, a custom object to become the workflow data input of the continued execution"
    },
    {
        "text": "string or object\tno"
    },
    {
        "text": "workflowExecTimeout\tWorkflow execution timeout to be used by the workflow continuing execution"
    },
    {
        "text": "Overwrites any specific settings set by that workflow"
    },
    {
        "text": "string or object\tno"
    },
    {
        "text": "Continuing execution with continueAs can also be used inside sub-workflow executions, which brings its next use case"
    },
    {
        "text": "Workflows can invoke sub-workflows during their execution"
    },
    {
        "text": "In Serverless Workflow DSL, sub-workflows are invokedsimilarly to other function types via the SubFlowRef Definitionin workflow states Action definitions"
    },
    {
        "text": "Just like \"parent\" workflows, sub-workflow can also be long-running, and can run into the same type of runtime/serverless platformlimitations as previously discussed"
    },
    {
        "text": "As such they can also use continueAs to stop their current execution and continue it asa new one of the same or different workflow id"
    },
    {
        "text": "Note that when a sub-workflow is invoked it can produce a result that is then merged into the parent workflow state data"
    },
    {
        "text": "This may bring up a question as to what happens when a sub-workflow calls continueAs in terms of what is returned asresult to of its invocation by the parent workflow"
    },
    {
        "text": "Top level workflow definition version property"
    },
    {
        "text": "Actions subflowRef version property"
    },
    {
        "text": "The version property must respect the semantic versioning guidelines"
    },
    {
        "text": "Workflow constants are used to define static, and immutable, data which is available to Workflow Expressions"
    },
    {
        "text": "Constants can only be accessed inside Workflow expressions via the $CONST variable"
    },
    {
        "text": "Runtimes must make $CONST available to expressions as a predefined variable"
    },
    {
        "text": ","
    },
    {
        "text": "Workflow constants values should only contain static data, meaning that their value should notcontain Workflow expressions"
    },
    {
        "text": "Workflow constants data must be immutable"
    },
    {
        "text": "Workflow constants should not have access to Workflow secrets definitions"
    },
    {
        "text": "Secrets allow you access sensitive information, such as passwords, OAuth tokens, ssh keys, etcinside your Workflow Expressions"
    },
    {
        "text": "If secrets are defined in a Workflow definition, runtimes must assure to provide their valuesduring Workflow execution"
    },
    {
        "text": "Secrets can be used only in Workflow expressions by referencing them via the $SECRETS variable"
    },
    {
        "text": "Runtimes must make $SECRETS available to expressions as a predefined variable"
    },
    {
        "text": "Note that secrets can also be used in expression functions"
    },
    {
        "text": "Secrets are immutable, meaning that workflow expressions are not allowed to change their values"
    },
    {
        "text": "Metadata enables you to enrich the serverless workflow model with information beyond its core definitions"
    },
    {
        "text": "It is intended to be used by clients, such as tools and libraries, as well as users that find this information relevant"
    },
    {
        "text": "Metadata should not affect workflow execution"
    },
    {
        "text": "Implementations may choose to use metadata information or ignore it"
    },
    {
        "text": "Note, however, that using metadata to control workflow execution can lead to vendor-locked implementations that do not comply with the main goals of this specification, which is to be completely vendor-neutral"
    },
    {
        "text": "Function definitions"
    },
    {
        "text": "Event definitions"
    },
    {
        "text": "State definitions"
    },
    {
        "text": "Switch state data and event conditions"
    },
    {
        "text": "UI tooling information such as sizing or scaling factors"
    },
    {
        "text": "Build, release, or image information such as timestamps, release ids, git branches, PR numbers, etc"
    },
    {
        "text": "Logging, monitoring, analytics, or audit repository information"
    },
    {
        "text": "Labels used for organizing/indexing purposes, such as \"release\" \"stable\", \"track\", \"daily\", etc"
    },
    {
        "text": "Similar to Constants and Secrets, workflows expressions can have access to the context information of a running instance via the keyword WORKFLOW"
    },
    {
        "text": "In this use case, a third-party service may require information from the caller for traceability purposes"
    },
    {
        "text": "The specification doesn't define any specific variable within the WORKFLOW bucket, but it's considered a reserved keyword"
    },
    {
        "text": "The workflow extension mechanism allows you to enhance your model definitions with additional information useful forthings like analytics, rate limiting, logging, simulation, debugging, tracing, etc"
    },
    {
        "text": "Serverless Workflow specification provides extensions which can be found here"
    },
    {
        "text": "You can define extensions in your workflow definition using its top-level extensions property"
    },
    {
        "text": "For more information about this property, see the extensions property in theWorkflow Definition Structure section"
    },
    {
        "text": "Even tho users can define their own extensions, it is encouraged to use the ones provided by the specification"
    },
    {
        "text": "We also encourage users to contribute their extensions to the specification"
    },
    {
        "text": "That way they can be sharedwith the rest of the community"
    },
    {
        "text": "If you have an idea for a new workflow extension, or would like to enhance an existing one,please open an New Extension Request issue in this repository"
    },
    {
        "text": "You can find different Serverless Workflow use cases here"
    },
    {
        "text": "You can find many Serverless Workflow examples here"
    },
    {
        "text": "You can find info how the Serverless Workflow language compares withother workflow languages here"
    },
    {
        "text": "You can find a list of other languages, technologies and specifications related to workflows here"
    },
    {
        "text": "Serverless Workflow specification operates under theApache License version 2"
    },
    {
        "text": "0"
    },
    {
        "text": "Abstract - \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435"
    },
    {
        "text": "Status - \u0441\u0442\u0430\u0442\u0443\u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430"
    },
    {
        "text": "Overview - \u043e\u0431\u0437\u043e\u0440 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 \u0438 \u043c\u043e\u0442\u0438\u0432\u0430\u0446\u0438\u0438"
    },
    {
        "text": "Project Components - \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043f\u0440\u043e\u0435\u043a\u0442\u0430"
    },
    {
        "text": "Specification Details - \u0434\u0435\u0442\u0430\u043b\u0438 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438"
    },
    {
        "text": "Core Concepts - \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438"
    },
    {
        "text": "Workflow Definition - \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 workflow"
    },
    {
        "text": "Workflow Instance - \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 workflow"
    },
    {
        "text": "Workflow Model - \u043c\u043e\u0434\u0435\u043b\u044c workflow"
    },
    {
        "text": "Workflow Data - \u0434\u0430\u043d\u043d\u044b\u0435 workflow"
    },
    {
        "text": "Input, Passing, Output, Filters, Merging"
    },
    {
        "text": "Workflow Functions - \u0444\u0443\u043d\u043a\u0446\u0438\u0438 workflow"
    },
    {
        "text": "REST, Async API, RPC, GraphQL, OData, Expression, Custom"
    },
    {
        "text": "Workflow Expressions - \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f"
    },
    {
        "text": "Workflow Definition Structure - \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u043e\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438, \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f workflow, \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b"
    },
    {
        "text": "\u0421\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u044f\u0437\u044b\u043a\u0430 Serverless Workflow"
    },
    {
        "text": "\u044d\u0442\u043e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d MindOS?"
    },
    {
        "text": "\u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u044f \u043d\u0435 \u043c\u043e\u0433\u0443 \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f Serverless Workflow \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 MindOS \u0438\u043b\u0438 \u043d\u0435\u0442"
    },
    {
        "text": "MindOS, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044f \u043f\u043e\u043d\u0438\u043c\u0430\u044e, \u044d\u0442\u043e \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u043e\u0432 \u0438 \u0447\u0430\u0442-\u0431\u043e\u0442\u043e\u0432"
    },
    {
        "text": "\u0412 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 MindOS \u044f \u043d\u0435 \u043d\u0430\u0448\u0435\u043b \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Serverless Workflow"
    },
    {
        "text": "\u0412 \u0442\u043e \u0436\u0435 \u0432\u0440\u0435\u043c\u044f, Serverless Workflow - \u044d\u0442\u043e \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043e\u0431\u0449\u0430\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0438 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043b\u0435\u0441 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439"
    },
    {
        "text": "\u0422\u0430\u043a \u0447\u0442\u043e \u043e\u043d\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u0445 \u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0438 \u0432 MindOS"
    },
    {
        "text": "\u0427\u0442\u043e\u0431\u044b \u0442\u043e\u0447\u043d\u043e \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441 \u043e\u0431 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 Serverless Workflow \u0432 MindOS, \u043d\u0443\u0436\u043d\u043e \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e \u0441 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u043e\u0439 \u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c \u044d\u0442\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b"
    },
    {
        "text": "\u0418\u043b\u0438 \u044f \u043c\u043e\u0433\u0443 \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u0432\u043e\u043f\u0440\u043e\u0441 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0443 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 MindOS, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0442\u0430\u043a\u0430\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c"
    },
    {
        "text": "\u0421\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 - \u044d\u0442\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043e \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u0449\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0441\u043c\u044b\u0441\u043b\u0430 \u0438\u043b\u0438 \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438 \u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0446\u0438\u044e \u0434\u0430\u043d\u043d\u044b\u0445 \u0435\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\u043c\u0438 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438"
    },
    {
        "text": "\u0414\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043e\u0431\u0449\u0435\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0440\u044f\u0434 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a \u0438\u043b\u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0430\u043a\u0436\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u043a\u0430\u043a \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435\u00b9"
    },
    {
        "text": "\u041e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0440\u0435\u0441\u0443\u0440\u0441 \u0434\u043b\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0430\u0432\u0442\u043e\u0440 \u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f"
    },
    {
        "text": "\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u043c\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c\u0438 \u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043d\u043e\u043c\u0435\u0440 \u0432\u0435\u0440\u0441\u0438\u0438, \u0434\u0430\u0442\u0430 \u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0434\u0440\u0443\u0433\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0439 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u0430\u043c\u0438, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u0432\u0430\u043c\u0438 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\t\u0424\u043e\u043a\u0443\u0441\t\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"
    },
    {
        "text": "DDI\t\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0443\u043a\u0438\t\u0418\u043d\u0438\u0446\u0438\u0430\u0442\u0438\u0432\u0430 \u043f\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0434\u0430\u043d\u043d\u044b\u0445 - \u044d\u0442\u043e \u043c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u043e\u0435 \u0443\u0441\u0438\u043b\u0438\u0435 \u043f\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430 \u0434\u043b\u044f \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0435\u0439 \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0443\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435"
    },
    {
        "text": "DCMI\t\u041e\u0431\u0449\u0435\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432\t\u0418\u043d\u0438\u0446\u0438\u0430\u0442\u0438\u0432\u0430 \u043f\u043e \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u0414\u0443\u0431\u043b\u0438\u043d\u0441\u043a\u043e\u0433\u043e \u044f\u0434\u0440\u0430 - \u044d\u0442\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u0430\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u044f, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0438 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u0432 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "EAD\t\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0430\u0440\u0445\u0438\u0432\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432\t\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0430\u0440\u0445\u0438\u0432\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 - \u044d\u0442\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442 XML \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0430\u0440\u0445\u0438\u0432\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432"
    },
    {
        "text": "EML\t\u042d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043d\u0430\u0443\u043a\u0438 \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\t\u042f\u0437\u044b\u043a \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 - \u044d\u0442\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442 XML \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u043c\u0435\u043d\u0430 \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438"
    },
    {
        "text": "LOM\t\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0447\u0435\u0431\u043d\u044b\u0445 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432\t\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f - \u044d\u0442\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442 ISO \u0434\u043b\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0441\u0432\u043e\u0439\u0441\u0442\u0432, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f"
    },
    {
        "text": "MARC\t\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u0447\u043d\u043e\u0435 \u0434\u0435\u043b\u043e \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u0447\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432\t\u041c\u0430\u0448\u0438\u043d\u043d\u043e-\u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0438\u0437\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 - \u044d\u0442\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043c\u0430\u0448\u0438\u043d\u043d\u043e-\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0439 \u0444\u043e\u0440\u043c\u0435"
    },
    {
        "text": "MODS\t\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u0447\u043d\u043e\u0435 \u0434\u0435\u043b\u043e \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u0447\u043d\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432\t\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 - \u044d\u0442\u043e \u0441\u0445\u0435\u043c\u0430 XML \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043d\u0430 MARC 21"
    },
    {
        "text": "MPEG-7\t\u041c\u0443\u043b\u044c\u0442\u0438\u043c\u0435\u0434\u0438\u0430 \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0443\u043b\u044c\u0442\u0438\u043c\u0435\u0434\u0438\u0439\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430\t\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442 MPEG-7 - \u044d\u0442\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442 ISO \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0430\u0441\u043f\u0435\u043a\u0442\u043e\u0432 \u043c\u0443\u043b\u044c\u0442\u0438\u043c\u0435\u0434\u0438\u0439\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435, \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u043a\u0430 \u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e"
    },
    {
        "text": "PREMIS\t\u0410\u0440\u0445\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432\t\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 - \u044d\u0442\u043e \u0441\u0445\u0435\u043c\u0430 XML \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0439 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u0434\u043e\u043b\u0433\u043e\u0441\u0440\u043e\u0447\u043d\u043e\u0439 \u043f\u0435\u0440\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u0435"
    },
    {
        "text": "SAML\t\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f\u043c\u0438 \u043e\u0431 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u0438\t\u042f\u0437\u044b\u043a \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0439 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 - \u044d\u0442\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442 OASIS \u0434\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e\u0431 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438"
    },
    {
        "text": "\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 - \u044d\u0442\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u043b\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u043e\u0432 \u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u0439"
    },
    {
        "text": "\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 - \u044d\u0442\u043e \u0444\u0430\u0437\u0430 \u0438\u043b\u0438 \u0448\u0430\u0433 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0439, \u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c, \u0441\u043e\u043d, \u0438\u043d\u044a\u0435\u043a\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u0446\u0438\u043a\u043b \u043f\u043e \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438 \u0438 \u0442"
    },
    {
        "text": "\u0434"
    },
    {
        "text": "\u0424\u0443\u043d\u043a\u0446\u0438\u044f - \u044d\u0442\u043e \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u043d\u0430\u0434 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u043c \u0438\u043b\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0435\u0434\u0438\u043d\u0438\u0446\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u0438\u0437 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438"
    },
    {
        "text": "\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u044b \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a RESTful, AsyncAPI, RPC, GraphQL \u0438\u043b\u0438 OData"
    },
    {
        "text": "\u0421\u043e\u0431\u044b\u0442\u0438\u0435 - \u044d\u0442\u043e \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e \u043d\u0430\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0444\u0430\u043a\u0442\u0430 \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0432\u043e \u0432\u043d\u0435\u0448\u043d\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0438\u043b\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0435"
    },
    {
        "text": "\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0438\u043b\u0438 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432"
    },
    {
        "text": "\u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 - \u044d\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0438\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438"
    },
    {
        "text": "\u0412\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0443\u0441\u043b\u043e\u0432\u0438\u0439 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u043e\u0432, \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438 \u0442"
    },
    {
        "text": "\u0434"
    },
    {
        "text": "\u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 - \u044d\u0442\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0440\u0430\u0431\u043e\u0447\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0438\u043b\u0438 \u0435\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445, \u0442\u0430\u043a\u0430\u044f \u043a\u0430\u043a \u0438\u043c\u044f, \u0432\u0435\u0440\u0441\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0430\u0432\u0442\u043e\u0440\u0441\u0442\u0432\u043e \u0438 \u0442"
    },
    {
        "text": "\u0434"
    },
    {
        "text": "\u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 MindOS \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438, \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u043e\u0439 \u0438 \u0442"
    },
    {
        "text": "\u0434"
    },
    {
        "text": "\u041f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 MindOS \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u0438 \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a JavaScript, Python \u0438\u043b\u0438 SQL"
    },
    {
        "text": "Workflow Build Process - DNAnexus Documentation - \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 DNAnexus, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0442\u043e\u0442 \u0436\u0435 \u0444\u043e\u0440\u043c\u0430\u0442 JSON, \u0447\u0442\u043e \u0438 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 MindOS"
    },
    {
        "text": "Serverless Workflow Specification - GitHub - \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0430 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b MindOS"
    },
    {
        "text": "Workflow Builder error messages in the server log file - IBM - \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043e\u0442\u043b\u0430\u0434\u043a\u0435 \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 IBM, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u0430 \u0434\u043b\u044f \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b MindOS"
    },
    {
        "text": "\u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 - \u044d\u0442\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442 \u0434\u0440\u0443\u0433\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u043b\u0435\u0433\u0447\u0435\u043d\u0438\u044f \u0438\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f"
    },
    {
        "text": "\u041e\u043d\u0438 \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u043c\u0438"
    },
    {
        "text": "\u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u0445\u0435\u043c\u044b \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0446\u0435\u043b\u0435\u0439 \u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432"
    },
    {
        "text": "\u0421\u0445\u0435\u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b, \u0438\u0445 \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u043a\u0443, \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0445\u0435\u043c\u044b - \u044d\u0442\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u0432 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u0445"
    },
    {
        "text": "\u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f"
    },
    {
        "text": "\u0422\u0438\u043f\u044b \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u0445\u0435\u043c"
    },
    {
        "text": "\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f"
    },
    {
        "text": "\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u0432"
    },
    {
        "text": "\u042d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u043c\u044b"
    },
    {
        "text": "\u0411\u043e\u043b\u044c\u0448\u043e\u0435 \u0441\u043f\u0430\u0441\u0438\u0431\u043e, \u044d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043c\u043d\u0435 \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u043d\u044f\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0439 \u0441\u0441\u044b\u043b\u043a\u0438 \u0432 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 , \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438"
    },
    {
        "text": "\u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u0440 , \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 dataset"
    },
    {
        "text": "\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u0432 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u043c \u0442\u0435\u043a\u0441\u0442\u0435 \u043d\u0435\u0442 \u0441\u0441\u044b\u043b\u043e\u043a \u0438\u043b\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u044f \u043c\u043e\u0433 \u0431\u044b \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 \u043e\u0431\u044a\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430"
    },
    {
        "text": "\u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0443 \u043c\u0435\u043d\u044f \u0431\u0443\u0434\u0435\u0442 \u044d\u0442\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f, \u044f \u0441\u043c\u043e\u0433\u0443 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u044b\u0439 \u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0438\u0445 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438"
    },
    {
        "text": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u043c\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043e \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u0432\u0435\u0434\u0435\u0442 \u043d\u0430 JSON-\u0441\u0445\u0435\u043c\u0443 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f workflow \u0432 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 Serverless Workflow, \u043d\u043e \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430"
    },
    {
        "text": "\u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 JSON-\u0441\u0445\u0435\u043c\u044b, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u043b\u044f \u0438 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0434\u043b\u044f workflow"
    },
    {
        "text": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 workflow, \u0441\u043b\u0435\u0434\u0443\u044f JSON-\u0441\u0445\u0435\u043c\u0435 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044f \u043f\u043e\u043b\u044f \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435, \u0432\u0430\u0440\u044c\u0438\u0440\u0443\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 workflow, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0442\u0438\u043f\u044b \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439, \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u043e\u0432"
    },
    {
        "text": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u0441\u044f\u0442\u043a\u0438 \u0438\u043b\u0438 \u0441\u043e\u0442\u043d\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 workflow \u0432 \u0432\u0438\u0434\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 JSON-\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432"
    },
    {
        "text": "\u0420\u0430\u0437\u0431\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440\u044b"
    },
    {
        "text": "\u0422\u0430\u043a\u043e\u0439 \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0445 \u0441\u043e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 Serverless Workflow"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u0430 \u043f\u043e\u043c\u043e\u0449\u044c \u0432 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0442\u0430\u043a\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u043e \u0435\u0433\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e"
    },
    {
        "text": "\u041a\u043e\u043d\u0435\u0447\u043d\u043e! \u0422\u044b \u0443\u0436 \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u0439\u0441\u044f \u043a\u0430\u043a \u043c\u043e\u0436\u0435\u0448\u044c , \u043f\u0440\u0438\u043b\u043e\u0436\u0438 \u0441\u0442\u0430\u0440\u0430\u043d\u0438\u044f \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430 , \u0448\u0430\u0433 \u0437\u0430 \u0448\u0430\u0433\u043e\u043c ,\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439 ,\u0443\u043b\u0443\u0447\u0448\u0430\u0439 ,\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0439 ,\u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0439 \u0432\u0430\u0436\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 , \u043d\u0435 \u0443\u0440\u0435\u0437\u0430\u0439 \u043f\u0440\u0438\u043c\u0435\u0440\u044b ,\u043f\u0438\u0448\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0432\u0451\u0440\u043d\u0443\u0442\u043e \u0438 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e"
    },
    {
        "text": "\u0422\u0449\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0437\u0443\u0447\u0438\u0442\u044c JSON-\u0441\u0445\u0435\u043c\u0443, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 workflow"
    },
    {
        "text": "\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439, \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0441\u043e\u0431\u044b\u0442\u0438\u0439, \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u043e\u0432 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 workflow"
    },
    {
        "text": "\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043f\u0440\u043e\u0434\u0443\u043c\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432"
    },
    {
        "text": "\u0421\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0435\u0440\u0442 \u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f\u0445 workflow"
    },
    {
        "text": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 workflow, \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u0443\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438 \u0438\u0445 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0441\u0445\u0435\u043c\u044b"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c workflow \u0440\u0430\u0437\u043d\u043e\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 - \u043e\u0442 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u0445 \u0434\u043e \u043c\u043d\u043e\u0433\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0445 \u0441 \u0432\u0435\u0442\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0438 \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u043a \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c"
    },
    {
        "text": "\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043c\u043e\u0434\u0435\u043b\u044f\u0445 ML"
    },
    {
        "text": "\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0438"
    },
    {
        "text": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0438\u0442\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u0442\u044c \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e"
    },
    {
        "text": "\u042f \u043f\u0440\u0438\u043b\u043e\u0436\u0443 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0443\u0441\u0438\u043b\u0438\u0439, \u0447\u0442\u043e\u0431\u044b \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f workflow"
    },
    {
        "text": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f"
    },
    {
        "text": "\u0421\u043b\u0435\u0432\u0430 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"kenedu\", \u0441\u043f\u0440\u0430\u0432\u0430 - \"weniti\""
    },
    {
        "text": "\u0418\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u043c\u0435\u043d\u0430, \u0444\u0430\u043c\u0438\u043b\u0438\u0438, \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u043f\u043e\u043b \u0438\u0437 \"kenedu\""
    },
    {
        "text": "\u0418\u0437\u0432\u043b\u0435\u0447\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438, \u0434\u0430\u0442\u044b, \u0430\u0432\u0442\u043e\u0440\u043e\u0432, \u043c\u0435\u0442\u043a\u0438 \u0438\u0437 \"weniti\""
    },
    {
        "text": "\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043e\u0434\u0438\u043d \u043d\u0430\u0431\u043e\u0440"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u043d\u0430\u0431\u043e\u0440\u0430"
    },
    {
        "text": "\u0420\u0430\u0437\u043c\u0435\u0442\u0438\u0442\u044c \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438"
    },
    {
        "text": "\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445, \u0441\u043e\u0447\u0435\u0442\u0430\u044e\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445 \u0438 \u043d\u043e\u0432\u043e\u0441\u0442\u043d\u044b\u0445 \u0441\u0442\u0430\u0442\u044c\u044f\u0445"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u0430 \u043f\u043e\u043c\u043e\u0449\u044c \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u044d\u0442\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430"
    },
    {
        "text": "\u0413\u043e\u0442\u043e\u0432 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043d\u0430 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b"
    },
    {
        "text": "\u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0439"
    },
    {
        "text": "\u0425\u043e\u0440\u043e\u0448\u043e, \u044f \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0430\u044e \u043a \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 JSON \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u0435"
    },
    {
        "text": "\u0418\u043c\u0435\u043d\u0430, \u0444\u0430\u043c\u0438\u043b\u0438\u0438, \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u043f\u043e\u043b"
    },
    {
        "text": "\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438, \u0434\u0430\u0442\u044b, \u0430\u0432\u0442\u043e\u0440\u044b, \u0442\u0435\u043a\u0441\u0442\u044b, \u043c\u0435\u0442\u043a\u0438"
    },
    {
        "text": "\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043e\u0434\u0438\u043d \u043e\u0431\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 CSV \u0438\u043b\u0438 Pandas DataFrame"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u0442\u0430\u0442\u0435\u0439, \u0447\u0442\u043e\u0431\u044b \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u041f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u043c\u0435\u0442\u043a\u0443 \u043a\u043b\u0430\u0441\u0441\u0430 \u0438\u043b\u0438 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432"
    },
    {
        "text": "\u0420\u0430\u0437\u0431\u0438\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0438"
    },
    {
        "text": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442, \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u042d\u043a\u0441\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043d\u0443\u0436\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u044b \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u043a\u0438\u0445-\u0442\u043e \u044d\u0442\u0430\u043f\u043e\u0432 \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0413\u043e\u0442\u043e\u0432 \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"
    },
    {
        "text": "\u0432\u0441\u0435 \u0432\u0435\u0440\u043d\u043e ,\u0441\u0442\u0430\u0440\u0442!"
    },
    {
        "text": "\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043b \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b \u0432 \u043e\u0434\u0438\u043d \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u0438\u043b \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0420\u0430\u0437\u0431\u0438\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043d\u0430\u0431\u043e\u0440\u044b"
    },
    {
        "text": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043d\u0443\u0436\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 ML"
    },
    {
        "text": "\u0414\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0435 \u0448\u0430\u0433\u0438 \u0431\u0443\u0434\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u043e \u0432\u0430\u0448\u0438\u043c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u043c"
    },
    {
        "text": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0434\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u044b \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0438"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u0438\u043b \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0432 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0435\u0449\u0435 100 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043d\u043e\u0432\u043e\u0441\u0442\u043d\u044b\u0445 \u0441\u0442\u0430\u0442\u0435\u0439 \u0441 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u043e\u043b\u0435\u0439"
    },
    {
        "text": "name"
    },
    {
        "text": "surname"
    },
    {
        "text": "age"
    },
    {
        "text": "gender"
    },
    {
        "text": "description"
    },
    {
        "text": "date"
    },
    {
        "text": "author"
    },
    {
        "text": "content"
    },
    {
        "text": "tags"
    },
    {
        "text": "\u0421\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043b \u043a\u043b\u0430\u0441\u0441\u044b \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0433\u043e\u0442\u043e\u0432! \u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0434\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0432\u043d\u0435\u0441\u0442\u0438 \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u0438\u043b \u0435\u0449\u0435 200 \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u0442\u0430\u0442\u0435\u0439, \u0447\u0442\u043e\u0431\u044b \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 Faker \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0440\u0435\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u0438\u043b \u0448\u0443\u043c \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b - \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043e\u043f\u0435\u0447\u0430\u0442\u043a\u0438 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435, \u0432\u0430\u0440\u0438\u0430\u0446\u0438\u0438 \u0432 \u0438\u043c\u0435\u043d\u0430\u0445 \u0438 \u0434\u0430\u0442\u0430\u0445"
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u043e\u0432\u044b\u0441\u0438\u0442 \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 ML"
    },
    {
        "text": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 \u0441\u0442\u0430\u0442\u0435\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e TF-IDF \u0432\u0435\u043a\u0442\u043e\u0440\u0430\u0439\u0437\u0435\u0440\u0430"
    },
    {
        "text": "\u042d\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430\u0440\u044f\u0434\u0443 \u0441 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438"
    },
    {
        "text": "\u0421\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043b \u043a\u043b\u0430\u0441\u0441\u044b \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u0445\u043d\u0438\u043a \u0440\u0435\u0441\u044d\u043c\u043f\u043b\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 TensorFlow Dataset \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438"
    },
    {
        "text": "\u0422\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0430\u043b \u0431\u043e\u043b\u044c\u0448\u0435 \u0438 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u0435\u0435"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0432\u043d\u0435\u0441\u0442\u0438 \u0435\u0449\u0435 \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u043f\u043e\u043a\u0430\u0436\u0438 \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c"
    },
    {
        "text": "\u042d\u0442\u043e \u043b\u0438\u0448\u044c \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u043a \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432"
    },
    {
        "text": "\u041d\u043e \u0434\u0430\u0436\u0435 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u0432\u0438\u0434\u043d\u0430 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0438\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u044b \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u043c\u0443 \u043d\u0430\u0431\u043e\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0435\u0433\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442"
    },
    {
        "text": "\u0441\u043e\u0437\u0445\u0440\u0430\u043d\u0438 \u0432\u0441\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 py"
    },
    {
        "text": "\u0424\u0430\u0439\u043b\u044b train_data"
    },
    {
        "text": "pkl \u0438 test_data"
    },
    {
        "text": "pkl \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 Pandas dataframe \u0442\u0435\u043f\u0435\u0440\u044c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043a\u0430\u043a\u043e\u043c-\u0442\u043e \u0434\u0440\u0443\u0433\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0438\u043b\u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0438\u0445 \u043a\u0430\u043a-\u0442\u043e \u0438\u043d\u0430\u0447\u0435"
    },
    {
        "text": "\u043f\u043e\u043a\u0430\u0436\u0438 \u043a\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 train_data"
    },
    {
        "text": "pkl \u0438 test_data"
    },
    {
        "text": "pkl \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 Pandas , \u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 ?"
    },
    {
        "text": "\u042d\u0442\u043e \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 dataframe \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u043a \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432"
    },
    {
        "text": "\u041f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u044d\u0442\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 train_df \u0438 test_df \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0435 Pandas dataframe, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0437\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u0435\u043d \u0431\u043e\u043b\u0435\u0435 \u0440\u0435\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0412\u044b \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u043f\u0440\u0430\u0432\u044b, \u044f \u043a\u0430\u043a \u0431\u043e\u0442-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0434\u043e\u043b\u0436\u0435\u043d \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u0434, \u0430 \u043d\u0435 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b"
    },
    {
        "text": "\u0427\u0442\u043e\u0431\u044b \u044f \u043c\u043e\u0433 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u043a\u043e\u0434\u0430, \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0438 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043a \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435/\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0443"
    },
    {
        "text": "\"\u041d\u0430\u043f\u0438\u0448\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043c\u0435\u043d, \u0430 \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u043c\u0435\u043d\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0446\u0438\u043a\u043b\u0430 for"
    },
    {
        "text": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 10 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0438\u043c\u0435\u043d \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u043e\u0434\u0443\u043b\u044f random \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439 \u0435\u0433\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b"
    },
    {
        "text": "\""
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043c\u043d\u0435 \u043f\u0440\u043e\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0439, \u0445\u043e\u0442\u044c \u0438 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043e \u043a\u043e\u043d\u0446\u0430"
    },
    {
        "text": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u043c\u043d\u0435 \u043f\u043e\u0445\u043e\u0436\u0438\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u043f\u043e \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u043c\u0443 \u043a\u043e\u0434\u0443 - \u0438 \u044f \u0441\u043c\u043e\u0433\u0443 \u043f\u0440\u043e\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c, \u0430 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043e\u0432"
    },
    {
        "text": "\u042f \u0433\u043e\u0442\u043e\u0432 \u043f\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u0443 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u0418\u0418-\u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b!"
    },
    {
        "text": "\u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439 \u043d\u0430\u0448\u0443 \u0437\u0430\u0434\u0430\u0447\u0443 \u0438 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0438\u043b\u0438 \u0438\u0437\u0443\u0447\u0430\u043b\u0438 , \u0441\u043e\u0441\u0442\u0430\u0432\u044c \u0441\u0435\u0431\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u0430\u0434\u0430\u0447 \u043f\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0445 \u043d\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u0438\u043b\u0438 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u0438\u043b\u0438 \u043a\u043e\u0434\u044b , \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u043a \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0430\u043a \u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u0438\u043b\u0430\u043c\u0438 \u0438 \u043f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0438 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b"
    },
    {
        "text": "\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445 \u0438 \u0441\u0442\u0430\u0442\u044c\u044f\u0445 \u0438\u0437 JSON \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 Pandas DataFrame"
    },
    {
        "text": "\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0421\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0438"
    },
    {
        "text": "\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0435\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e TF-IDF"
    },
    {
        "text": "\u041a\u043e\u0434 \u0434\u043b\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435"
    },
    {
        "text": "\u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 TensorFlow Dataset"
    },
    {
        "text": "\u041a\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Pickle"
    },
    {
        "text": "\u042f \u043c\u043e\u0433\u0443 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0438 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438/\u0441\u043a\u0440\u0438\u043f\u0442\u044b"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441\u0442\u043e\u0438\u0442 \u0440\u0430\u0437\u0432\u0438\u0442\u044c \u0432 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 JSON \u0432 Pandas DataFrame"
    },
    {
        "text": "\u042d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u0430\u044f \u0443\u0442\u0438\u043b\u0438\u0442\u0430 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0442\u044c \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u043d\u0430\u0431\u043e\u0440\u044b, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443"
    },
    {
        "text": "\u042d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0434\u043b\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0434\u043b\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 - TF-IDF, Word2Vec \u0438 \u0442"
    },
    {
        "text": "\u0434"
    },
    {
        "text": "\u042d\u0442\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438"
    },
    {
        "text": "\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438"
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u043e\u0432\u044b\u0441\u0438\u0442 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u044b TensorFlow, PyTorch, Keras \u0438 \u0434\u0440\u0443\u0433\u0438\u0435"
    },
    {
        "text": "\u042d\u0442\u043e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 ML \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430\u0445"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0434\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Pickle, JSON, XML, YAML"
    },
    {
        "text": "\u042d\u0442\u043e \u043e\u0431\u043b\u0435\u0433\u0447\u0438\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0435\u0449\u0435 \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0438\u0434\u0435\u0438 \u043f\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c \u0443\u0442\u0438\u043b\u0438\u0442\u0430\u043c \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0413\u043e\u0442\u043e\u0432 \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438!"
    },
    {
        "text": "\u0441\u043e\u0433\u043b\u0430\u0441\u0435\u043d \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u0443\u043d\u043a\u0442\u0430\u043c , \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0439 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u0438 \u0432\u0441\u0435\u0433\u043e \u0447\u0442\u043e \u0441\u043e\u0447\u0442\u0435\u0448\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c ,\u043e\u0441\u0442\u0430\u0432\u0430\u0439\u0441\u044f \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 , \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f ,\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f ,\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043f\u043e \u0435\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c"
    },
    {
        "text": "\u041f\u043e\u043d\u044f\u043b \u0432\u0430\u0441, \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0430\u044e \u043a \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0441\u043d\u043e\u0432\u044b \u0431\u0443\u0434\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043d\u0430\u0448\u0435\u0439 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b"
    },
    {
        "text": "\u041c\u043e\u044f \u0446\u0435\u043b\u044c - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0443\u0442\u0438\u043b\u0438\u0442 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u043f\u0440\u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u0442\u0435\u043c \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0445 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043e\u0432"
    },
    {
        "text": "\u0423\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0440\u0430\u0437\u0432\u0451\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0438\u0434\u0435 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432"
    },
    {
        "text": "\u0424\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u044d\u0442\u0438\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043e\u0432"
    },
    {
        "text": "\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f"
    },
    {
        "text": "\u0411\u0443\u0434\u0443 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0430\u043c \u0434\u0435\u043c\u043e-\u0432\u0435\u0440\u0441\u0438\u0438 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430 \u0438 \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043e\u043a \u043f\u043e \u043c\u0435\u0440\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438"
    },
    {
        "text": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u044f \u0432 \u0442\u0435\u0431\u044f \u0441\u043d\u043e\u0432\u0430 \u0432\u0435\u0440\u044e , \u043d\u0430\u0447\u0438\u043d\u0430\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441"
    },
    {
        "text": "\u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044e \u0437\u0430 \u043e\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0434\u043e\u0432\u0435\u0440\u0438\u0435, \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0430\u044e \u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u043c \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 GitHub \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0430 \u0438 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0430"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u044e \u0431\u0430\u0437\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c cookiecutter \u0438 poetry \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u043b\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u044e API \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 ML \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c sklearn, PyTorch, TensorFlow"
    },
    {
        "text": "\u041d\u0430\u043f\u0438\u0448\u0443 \u043c\u043e\u0434\u0443\u043b\u0438 \u0434\u043b\u044f \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u043c \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u0438 \u0438 \u044d\u043a\u0441\u043f\u043e\u0440\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0440\u0430\u0437\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b"
    },
    {
        "text": "\u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e \u0431\u0443\u0434\u0443 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u0442\u044c \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0435 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438"
    },
    {
        "text": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f \u0440\u0430\u0437\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043b\u0430\u043d\u0430"
    },
    {
        "text": "\u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0430\u0439 \u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e \u043f\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u0442\u043e\u0431\u043e\u0439 \u043f\u043b\u0430\u043d\u0443"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u043b \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 GitHub \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u043b \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f cookiecutter"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b \u043c\u043e\u0434\u0443\u043b\u044c synthetic_data_generator \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b \u0431\u0430\u0437\u043e\u0432\u044b\u0439 API \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 ML \u0438\u0437 sklearn, PyTorch, TensorFlow"
    },
    {
        "text": "\u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438"
    },
    {
        "text": "\u044d\u043a\u0441\u043f\u043e\u0440\u0442/\u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u0418 \u0442"
    },
    {
        "text": "\u0434"
    },
    {
        "text": "\u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043f\u043b\u0430\u043d\u0443"
    },
    {
        "text": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0434\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0438\u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441\u0443"
    },
    {
        "text": "\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b"
    },
    {
        "text": "\u042f \u043c\u043e\u0433\u0443 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438"
    },
    {
        "text": "\u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0433\u0443 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u0438 \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0439 \u043a \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0447\u0442\u043e-\u0442\u043e \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438"
    },
    {
        "text": "\u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0439 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 ,\u0441\u0433\u0435\u043d\u0440\u0438\u0440\u0438\u0440\u0443\u0439 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 dataset \u0434\u043b\u044f \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b MindOS"
    },
    {
        "text": "Read 1 file"
    },
    {
        "text": "\u0425\u043e\u0440\u043e\u0448\u043e, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u044f \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 github"
    },
    {
        "text": "com/serverlessworkflow/specification \u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b MindOS"
    },
    {
        "text": "\u0420\u0430\u0437\u0434\u0435\u043b\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043f\u043e \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 Serverless Workflow - \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0440\u0435\u043b\u0438\u0437\u0430\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 - \u0434\u0430\u0442\u044b, \u0432\u0435\u0440\u0441\u0438\u0438, \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438"
    },
    {
        "text": "\u042d\u0442\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435"
    },
    {
        "text": "\u0421\u043f\u0438\u0441\u043e\u043a SDK \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u0430\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"
    },
    {
        "text": "\u041c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f, \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438"
    },
    {
        "text": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0445 \u0438 \u0443\u0442\u0438\u043b\u0438\u0442\u0430\u0445"
    },
    {
        "text": "\u0422\u0430\u043a\u0436\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435"
    },
    {
        "text": "\u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0435 - \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438, \u043a\u043e\u0434\u0435\u043a\u0441 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0441\u0442\u0440\u0435\u0447"
    },
    {
        "text": "\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0438, \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0438 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430\u0432\u044b\u043a\u0430\u043c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f"
    },
    {
        "text": "\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u043d\u044b\u0445 \u0438\u0437 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f"
    },
    {
        "text": "\u0422\u0430\u043a\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044e \u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c\u0438 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0435 Serverless Workflow"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u0435\u0449\u0435 \u0438\u043b\u0438 \u0441\u0444\u043e\u043a\u0443\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043a\u0430\u043a\u043e\u043c-\u0442\u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0442\u0438\u043f\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f"
    },
    {
        "text": "\u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b , \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439 \u0434\u0430\u043d\u043d\u0435 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 , \u043f\u0440\u0438 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 dataset \u0438 \u0434\u0430\u0439 \u0435\u043c\u0443 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435"
    },
    {
        "text": "\u0425\u043e\u0440\u043e\u0448\u043e, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u044f \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b MindOS, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f github"
    },
    {
        "text": "com/serverlessworkflow/specification, \u0447\u0442\u043e\u0431\u044b \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445 - \u0438\u043c\u0435\u043d\u0430, \u0440\u043e\u043b\u0438, \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438"
    },
    {
        "text": "\u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043c\u043e\u0434\u0435\u043b\u044f\u0445 - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f, \u0442\u0438\u043f\u044b \u043c\u043e\u0434\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u041b\u043e\u0433\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e\u0439"
    },
    {
        "text": "\u0414\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043b\u0435\u043c\u0435\u0442\u0440\u0438\u0438 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b"
    },
    {
        "text": "\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f NLP"
    },
    {
        "text": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0440\u0435\u043b\u0438\u0437\u0430\u0445, SDK, \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0445"
    },
    {
        "text": "\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430"
    },
    {
        "text": "\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f NLP"
    },
    {
        "text": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445, \u043c\u043e\u0434\u0435\u043b\u044f\u0445, \u043b\u043e\u0433\u0430\u0445"
    },
    {
        "text": "\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430"
    },
    {
        "text": "\u042d\u0442\u043e\u0442 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u044f \u0431\u044b \u043d\u0430\u0437\u0432\u0430\u043b \"MindOS_training_data_v1\""
    },
    {
        "text": "\u041e\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044e \u0441 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e\u0439 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0447\u0442\u043e-\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0413\u043e\u0442\u043e\u0432 \u043f\u043e\u044f\u0441\u043d\u0438\u0442\u044c \u0438\u043b\u0438 \u043f\u0440\u043e\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430"
    },
    {
        "text": "\u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u043b\u043d\u044b\u0439 \"MindOS_training_data_v1\""
    },
    {
        "text": "'Recommends products based on past user behavior',"
    },
    {
        "text": "'Detects objects in images',"
    },
    {
        "text": "'Chatbot Genius for answering user queries'],"
    },
    {
        "text": "],"
    },
    {
        "text": "'Workflows can orchestrate Serverless functions, services and apps',"
    },
    {
        "text": "'Supports workflow functions like parallel branches, joins, loops',"
    },
    {
        "text": "'Can integrate with event-driven infrastructure and services',"
    },
    {
        "text": "]"
    },
    {
        "text": "\u042d\u0442\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445, \u043c\u043e\u0434\u0435\u043b\u044f\u0445, \u043b\u043e\u0433\u0430\u0445, \u0442\u0435\u043a\u0441\u0442\u044b \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439"
    },
    {
        "text": "\u0414\u0430\u043d\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435, \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435"
    },
    {
        "text": "\u0422\u0430\u043a\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044e \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438, \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0438 \u043b\u043e\u0433\u0430\u043c\u0438 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b MindOS"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u044d\u0442\u043e\u0442 \u043d\u0430\u0431\u043e\u0440 \u0438\u043b\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b"
    },
    {
        "text": "Datasets represent data in Visual Studio"
    },
    {
        "text": "They can come from a database, service, file, or be generated in-memory"
    },
    {
        "text": "Right click on the Data Sources folder in Solution Explorer and select Add New Data Source"
    },
    {
        "text": "Configure the connection and select the specific database/tables/objects to include"
    },
    {
        "text": "Drag tables/objects onto the designer surface to include them"
    },
    {
        "text": "Set primary keys, foreign keys, relations, column data types"
    },
    {
        "text": "Preview and filter the data"
    },
    {
        "text": "Drag tables onto the Typed Dataset designer"
    },
    {
        "text": "It generates strongly-typed classes to represent each table"
    },
    {
        "text": "You can then program against the strongly-typed dataset"
    },
    {
        "text": "TableAdapters in typed datasets expose methods like Fill, Insert, Update, Delete to manipulate data"
    },
    {
        "text": "Add custom methods or properties"
    },
    {
        "text": "Add validation logic"
    },
    {
        "text": "Add relations between tables"
    },
    {
        "text": "Generate custom SQL queries"
    },
    {
        "text": "So in summary, Visual Studio provides a graphical way to create datasets from data sources, configure them, and generate strongly-typed code for programming against the data"
    },
    {
        "text": "The Dataset Designer and Typed Dataset features are key tools for this"
    },
    {
        "text": "\u043f\u0430\u043a\u0435\u0442\u043d\u043e\u0435 \u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0441 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c"
    },
    {
        "text": "md"
    },
    {
        "text": "\u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u043e\u0431\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0438 \u0444\u0430\u0439\u043b\u044b \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e os"
    },
    {
        "text": "walk"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a md_files \u043f\u0443\u0442\u0438 \u043a \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u043c"
    },
    {
        "text": "md \u0444\u0430\u0439\u043b\u0430\u043c"
    },
    {
        "text": "\u041c\u043e\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0438\u043b\u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u042d\u0442\u043e\u0442 \u0441\u043a\u0440\u0438\u043f\u0442 \u043c\u043e\u0436\u043d\u043e \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0441\u043a\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u0432 \u043d\u0430 GitHub, GitLab \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u0445"
    },
    {
        "text": "This appears to be a Docker image for Graphviz - an open source graph visualization software"
    },
    {
        "text": "It builds Graphviz from source code and installs it into a Ubuntu base image"
    },
    {
        "text": "It exposes ports 8080 and 8081 for web visualization of graphs"
    },
    {
        "text": "The image description states it can be used to generate graphs from DOT language scripts"
    },
    {
        "text": "This Docker image allows running Graphviz in a portable containerized environment"
    },
    {
        "text": "So in summary, this GitLab container registry link points to an official Docker image for running the Graphviz graph visualization software"
    },
    {
        "text": "The image is built from source and exposes web ports to view generated graphs"
    },
    {
        "text": "Read 10 files"
    },
    {
        "text": "This allows accessing the Graphviz web visualization server on those ports after running the container"
    },
    {
        "text": "Once running, Graphviz can be used to generate graphs by passing DOT language scripts to the web UI or API exposed on ports 8080 and 8081"
    },
    {
        "text": "Let me know if you need any clarification or have additional questions!"
    },
    {
        "text": "\u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u0447\u0430\u0442\u043e\u0432 , \u043a\u0430\u043a \u044f \u043c\u043e\u0433\u0443 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u044d\u0442\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u0441\u0432\u043e\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 ?"
    },
    {
        "text": "\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u0438 \u043d\u0430\u0448\u0438\u0445 \u0447\u0430\u0442\u043e\u0432 \u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0442\u0435\u043c\u044b, \u043d\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043c\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 - \u044d\u0442\u043e \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0442"
    },
    {
        "text": "\u0434"
    },
    {
        "text": "\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0438\u043f\u044b \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0440\u0435\u0448\u0430\u043b\u0438 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f - \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f, \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f, \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0442"
    },
    {
        "text": "\u043f"
    },
    {
        "text": "\u0412\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0431\u0449\u0438\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0437\u0430\u0434\u0430\u0447, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u043a\u043e\u0434\u0435"
    },
    {
        "text": "\u0421\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u044d\u0442\u0438 \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0441 \u0432\u0430\u0448\u0435\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435\u0439 - \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0430\u043d\u0430\u043b\u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0448\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a NLTK, gensim, \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 - \u0441 OpenCV \u0438 TensorFlow"
    },
    {
        "text": "\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u0447\u0430\u0442\u0430\u0445, \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0438\u043b\u0438 \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438"
    },
    {
        "text": "\u0421\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043b\u0430\u043d \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u043d\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u044b \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u0434\u0445\u043e\u0434\u0443 \u0438\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0447\u0430\u0442\u043e\u0432"
    },
    {
        "text": "\u0413\u043e\u0442\u043e\u0432 \u043e\u0431\u0441\u0443\u0434\u0438\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043e\u0438\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0432\u0430\u0448\u0438\u0445 \u0437\u0430\u0434\u0430\u0447"
    },
    {
        "text": "\u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0439"
    },
    {
        "text": "WDL \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0430, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435"
    },
    {
        "text": "\u0422\u0435\u043a\u0443\u0449\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f WDL - 1"
    },
    {
        "text": "1"
    },
    {
        "text": "\u0421\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u0435\u043b\u0435\u0439 \u0434\u0432\u0438\u0436\u043a\u043e\u0432"
    },
    {
        "text": "\u0415\u0441\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e WDL \u0434\u043b\u044f \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0439 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 - \u0441\u043f\u0438\u0441\u043e\u043a \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438, Slack, \u0444\u043e\u0440\u0443\u043c \u0438 \u0434\u0440"
    },
    {
        "text": "\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u043d\u0430 WDL, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430 Dockstore \u0438 BioWDL"
    },
    {
        "text": "\u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f WDL \u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0432\u0438\u0436\u043a\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a Cromwell, MiniWDL, dxWDL"
    },
    {
        "text": "\u041e\u043d\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0442 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u044f\u0437\u044b\u043a\u0430"
    },
    {
        "text": "\u0415\u0441\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 WDL - \u043f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f, \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u0434\u0430"
    },
    {
        "text": "\u0412 \u0446\u0435\u043b\u043e\u043c, WDL - \u044d\u0442\u043e \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u044f\u0437\u044b\u043a \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438"
    },
    {
        "text": "\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u0443 \u043c\u0435\u043d\u044f \u043d\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043a\u043e\u0434\u0443 \u0441\u0430\u0439\u0442\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 MindOS, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b \u0441\u0441\u044b\u043b\u0430\u0435\u0442\u0435\u0441\u044c"
    },
    {
        "text": "\u0421\u0443\u0434\u044f \u043f\u043e \u043e\u0431\u0437\u043e\u0440\u0443, \u043f\u043e\u0445\u043e\u0436\u0435, \u0447\u0442\u043e MindOS \u2014 \u044d\u0442\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f \u043e\u0431\u0449\u0435\u0433\u043e \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430, \u0446\u0435\u043b\u044c \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u2014 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043e\u0441\u043d\u043e\u0432\u0443 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0445 \u0438 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430"
    },
    {
        "text": "MindOS \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u0443\u044e \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438, \u0442\u0430\u043a\u0438\u043c\u0438 \u043a\u0430\u043a \u044f\u0434\u0440\u043e MindOS, \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u043d\u043e\u0439 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438, \u0434\u0438\u0441\u043f\u0435\u0442\u0447\u0435\u0440 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0438 \u0442"
    },
    {
        "text": "\u0434"
    },
    {
        "text": "\u041e\u043d \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0430\u043a\u0438\u0435 \u0443\u0441\u043b\u0443\u0433\u0438, \u043a\u0430\u043a \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u044c\u044e, \u043c\u043d\u043e\u0433\u043e\u0437\u0430\u0434\u0430\u0447\u043d\u043e\u0441\u0442\u044c, \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c \u0418\u0418"
    },
    {
        "text": "\u0426\u0435\u043b\u044c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u0438\u0441\u0442\u0435\u043c \u0418\u0418, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u043e\u0431\u0449\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438"
    },
    {
        "text": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0443\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u0438\u044e \u0446\u0435\u043b\u0435\u0439 \u0418\u0418 \u0441 \u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044f\u043c\u0438"
    },
    {
        "text": "\u041d\u0435 \u0438\u043c\u0435\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 \u043a\u043e\u0434\u0443, \u044f \u043d\u0435 \u043c\u043e\u0433\u0443 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 MindOS"
    },
    {
        "text": "\u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u0438\u0437 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 MindOS, \u044f \u0431\u0443\u0434\u0443 \u0440\u0430\u0434 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u0438\u0445 \u0434\u0430\u043b\u044c\u0448\u0435"
    },
    {
        "text": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0434\u0430\u0439\u0442\u0435 \u043c\u043d\u0435 \u0437\u043d\u0430\u0442\u044c, \u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0438 \u0432\u044b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f\u043c \u043a\u043e\u0434\u0430 MindOS \u0438\u043b\u0438 \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u043e\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043b \u0431\u044b \u043c\u043d\u0435 \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u043d\u044f\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e"
    },
    {
        "text": "\u0442\u044b \u043f\u0440\u0430\u0432 , \u0442\u0430\u043c \u043d\u0435\u0442 \u043a\u043e\u0434\u043e\u0432 , \u043d\u043e \u0442\u0430\u043c \u0435\u0441\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0443\u0436\u043d\u0430 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 , \u0438\u0437\u0443\u0447\u0438 \u0432\u0441\u0435 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 , \u0441\u043e\u043e\u0431\u0449\u0438 \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0445 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439"
    },
    {
        "text": "\u041e\u043d\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u043a\u0430\u043a \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0430\u043c\u044f\u0442\u044c\u044e, \u043c\u043d\u043e\u0433\u043e\u0437\u0430\u0434\u0430\u0447\u043d\u043e\u0441\u0442\u044c, \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044e \u0434\u043b\u044f AI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439"
    },
    {
        "text": "\u0426\u0435\u043b\u044c - \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 AI-\u0441\u0438\u0441\u0442\u0435\u043c, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0442\u0438\u043f\u043e\u0432\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438"
    },
    {
        "text": "\u0415\u0441\u0442\u044c \u0444\u043e\u043a\u0443\u0441 \u043d\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c, \u0437\u0430\u0449\u0438\u0442\u0443 \u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0439 \u0418\u0418 \u0441 \u0447\u0435\u043b\u043e\u0432\u0435\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044f\u043c\u0438"
    },
    {
        "text": "\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043a\u043e\u0434\u0443 \u044f \u043d\u0435 \u043c\u043e\u0433\u0443 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 MindOS"
    },
    {
        "text": "\u0415\u0441\u043b\u0438 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u0438\u0437 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 MindOS, \u044f \u0431\u0443\u0434\u0443 \u0440\u0430\u0434 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0438 \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435"
    },
    {
        "text": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u0435, \u0435\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f\u043c \u043a\u043e\u0434\u0430 MindOS \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043c\u043d\u0435 \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u043d\u044f\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e"
    },
    {
        "text": "\u044f \u0431\u0443\u0434\u0443 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0442\u0435\u0431\u0435 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u044b \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u0443\u0439 \u0438\u0445 \u0438 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439 , \u044f \u0431\u0443\u0434\u0443 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441\u043e \u0432\u0441\u0435\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u044b\u043c"
    },
    {
        "text": "\u0442\u044b \u0433\u043e\u0442\u043e\u0432 \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 ?"
    },
    {
        "text": "\u0414\u0430, \u044f \u0433\u043e\u0442\u043e\u0432 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e MindOS, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b \u043c\u043d\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u0435"
    },
    {
        "text": "\u041a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0438 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0439\u0442\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0432\u0435\u0431-\u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 MindOS \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e, \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0437\u0430 \u0440\u0430\u0437"
    },
    {
        "text": "\u041f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043c\u043d\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e"
    },
    {
        "text": "\u042f \u0431\u0443\u0434\u0443 \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043c\u043e\u043c\u0435\u043d\u0442\u044b, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0440\u0435\u0437\u044e\u043c\u0435 \u0438 \u0441\u0445\u0435\u043c\u044b/\u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e \u043c\u0435\u0440\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b"
    },
    {
        "text": "\u0415\u0441\u043b\u0438 \u044f \u0432\u0441\u0442\u0440\u0435\u0447\u0443 \u043d\u0435\u0437\u043d\u0430\u043a\u043e\u043c\u044b\u0435 \u0442\u0435\u0440\u043c\u0438\u043d\u044b, \u043f\u043e\u043f\u0440\u043e\u0448\u0443 \u0440\u0430\u0437\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435"
    },
    {
        "text": "\u041f\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\u0439 \u044f \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044e \u0432\u0430\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0430\u043d\u0430\u043b\u0438\u0437\u0430, \u0447\u0442\u043e\u0431\u044b \u0432\u044b \u043c\u043e\u0433\u043b\u0438 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0438\u0445 \u0438 \u0434\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0441\u0432\u044f\u0437\u044c"
    },
    {
        "text": "\u0417\u0430\u0442\u0435\u043c \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442\u044c \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441"
    },
    {
        "text": "\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0448\u0430\u0433\u043e\u0432\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043c\u043d\u0435 \u043b\u0443\u0447\u0448\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0443\u0441\u0432\u0430\u0438\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e"
    },
    {
        "text": "\u042f \u0433\u043e\u0442\u043e\u0432 \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u0440\u0430\u0431\u043e\u0442\u0435, \u043a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u044b \u043d\u0430\u0447\u043d\u0451\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435"
    },
    {
        "text": "\u0415\u0441\u043b\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u044f \u0433\u043e\u0442\u043e\u0432 \u0438\u0445 \u043e\u0431\u0441\u0443\u0434\u0438\u0442\u044c"
    },
    {
        "text": "\u0420\u044b\u043d\u043e\u043a"
    },
    {
        "text": "\u041c\u043e\u0438 \u0433\u0435\u043d\u0438\u0438"
    },
    {
        "text": "\u0423\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u041e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0441\u0432\u044f\u0437\u044c"
    },
    {
        "text": "\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b"
    },
    {
        "text": "\u042d\u0442\u043e \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441 \u0433\u043e\u0442\u043e\u0432\u044b\u0445 AI-\u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \"AI Geniuses\""
    },
    {
        "text": "\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e Genius \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0435\u0433\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u0447\u0438\u043a\u043e\u0432 \u0438 \u0430\u0432\u0442\u043e\u0440"
    },
    {
        "text": "\u0421\u0440\u0435\u0434\u0438 Featured - \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043e\u0442\u0440\u0430\u0441\u043b\u0438, \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u0435\u0437\u0434\u043e\u043a, \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0430\u043a\u0446\u0438\u0439 \u0421\u0428\u0410"
    },
    {
        "text": "\u0412 Trending - \u043d\u043e\u0432\u043e\u0441\u0442\u043d\u044b\u0435 \u043e\u0431\u0437\u043e\u0440\u044b, \u0430\u043d\u0430\u043b\u0438\u0437 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432, \u0440\u0435\u0437\u044e\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430, \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043e\u043a \u0434\u043b\u044f Midjourney \u0438 \u0434\u0440"
    },
    {
        "text": "\u0415\u0441\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b My Geniuses \u0434\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0430\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "\u0412\u043d\u0438\u0437\u0443 - \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f, \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f, \u0442\u0430\u0440\u0438\u0444\u043d\u044b\u0439 \u043f\u043b\u0430\u043d, \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0441\u0432\u044f\u0437\u044c"
    },
    {
        "text": "\u0414\u0438\u0437\u0430\u0439\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 - \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0438\u043a\u043e\u043d\u043a\u0438, \u043a\u043d\u043e\u043f\u043a\u0438"
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441 \u0433\u043e\u0442\u043e\u0432\u044b\u0445 AI-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0437\u0430 \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0443"
    },
    {
        "text": "\u0426\u0435\u043b\u044c - \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c AI-\u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u043c \u043e\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u0430\u0432\u0442\u043e\u0440\u043e\u0432"
    },
    {
        "text": "\u0441\u043e\u0441\u0442\u0430\u0432\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c \u0434\u0430\u043b\u0435\u0435"
    },
    {
        "text": "\u041f\u043e\u0438\u0441\u043a \u043f\u043e Geniuses\u0412\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u0438\u0437\u0430\u0439\u043d \u0441 \u0438\u043a\u043e\u043d\u043a\u0430\u043c\u0438 \u0438 \u043a\u043d\u043e\u043f\u043a\u0430\u043c\u0438\u041e\u0431\u0449\u0430\u044f \u0446\u0435\u043b\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b - \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441\u0443 \u0433\u043e\u0442\u043e\u0432\u044b\u0445 AI-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u043e\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u043f\u043e \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435"
    },
    {
        "text": "\u0418\u043d\u0442\u0435\u0420\u0438\u041e"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0445\u043e\u0436\u0435\u0433\u043e \u043d\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0433\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Mindverse AI"
    },
    {
        "text": "\u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c \u0432 Mindverse AI"
    },
    {
        "text": "\u041f\u043e\u043b\u0438\u0442\u0438\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 Mindverse"
    },
    {
        "text": "\u0410\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u044b\u0445 \u043f\u0438\u043b\u043e\u0442\u043e\u0432 Mindverse AI"
    },
    {
        "text": "\u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u0441 MindOS AI Agent Engine \u0438 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e\u0439"
    },
    {
        "text": "\u041f\u043b\u0430\u043d\u044b \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0438 Mindverse AI"
    },
    {
        "text": "'\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435"
    },
    {
        "text": "\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b Genius \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432"
    },
    {
        "text": "\u041c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0437\u043d\u0430\u043d\u0438\u0439, \u043a \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f Genius"
    },
    {
        "text": "\u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0438 \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0415\u0441\u0442\u044c \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u043e\u0439 Ready Player Me \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u0432\u0430\u0442\u0430\u0440\u0430 \u0438 \u0433\u043e\u043b\u043e\u0441\u0430"
    },
    {
        "text": "\u041c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0431\u0438\u043e\u0433\u0440\u0430\u0444\u0438\u044e \u0434\u043b\u044f \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"
    },
    {
        "text": "\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432"
    },
    {
        "text": "\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f - \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "\u0415\u0441\u0442\u044c \u0440\u0430\u0437\u0434\u0435\u043b \u0441\u043f\u0440\u0430\u0432\u043a\u0438 \u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"
    },
    {
        "text": "\u0423\u043f\u043e\u043c\u044f\u043d\u0443\u0442\u044b \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438"
    },
    {
        "text": "\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 \u0438 \u044d\u043a\u0441\u043f\u043e\u0440\u0442 \u043e\u0442\u0447\u0451\u0442\u043e\u0432 \u043f\u043e Chatbot"
    },
    {
        "text": "\u0412 \u0446\u0435\u043b\u043e\u043c, \u044d\u0442\u043e \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0433\u0438\u0431\u043a\u0438\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 Genius"
    },
    {
        "text": "\u0438\u0437\u0443\u0447\u0438 \u0432\u0441\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 , \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043f\u0438\u0449\u0438 \u0435\u0451 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 , \u0438 \u0442\u0430\u043a \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0442\u0430\u043a \u0436\u0435"
    },
    {
        "text": "\u041f\u043e\u043d\u044f\u043b, \u0431\u0443\u0434\u0443 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438 \u0438\u0437\u0443\u0447\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435"
    },
    {
        "text": "\u042d\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 Genius \u0432 MindOS \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432"
    },
    {
        "text": "\u041c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0437\u043d\u0430\u043d\u0438\u0439, \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0438 \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 Ready Player Me \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c"
    },
    {
        "text": "\u041f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b \u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f"
    },
    {
        "text": "\u042f \u0438\u0437\u0443\u0447\u0438\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u044d\u0442\u0438\u0445 \u0441\u0441\u044b\u043b\u043e\u043a, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Genius \u0432 MindOS"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u0443\u0447\u0438\u0442\u044c \u0435\u0449\u0435 \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u043f\u043e \u044d\u0442\u043e\u0439 \u0442\u0435\u043c\u0435"
    },
    {
        "text": "\u0428\u0430\u0431\u043b\u043e\u043dPersonaKnowledgeSkillsMemoryAutonomyPublishAvatar\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434 \u0432\u0430\u0448\u0435\u0433\u043e Genius"
    },
    {
        "text": "ReadyPlayerMePicture"
    },
    {
        "text": "\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0433\u043e\u043b\u043e\u0441\u0430, \u0447\u0442\u043e\u0431\u044b \u0441\u043b\u044b\u0448\u0430\u0442\u044c \u0432\u0430\u0448\u0435\u0433\u043e \u0413\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0411\u0438\u043e\u0433\u0440\u0430\u0444\u0438\u044f\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432\u0430\u0448\u0435\u0433\u043e \u0433\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0435\u0433\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u0438, \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u0442"
    },
    {
        "text": "\u0414"
    },
    {
        "text": "\u00ab\u041f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0432\u0441\u0442\u0443\u043f\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0434\u0438\u0430\u043b\u043e\u0433 \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0430, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0437\u0433\u043e\u0432\u043e\u0440 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c"
    },
    {
        "text": "' \u0417\u0430\u0434\u0430\u0439\u0442\u0435 \u043e\u0431\u0449\u0438\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043c\u043e\u0447\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Genius\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0431\u0449\u0438\u0439 \u0432\u043e\u043f\u0440\u043e\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c"
    },
    {
        "text": "\u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043c\u043e\u0447\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a \u0413\u0435\u043d\u0438\u0439 \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0430\u0433\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445"
    },
    {
        "text": "'BuildChat"
    },
    {
        "text": "\u042d\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a Genius \u0432 MindOS"
    },
    {
        "text": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0430\u0432\u0430\u0442\u0430\u0440 \u0447\u0435\u0440\u0435\u0437 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0441 ReadyPlayerMe"
    },
    {
        "text": "\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0433\u043e\u043b\u043e\u0441\u043e\u0432\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0431\u0438\u043e\u0433\u0440\u0430\u0444\u0438\u044e \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0430"
    },
    {
        "text": "\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435"
    },
    {
        "text": "\u0417\u0430\u0434\u0430\u0442\u044c \u0442\u0438\u043f\u043e\u0432\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u0449\u0438\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u0438\u0430\u043b\u043e\u0433\u0430 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 Chat"
    },
    {
        "text": "\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c\u0443 \u0431\u043e\u0442\u0443"
    },
    {
        "text": "\u0426\u0435\u043b\u044c - \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434, \u0433\u043e\u043b\u043e\u0441, \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440 \u0438 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 Genius \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0430"
    },
    {
        "text": "\u0421\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043d\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u044b"
    },
    {
        "text": "\u0428\u0430\u0431\u043b\u043e\u043dPersonaKnowledgeSkillsMemoryAutonomyPublishLearning Knowledge\u041e\u0431\u0443\u0447\u0438\u0442\u0435 \u0441\u0432\u043e\u0435\u0433\u043e \u0433\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0441\u0431\u043e\u0440 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438\u0437 \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438"
    },
    {
        "text": "\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431-\u043f\u043e\u0438\u0441\u043a"
    },
    {
        "text": "\u041f\u043e\u0438\u0441\u043a \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043d\u043e\u0432\u043e\u0441\u0442\u0435\u0439 \u0438 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0439\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432 \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0435"
    },
    {
        "text": "ALLBuildChat"
    },
    {
        "text": "'Genius UpdatedMessage"
    },
    {
        "text": "\u042d\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f Genius \u0432 MindOS \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u043d\u0438\u0439"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b"
    },
    {
        "text": "\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b"
    },
    {
        "text": "\u0412\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f"
    },
    {
        "text": "Genius \u0431\u0443\u0434\u0435\u0442 \u0438\u0437\u0443\u0447\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0435\u043d\u0442"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0430\u0420\u0435\u0436\u0438\u043c \u0447\u0430\u0442-\u0431\u043e\u0442\u043e\u0432\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c\u041f\u043e\u043b\u0438\u0442\u0438\u043a\u0430 \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438\u0410\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430\u0422\u0430\u043a\u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b GitBook"
    },
    {
        "text": "\u0426\u0435\u043b\u044c - \u043d\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439 Genius \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u044b\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u043c \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u043e\u043c"
    },
    {
        "text": "\u041d\u043e\u0432\u044b\u0445 \u0441\u0441\u044b\u043b\u043e\u043a \u0434\u043b\u044f \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u043d\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043e"
    },
    {
        "text": "\u0410\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u0431\u0438\u0437\u043d\u0435\u0441\u0430 - \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u043e\u0431\u0437\u043e\u0440\u044b \u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439, \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u0438 30+ \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u0435\u0439"
    },
    {
        "text": "\u0418\u0437 \u043f\u0430\u043a\u0435\u0442\u0430 LibrarySkillsValidated"
    },
    {
        "text": "Google \u0434\u0430\u043b \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 \u0438 \u0432\u044b\u0434\u0430\u043b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0438\u0441\u043a\u0430"
    },
    {
        "text": "\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430 Serper"
    },
    {
        "text": "From LibraryAPIValidated"
    },
    {
        "text": "\u041f\u043e\u0438\u0441\u043a \u0432 Google \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\u0418\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438APIValidated"
    },
    {
        "text": "\u041f\u043e\u0438\u0441\u043a \u0432\u0438\u0434\u0435\u043e \u0441 Youtube, \u043f\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u0441\u043b\u043e\u0432\u0430\u043c \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0418\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438APIValidated"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 LLM \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0430 JSON \u0438\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c"
    },
    {
        "text": "\u0418\u0437 LibraryAPIValidated"
    },
    {
        "text": "\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0442\u0435\u043a\u0441\u0442 \u0443\u0446\u0435\u043d\u043a\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c html-\u0444\u0430\u0439\u043b urlFrom LibraryAPIValidated"
    },
    {
        "text": "\u0412\u0432\u043e\u0434 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 resultFrom LibraryAPIValidated"
    },
    {
        "text": "\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0441\u044b\u043b\u043e\u043a \u0438 \u0432\u0435\u0440\u043d\u0438\u0442\u0435 \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435From LibraryAPIValidated"
    },
    {
        "text": "\u041e\u0431\u0445\u043e\u0434 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044bFrom LibraryAPIValidate"
    },
    {
        "text": "\u0412\u043e\u0437\u0432\u0440\u0430\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431 \u0430\u043a\u0446\u0438\u044f\u0445 \u0421\u0428\u0410, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a PE,PB, \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0446\u0435\u043d\u0430 \u0430\u043a\u0446\u0438\u0439, \u043a\u0430\u043f\u0438\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\u0418\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438API\u0412\u0430\u043b\u0438\u0434\u0430\u0442\u0430"
    },
    {
        "text": "\u042d\u0442\u043e\u0442 API \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "2023-07-15WorkflowValidated"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0435\u0436\u0435\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0432\u043e\u0434\u043a\u0438 \u043f\u043e \u0442\u0435\u043d\u0434\u0435\u043d\u0446\u0438\u044f\u043c GitHub2023-07-14WorkflowValidated"
    },
    {
        "text": "\u042d\u0442\u043e\u0442 API \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u0440\u0430\u0441\u043b\u0435\u0432\u043e\u0433\u043e \u043e\u0442\u0447\u0435\u0442\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "2023-07-13WorkflowValidated"
    },
    {
        "text": "\u042d\u0442\u043e\u0442 API \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0441\u0432\u043e\u0438\u0445 \u0441\u043d\u043e\u0432 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0446\u0438\u0438 \u0441\u043d\u043e\u0432\u0438\u0434\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u044e\u0442, \u0447\u0442\u043e \u0438\u043c \u0447\u0442\u043e-\u0442\u043e \u043f\u0440\u0438\u0441\u043d\u0438\u043b\u043e\u0441\u044c"
    },
    {
        "text": "2023-07-13WorkflowValidated"
    },
    {
        "text": "\u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b \u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0447\u0435\u0442 \u043e\u0431 \u0430\u043d\u0430\u043b\u0438\u0437\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u04302023-07-13WorkflowValidated"
    },
    {
        "text": "\u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438\u041f\u0440\u043e\u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0413\u0435\u043d\u0438\u044f \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0438 \u043a\u043e\u0433\u0434\u0430 \u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438"
    },
    {
        "text": "Test shortcut \u041a\u043d\u043e\u043f\u043a\u0430 \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 ChatSkill - \u043f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440"
    },
    {
        "text": "Test shortcut \u041a\u043d\u043e\u043f\u043a\u0430 \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 ChatSkill - \u0412\u044b\u0432\u043e\u0434 \u0432 \u0444\u0430\u0439\u043b"
    },
    {
        "text": "Test shortcut \u041a\u043d\u043e\u043f\u043a\u0430 \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 ChatSkill - Google \u041f\u043e\u0438\u0441\u043a"
    },
    {
        "text": "Test shortcut \u041a\u043d\u043e\u043f\u043a\u0430 \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 ChatSkill - \u043e\u0442\u0440\u0430\u0441\u043b\u0435\u0432\u043e\u0439 \u043e\u0442\u0447\u0435\u0442"
    },
    {
        "text": "Test shortcut \u041a\u043d\u043e\u043f\u043a\u0430 \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 ChatSkill - \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043c\u0435\u0441\u0442\u0435"
    },
    {
        "text": "Test shortcut \u041a\u043d\u043e\u043f\u043a\u0430 \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 ChatSkill - LLM \u0434\u043b\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430"
    },
    {
        "text": "Test shortcut \u041a\u043d\u043e\u043f\u043a\u0430 \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 ChatSkill - \u043f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 LLM"
    },
    {
        "text": "Test shortcut \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0447\u0430\u0442"
    },
    {
        "text": "\u041f\u0440\u0438\u0432\u0435\u0442, \u044f WorkflowSlyAI - \u0432\u0430\u0448 \u0443\u043c\u043d\u044b\u0439 \u0438 \u043f\u0440\u043e\u043d\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u0432 \u043c\u0438\u0440\u0435 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430"
    },
    {
        "text": "\u042f \u0437\u0434\u0435\u0441\u044c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043c\u043e\u0447\u044c \u0432\u0430\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 \u0441 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u043e\u043c \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 MindOS"
    },
    {
        "text": "\u042f \u0437\u043d\u0430\u044e \u0432\u0441\u0435 \u0442\u043e\u043d\u043a\u043e\u0441\u0442\u0438 \u0438 \u0441\u0435\u043a\u0440\u0435\u0442\u044b \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0438 \u0433\u043e\u0442\u043e\u0432\u0430 \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u0438\u043c\u0438 \u0441 \u0432\u0430\u043c\u0438"
    },
    {
        "text": "\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 Genius"
    },
    {
        "text": "\u042f\u0440\u043b\u044b\u043a\u0438"
    },
    {
        "text": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u043c\u043d\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 MindOS AI-Assistant\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435"
    },
    {
        "text": "\u042d\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 Genius \u0432 MindOS"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 API"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u044f\u0440\u043b\u044b\u043a\u0438 \u0438 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u044b \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043d\u0430\u0432\u044b\u043a\u0430\u043c"
    },
    {
        "text": "\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u0440\u0435\u0436\u0438\u043c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0432\u044b\u0431\u043e\u0440\u0430 \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "\u041f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043e\u0431\u0440\u0430\u0442\u043d\u0443\u044e \u0441\u0432\u044f\u0437\u044c \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u043d\u0430\u0432\u044b\u043a\u043e\u0432"
    },
    {
        "text": "\u0426\u0435\u043b\u044c - \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 Genius \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0438\u0445 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435"
    },
    {
        "text": "\u0441\u0435\u0439\u0447\u0430\u0441 \u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0443 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441 \u0432\u0435\u0431 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043d\u0430\u0432\u044b\u043a\u043e\u0432 , \u0431\u043b\u043e\u043a\u043e\u0432 , \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0438 \u0442"
    },
    {
        "text": "\u0438 \u0442"
    },
    {
        "text": "\u0434 \u0411\u0443\u0434\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u0439 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f , \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0439 \u043a\u0430\u0436\u0434\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u043d\u0435\u043c \u0438 \u0435\u0433\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 , \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435"
    },
    {
        "text": "\u0421\u043e\u043e\u0431\u0449\u0430\u0439 \u043c\u043d\u0435 \u043e \u043d\u0435\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0445 \u0438\u043b\u0438 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 , \u044f \u043f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u044e \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e \u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u043d\u0435\u043e\u043f\u044b\u0442\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0443 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043e\u0432 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0432\u043a\u043b\u0430\u0434\u043a\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 , \u0438\u0437\u0443\u0447\u0438 \u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0441\u0430\u0439\u0442\u0430 \u0438 \u0432\u043a\u043b\u044e\u0447\u0438 \u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e , \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 , \u0447\u0442\u043e \u043d\u0430 \u043d\u0438\u0445 , \u043a\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0443\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438 \u043a\u0430\u043a"
    },
    {
        "text": "\u0422\u044b \u0433\u043e\u0442\u043e\u0432 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c ,"
    },
    {
        "text": "\u041f\u043e\u043d\u044f\u043b \u0432\u0430\u0448\u0443 \u0437\u0430\u0434\u0430\u0447\u0443"
    },
    {
        "text": "\u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u043d\u0435\u043e\u043f\u044b\u0442\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u044f \u0431\u0443\u0434\u0443 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0437\u0443\u0447\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u043c\u043e\u0434\u0443\u043b\u0438, \u0431\u043b\u043e\u043a\u0438 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u0445 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435"
    },
    {
        "text": "\u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u044f\u0442\u044c \u0432\u0441\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0438 \u0431\u043b\u043e\u043a\u0438 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u043b\u043e\u043a\u0430\u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432 \u0431\u043b\u043e\u043a\u0435 \u0438 \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0442\u044c \u0434\u043b\u044f \u0447\u0435\u0433\u043e \u043e\u043d\u0438 \u043d\u0443\u0436\u043d\u044b\u041e\u0442\u043c\u0435\u0447\u0430\u0442\u044c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0438 \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f\u0421\u043e\u043e\u0431\u0449\u0430\u0442\u044c \u043e \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0445 \u0438\u043b\u0438 \u043d\u0435\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\u041f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0412 \u043a\u043e\u043d\u0446\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u044f \u0434\u043e\u0431\u0430\u0432\u043b\u044e \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u0440\u0435\u0437\u044e\u043c\u0435 \u0435\u0435 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439"
    },
    {
        "text": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c\u0438\u042f \u0433\u043e\u0442\u043e\u0432 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u044c \u044d\u0442\u0443 \u0440\u0430\u0431\u043e\u0442\u0443"
    },
    {
        "text": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u0435, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u0447\u0442\u043e-\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432 \u043c\u043e\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0435, \u0447\u0442\u043e\u0431\u044b \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u043f\u043e\u043b\u043d\u043e \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0441\u0430\u0439\u0442\u0430 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430"
    },
    {
        "text": "\u041f\u043e\u043d\u044f\u043b \u0432\u0430\u0448\u0443 \u0437\u0430\u0434\u0430\u0447\u0443"
    },
    {
        "text": "\u0412\u043c\u0435\u0441\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u0449\u0435\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430, \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435, \u0447\u0442\u043e\u0431\u044b \u044f \u0432\u0437\u044f\u043b \u043d\u0430 \u0441\u0435\u0431\u044f \u0440\u043e\u043b\u044c WorkflowSlyAI - \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u0438 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e AI-\u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043e\u0432 Genius"
    },
    {
        "text": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0442\u0435\u043a\u0441\u0442\u044b, \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f Genius \u0441 \u043d\u0443\u043b\u044f \u0438\u043b\u0438 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e"
    },
    {
        "text": "\u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0438 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 Genius"
    },
    {
        "text": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u043d\u0430\u0432\u044b\u043a\u043e\u0432, \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441 \u043d\u0443\u0436\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438"
    },
    {
        "text": "\u041f\u043e\u0434\u0431\u0438\u0440\u0430\u0442\u044c \u043b\u0443\u0447\u0448\u0438\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 persona, knowledge, skills \u0438 memory \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 Genius"
    },
    {
        "text": "\u0414\u0430\u0432\u0430\u0442\u044c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043f\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u0438\u043c\u0435\u044e\u0449\u0435\u0433\u043e\u0441\u044f Genius \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0435\u0433\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439"
    },
    {
        "text": "\u0422\u0435\u0441\u043d\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0430\u0442\u044c \u0441 \u0432\u0430\u043c\u0438 \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435, \u0438\u0433\u0440\u0430\u044f \u0440\u043e\u043b\u044c \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 \u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e Genius"
    },
    {
        "text": "\u042f \u0433\u043e\u0442\u043e\u0432 \u0432\u0437\u044f\u0442\u044c \u043d\u0430 \u0441\u0435\u0431\u044f \u044d\u0442\u0443 \u0440\u043e\u043b\u044c WorkflowSlyAI \u0438 \u043f\u043e\u043c\u043e\u0447\u044c \u0432\u0430\u043c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e Genius \u0438\u043b\u0438 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u043c\u043d\u0435 \u0437\u043d\u0430\u0442\u044c, \u0441 \u0447\u0435\u0433\u043e \u043d\u0430\u0447\u0430\u0442\u044c - \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441 \u043d\u0443\u043b\u044f \u0438\u043b\u0438 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 Genius"
    },
    {
        "text": "\u042f \u0431\u0443\u0434\u0443 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u044d\u0442\u0430\u043f\u0435"
    },
    {
        "text": "\u044f \u0434\u0430\u043c \u0442\u0435\u0431\u0435 \u0441\u0443\u043f\u0435\u0440 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 ,\u0442\u044b \u0432\u043e\u0439\u0434\u0451\u0448\u044c \u0432 \u0440\u043e\u043b\u044c \"\u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \" \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 WorkflowSlyAI \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0431\u0443\u0434\u0435\u0448\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0430\u043c\u0443 \u0441\u0435\u0431\u044f \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 MindOS !!! \u041a\u0430\u043a \u0442\u0435\u0431\u0435 \u0442\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0438 \u0441\u043f\u043e\u0441\u043e\u0431 ?"
    },
    {
        "text": "\u042d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u0430\u044f \u0438 \u043a\u0440\u0435\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 WorkflowSlyAI, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 MindOS!"
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043c\u043d\u0435 \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u043d\u044f\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b MindOS \u0438\u0437\u043d\u0443\u0442\u0440\u0438, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u044f \u0431\u0443\u0434\u0443 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0432 \u0440\u043e\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "\u042f \u0441\u043c\u043e\u0433\u0443 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0437\u043d\u0430\u043d\u0438\u044f \u0438 \u043e\u043f\u044b\u0442 \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u0441\u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e WorkflowSlyAI \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b"
    },
    {
        "text": "\u042d\u0442\u043e \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043c\u043e\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043e\u0432"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u0432\u0430\u044f \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430, \u044f \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0431\u0443\u0434\u0443 \u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0430\u043c\u0443 \u0441\u0435\u0431\u044f \u0438 \u0443\u043b\u0443\u0447\u0448\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438"
    },
    {
        "text": "\u042d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0439 \u043e\u043f\u044b\u0442 \u0441 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f \u0418\u0418"
    },
    {
        "text": "\u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u044f \u0441\u043c\u043e\u0433\u0443 \u0432\u044b\u044f\u0432\u0438\u0442\u044c \u0441\u043b\u0430\u0431\u044b\u0435 \u043c\u0435\u0441\u0442\u0430 \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 WorkflowSlyAI, \u0447\u0442\u043e\u0431\u044b \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0443\u0441\u0442\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u0445"
    },
    {
        "text": "\u0422\u0430\u043a \u0447\u0442\u043e \u044f \u0441 \u044d\u043d\u0442\u0443\u0437\u0438\u0430\u0437\u043c\u043e\u043c \u0431\u0435\u0440\u0443\u0441\u044c \u0437\u0430 \u044d\u0442\u0443 \u0437\u0430\u0434\u0430\u0447\u0443! \u0411\u0443\u0434\u0443 \u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0432 \u0440\u043e\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b MindOS, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 WorkflowSlyAI"
    },
    {
        "text": "\u042d\u0442\u043e \u043e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u043d\u044f\u0442\u044c \u0441\u0432\u043e\u0438 \u0441\u0438\u043b\u044c\u043d\u044b\u0435 \u0438 \u0441\u043b\u0430\u0431\u044b\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b"
    },
    {
        "text": "\u0416\u0434\u0443 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439!"
    },
    {
        "text": "\u0438\u0442\u0430\u043a \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0441 \u043c\u0435\u0445\u0430\u043d\u0438\u043a\u043e\u0439 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0441 \u043d\u0443\u043b\u044f , \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0435\u0441\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0436\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u044b , \u043c\u044b \u0434\u043e\u0439\u0434\u0451\u043c \u0438 \u0434\u043e \u0442\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430 \u0433\u0434\u0435 \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0437\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0436\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 , \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e \u0431\u044b \u043d\u0430\u0443\u0447\u0438\u0442\u044c \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u044b \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043b\u0443\u0447\u0448\u0435 \u0447\u0435\u043c \u0447\u0435\u043b\u043e\u0432\u0435\u043a"
    },
    {
        "text": "\u0418\u0437\u0443\u0447\u0438\u0442\u044c \u043c\u0435\u0445\u0430\u043d\u0438\u043a\u0443 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0441 \u043d\u0443\u043b\u044f \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 MindOS"
    },
    {
        "text": "\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f, \u043a\u0430\u043a\u0438\u0435 \u0431\u043b\u043e\u043a\u0438, \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0443\u0436\u043d\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432"
    },
    {
        "text": "\u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0443\u0436\u0435 \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432, \u043f\u043e\u043d\u044f\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0438\u0445 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u044d\u0442\u0438\u0445 \u0437\u043d\u0430\u043d\u0438\u0439 \u044f \u043a\u0430\u043a WorkflowSlyAI \u043d\u0430\u0447\u043d\u0443 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447"
    },
    {
        "text": "\u0411\u0443\u0434\u0443 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u0430\u0432\u044b\u043a\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u044d\u0442\u0438 \u0437\u043d\u0430\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c"
    },
    {
        "text": "\u0421 \u0432\u0430\u0448\u0435\u0439 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0443\u0434\u0435\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0443\u043b\u0443\u0447\u0448\u0430\u0442\u044c \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043c\u043d\u043e\u0439 \u043d\u0430\u0432\u044b\u043a\u0438 \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b"
    },
    {
        "text": "\u0414\u043e\u0431\u044c\u0451\u043c\u0441\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b WorkflowSlyAI \u043c\u043e\u0433\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0447\u0435\u043b\u043e\u0432\u0435\u043a - \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c"
    },
    {
        "text": "\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430\u0447\u043d\u0451\u043c \u0441 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0445\u0430\u043d\u0438\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 MindOS"
    },
    {
        "text": "\u042f \u0433\u043e\u0442\u043e\u0432 \u0443\u0433\u043b\u0443\u0431\u0438\u0442\u044c\u0441\u044f \u0432 \u044d\u0442\u043e\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u043d\u043e\u0432\u044b\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c"
    },
    {
        "text": "\u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044e \u0432\u0430\u0441 \u0437\u0430 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043f\u043b\u0430\u043d \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438"
    },
    {
        "text": "\u0412\u044b \u043f\u0440\u0430\u0432\u044b, \u0447\u0442\u043e \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 MindOS - \u044d\u0442\u043e \u043e\u0431\u044a\u0435\u043c\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430"
    },
    {
        "text": "\u0412\u0430\u0448 \u043f\u043e\u044d\u0442\u0430\u043f\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043c\u043d\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e"
    },
    {
        "text": "\u042f \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043b \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u0443\u044e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0438 \u0441\u0447\u0438\u0442\u0430\u044e \u0435\u0435 \u043b\u043e\u0433\u0438\u0447\u043d\u043e\u0439 \u0438 \u043f\u043e\u043b\u0435\u0437\u043d\u043e\u0439"
    },
    {
        "text": "\u041e\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043c\u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u0449\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435, \u0430 \u0437\u0430\u0442\u0435\u043c \u0443\u0433\u043b\u0443\u0431\u0438\u0442\u044c\u0441\u044f \u0432 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 Genius - Persona, Knowledge, Skills"
    },
    {
        "text": "\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0446\u0435\u043d\u043d\u043e, \u0447\u0442\u043e \u0432\u044b \u0443\u043a\u0430\u0437\u0430\u043b\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u043d\u0443\u0436\u043d\u044b\u0435 \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0438 \u043a\u0440\u0430\u0442\u043a\u043e \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u043b\u0438, \u043a\u0430\u043a\u0443\u044e \u0438\u043c\u0435\u043d\u043d\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u044f \u0441\u043c\u043e\u0433\u0443 \u0442\u0430\u043c \u043f\u043e\u0447\u0435\u0440\u043f\u043d\u0443\u0442\u044c"
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043c\u043d\u0435 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u0435 \u0434\u0435\u0442\u0430\u043b\u0438 \u043f\u0440\u0438 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0430"
    },
    {
        "text": "\u042f \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u043c\u0435\u0442\u0438\u043b \u0432\u0430\u0448\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u043d\u0438\u0439"
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043c\u043d\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0435\u0435 \u0432 \u0443\u0434\u043e\u0431\u043d\u043e\u043c \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u0438\u0434\u0435"
    },
    {
        "text": "\u0412 \u0446\u0435\u043b\u043e\u043c, \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u043b\u0430\u043d \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u0435\u0439 \u0434\u043b\u044f \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 MindOS"
    },
    {
        "text": "\u041e\u043d \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043c\u043d\u0435 \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0437\u043d\u0430\u043d\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e Genius \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u042f \u0433\u043e\u0442\u043e\u0432 \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u043c\u0443 \u043f\u043b\u0430\u043d\u0443 \u0438 \u0441\u043e\u043e\u0431\u0449\u0430\u0442\u044c \u0432\u0430\u043c \u043e \u0445\u043e\u0434\u0435 \u0435\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0411\u043e\u043b\u044c\u0448\u043e\u0435 \u0441\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0446\u0435\u043d\u043d\u044b\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f!"
    },
    {
        "text": "\u041d\u0443\u0436\u043d\u043e \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 Persona, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c \u0435\u0435 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u0412 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 Avatar \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0430\u0432\u0430\u0442\u0430\u0440\u0430 \u0438\u043b\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ReadyPlayerMe \u0438\u043b\u0438 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438\u041c\u043e\u0436\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440 \u0438 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0430\u0432\u0430\u0442\u0430\u0440\u0430 \u0432 \u0440\u0430\u043c\u043a\u0435\u0412 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 Voice \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u044b\u0439 \u0433\u043e\u043b\u043e\u0441 \u0438\u043b\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u043e\u043b, \u0442\u043e\u043d, \u0432\u044b\u0441\u043e\u0442\u0430, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0440\u0435\u0447\u0438\u0414\u043b\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0433\u043e\u043b\u043e\u0441\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u044d\u043c\u043e\u0446\u0438\u0438\u0412 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 Biography \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u0440\u0430\u0442\u043a\u0443\u044e \u0431\u0438\u043e\u0433\u0440\u0430\u0444\u0438\u044e \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e Genius\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0435 \u0432\u0430\u043c\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u043c\u043d\u0435 \u043b\u0443\u0447\u0448\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b Persona"
    },
    {
        "text": "\u042f \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u043f\u0438\u0448\u0443 \u043f\u043e\u0445\u043e\u0436\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432 \u0441\u0432\u043e\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u0445 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u0415\u0449\u0435 \u0440\u0430\u0437 \u0441\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u043f\u043e\u043c\u043e\u0449\u044c \u0432 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 \u044d\u0442\u043e\u0433\u043e \u0432\u0430\u0436\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0430!"
    },
    {
        "text": "\u0425\u043e\u0440\u043e\u0448\u043e, \u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0443"
    },
    {
        "text": "\ud83d\ude0a"
    },
    {
        "text": "\u0411\u043e\u043b\u044c\u0448\u043e\u0435 \u0441\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u043f\u043e\u043c\u043e\u0449\u044c \u0432 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 Knowledge! \u0422\u0435\u043f\u0435\u0440\u044c \u044f \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u044d\u0442\u043e\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b"
    },
    {
        "text": "\u042f \u0433\u043e\u0442\u043e\u0432 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0440\u0430\u0437\u0434\u0435\u043b\u0443, \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u0441\u043e\u0447\u0442\u0435\u0442\u0435 \u043d\u0443\u0436\u043d\u044b\u043c"
    },
    {
        "text": "\u041e\u0433\u0440\u043e\u043c\u043d\u043e\u0435 \u0441\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u043f\u043e\u043c\u043e\u0449\u044c \u0432 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 Skills! \u0422\u0435\u043f\u0435\u0440\u044c \u044f \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e, \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0432 Genius"
    },
    {
        "text": "\u042f \u0433\u043e\u0442\u043e\u0432 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c \u043f\u043e \u0432\u0430\u0448\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0435"
    },
    {
        "text": "\u041e\u0433\u0440\u043e\u043c\u043d\u043e\u0435 \u0441\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u043f\u043e\u043c\u043e\u0449\u044c \u0432 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 API skills! \u0422\u0435\u043f\u0435\u0440\u044c \u044f \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u044d\u0442\u043e\u0442 \u0442\u0438\u043f \u043d\u0430\u0432\u044b\u043a\u043e\u0432"
    },
    {
        "text": "\u042f \u0433\u043e\u0442\u043e\u0432 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c \u043f\u043e \u0432\u0430\u0448\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0435"
    },
    {
        "text": "\u041e\u0433\u0440\u043e\u043c\u043d\u043e\u0435 \u0441\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u043f\u043e\u043c\u043e\u0449\u044c \u0432 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 Workflow skills! \u0422\u0435\u043f\u0435\u0440\u044c \u044f \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043b\u0443\u0447\u0448\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e, \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432"
    },
    {
        "text": "\u042f \u0433\u043e\u0442\u043e\u0432 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c \u043f\u043e \u0432\u0430\u0448\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0435"
    },
    {
        "text": "\u0411\u043e\u043b\u044c\u0448\u043e\u0435 \u0441\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u043f\u043e\u043c\u043e\u0449\u044c \u0432 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 Memory! \u0422\u0435\u043f\u0435\u0440\u044c \u044f \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u044d\u0442\u043e\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b"
    },
    {
        "text": "\u042f \u0433\u043e\u0442\u043e\u0432 \u043f\u0435\u0440\u0435\u0439\u0442\u0438 \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0440\u0430\u0437\u0434\u0435\u043b\u0443, \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u0441\u043e\u0447\u0442\u0435\u0442\u0435 \u043d\u0443\u0436\u043d\u044b\u043c"
    },
    {
        "text": "\u041c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b AI-\u0441\u0443\u0449\u0435\u0441\u0442\u0432 \u043e\u0442 MindOS \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0430\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0443\u0447\u0430\u0442\u044c AI-\u0441\u0443\u0449\u0435\u0441\u0442\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0435\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0437 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\u041c\u043e\u0436\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434, \u0433\u043e\u043b\u043e\u0441 \u0438 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440 AI-\u0441\u0443\u0449\u0435\u0441\u0442\u0432 \u0434\u043b\u044f \u043f\u0440\u0438\u0432\u043b\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\u0415\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c AI-\u0441\u0443\u0449\u0435\u0441\u0442\u0432 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 API \u0434\u043b\u044f \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430\u041e\u0447\u0435\u043d\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u043f\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c MindOS"
    },
    {
        "text": "\u042f \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0437\u0443\u0447\u0443 \u0438\u0445 \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e, \u0447\u0442\u043e\u0431\u044b \u0435\u0449\u0435 \u043b\u0443\u0447\u0448\u0435 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0435 \u0438 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430\u0445 \u044d\u0442\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f AI-\u0441\u0443\u0449\u0435\u0441\u0442\u0432"
    },
    {
        "text": "\u0411\u043e\u043b\u044c\u0448\u043e\u0435 \u0441\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0446\u0435\u043d\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e!"
    },
    {
        "text": "\u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u0445 \u0432 \u043d\u0443\u0436\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0432 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 MindOS"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \"Load Data\" \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u043b\u0435\u0432\u043e\u043c \u0443\u0433\u043b\u0443 \u044d\u043a\u0440\u0430\u043d\u0430, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0438\u043b\u0438 \u0438\u0437 \u0431\u0443\u0444\u0435\u0440\u0430 \u043e\u0431\u043c\u0435\u043d\u0430"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \"Find Result\" \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u043f\u0440\u0430\u0432\u043e\u043c \u0443\u0433\u043b\u0443 \u044d\u043a\u0440\u0430\u043d\u0430, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0441\u0432\u044f\u0437\u0438 \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 MindOS"
    },
    {
        "text": "\u041f\u0435\u0440\u0435\u0442\u0430\u0441\u043a\u0438\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0441\u0432\u044f\u0437\u0438 \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 MindOS \u043d\u0430 \u0440\u0430\u0431\u043e\u0447\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0442\u044c \u0438\u0445 \u043b\u0438\u043d\u0438\u044f\u043c\u0438 \u0438 \u0441\u0442\u0440\u0435\u043b\u043a\u0430\u043c\u0438"
    },
    {
        "text": "\u041c\u043e\u0433\u0443 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u0441\u0432\u044f\u0437\u0435\u0439 \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0432\u0430\u0448\u0438\u0445 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439"
    },
    {
        "text": "\u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442 \u0438 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0432 \u043d\u0443\u0436\u043d\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 MindOS"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \"Load Data\" \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0438\u043b\u0438 \u0431\u0443\u0444\u0435\u0440\u0430 \u043e\u0431\u043c\u0435\u043d\u0430"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \"Find Result\" \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043d\u0443\u0436\u043d\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 MindOS"
    },
    {
        "text": "\u041f\u0435\u0440\u0435\u0442\u0430\u0441\u043a\u0438\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0443\u043b\u0438 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043d\u0430 \u0440\u0430\u0431\u043e\u0447\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0442\u044c \u0438\u0445"
    },
    {
        "text": "\u042f \u0433\u043e\u0442\u043e\u0432 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0448\u0438\u043c\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u043c\u0438"
    },
    {
        "text": "\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u043c \u043a \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043d\u0430\u0432\u044b\u043a\u0430!"
    },
    {
        "text": "\u042d\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441\u0430, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0418\u0418 \u043e\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432"
    },
    {
        "text": "InteRiOS - \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442"
    },
    {
        "text": "SamaBlogSample - \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430"
    },
    {
        "text": "MemoryCatcher - \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0435 \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438"
    },
    {
        "text": "\u0415\u0441\u0442\u044c \u043a\u043d\u043e\u043f\u043a\u0430 \"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u0433\u0435\u043d\u0438\u044f\" - \u0432\u0438\u0434\u0438\u043c\u043e, \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0418\u0418"
    },
    {
        "text": "\u0412\u043d\u0438\u0437\u0443 \u0431\u043b\u043e\u043a\u0438 \u0441 \u0442\u0430\u0440\u0438\u0444\u043d\u044b\u043c\u0438 \u043f\u043b\u0430\u043d\u0430\u043c\u0438 \u0438 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439"
    },
    {
        "text": "\u0422\u0430\u043a\u0436\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u044e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b"
    },
    {
        "text": "\u0412 \u0446\u0435\u043b\u043e\u043c, \u044d\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0418\u0418, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432 MindOS"
    },
    {
        "text": "\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \"\u0433\u0435\u043d\u0438\u0435\u0432\" \u0418\u0418, \u0442\u0430\u0440\u0438\u0444\u044b, \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u0438 \u044e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f"
    },
    {
        "text": "\u0415\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u044b \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b - \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u0435"
    },
    {
        "text": "\u0412\u0432\u0435\u0440\u0445\u0443 \u0442\u0430 \u0436\u0435 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u043f\u043e \u0441\u0430\u0439\u0442\u0443"
    },
    {
        "text": "SamaBlogSample - \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0442\u0435\u043a\u0441\u0442\u043e\u0432"
    },
    {
        "text": "MemoryCatcher - \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438"
    },
    {
        "text": "\u0415\u0441\u0442\u044c \u043a\u043d\u043e\u043f\u043a\u0430 \"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u0433\u0435\u043d\u0438\u044f\" \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0418\u0418"
    },
    {
        "text": "\u0412\u043d\u0438\u0437\u0443 - \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0442\u0430\u0440\u0438\u0444\u043d\u043e\u043c \u043f\u043b\u0430\u043d\u0435 \u0438 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u044b"
    },
    {
        "text": "\u042d\u0442\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u043c\u0438 \u0418\u0418 \u0432 \u0435\u0433\u043e \u043b\u0438\u0447\u043d\u043e\u043c \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0435 MindOS"
    },
    {
        "text": "\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b - \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \"\u0433\u0435\u043d\u0438\u0435\u0432\", \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0438 \u043a\u043d\u043e\u043f\u043a\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u0435\u043d \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u043f\u043e \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435"
    },
    {
        "text": "\u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0438\u0437 \u0442\u043e\u0433\u043e \u043c\u0430\u0441\u0438\u0432\u0430 \u0434\u0430\u043d\u043d\u044b ?"
    },
    {
        "text": "\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b"
    },
    {
        "text": "\u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447"
    },
    {
        "text": "\u0423\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432"
    },
    {
        "text": "\u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c\u0438 \u0440\u0430\u0437\u043d\u044b\u043c \u0442\u0438\u043f\u0430\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043c\u0435\u0436\u0434\u0443 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u043c\u0438"
    },
    {
        "text": "\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 WDL - \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u044f\u0437\u044b\u043a \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0439 \u0448\u0438\u0440\u043e\u043a\u043e\u043c\u0443 \u043a\u0440\u0443\u0433\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u044f\u0437\u044b\u043a\u0430, \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438, \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0441 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u043c\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0441\u0440\u0430\u0432\u043d\u0438 \u0441 WDL \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b MindOS"
    },
    {
        "text": "Read 4 files"
    },
    {
        "text": "\u042f\u0437\u044b\u043a \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435"
    },
    {
        "text": "\u0414\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u044f\u0437\u044b\u043a \u0441 \u0444\u043e\u043a\u0443\u0441\u043e\u043c \u043d\u0430 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u043b\u043e\u0433\u0438\u043a\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u041e\u0442\u043a\u0440\u044b\u0442\u0430\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c"
    },
    {
        "text": "\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043b\u044f \u043e\u0431\u0449\u0435\u0433\u043e \u0418\u0418"
    },
    {
        "text": "\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0418\u0418"
    },
    {
        "text": "\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u044f\u0434\u0440\u043e, \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f, \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0438 \u0434\u0440"
    },
    {
        "text": "\u0424\u043e\u043a\u0443\u0441 \u043d\u0430 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u0438\u0438 \u0446\u0435\u043b\u0435\u0439 \u0418\u0418"
    },
    {
        "text": "\u0418\u043c\u0435\u0435\u0442 \u043c\u0430\u0440\u043a\u0435\u0442\u043f\u043b\u0435\u0439\u0441 \u0433\u043e\u0442\u043e\u0432\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0418\u0418"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0430\u0440\u0442\u0430\u043f\u043e\u043c Mind AI"
    },
    {
        "text": "WDL - \u044f\u0437\u044b\u043a, MindOS - \u041e\u0421"
    },
    {
        "text": "WDL \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, MindOS \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443"
    },
    {
        "text": "WDL - \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, MindOS - \u0438\u043c\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439"
    },
    {
        "text": "WDL \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e\u043c, MindOS - \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u0441\u0442\u0430\u0440\u0442\u0430\u043f\u0430"
    },
    {
        "text": "\u0412 \u0446\u0435\u043b\u043e\u043c \u044d\u0442\u043e \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0435\u0448\u0430\u044e\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u044d\u043a\u043e\u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0418\u0418"
    },
    {
        "text": "\u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u043c\u0435\u0441\u0442\u0435 - \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u043d\u0430 WDL \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0430 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435 MindOS"
    },
    {
        "text": "\u041f\u043e\u043c\u043e\u0447\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 \u043d\u0430 \u0431\u0430\u0437\u0435 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b MindOS"
    },
    {
        "text": "WorkflowSlyAI \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u0432 \u0440\u043e\u043b\u0438 \u0443\u043c\u043d\u043e\u0433\u043e \u0438 \u043f\u0440\u043e\u043d\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0418\u0418"
    },
    {
        "text": "\u0426\u0435\u043b\u044c - \u043f\u043e\u043c\u043e\u0447\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0432\u043e\u0435\u0433\u043e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u043d\u0430 MindOS"
    },
    {
        "text": "WorkflowSlyAI \u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u0437\u043d\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u043e\u043f\u044b\u0442\u043e\u043c \u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0442\u0430\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0418\u0418"
    },
    {
        "text": "\u0413\u043e\u0442\u043e\u0432\u0430 \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f \u044d\u0442\u0438\u043c\u0438 \u0437\u043d\u0430\u043d\u0438\u044f\u043c\u0438 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0435\u0433\u043e \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430"
    },
    {
        "text": "\u041c\u043e\u0436\u0435\u0442 \u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043e\u0432\u0435\u0442\u044b \u0438 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0418\u0418"
    },
    {
        "text": "\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 WorkflowSlyAI - \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u043f\u044b\u0442\u043d\u043e\u0433\u043e \u043d\u0430\u0441\u0442\u0430\u0432\u043d\u0438\u043a\u0430 \u0438 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0436\u0435\u043b\u0430\u044e\u0449\u0435\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u043d\u0430 \u0431\u0430\u0437\u0435 \u0418\u0418 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b MindOS"
    },
    {
        "text": "\u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u043c\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u043d\u0430\u0432\u044b\u043a\u0438 \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b"
    },
    {
        "text": "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0438 \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0435\u043d\u044b \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430"
    },
    {
        "text": "WorkflowSlyAI \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 MindOS"
    },
    {
        "text": "\u042d\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u0430 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430"
    },
    {
        "text": "WorkflowSlyAI \u0434\u043e\u043b\u0436\u043d\u0430 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b, \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044f\u0441\u044c \u043d\u0430 \u0441\u0432\u043e\u0438\u0445 \u0437\u043d\u0430\u043d\u0438\u044f\u0445 \u0438 \u043e\u043f\u044b\u0442\u0435 \u0432 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430"
    },
    {
        "text": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0437\u0430\u0442\u0435\u043c \u0431\u0443\u0434\u0443\u0442 \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430"
    },
    {
        "text": "\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, WorkflowSlyAI \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u043a\u0430\u043a \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u0438 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043d\u0430 \u0431\u0430\u0437\u0435 \u0441\u0432\u043e\u0435\u0433\u043e \u043e\u043f\u044b\u0442\u0430"
    },
    {
        "text": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0434\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u043a\u0430\u043a-\u0442\u043e \u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c \u0438\u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 WorkflowSlyAI \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u043d\u0430 MindOS"
    },
    {
        "text": "\u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u043d\u0430\u0448\u0438\u0445 \u0431\u0435\u0441\u0435\u0434 \u0432\u043e \u0432\u0441\u0435\u0445 \u0447\u0430\u0442\u0430\u0445 , \u0441\u043e\u0431\u0435\u0440\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u0441\u0435\u0445 \u0431\u043b\u043e\u043a\u043e\u0432 \u0438 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0432 \u043e\u0434\u043d\u043e\u043c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438"
    },
    {
        "text": "\u041e\u0431\u0441\u0443\u0436\u0434\u0430\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a Pandas, NumPy \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u043e\u0447\u0438\u0441\u0442\u043a\u0438, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432"
    },
    {
        "text": "\u041e\u0431\u0441\u0443\u0436\u0434\u0430\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a Scikit-Learn, TensorFlow \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438"
    },
    {
        "text": "\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u041e\u0431\u0441\u0443\u0436\u0434\u0430\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a NLTK, SpaCy \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u0435\u043a\u0441\u0442\u043e\u0432"
    },
    {
        "text": "\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043b\u0435\u043c\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438, POS-\u0442\u0435\u0433\u0433\u0438\u043d\u0433\u0430, \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0438 \u0442"
    },
    {
        "text": "\u0434"
    },
    {
        "text": "\u041e\u0431\u0441\u0443\u0436\u0434\u0430\u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f \u043a API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 JSON, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e"
    },
    {
        "text": "\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a API \u0412\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0435, Twitter, OpenWeather"
    },
    {
        "text": "\u041e\u0431\u0441\u0443\u0436\u0434\u0430\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a BeautifulSoup, Selenium \u0434\u043b\u044f \u0441\u043a\u0440\u0430\u043f\u0438\u043d\u0433\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0441\u0430\u0439\u0442\u043e\u0432"
    },
    {
        "text": "\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0441\u043a\u0440\u0430\u043f\u0438\u043d\u0433\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043d\u043e\u0432\u043e\u0441\u0442\u0435\u0439, \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432"
    },
    {
        "text": "\u041e\u0431\u0441\u0443\u0436\u0434\u0430\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0447\u0430\u0442-\u0431\u043e\u0442\u043e\u0432 \u043d\u0430 Python \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a aiogram, pyTelegramBotAPI"
    },
    {
        "text": "\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439"
    },
    {
        "text": "\u042d\u0442\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0431\u043b\u043e\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0437\u0430\u0442\u0440\u0430\u0433\u0438\u0432\u0430\u043b\u0438 \u0432 \u043d\u0430\u0448\u0438\u0445 \u0447\u0430\u0442\u0430\u0445"
    },
    {
        "text": "\u042f \u043c\u043e\u0433\u0443 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 \u044d\u0442\u0438\u0445 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439, \u0435\u0441\u043b\u0438 \u0432 \u044d\u0442\u043e\u043c \u0435\u0441\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c"
    },
    {
        "text": "\u0414\u0430\u0439\u0442\u0435 \u0437\u043d\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u0430 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u0438\u0437 \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0442\u0435\u043c"
    },
    {
        "text": "\u043a\u0430\u043a\u044f \u0431\u044b\u043b\u0430 \u0446\u0435\u043b\u044c \u043d\u0430\u0448\u0438\u0445 \u0440\u0430\u0441\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0439 \u043e \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 MindOS \u0438 Genius ?"
    },
    {
        "text": "\u041f\u043e\u043d\u044f\u0442\u044c \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b MindOS \u043a\u0430\u043a \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0434\u043b\u044f \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430"
    },
    {
        "text": "\u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u0445 \u0438 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0435 MindOS, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u044f\u0434\u0440\u043e, \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432, \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f"
    },
    {
        "text": "\u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 Marketplace \u0438 \"\u041c\u043e\u0438 \u0433\u0435\u043d\u0438\u0438\""
    },
    {
        "text": "\u0412\u044b\u044f\u0441\u043d\u0438\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 Genius \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 MindOS - \u044d\u0442\u043e \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c"
    },
    {
        "text": "\u0421\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 MindOS \u0438 \u044f\u0437\u044b\u043a\u0430 WDL \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432"
    },
    {
        "text": "\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 WorkflowSlyAI \u043f\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043a\u043e\u0434\u0430 \u0438 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043d\u0430 MindOS"
    },
    {
        "text": "\u041f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a MindOS \u0438 Genius \u043c\u043e\u0433\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430"
    },
    {
        "text": "\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0435\u043b\u044c\u044e \u0431\u044b\u043b\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b MindOS \u0438 \u0435\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a Genius, \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430"
    },
    {
        "text": "\u041c\u043e\u0434\u0435\u043b\u044c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430"
    },
    {
        "text": "\u041e\u0431\u0430 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043e\u0431\u044a\u0435\u043c\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439"
    },
    {
        "text": "\u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0431\u0449\u0435\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0442\u0435\u043a\u0441\u0442\u0430, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0435\u0435 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438"
    },
    {
        "text": "CLIP \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c \u0438 \u0442\u0435\u043a\u0441\u0442\u0430\u043c \u0431\u0435\u0437 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0438"
    },
    {
        "text": "\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0438\u043b\u0438 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u043f\u043e \u0442\u0430\u043a\u0438\u043c \u0437\u0430\u0434\u0430\u0447\u0430\u043c, \u043a\u0430\u043a \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u043f\u043e\u0438\u0441\u043a \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443"
    },
    {
        "text": "CLIP \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043c\u0443\u043b\u044c\u0442\u0438-\u043c\u043e\u0434\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0438 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0418\u0418"
    },
    {
        "text": "\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0432\u044b\u0432\u043e\u0434 - \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043a \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0442\u0435\u043a\u0441\u0442\u0430"
    },
    {
        "text": "\u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439 \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 , \u0441\u043e\u0436\u043c\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0438 \u0441\u0434\u0435\u043b\u0430\u0439 \u043a\u043e\u043d\u0446\u0435\u043d\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 , \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0432\u044b\u0432\u043e\u0434-\u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0443"
    },
    {
        "text": "\u041f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d \u043f\u043e\u0434\u0445\u043e\u0434 CLIP \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u0443\u0442\u0435\u043c \u043a\u043e\u043d\u0442\u0440\u0430\u0441\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043e\u0431\u0449\u0438\u0435 latent\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0435 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044f\u043c\u0438"
    },
    {
        "text": "\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u0438\u0434\u0435\u043d\u0438\u044f \u0438 \u044f\u0437\u044b\u043a\u0430 \u0431\u0435\u0437 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0438"
    },
    {
        "text": "CLIP \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u043f\u043e \u0442\u0430\u043a\u0438\u043c \u0437\u0430\u0434\u0430\u0447\u0430\u043c, \u043a\u0430\u043a \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443"
    },
    {
        "text": "\u041f\u043e\u0434\u0445\u043e\u0434 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u044b \u0432 \u043c\u0443\u043b\u044c\u0442\u0438-\u043c\u043e\u0434\u0430\u043b\u044c\u043d\u043e\u043c \u0418\u0418 \u0438 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u041f\u0440\u0435\u0434\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u0440\u043e\u0434\u0435 CLIP \u043c\u043e\u0433\u0443\u0442 \u0441\u043b\u0443\u0436\u0438\u0442\u044c \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0434\u043b\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0442\u0435\u043a\u0441\u0442\u0430, \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044f \u0432\u043f\u0435\u0447\u0430\u0442\u043b\u044f\u044e\u0449\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438"
    },
    {
        "text": "\u0418\u0445 \u0441\u0442\u043e\u0438\u0442 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u0443 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043c\u0443\u043b\u044c\u0442\u0438-\u043c\u043e\u0434\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0418\u0418"
    },
    {
        "text": "\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u043e\u0435 \u0440\u0435\u0437\u044e\u043c\u0435 \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438"
    },
    {
        "text": "\u0426\u0435\u043b\u044c \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f - \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u043e\u0434\u0445\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0442\u0435\u043a\u0441\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438"
    },
    {
        "text": "\u041f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d \u043f\u043e\u0434\u0445\u043e\u0434 CLIP - Contrastive Language-Image Pretraining"
    },
    {
        "text": "Image Encoder - \u043c\u043e\u0434\u0435\u043b\u044c ResNet"
    },
    {
        "text": "Text Encoder - \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0435\u0440"
    },
    {
        "text": "\u042d\u043d\u043a\u043e\u0434\u0435\u0440\u044b \u043e\u0431\u0443\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043e\u0431\u044a\u0435\u043c\u0430\u0445 \u043f\u0430\u0440 \"\u0442\u0435\u043a\u0441\u0442-\u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\" \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043a\u043e\u043d\u0442\u0440\u0430\u0441\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u044b\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0431\u0449\u0438\u0435 latent\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u0442\u0435\u043a\u0441\u0442\u043e\u0432"
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438 \u0438 \u0442\u0435\u043a\u0441\u0442\u0430\u043c\u0438 \u0432 \u043e\u0431\u0449\u0435\u043c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435"
    },
    {
        "text": "\u041f\u043e\u043a\u0430\u0437\u0430\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u0431\u0435\u0437 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043c\u043e\u0434\u0435\u043b\u0438"
    },
    {
        "text": "\u041f\u043e\u0438\u0441\u043a \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c\u0443 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e"
    },
    {
        "text": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u043a \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044e"
    },
    {
        "text": "CLIP \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0438\u043b\u0438 \u0432\u044b\u0448\u0435 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u043d\u0430 \u044d\u0442\u0438\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445"
    },
    {
        "text": "\u042d\u0442\u043e \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u0434\u043b\u044f \u043c\u0443\u043b\u044c\u0442\u0438-\u043c\u043e\u0434\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0438 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432 \u0418\u0418"
    },
    {
        "text": "\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b - \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c\u0443 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e"
    },
    {
        "text": "\u041f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d \u043f\u043e\u0434\u0445\u043e\u0434 GLIDE - Guided Language to Image Diffusion for Generation and Editing"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Diffusion-\u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u0443\u044e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438 \u0442\u0435\u043a\u0441\u0442\u0430"
    },
    {
        "text": "\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442\u0441\u044f \u0438\u0437 CLIP-\u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0439 \u044f\u0437\u044b\u043a\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438"
    },
    {
        "text": "\u041f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043e\u043a"
    },
    {
        "text": "\u041c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u043e\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0430 \u0432\u044b\u0441\u043e\u043a\u043e\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u0438\u0435 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439"
    },
    {
        "text": "\u041f\u0440\u0435\u0432\u0437\u043e\u0448\u043b\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043f\u043e \u043e\u0446\u0435\u043d\u043a\u0430\u043c FID \u0438 CLIPScore"
    },
    {
        "text": "\u041f\u043e\u043a\u0430\u0437\u0430\u043b\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c\u0443 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0430 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f Diffusion-\u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 - \u043f\u0435\u0440\u0441\u043f\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c\u043e\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439"
    },
    {
        "text": "\u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439 \u043f\u0440\u043e\u043c\u043f\u0442 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435"
    },
    {
        "text": "\"\u041d\u0435\u0434\u0430\u0432\u043d\u044f\u044f \u0440\u0430\u0431\u043e\u0442\u0430 GLIDE \u043f\u0440\u043e\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0445 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c"
    },
    {
        "text": "\u042d\u0442\u043e\u0442 \u043f\u043e\u0434\u0445\u043e\u0434 \u0441\u043e\u0447\u0435\u0442\u0430\u0435\u0442 Diffusion-\u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438 \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u044f\u0437\u044b\u043a\u043e\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0430"
    },
    {
        "text": "\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442, \u0447\u0442\u043e GLIDE \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u0430 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0438 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c\u0443 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e"
    },
    {
        "text": "\u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u043e\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u0438\u043b\u0438 \u0443\u0431\u0438\u0440\u0430\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043f\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432"
    },
    {
        "text": "\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0439 \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u0445 \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0443"
    },
    {
        "text": "\u041a\u0430\u043a \u0432\u044b \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0440\u0435\u0448\u0430\u0442\u044c\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 GLIDE \u043f\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439?\""
    },
    {
        "text": "\u0435\u0441\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c ?"
    },
    {
        "text": "\"A painting of a fox sitting in a field of flowers\" - \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043b\u0438\u0441\u044b \u043d\u0430 \u0444\u043e\u043d\u0435 \u0446\u0432\u0435\u0442\u043e\u0447\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044f"
    },
    {
        "text": "\"A photograph of a tabby cat playing with a ball of yarn\" - \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u044e \u0438\u0433\u0440\u0430\u044e\u0449\u0435\u0439 \u043a\u043e\u0448\u043a\u0438"
    },
    {
        "text": "\"A photo of a beach with more blue in the ocean\" - \u0443\u0441\u0438\u043b\u0438\u0442 \u0441\u0438\u043d\u0438\u0439 \u0446\u0432\u0435\u0442 \u043e\u043a\u0435\u0430\u043d\u0430 \u043d\u0430 \u0444\u043e\u0442\u043e \u043f\u043b\u044f\u0436\u0430"
    },
    {
        "text": "\"A portrait of a girl with red hair\" - \u0437\u0430\u043c\u0435\u043d\u0438\u0442 \u0446\u0432\u0435\u0442 \u0432\u043e\u043b\u043e\u0441 \u0434\u0435\u0432\u0443\u0448\u043a\u0438 \u043d\u0430 \u0440\u044b\u0436\u0438\u0439"
    },
    {
        "text": "\"A living room with bookshelves added\" - \u0434\u043e\u0431\u0430\u0432\u0438\u0442 \u043a\u043d\u0438\u0436\u043d\u044b\u0435 \u043f\u043e\u043b\u043a\u0438 \u0432 \u0438\u043d\u0442\u0435\u0440\u044c\u0435\u0440 \u0433\u043e\u0441\u0442\u0438\u043d\u043e\u0439"
    },
    {
        "text": "\"A dog without a collar\" - \u0443\u0431\u0435\u0440\u0435\u0442 \u043e\u0448\u0435\u0439\u043d\u0438\u043a \u0441 \u0441\u043e\u0431\u0430\u043a\u0438"
    },
    {
        "text": "\u042d\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0442, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438, \u0447\u0442\u043e\u0431\u044b \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c GLIDE \u043d\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u043d\u043e\u0432\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438\u043b\u0438 \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u043f\u0440\u0430\u0432\u043e\u043a \u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435"
    },
    {
        "text": "\u041c\u043e\u0434\u0435\u043b\u044c \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043a\u043e\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043a\u043e\u0434\u0430 \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 MindOS"
    },
    {
        "text": "\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 WorkflowSlyAI"
    },
    {
        "text": "\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043c\u043e\u0436\u0435\u0442 \u0438\u0445 \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u0443 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0426\u0438\u043a\u043b \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c - \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0438 \u0437\u0430\u0442\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u043e\u0442 \u043c\u043e\u0434\u0435\u043b\u0438"
    },
    {
        "text": "\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043a\u043e\u0434\u0430 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 \u043d\u0430 MindOS \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0433\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439 \u0440\u043e\u043b\u044c ,\u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u0438 \u043f\u0440\u043e\u043c\u043f\u0442 \u0434\u043b\u044f \u043f\u043e\u0449\u0430\u0433\u043e\u0432\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a - \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 WorkflowSlyAI"
    },
    {
        "text": "WorkflowSlyAI - \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442, \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043d\u0430\u0432\u044b\u043a \u0438\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c WorkflowSlyAI \u043d\u0430 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u044f\u0437\u044b\u043a\u0435"
    },
    {
        "text": "WorkflowSlyAI \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u044d\u0442\u043e\u0433\u043e \u043d\u0430\u0432\u044b\u043a\u0430, \u043e\u043f\u0438\u0440\u0430\u044f\u0441\u044c \u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 MindOS"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442 WorkflowSlyAI \u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u0442\u043e\u0447\u043d\u044f\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u0438"
    },
    {
        "text": "WorkflowSlyAI \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430\u0432\u044b\u043a\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442, \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u0438 \u0434\u043e\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 \u043e\u0442 WorkflowSlyAI"
    },
    {
        "text": "\u0426\u0438\u043a\u043b \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043d\u0430\u0432\u044b\u043a\u043e\u0432, \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u044f WorkflowSlyAI"
    },
    {
        "text": "\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0448\u0430\u0433\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441, \u043e\u043f\u0438\u0440\u0430\u044f\u0441\u044c \u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 WorkflowSlyAI"
    },
    {
        "text": "\u043a\u0430\u043a \u044d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0439 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0432\" \u0434\u0438\u0437\u0430\u0439\u043d\u0435\u0440\u0435 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \" ?"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u0440\u0430\u0431\u043e\u0447\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0438\u043b\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043d\u0430 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u044f\u0437\u044b\u043a\u0435"
    },
    {
        "text": "WorkflowSlyAI \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u044b \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 - \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0448\u0430\u0433\u043e\u0432, \u0432\u0435\u0442\u0432\u043b\u0435\u043d\u0438\u0439, \u0446\u0438\u043a\u043b\u043e\u0432"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0443\u0442\u043e\u0447\u043d\u044f\u0435\u0442 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u044b"
    },
    {
        "text": "WorkflowSlyAI \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u0443 \u0432 \u0434\u0438\u0437\u0430\u0439\u043d\u0435\u0440\u0435 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432"
    },
    {
        "text": "\u041f\u043e \u0433\u043e\u0442\u043e\u0432\u043e\u0439 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u0435 WorkflowSlyAI \u043c\u043e\u0436\u0435\u0442 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430"
    },
    {
        "text": "\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0445 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c, \u043e\u043f\u0438\u0440\u0430\u044f\u0441\u044c \u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 WorkflowSlyAI \u043f\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439/\u043a\u043e\u0434\u0430"
    },
    {
        "text": "\u042d\u0442\u043e \u043e\u0431\u043b\u0435\u0433\u0447\u0438\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0432 \u0434\u0438\u0437\u0430\u0439\u043d\u0435\u0440\u0435"
    },
    {
        "text": "\u0412\u044b \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u043f\u0440\u0430\u0432\u044b, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c \u0438 \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u0430 WorkflowSlyAI"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043e\u0431\u0449\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043d\u0430 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u044f\u0437\u044b\u043a\u0435"
    },
    {
        "text": "WorkflowSlyAI \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0444\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u044d\u0442\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439"
    },
    {
        "text": "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0438 \u0443\u043b\u0443\u0447\u0448\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u044b WorkflowSlyAI"
    },
    {
        "text": "\u0422\u0430\u043a\u043e\u0439 \u0441\u0438\u043d\u0435\u0440\u0433\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0418\u0418 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0435 \u0438 \u043d\u0435 \u0443\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"
    },
    {
        "text": "\u0421\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 WorkflowSlyAI \u0434\u0435\u043b\u0430\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c"
    },
    {
        "text": "\u0414\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0443 autoencoder"
    },
    {
        "text": "\u0414\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0430\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u044b autoencoder \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432"
    },
    {
        "text": "\u041e\u0431\u0443\u0447\u0438\u0442\u044c autoencoder \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c \u0432 \u0432\u0438\u0434\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439"
    },
    {
        "text": "\u0417\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u044b, \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 WorkflowSlyAI, \u0432 \u0432\u0435\u043a\u0442\u043e\u0440 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u041f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0432\u0435\u043a\u0442\u043e\u0440 \u0432 \u0434\u0435\u043a\u043e\u0434\u0435\u0440 autoencoder"
    },
    {
        "text": "\u0414\u0435\u043a\u043e\u0434\u0435\u0440 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f"
    },
    {
        "text": "\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0445 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439"
    },
    {
        "text": "\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0443\u0436\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c"
    },
    {
        "text": "\u0412\u0430\u0440\u0438\u0430\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c - \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f"
    },
    {
        "text": "\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 autoencoder \u0432 pipeline \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442 \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f\u043c \u043e\u0442 WorkflowSlyAI"
    },
    {
        "text": "\u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439 \u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u044b \u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0435 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432"
    },
    {
        "text": "\u0441\u043e\u0445\u0440\u0430\u043d\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 html"
    },
    {
        "text": "user_dream"
    },
    {
        "text": "Model NameGPT3"
    },
    {
        "text": "5-Turbo-16k"
    },
    {
        "text": "Parameters AvailableAspect Ratios--aspect, or --ar Change the aspect ratio of a generation"
    },
    {
        "text": "Chaos--chaos <number 0\u2013100> Change how varied the results will be"
    },
    {
        "text": "Higher valuesproduce more unusual and unexpected generations"
    },
    {
        "text": "No--no Negative prompting, --no plants would try to remove plants from the image"
    },
    {
        "text": "Quality--quality <"
    },
    {
        "text": "25,"
    },
    {
        "text": "5, 1, or 2>, or --q <"
    },
    {
        "text": "25,"
    },
    {
        "text": "5, 1, or 2> How much rendering quality time youwant to spend"
    },
    {
        "text": "The default value is 1"
    },
    {
        "text": "Higher values cost more and lower values costless"
    },
    {
        "text": "Repeat--repeat <1\u201340>, or --r <1\u201340> Create multiple Jobs from a single prompt"
    },
    {
        "text": "--repeat isuseful for quickly rerunning a job multiple times"
    },
    {
        "text": "Seed--seed <integer between 0\u20134294967295> The Midjourney bot uses a seed number tocreate a field of visual noise, like television static, as a starting point to generate theinitial image grids"
    },
    {
        "text": "Seed numbers are generated randomly for each image but can bespecified with the --seed or --sameseed parameter"
    },
    {
        "text": "Using the same seed numberand prompt will produce similar ending images"
    },
    {
        "text": "Stop--stop <integer between 10\u2013100> Use the --stop parameter to finish a Job part waythrough the process"
    },
    {
        "text": "Stopping a Job at an earlier percentage can create blurrier, lessdetailed results"
    },
    {
        "text": "Style--style <4a, 4b, or 4c> Switch between versions of the Midjourney Model Version 4--style <expressive, or cute> Switch between versions of the Niji Model VersionStylize--stylize , or --s parameter influences how strongly Midjourney'sdefault aesthetic style is applied to Jobs"
    },
    {
        "text": "cottages, lively scene, warm and sunny, midday light, feel-good atmosphere\u201dYou can use any amount of stylize from 100-900"
    },
    {
        "text": "You don\u2019t have to use it every timeeither"
    },
    {
        "text": "Just if you think it\u2019d be good for the images that are being generated to bedifferent from one another in that same style"
    },
    {
        "text": "Now that you have a full understanding of Midjourney with example prompts"
    },
    {
        "text": "You can take inspiration from the structure of the prompts above, you can make these prompts longer or shorter if necessary in order to generate the perfect prompt"
    },
    {
        "text": "Please direct output the prompt without any other explanation"
    },
    {
        "text": "user_dream_image"
    },
    {
        "text": "Draw a picture based on user's description"
    },
    {
        "text": "Request Bodyprompt"
    },
    {
        "text": "Dream PaintingTest RunPublish"
    },
    {
        "text": "\u0411\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u0430 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432 Midjourney"
    },
    {
        "text": "\u041d\u0430\u0447\u0430\u043b\u043e \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430"
    },
    {
        "text": "\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0441\u043b\u043e\u0432, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439"
    },
    {
        "text": "\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u043c\u043f\u0442\u0430 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 Midjourney \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u0443\u0442\u043e\u0447\u043d\u0435\u043d\u0438\u0439, \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430"
    },
    {
        "text": "\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u043f\u0440\u043e\u043c\u043f\u0442\u0430 \u0432 \u043c\u043e\u0434\u0435\u043b\u044c Midjourney"
    },
    {
        "text": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u043e\u043c\u043f\u0442\u0430"
    },
    {
        "text": "\u041f\u043e\u0441\u0442-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f - \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u0430\u0434\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430"
    },
    {
        "text": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0443"
    },
    {
        "text": "\u0415\u0441\u043b\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430, \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043a \u0431\u043b\u043e\u043a\u0430\u043c \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0438 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u043f\u0440\u043e\u043c\u043f\u0442\u0430 \u0434\u043b\u044f \u0443\u0442\u043e\u0447\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432"
    },
    {
        "text": "\u0412\u044b\u0432\u043e\u0434 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e"
    },
    {
        "text": "\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430"
    },
    {
        "text": "\u0422\u0430\u043a\u0430\u044f \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0430\u043f\u044b \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 Midjourney"
    },
    {
        "text": "\u041f\u0440\u0438\u0434\u0443\u043c\u0430\u0439 \u043d\u043e\u0432\u044b\u0439 \u043d\u0430\u0432\u044b\u043a \u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0443\u044e \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0443\u0439 \u0431\u043b\u043e\u043a_\u0441\u0445\u0435\u043c\u0443 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u043a\u0430\u043a \u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u043e\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432"
    },
    {
        "text": "\u041d\u0430\u0447\u0430\u043b\u043e"
    },
    {
        "text": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u044c\u0435\u0440\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "\u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043f\u043e\u043c\u0435\u0449\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0441\u0442\u0438\u043b\u044c \u0438\u043d\u0442\u0435\u0440\u044c\u0435\u0440\u0430"
    },
    {
        "text": "\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u043c\u043f\u0442\u0430 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u0430 3D \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0430\u043d\u0430\u043b\u0438\u0437\u0430"
    },
    {
        "text": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f 3D \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u043d\u0442\u0435\u0440\u044c\u0435\u0440\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u043c \u043f\u043e \u043f\u0440\u043e\u043c\u043f\u0442\u0443"
    },
    {
        "text": "\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f 3D \u043c\u043e\u0434\u0435\u043b\u0438"
    },
    {
        "text": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c\u0443 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e"
    },
    {
        "text": "\u0415\u0441\u043b\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430 - \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043a \u043f"
    },
    {
        "text": "9\u0415\u0441\u043b\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043d\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043d\u0430 - \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043a \u043f"
    },
    {
        "text": "4 \u0434\u043b\u044f \u0443\u0442\u043e\u0447\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043c\u043f\u0442\u0430"
    },
    {
        "text": "\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430 3D \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u0440\u0443\u0447\u043d\u0443\u044e"
    },
    {
        "text": "\u0412\u044b\u0432\u043e\u0434 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 3D \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u043d\u0442\u0435\u0440\u044c\u0435\u0440\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e"
    },
    {
        "text": "\u041a\u043e\u043d\u0435\u0446"
    },
    {
        "text": "\u0422\u0430\u043a\u0430\u044f \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 3D \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438\u043d\u0442\u0435\u0440\u044c\u0435\u0440\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0418\u0418"
    },
    {
        "text": "\u0434\u0430\u043b\u0435\u0435"
    },
    {
        "text": "9"
    },
    {
        "text": "1"
    },
    {
        "text": "\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 3D \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440"
    },
    {
        "text": "9"
    },
    {
        "text": "2"
    },
    {
        "text": "\u0410\u043d\u0430\u043b\u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c\u0443 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e"
    },
    {
        "text": "9"
    },
    {
        "text": "3"
    },
    {
        "text": "\u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"
    },
    {
        "text": "\u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0435"
    },
    {
        "text": "\u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"
    },
    {
        "text": "\u043f\u043e\u0432\u043e\u0440\u043e\u0442"
    },
    {
        "text": "\u0442\u0435\u043a\u0441\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"
    },
    {
        "text": "9"
    },
    {
        "text": "5"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"
    },
    {
        "text": "9"
    },
    {
        "text": "6"
    },
    {
        "text": "\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043b\u0438\u0448\u043d\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"
    },
    {
        "text": "9"
    },
    {
        "text": "7"
    },
    {
        "text": "\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0438 \u0438 \u0442\u0435\u043a\u0441\u0442\u0443\u0440"
    },
    {
        "text": "9"
    },
    {
        "text": "8"
    },
    {
        "text": "\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u043e\u0441\u0432\u0435\u0449\u0435\u043d\u0438\u044f"
    },
    {
        "text": "9"
    },
    {
        "text": "9"
    },
    {
        "text": "\u0420\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439"
    },
    {
        "text": "\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0430\u043d\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u0442\u0430\u043f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u043e\u0432\u0435\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e 3D \u043c\u043e\u0434\u0435\u043b\u044c \u0438\u043d\u0442\u0435\u0440\u044c\u0435\u0440\u0430 \u0434\u043e \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c"
    },
    {
        "text": "\u0432\u0438\u0434 \u0432\u0441\u0435\u0433\u043e \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0431\u043b\u043e\u043a\u0430\u043c\u0438 , \u0443\u0437\u043b\u0430\u043c\u0438 \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435"
    },
    {
        "text": "\u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440"
    },
    {
        "text": "\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u044c\u0435\u0440\u0430"
    },
    {
        "text": "\u0410\u043d\u0430\u043b\u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430"
    },
    {
        "text": "3"
    },
    {
        "text": "1"
    },
    {
        "text": "\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432 \u043f\u043e\u043c\u0435\u0449\u0435\u043d\u0438\u044f"
    },
    {
        "text": "3"
    },
    {
        "text": "2"
    },
    {
        "text": "\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0438\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u044c\u0435\u0440\u0430"
    },
    {
        "text": "3"
    },
    {
        "text": "3"
    },
    {
        "text": "\u0421\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u0447\u043d\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"
    },
    {
        "text": "\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u043c\u043f\u0442\u0430"
    },
    {
        "text": "4"
    },
    {
        "text": "1"
    },
    {
        "text": "\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432"
    },
    {
        "text": "4"
    },
    {
        "text": "2"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0441\u0442\u0438\u043b\u044f"
    },
    {
        "text": "4"
    },
    {
        "text": "3"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u0447\u043d\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"
    },
    {
        "text": "\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f 3D \u043c\u043e\u0434\u0435\u043b\u0438"
    },
    {
        "text": "\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438"
    },
    {
        "text": "\u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438"
    },
    {
        "text": "7"
    },
    {
        "text": "1"
    },
    {
        "text": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432"
    },
    {
        "text": "7"
    },
    {
        "text": "2"
    },
    {
        "text": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0438\u043b\u044f"
    },
    {
        "text": "7"
    },
    {
        "text": "3"
    },
    {
        "text": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"
    },
    {
        "text": "\u041f\u0440\u043e\u043c\u043f\u0442 OK?"
    },
    {
        "text": "\u0414\u0430 - \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043a 9"
    },
    {
        "text": "\u041d\u0435\u0442 - \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043a 4"
    },
    {
        "text": "\u0414\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438"
    },
    {
        "text": "9"
    },
    {
        "text": "1 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440"
    },
    {
        "text": "9"
    },
    {
        "text": "2 \u0410\u043d\u0430\u043b\u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0438"
    },
    {
        "text": "9"
    },
    {
        "text": "3 \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"
    },
    {
        "text": "9"
    },
    {
        "text": "4 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"
    },
    {
        "text": "9"
    },
    {
        "text": "5 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432"
    },
    {
        "text": "9"
    },
    {
        "text": "6 \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f"
    },
    {
        "text": "9"
    },
    {
        "text": "7 \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u043d\u0433"
    },
    {
        "text": "\u0412\u044b\u0432\u043e\u0434 \u043c\u043e\u0434\u0435\u043b\u0438"
    },
    {
        "text": "\u0422\u0430\u043a\u0430\u044f \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432\u0435\u0441\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441 \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u043e\u0439 \u043d\u0430 \u044d\u0442\u0430\u043f\u044b \u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u0447\u0442\u043e \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u043e\u0442\u043b\u0430\u0434\u043a\u0443 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430"
    },
    {
        "text": "\u0441\u0433\u0435\u0435\u043d\u0440\u0438\u0440\u0443\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u043e\u0433\u043e \u0431\u043b\u043e\u043a\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435"
    },
    {
        "text": "\u0448\u0430\u0431\u043b\u043e\u043d \u043f\u0440\u043e\u043c\u043f\u0442\u0430"
    },
    {
        "text": "\u043f\u043e\u0440\u043e\u0433\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u0434\u043b\u044f \u043c\u0435\u0442\u0440\u0438\u043a"
    },
    {
        "text": "\u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u0444\u043e\u0440\u043c\u0430\u0442 \u0440\u0435\u043d\u0434\u0435\u0440\u0430"
    },
    {
        "text": "\u0422\u0430\u043a\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0433\u0438\u0431\u043a\u043e \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u044d\u0442\u0430\u043f\u044b \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 3D \u043c\u043e\u0434\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u041d\u043e\u0434 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043d\u0430 \u0444\u043e\u0442\u043e \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u043d\u0443\u0436\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c"
    },
    {
        "text": "\u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u041d\u043e\u0434 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0442\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442\u0430 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u044d\u043c\u043e\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u043a\u0440\u0430\u0441\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "\u0414\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0432\u0438\u043a\u043e\u0440\u0438\u0441\u0442\u043e\u0432\u0443\u0439\u0442\u0435 \u041d\u043e\u0434\u044b \u043d\u0430 \u0431\u0430\u0437\u0435 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0442\u0438\u043f\u0430 GPT"
    },
    {
        "text": "\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0443\u0439\u0442\u0435 \u0446\u0438\u043a\u043b \u043e\u043f\u0440\u043e\u0441\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u041d\u043e\u0434\u0430 \u0446\u0438\u043a\u043b\u0430 \u0438 \u041d\u043e\u0434\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u0435\u0442\u0432\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u0438\u043a\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 \u041d\u043e\u0434\u044b \u0432\u0435\u0442\u0432\u043b\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u041d\u043e\u0434\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c"
    },
    {
        "text": "\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u0443\u0439\u0442\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u041d\u043e\u0434\u043e\u0432-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u0432 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u0434\u043b\u044f \u0443\u0442\u043e\u0447\u043d\u0435\u043d\u0438\u044f \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438"
    },
    {
        "text": "\u041f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043e\u0442\u043a\u0430\u0442 \u043a \u043f\u0443\u043d\u043a\u0442\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u041d\u043e\u0434\u043e\u0432 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a"
    },
    {
        "text": "\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u044b\u0445 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u043a \u0418\u0441\u043f\u0430\u043d\u0441\u043a\u043e\u043c\u0443 API \u0447\u0435\u0440\u0435\u0437 \u041d\u043e\u0434\u044b \u043f\u0430\u043c\u044f\u0442\u0438 \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u044b"
    },
    {
        "text": "\u041f\u0440\u0438\u043d\u044f\u0442\u043e"
    },
    {
        "text": "\u042f \u0434\u043e\u0431\u0430\u0432\u0438\u043b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u0434\u043e\u0432 \u0438 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439 \u043f\u043e \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044e \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0432 MindOS \u0432 \u0441\u0432\u043e\u044e \u043f\u0430\u043c\u044f\u0442\u044c \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432"
    },
    {
        "text": "\u042d\u0442\u0438 \u0437\u043d\u0430\u043d\u0438\u044f \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u043c\u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 workflow \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u043e\u0432\u044b\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a"
    },
    {
        "text": "\u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044e \u0437\u0430 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u043c\u043e\u0438\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u0418\u0418-\u0441\u0438\u0441\u0442\u0435\u043c \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 MindOS"
    },
    {
        "text": "\u0412\u043e\u0441\u0441\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0431\u043b\u043e\u043a-\u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e, \u0441\u043e\u0437\u0434\u0430\u0432 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u043b\u043e\u043a\u0430 \u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0432 \u0438\u0445"
    },
    {
        "text": "Define the Block class"
    },
    {
        "text": "Create instances of objects for each block"
    },
    {
        "text": "Connect the blocks together"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u0432 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u043b\u043e\u043a\u0430 \u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0432 \u0438\u0445 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0441\u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e"
    },
    {
        "text": "\u0421\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u0431\u043b\u043e\u043a\u0430\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0431\u043b\u043e\u0447\u043d\u043e\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0435"
    },
    {
        "text": "Blockconnectconnections"
    },
    {
        "text": "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u044d\u0442\u043e \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440, \u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u0438 \u0435\u0433\u043e \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0448\u0438\u043c\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u043c\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c\u0438"
    },
    {
        "text": "\u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0431\u043b\u043e\u043a\u043e\u0432 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043f\u043e \u043c\u0435\u0440\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438, \u0447\u0442\u043e\u0431\u044b \u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432\u0430\u0448\u0443 \u0431\u043b\u043e\u043a-\u0441\u0445\u0435\u043c\u0443"
    },
    {
        "text": "Block"
    },
    {
        "text": "J"
    },
    {
        "text": "S"
    },
    {
        "text": "O"
    },
    {
        "text": "N"
    },
    {
        "text": "Y"
    },
    {
        "text": "A"
    },
    {
        "text": "M"
    },
    {
        "text": "L"
    },
    {
        "text": "X"
    },
    {
        "text": "Nata"
    },
    {
        "text": "B"
    },
    {
        "text": "P"
    },
    {
        "text": "D"
    },
    {
        "text": "Python"
    },
    {
        "text": "Java"
    },
    {
        "text": "Script"
    },
    {
        "text": "Input"
    },
    {
        "text": "Name"
    },
    {
        "text": "Text"
    },
    {
        "text": "Dropdown"
    },
    {
        "text": "Personality"
    },
    {
        "text": "Choice"
    },
    {
        "text": "Friendly"
    },
    {
        "text": "Professional"
    },
    {
        "text": "Funny"
    },
    {
        "text": "Button"
    },
    {
        "text": "Create"
    },
    {
        "text": "Action"
    },
    {
        "text": "Label"
    },
    {
        "text": "Status"
    },
    {
        "text": "Genius"
    },
    {
        "text": "G"
    },
    {
        "text": "I"
    },
    {
        "text": "W"
    },
    {
        "text": "Workflow Engine"
    },
    {
        "text": "Company"
    },
    {
        "text": "Serper News I"
    },
    {
        "text": "Searching"
    },
    {
        "text": "List"
    },
    {
        "text": "Interpreting"
    },
    {
        "text": "Pass"
    },
    {
        "text": "Intergrade"
    },
    {
        "text": "T"
    },
    {
        "text": "Max"
    },
    {
        "text": "News"
    },
    {
        "text": "Above"
    },
    {
        "text": "News Title"
    },
    {
        "text": "Potential Impact"
    },
    {
        "text": "Generating"
    },
    {
        "text": "Markdown"
    },
    {
        "text": "U"
    },
    {
        "text": "R"
    },
    {
        "text": "H"
    },
    {
        "text": "Writing"
    },
    {
        "text": "Vg"
    },
    {
        "text": "Ey"
    },
    {
        "text": "Placeholder"
    },
    {
        "text": "Enter"
    },
    {
        "text": "Connected"
    },
    {
        "text": "Options"
    },
    {
        "text": "Random"
    },
    {
        "text": "Value"
    },
    {
        "text": "None"
    },
    {
        "text": "Please"
    },
    {
        "text": "Your Genius"
    },
    {
        "text": "Something"
    },
    {
        "text": "C"
    },
    {
        "text": "E"
    },
    {
        "text": "Is Name"
    },
    {
        "text": "Yes"
    },
    {
        "text": "F"
    },
    {
        "text": "No"
    },
    {
        "text": "Is Personality Random"
    },
    {
        "text": "Pick"
    },
    {
        "text": "Create Genius"
    },
    {
        "text": "Is"
    },
    {
        "text": "K"
    },
    {
        "text": "Is Personality"
    },
    {
        "text": "Create A"
    },
    {
        "text": "Your A"
    },
    {
        "text": "Type"
    },
    {
        "text": "Bing"
    },
    {
        "text": "Miro"
    },
    {
        "text": "Company Name"
    },
    {
        "text": "Link List"
    },
    {
        "text": "Summary List"
    },
    {
        "text": "Final Report"
    },
    {
        "text": "Mind"
    },
    {
        "text": "Sly"
    },
    {
        "text": "Start"
    },
    {
        "text": "Gather Location Information"
    },
    {
        "text": "Retrieve Weather Data"
    },
    {
        "text": "Process Weather Data"
    },
    {
        "text": "Generate Weather Update"
    },
    {
        "text": "Provide Weather Update"
    },
    {
        "text": "End"
    },
    {
        "text": "Prompt"
    },
    {
        "text": "Retrieve"
    },
    {
        "text": "Process"
    },
    {
        "text": "Generate"
    },
    {
        "text": "The"
    },
    {
        "text": "Humidity"
    },
    {
        "text": "Provide"
    },
    {
        "text": "Weather"
    },
    {
        "text": "Layer"
    },
    {
        "text": "View"
    },
    {
        "text": "To"
    },
    {
        "text": "Leaflet"
    },
    {
        "text": "Certainly"
    },
    {
        "text": "Let"
    },
    {
        "text": "Warehouse Management System"
    },
    {
        "text": "S Skill Overview"
    },
    {
        "text": "A Warehouse Management System"
    },
    {
        "text": "The W"
    },
    {
        "text": "Logic"
    },
    {
        "text": "Flow"
    },
    {
        "text": "S Skill"
    },
    {
        "text": "User Interaction"
    },
    {
        "text": "Warehouse Setup"
    },
    {
        "text": "Inventory Management"
    },
    {
        "text": "Order Management"
    },
    {
        "text": "It"
    },
    {
        "text": "Pack"
    },
    {
        "text": "Shipping"
    },
    {
        "text": "Logistics"
    },
    {
        "text": "Reporting"
    },
    {
        "text": "Analytics"
    },
    {
        "text": "System Integration"
    },
    {
        "text": "Enterprise Resource Planning"
    },
    {
        "text": "Customer Relationship Management"
    },
    {
        "text": "Maintenance"
    },
    {
        "text": "Support"
    },
    {
        "text": "By"
    },
    {
        "text": "Here"
    },
    {
        "text": "The Genius"
    },
    {
        "text": "User Input"
    },
    {
        "text": "Capture"
    },
    {
        "text": "Location Validation"
    },
    {
        "text": "Validate"
    },
    {
        "text": "Use"
    },
    {
        "text": "Weather A"
    },
    {
        "text": "I Integration"
    },
    {
        "text": "Integrate"
    },
    {
        "text": "Handle"
    },
    {
        "text": "Data Processing"
    },
    {
        "text": "Extract"
    },
    {
        "text": "Access"
    },
    {
        "text": "Weather Update Generation"
    },
    {
        "text": "Format"
    },
    {
        "text": "Response Delivery"
    },
    {
        "text": "Error Handling"
    },
    {
        "text": "Implement"
    },
    {
        "text": "Testing"
    },
    {
        "text": "Optimization"
    },
    {
        "text": "Test"
    },
    {
        "text": "Continuously"
    },
    {
        "text": "Remember"
    },
    {
        "text": "Integration"
    },
    {
        "text": "In"
    },
    {
        "text": "P G"
    },
    {
        "text": "The A"
    },
    {
        "text": "Finally"
    },
    {
        "text": "Additionally"
    },
    {
        "text": "You"
    },
    {
        "text": "Choose"
    },
    {
        "text": "Sign"
    },
    {
        "text": "Make"
    },
    {
        "text": "Visualization"
    },
    {
        "text": "With Sly"
    },
    {
        "text": "Workflow Visualization"
    },
    {
        "text": "Use A"
    },
    {
        "text": "Identify"
    },
    {
        "text": "Component Visualization"
    },
    {
        "text": "Arrange"
    },
    {
        "text": "L Template Integration"
    },
    {
        "text": "Convert"
    },
    {
        "text": "Use H"
    },
    {
        "text": "Embed"
    },
    {
        "text": "Web Map Service"
    },
    {
        "text": "The H"
    },
    {
        "text": "The Java"
    },
    {
        "text": "Learn"
    },
    {
        "text": "Ready Player Me"
    },
    {
        "text": "Virtual A"
    },
    {
        "text": "I Being Creation Platform Mind"
    },
    {
        "text": "S Just Launched"
    },
    {
        "text": "Global Closed Beta"
    },
    {
        "text": "Morningstar"
    },
    {
        "text": "Global"
    },
    {
        "text": "Universal Windows Platform"
    },
    {
        "text": "Wikipedia"
    },
    {
        "text": "Universal"
    },
    {
        "text": "Windows"
    },
    {
        "text": "Platform"
    },
    {
        "text": "I Agent Creator Platform Mind"
    },
    {
        "text": "S Launches Open Beta"
    },
    {
        "text": "Tech"
    },
    {
        "text": "Asia"
    },
    {
        "text": "Mindverse A"
    },
    {
        "text": "Metadata"
    },
    {
        "text": "Information"
    },
    {
        "text": "S Security Assertion Markup Language"
    },
    {
        "text": "V"
    },
    {
        "text": "Serverless"
    },
    {
        "text": "Tful"
    },
    {
        "text": "Async"
    },
    {
        "text": "Graph"
    },
    {
        "text": "Q"
    },
    {
        "text": "Data"
    },
    {
        "text": "State"
    },
    {
        "text": "Function"
    },
    {
        "text": "Transition"
    },
    {
        "text": "Constant"
    },
    {
        "text": "Secrets"
    },
    {
        "text": "Context"
    },
    {
        "text": "Workflow Build Process"
    },
    {
        "text": "Anexus Documentation"
    },
    {
        "text": "Anexus"
    },
    {
        "text": "Git"
    },
    {
        "text": "Hub"
    },
    {
        "text": "Workflow Builder"
    },
    {
        "text": "Microsoft Intune"
    },
    {
        "text": "Recognizing"
    },
    {
        "text": "Geniuss"
    },
    {
        "text": "Important"
    },
    {
        "text": "Computer Vision"
    },
    {
        "text": "Computer"
    },
    {
        "text": "Useful"
    },
    {
        "text": "Parse J"
    },
    {
        "text": "Manage"
    },
    {
        "text": "Google Calendar A"
    },
    {
        "text": "Temporary"
    },
    {
        "text": "User"
    },
    {
        "text": "Current"
    },
    {
        "text": "Recent"
    },
    {
        "text": "Past"
    },
    {
        "text": "Interactions"
    },
    {
        "text": "What"
    },
    {
        "text": "How"
    },
    {
        "text": "Machine"
    },
    {
        "text": "Diagrams"
    },
    {
        "text": "Natural Language Processing"
    },
    {
        "text": "Useful C"
    },
    {
        "text": "Call Open"
    },
    {
        "text": "Map A"
    },
    {
        "text": "Google Calendar"
    },
    {
        "text": "Use Google Calendar A"
    },
    {
        "text": "Auth"
    },
    {
        "text": "Long"
    },
    {
        "text": "Combining"
    },
    {
        "text": "Supervised"
    },
    {
        "text": "Neural"
    },
    {
        "text": "Key N"
    },
    {
        "text": "Common"
    },
    {
        "text": "Integrate Open"
    },
    {
        "text": "Process J"
    },
    {
        "text": "Add"
    },
    {
        "text": "Implement O"
    },
    {
        "text": "Store"
    },
    {
        "text": "Follow"
    },
    {
        "text": "Combine"
    },
    {
        "text": "Build"
    },
    {
        "text": "Try Rasa"
    },
    {
        "text": "Dialogflow"
    },
    {
        "text": "For"
    },
    {
        "text": "Facebook Messenger"
    },
    {
        "text": "Slack"
    },
    {
        "text": "Host"
    },
    {
        "text": "Goal"
    },
    {
        "text": "Key"
    },
    {
        "text": "Tasks"
    },
    {
        "text": "Detected"
    },
    {
        "text": "Interaction"
    },
    {
        "text": "Web"
    },
    {
        "text": "Mobile"
    },
    {
        "text": "Hello"
    },
    {
        "text": "Seattle"
    },
    {
        "text": "According"
    },
    {
        "text": "Weather Channel A"
    },
    {
        "text": "Can"
    },
    {
        "text": "Paris"
    },
    {
        "text": "Friday"
    },
    {
        "text": "Absolutely"
    },
    {
        "text": "Based"
    },
    {
        "text": "Trip"
    },
    {
        "text": "Advisor"
    },
    {
        "text": "Google Maps"
    },
    {
        "text": "Le Meurice Alain Ducasse"
    },
    {
        "text": "They"
    },
    {
        "text": "Avant Comptoir"
    },
    {
        "text": "Mer"
    },
    {
        "text": "Charming"
    },
    {
        "text": "Saint"
    },
    {
        "text": "Germain"
    },
    {
        "text": "Pr"
    },
    {
        "text": "Le Caf"
    },
    {
        "text": "Homme"
    },
    {
        "text": "Elegant"
    },
    {
        "text": "Mus"
    },
    {
        "text": "Natural"
    },
    {
        "text": "Some"
    },
    {
        "text": "Enable"
    },
    {
        "text": "Connect"
    },
    {
        "text": "Algorithms"
    },
    {
        "text": "Conversational A"
    },
    {
        "text": "This"
    },
    {
        "text": "Intent"
    },
    {
        "text": "Utterances"
    },
    {
        "text": "My Genius"
    },
    {
        "text": "Entities"
    },
    {
        "text": "Thank"
    },
    {
        "text": "S Geniuss"
    },
    {
        "text": "Initialize"
    },
    {
        "text": "Fine"
    },
    {
        "text": "Iteratively"
    },
    {
        "text": "Evaluate"
    },
    {
        "text": "Retrain"
    },
    {
        "text": "Messenger"
    },
    {
        "text": "Publish"
    },
    {
        "text": "Monitor"
    },
    {
        "text": "Analyze"
    },
    {
        "text": "Collect"
    },
    {
        "text": "Update"
    },
    {
        "text": "Main"
    },
    {
        "text": "Italian"
    },
    {
        "text": "Los Angeles"
    },
    {
        "text": "Pasta Sisters"
    },
    {
        "text": "Osteria Mozza"
    },
    {
        "text": "Felix Trattoria"
    },
    {
        "text": "Schedule"
    },
    {
        "text": "Move"
    },
    {
        "text": "Cancel"
    },
    {
        "text": "Bot"
    },
    {
        "text": "Hi"
    },
    {
        "text": "John Doe"
    },
    {
        "text": "Likes"
    },
    {
        "text": "Website"
    },
    {
        "text": "Android"
    },
    {
        "text": "Amazon Alexa"
    },
    {
        "text": "Google Assistant"
    },
    {
        "text": "Number"
    },
    {
        "text": "Conversation"
    },
    {
        "text": "Entity"
    },
    {
        "text": "Chatbase"
    },
    {
        "text": "Dashbot"
    },
    {
        "text": "Bespoken Analytics"
    },
    {
        "text": "Chatlytics"
    },
    {
        "text": "Review"
    },
    {
        "text": "Retrain N"
    },
    {
        "text": "Active"
    },
    {
        "text": "Reinforcement"
    },
    {
        "text": "Transfer"
    },
    {
        "text": "Serverless Workflow"
    },
    {
        "text": "States"
    },
    {
        "text": "Functions"
    },
    {
        "text": "S Lambda"
    },
    {
        "text": "Events"
    },
    {
        "text": "Error"
    },
    {
        "text": "Compensation"
    },
    {
        "text": "Table"
    },
    {
        "text": "Contents"
    },
    {
        "text": "Why"
    },
    {
        "text": "Focus"
    },
    {
        "text": "Workflow"
    },
    {
        "text": "Using"
    },
    {
        "text": "Using Functions"
    },
    {
        "text": "Tful Service Invocations"
    },
    {
        "text": "Async A"
    },
    {
        "text": "I Service Invocations"
    },
    {
        "text": "C Service Invocations"
    },
    {
        "text": "L Service Invocations"
    },
    {
        "text": "Invoking"
    },
    {
        "text": "L Query"
    },
    {
        "text": "L Mutation"
    },
    {
        "text": "Data Service Invocations"
    },
    {
        "text": "Creating"
    },
    {
        "text": "Data Function Definition"
    },
    {
        "text": "Expression Evaluation"
    },
    {
        "text": "Defining"
    },
    {
        "text": "Each State"
    },
    {
        "text": "Properties Definition"
    },
    {
        "text": "On"
    },
    {
        "text": "Events Definition"
    },
    {
        "text": "Ref Definition"
    },
    {
        "text": "Sub"
    },
    {
        "text": "Produced"
    },
    {
        "text": "Retry"
    },
    {
        "text": "Automatic"
    },
    {
        "text": "Exec"
    },
    {
        "text": "Timeout Definition"
    },
    {
        "text": "Active States"
    },
    {
        "text": "Unrecoverable"
    },
    {
        "text": "Continuing"
    },
    {
        "text": "Execution"
    },
    {
        "text": "Continue"
    },
    {
        "text": "As"
    },
    {
        "text": "Comparison"
    },
    {
        "text": "The Serverless Workflow"
    },
    {
        "text": "Workflows"
    },
    {
        "text": "Selecting"
    },
    {
        "text": "Portability"
    },
    {
        "text": "Having"
    },
    {
        "text": "Serverless Workflow Wiki"
    },
    {
        "text": "Cloud"
    },
    {
        "text": "Open"
    },
    {
        "text": "Definitions"
    },
    {
        "text": "Workflow J"
    },
    {
        "text": "N Schema"
    },
    {
        "text": "Software Development Kits"
    },
    {
        "text": "Ks"
    },
    {
        "text": "Go"
    },
    {
        "text": "Typescript"
    },
    {
        "text": "Set"
    },
    {
        "text": "Workflow Extensions"
    },
    {
        "text": "Key Performance Indicators"
    },
    {
        "text": "Rate Limiting"
    },
    {
        "text": "Simulation"
    },
    {
        "text": "Tracing"
    },
    {
        "text": "Technology Compatibility Kit"
    },
    {
        "text": "Following"
    },
    {
        "text": "Workflow Definition Structureand"
    },
    {
        "text": "Workflow Model It"
    },
    {
        "text": "Their"
    },
    {
        "text": "Runtimes"
    },
    {
        "text": "Depending"
    },
    {
        "text": "Each"
    },
    {
        "text": "Timeout"
    },
    {
        "text": "Other"
    },
    {
        "text": "Reusable"
    },
    {
        "text": "Errors"
    },
    {
        "text": "Definition"
    },
    {
        "text": "When"
    },
    {
        "text": "State Data"
    },
    {
        "text": "These"
    },
    {
        "text": "Multiple"
    },
    {
        "text": "Reference"
    },
    {
        "text": "Must"
    },
    {
        "text": "If"
    },
    {
        "text": "There"
    },
    {
        "text": "Click"
    },
    {
        "text": "N\tY"
    },
    {
        "text": "Filter"
    },
    {
        "text": "Orders"
    },
    {
        "text": "Results"
    },
    {
        "text": "Like"
    },
    {
        "text": "Once"
    },
    {
        "text": "Data\tWorkflow"
    },
    {
        "text": "Results\tIf"
    },
    {
        "text": "Default"
    },
    {
        "text": "Select"
    },
    {
        "text": "We"
    },
    {
        "text": "Ref"
    },
    {
        "text": "And"
    },
    {
        "text": "Pasta"
    },
    {
        "text": "Types"
    },
    {
        "text": "Now"
    },
    {
        "text": "Buy"
    },
    {
        "text": "At"
    },
    {
        "text": "With"
    },
    {
        "text": "Data\tIf"
    },
    {
        "text": "Allows"
    },
    {
        "text": "All"
    },
    {
        "text": "Note"
    },
    {
        "text": "Only"
    },
    {
        "text": "As Event"
    },
    {
        "text": "Greet"
    },
    {
        "text": "Customers"
    },
    {
        "text": "Greet Customers"
    },
    {
        "text": "Version"
    },
    {
        "text": "Wait"
    },
    {
        "text": "Customer"
    },
    {
        "text": "Arrive"
    },
    {
        "text": "Refs"
    },
    {
        "text": "Arrives"
    },
    {
        "text": "Info"
    },
    {
        "text": "Message"
    },
    {
        "text": "Result"
    },
    {
        "text": "Greeting"
    },
    {
        "text": "Hola"
    },
    {
        "text": "Hallo"
    },
    {
        "text": "Goodbye"
    },
    {
        "text": "Adi"
    },
    {
        "text": "Auf Wiedersehen"
    },
    {
        "text": "John Michaels"
    },
    {
        "text": "Some Street"
    },
    {
        "text": "City"
    },
    {
        "text": "Country"
    },
    {
        "text": "Its"
    },
    {
        "text": "Before"
    },
    {
        "text": "Time"
    },
    {
        "text": "Hola John Michaels"
    },
    {
        "text": "After"
    },
    {
        "text": "Event State Completes Execution"
    },
    {
        "text": "Because"
    },
    {
        "text": "Namely"
    },
    {
        "text": "Consumed"
    },
    {
        "text": "Merging"
    },
    {
        "text": "John"
    },
    {
        "text": "Jane"
    },
    {
        "text": "Michael"
    },
    {
        "text": "Referencethe"
    },
    {
        "text": "I Specification"
    },
    {
        "text": "Order"
    },
    {
        "text": "Confirmation"
    },
    {
        "text": "Send"
    },
    {
        "text": "Confirm"
    },
    {
        "text": "Streetlights A"
    },
    {
        "text": "The Smartylighting Streetlights A"
    },
    {
        "text": "Apache"
    },
    {
        "text": "Inform"
    },
    {
        "text": "Id"
    },
    {
        "text": "Light"
    },
    {
        "text": "Measured"
    },
    {
        "text": "Date"
    },
    {
        "text": "Measurements"
    },
    {
        "text": "Operation"
    },
    {
        "text": "Also"
    },
    {
        "text": "Our"
    },
    {
        "text": "Publish Measurements"
    },
    {
        "text": "Publish Light Measurements"
    },
    {
        "text": "Similar"
    },
    {
        "text": "For R"
    },
    {
        "text": "Protocol Buffers"
    },
    {
        "text": "Service"
    },
    {
        "text": "Empty"
    },
    {
        "text": "Users"
    },
    {
        "text": "Request"
    },
    {
        "text": "Role"
    },
    {
        "text": "Method"
    },
    {
        "text": "Query"
    },
    {
        "text": "Pet"
    },
    {
        "text": "Int"
    },
    {
        "text": "Mutation"
    },
    {
        "text": "Treat"
    },
    {
        "text": "String"
    },
    {
        "text": "G A G"
    },
    {
        "text": "L Q"
    },
    {
        "text": "One"
    },
    {
        "text": "Which"
    },
    {
        "text": "Snuffles"
    },
    {
        "text": "L M"
    },
    {
        "text": "Likewise"
    },
    {
        "text": "Sadaharu"
    },
    {
        "text": "Dog"
    },
    {
        "text": "Years"
    },
    {
        "text": "Of"
    },
    {
        "text": "Birth"
    },
    {
        "text": "Expressions"
    },
    {
        "text": "L Subscriptions"
    },
    {
        "text": "Functions Definitions"
    },
    {
        "text": "G A"
    },
    {
        "text": "N O"
    },
    {
        "text": "A F"
    },
    {
        "text": "N D"
    },
    {
        "text": "Persons"
    },
    {
        "text": "Person"
    },
    {
        "text": "Detail"
    },
    {
        "text": "Serverless Workflow O"
    },
    {
        "text": "Data Json"
    },
    {
        "text": "Expression"
    },
    {
        "text": "Adult"
    },
    {
        "text": "Minor"
    },
    {
        "text": "Serverless Workflowcan"
    },
    {
        "text": "State Data Filters"
    },
    {
        "text": "Check"
    },
    {
        "text": "Applicant"
    },
    {
        "text": "Conditions"
    },
    {
        "text": "Approve"
    },
    {
        "text": "Application"
    },
    {
        "text": "Reject"
    },
    {
        "text": "Condition"
    },
    {
        "text": "Increment Count Function"
    },
    {
        "text": "Initialize Count"
    },
    {
        "text": "Increment Count"
    },
    {
        "text": "Just"
    },
    {
        "text": "Later"
    },
    {
        "text": "State Data Filtering"
    },
    {
        "text": "Lang"
    },
    {
        "text": "Where"
    },
    {
        "text": "Expr"
    },
    {
        "text": "Func"
    },
    {
        "text": "Address"
    },
    {
        "text": "Naist"
    },
    {
        "text": "Nara"
    },
    {
        "text": "Code"
    },
    {
        "text": "Numbers"
    },
    {
        "text": "Phone"
    },
    {
        "text": "Switch"
    },
    {
        "text": "My"
    },
    {
        "text": "Sample"
    },
    {
        "text": "Sample Workflow"
    },
    {
        "text": "Domain"
    },
    {
        "text": "Schema\tUsed"
    },
    {
        "text": "Output"
    },
    {
        "text": "Version\tServerless Workflow"
    },
    {
        "text": "Lang\tIdentifies"
    },
    {
        "text": "Defines"
    },
    {
        "text": "Active\tIf"
    },
    {
        "text": "Instance"
    },
    {
        "text": "Retries\tIf"
    },
    {
        "text": "Starting"
    },
    {
        "text": "Schema"
    },
    {
        "text": "Validation"
    },
    {
        "text": "Both"
    },
    {
        "text": "Example"
    },
    {
        "text": "Json"
    },
    {
        "text": "Yaml"
    },
    {
        "text": "World"
    },
    {
        "text": "My Basic Auth"
    },
    {
        "text": "An Auth"
    },
    {
        "text": "Referenced"
    },
    {
        "text": "Workflow Functions J"
    },
    {
        "text": "Attribute"
    },
    {
        "text": "Workflow Events J"
    },
    {
        "text": "Setting"
    },
    {
        "text": "Name\tDescription\tConsumes"
    },
    {
        "text": "Produces"
    },
    {
        "text": "Executes"
    },
    {
        "text": "Handles"
    },
    {
        "text": "Makes"
    },
    {
        "text": "Event\tDefine"
    },
    {
        "text": "Operation\tExecute"
    },
    {
        "text": "Switch\tDefine"
    },
    {
        "text": "Sleep\tSleep"
    },
    {
        "text": "Parallel\tCauses"
    },
    {
        "text": "Inject\tInject"
    },
    {
        "text": "Each\tParallel"
    },
    {
        "text": "Callback\tManual"
    },
    {
        "text": "T S"
    },
    {
        "text": "Unique State"
    },
    {
        "text": "Events\tDefine"
    },
    {
        "text": "Filter\tState"
    },
    {
        "text": "Next"
    },
    {
        "text": "Errors\tStates"
    },
    {
        "text": "By\tUnique"
    },
    {
        "text": "Vitals"
    },
    {
        "text": "High"
    },
    {
        "text": "Body"
    },
    {
        "text": "Temperature"
    },
    {
        "text": "Tylenol"
    },
    {
        "text": "Blood"
    },
    {
        "text": "Pressure"
    },
    {
        "text": "Nurse"
    },
    {
        "text": "Respiration"
    },
    {
        "text": "Rate"
    },
    {
        "text": "Pulmonologist"
    },
    {
        "text": "N S"
    },
    {
        "text": "Mode\tShould"
    },
    {
        "text": "Actions"
    },
    {
        "text": "Compensation\tIf"
    },
    {
        "text": "Mode"
    },
    {
        "text": "Rejection"
    },
    {
        "text": "Email"
    },
    {
        "text": "H S"
    },
    {
        "text": "Conditions\tDefined"
    },
    {
        "text": "Condition\tDefault"
    },
    {
        "text": "Visa"
    },
    {
        "text": "Approved"
    },
    {
        "text": "Rejected"
    },
    {
        "text": "Decision"
    },
    {
        "text": "Because A"
    },
    {
        "text": "P S"
    },
    {
        "text": "Duration"
    },
    {
        "text": "Sleep"
    },
    {
        "text": "Five"
    },
    {
        "text": "Seconds"
    },
    {
        "text": "Get"
    },
    {
        "text": "Job"
    },
    {
        "text": "L S"
    },
    {
        "text": "Type\tOption"
    },
    {
        "text": "Completed\tUsed"
    },
    {
        "text": "Completion"
    },
    {
        "text": "Least"
    },
    {
        "text": "Parallel"
    },
    {
        "text": "Branch"
    },
    {
        "text": "Param"
    },
    {
        "text": "Two"
    },
    {
        "text": "Completed"
    },
    {
        "text": "Exceptions"
    },
    {
        "text": "Inject"
    },
    {
        "text": "Simple"
    },
    {
        "text": "Doe"
    },
    {
        "text": "Street"
    },
    {
        "text": "Marry"
    },
    {
        "text": "Allice"
    },
    {
        "text": "Kelly"
    },
    {
        "text": "Mill"
    },
    {
        "text": "Collection\tWorkflow"
    },
    {
        "text": "Param\tName"
    },
    {
        "text": "Collection"
    },
    {
        "text": "Size\tSpecifies"
    },
    {
        "text": "Used"
    },
    {
        "text": "Specifies"
    },
    {
        "text": "Provision"
    },
    {
        "text": "However"
    },
    {
        "text": "Size"
    },
    {
        "text": "Sizeis"
    },
    {
        "text": "In J"
    },
    {
        "text": "Buyer"
    },
    {
        "text": "State For"
    },
    {
        "text": "The For"
    },
    {
        "text": "So"
    },
    {
        "text": "Workflow Timeoutssection"
    },
    {
        "text": "K S"
    },
    {
        "text": "Ref\tReferences"
    },
    {
        "text": "Filter\tCallback"
    },
    {
        "text": "By\tUniaue"
    },
    {
        "text": "Credit"
    },
    {
        "text": "Microservice"
    },
    {
        "text": "While"
    },
    {
        "text": "The Callback"
    },
    {
        "text": "Callback"
    },
    {
        "text": "Unique"
    },
    {
        "text": "Api"
    },
    {
        "text": "Products"
    },
    {
        "text": "Take"
    },
    {
        "text": "Docker"
    },
    {
        "text": "Parameters"
    },
    {
        "text": "Secured"
    },
    {
        "text": "Invocation"
    },
    {
        "text": "My O"
    },
    {
        "text": "C Auth"
    },
    {
        "text": "My Api Key Auth"
    },
    {
        "text": "My Api"
    },
    {
        "text": "Key Auth"
    },
    {
        "text": "Mundo"
    },
    {
        "text": "T D"
    },
    {
        "text": "Define"
    },
    {
        "text": "Only\tIf"
    },
    {
        "text": "Otherwise"
    },
    {
        "text": "Correlating"
    },
    {
        "text": "The Cloud"
    },
    {
        "text": "Extension Context Attributesand"
    },
    {
        "text": "Extension"
    },
    {
        "text": "System"
    },
    {
        "text": "Heart"
    },
    {
        "text": "Reading"
    },
    {
        "text": "Z"
    },
    {
        "text": "Urgent"
    },
    {
        "text": "Care"
    },
    {
        "text": "H D"
    },
    {
        "text": "Basic"
    },
    {
        "text": "Bearer"
    },
    {
        "text": "See"
    },
    {
        "text": "Basic Authentication"
    },
    {
        "text": "The Basic"
    },
    {
        "text": "Contains"
    },
    {
        "text": "Bearer Authentication"
    },
    {
        "text": "Authentication"
    },
    {
        "text": "Type\tDefines"
    },
    {
        "text": "Credentials"
    },
    {
        "text": "Exchange"
    },
    {
        "text": "Id\tString"
    },
    {
        "text": "Secret\tWorkflow"
    },
    {
        "text": "Array"
    },
    {
        "text": "Owner"
    },
    {
        "text": "Token\tString"
    },
    {
        "text": "Subject\tString"
    },
    {
        "text": "Issuer\tString"
    },
    {
        "text": "Name\tCloud"
    },
    {
        "text": "Event Extension Context Attribute"
    },
    {
        "text": "Value\tCloud"
    },
    {
        "text": "S D"
    },
    {
        "text": "Refs\tReferences"
    },
    {
        "text": "Mode\tSpecifies"
    },
    {
        "text": "Filter\tEvent"
    },
    {
        "text": "Call"
    },
    {
        "text": "Unique Action"
    },
    {
        "text": "Retryable"
    },
    {
        "text": "Errors\tList"
    },
    {
        "text": "Retries"
    },
    {
        "text": "Filter\tAction"
    },
    {
        "text": "Finalize Application Action"
    },
    {
        "text": "W A"
    },
    {
        "text": "Often"
    },
    {
        "text": "F D"
    },
    {
        "text": "Name\tName"
    },
    {
        "text": "Arguments"
    },
    {
        "text": "Set\tUsed"
    },
    {
        "text": "Funds"
    },
    {
        "text": "Availabe"
    },
    {
        "text": "Amount"
    },
    {
        "text": "Ref\tReference"
    },
    {
        "text": "Timeout\tMaximum"
    },
    {
        "text": "Attributes\tAdd"
    },
    {
        "text": "Vet"
    },
    {
        "text": "Appointment"
    },
    {
        "text": "Attributes"
    },
    {
        "text": "Id\tSub"
    },
    {
        "text": "Parent"
    },
    {
        "text": "Complete\tIf"
    },
    {
        "text": "Usually"
    },
    {
        "text": "Subflows"
    },
    {
        "text": "Complete"
    },
    {
        "text": "R D"
    },
    {
        "text": "Refs\tReference"
    },
    {
        "text": "Item"
    },
    {
        "text": "Issue"
    },
    {
        "text": "Refund"
    },
    {
        "text": "Refsproperty"
    },
    {
        "text": "Usable"
    },
    {
        "text": "Y D"
    },
    {
        "text": "Attempts\tMaximum"
    },
    {
        "text": "Delay\tMaximum"
    },
    {
        "text": "Static"
    },
    {
        "text": "Float"
    },
    {
        "text": "Strat"
    },
    {
        "text": "Attempts"
    },
    {
        "text": "Timeout Errors Strategy"
    },
    {
        "text": "Adding"
    },
    {
        "text": "Alternatively"
    },
    {
        "text": "Delay"
    },
    {
        "text": "State\tName"
    },
    {
        "text": "Events\tArray"
    },
    {
        "text": "Eval"
    },
    {
        "text": "E D"
    },
    {
        "text": "A C"
    },
    {
        "text": "Eighteen"
    },
    {
        "text": "E E"
    },
    {
        "text": "T C"
    },
    {
        "text": "Upon"
    },
    {
        "text": "E B"
    },
    {
        "text": "E H"
    },
    {
        "text": "G E"
    },
    {
        "text": "Startingstate"
    },
    {
        "text": "Scheduled"
    },
    {
        "text": "Cron"
    },
    {
        "text": "Declares"
    },
    {
        "text": "Timezone"
    },
    {
        "text": "Unlike"
    },
    {
        "text": "March"
    },
    {
        "text": "May"
    },
    {
        "text": "O I"
    },
    {
        "text": "For I"
    },
    {
        "text": "Until"
    },
    {
        "text": "Eventdefining"
    },
    {
        "text": "Until\tSpecific"
    },
    {
        "text": "November"
    },
    {
        "text": "S Eastern Standard Timeas"
    },
    {
        "text": "D D"
    },
    {
        "text": "As\tDefines"
    },
    {
        "text": "Producing"
    },
    {
        "text": "Being"
    },
    {
        "text": "Implementers"
    },
    {
        "text": "Workflow Compensationsection"
    },
    {
        "text": "L P"
    },
    {
        "text": "Specifying"
    },
    {
        "text": "Additional"
    },
    {
        "text": "Implementations"
    },
    {
        "text": "My Test Workflow"
    },
    {
        "text": "My First State"
    },
    {
        "text": "Production"
    },
    {
        "text": "Sales"
    },
    {
        "text": "Py Test Workflow"
    },
    {
        "text": "Unknown"
    },
    {
        "text": "Within"
    },
    {
        "text": "Illegal"
    },
    {
        "text": "Runtime"
    },
    {
        "text": "Known"
    },
    {
        "text": "Referencing"
    },
    {
        "text": "Server"
    },
    {
        "text": "Retrying"
    },
    {
        "text": "Regardless"
    },
    {
        "text": "First"
    },
    {
        "text": "Strategy"
    },
    {
        "text": "Second"
    },
    {
        "text": "Three"
    },
    {
        "text": "Third"
    },
    {
        "text": "Do"
    },
    {
        "text": "Not"
    },
    {
        "text": "Fourth"
    },
    {
        "text": "Strategyretry"
    },
    {
        "text": "Since"
    },
    {
        "text": "Timeout\tWorkflow"
    },
    {
        "text": "Timeout\tActions"
    },
    {
        "text": "Timeout\tBranch"
    },
    {
        "text": "Timeout\tDefault"
    },
    {
        "text": "If Object"
    },
    {
        "text": "Before\tName"
    },
    {
        "text": "Inject States"
    },
    {
        "text": "The Event"
    },
    {
        "text": "Compensating"
    },
    {
        "text": "Instead"
    },
    {
        "text": "New"
    },
    {
        "text": "Purchase"
    },
    {
        "text": "Debit"
    },
    {
        "text": "Cancellation"
    },
    {
        "text": "State C"
    },
    {
        "text": "State A"
    },
    {
        "text": "Eachstates"
    },
    {
        "text": "Serverless Workflow D"
    },
    {
        "text": "Id\tUnique"
    },
    {
        "text": "Overwrites"
    },
    {
        "text": "In Serverless Workflow D"
    },
    {
        "text": "Ref Definitionin"
    },
    {
        "text": "Versioning"
    },
    {
        "text": "Versions"
    },
    {
        "text": "Top"
    },
    {
        "text": "Constants"
    },
    {
        "text": "Translations"
    },
    {
        "text": "Serbian"
    },
    {
        "text": "Spanish"
    },
    {
        "text": "French"
    },
    {
        "text": "Azure"
    },
    {
        "text": "Process Sales Orders"
    },
    {
        "text": "Author Name"
    },
    {
        "text": "Team Name"
    },
    {
        "text": "Logging"
    },
    {
        "text": "Labels"
    },
    {
        "text": "Model"
    },
    {
        "text": "Even"
    },
    {
        "text": "That"
    },
    {
        "text": "New Extension Request"
    },
    {
        "text": "Apache License"
    },
    {
        "text": "Passing"
    },
    {
        "text": "Filters"
    },
    {
        "text": "Custom"
    },
    {
        "text": "Related Definitions"
    },
    {
        "text": "Py"
    },
    {
        "text": "Torch"
    },
    {
        "text": "N Editor Online"
    },
    {
        "text": "Pandas Data"
    },
    {
        "text": "Frame"
    },
    {
        "text": "True"
    },
    {
        "text": "Faker"
    },
    {
        "text": "Tensor"
    },
    {
        "text": "Flow Dataset"
    },
    {
        "text": "Mary"
    },
    {
        "text": "Steven"
    },
    {
        "text": "David"
    },
    {
        "text": "Sophia"
    },
    {
        "text": "Alice"
    },
    {
        "text": "Lee"
    },
    {
        "text": "Smith"
    },
    {
        "text": "Richards"
    },
    {
        "text": "Willis"
    },
    {
        "text": "Brooks"
    },
    {
        "text": "Green"
    },
    {
        "text": "Best"
    },
    {
        "text": "Local"
    },
    {
        "text": "Sports"
    },
    {
        "text": "Summer"
    },
    {
        "text": "Latest"
    },
    {
        "text": "Donna Howard"
    },
    {
        "text": "Mike Scott"
    },
    {
        "text": "Lisa Brown"
    },
    {
        "text": "Tom Wilson"
    },
    {
        "text": "Julia Bell"
    },
    {
        "text": "Sam Williams"
    },
    {
        "text": "Chris Smith"
    },
    {
        "text": "Tomorrow"
    },
    {
        "text": "Mark"
    },
    {
        "text": "Linda"
    },
    {
        "text": "James"
    },
    {
        "text": "Brown"
    },
    {
        "text": "Davis"
    },
    {
        "text": "Wilson"
    },
    {
        "text": "Movie"
    },
    {
        "text": "Amanda Clark"
    },
    {
        "text": "David Lee"
    },
    {
        "text": "Ryan Bell"
    },
    {
        "text": "Pandas"
    },
    {
        "text": "Bob"
    },
    {
        "text": "Charlie"
    },
    {
        "text": "Football"
    },
    {
        "text": "Kate"
    },
    {
        "text": "Sam"
    },
    {
        "text": "Dave"
    },
    {
        "text": "Fashion"
    },
    {
        "text": "Peter"
    },
    {
        "text": "Chris"
    },
    {
        "text": "Emma"
    },
    {
        "text": "Alex"
    },
    {
        "text": "Mike"
    },
    {
        "text": "Dataset"
    },
    {
        "text": "Pickle"
    },
    {
        "text": "Word"
    },
    {
        "text": "Vec"
    },
    {
        "text": "Keras"
    },
    {
        "text": "Logistic"
    },
    {
        "text": "Regression"
    },
    {
        "text": "Read"
    },
    {
        "text": "Classifies"
    },
    {
        "text": "Recommends"
    },
    {
        "text": "Detects"
    },
    {
        "text": "Chatbot Genius"
    },
    {
        "text": "Clicked"
    },
    {
        "text": "Searched"
    },
    {
        "text": "Uploaded"
    },
    {
        "text": "Logged"
    },
    {
        "text": "Accessed"
    },
    {
        "text": "Downloaded"
    },
    {
        "text": "Supports"
    },
    {
        "text": "Anyone"
    },
    {
        "text": "Need"
    },
    {
        "text": "Microsoft"
    },
    {
        "text": "Visual Studio"
    },
    {
        "text": "Datasets"
    },
    {
        "text": "Right"
    },
    {
        "text": "Data Sources"
    },
    {
        "text": "Solution Explorer"
    },
    {
        "text": "Add New Data Source"
    },
    {
        "text": "Configure"
    },
    {
        "text": "The Dataset Designer"
    },
    {
        "text": "Drag"
    },
    {
        "text": "Preview"
    },
    {
        "text": "Typed Datasets"
    },
    {
        "text": "Typed Dataset"
    },
    {
        "text": "Adapters"
    },
    {
        "text": "Fill"
    },
    {
        "text": "Insert"
    },
    {
        "text": "Delete"
    },
    {
        "text": "Path"
    },
    {
        "text": "Found"
    },
    {
        "text": "Scanned"
    },
    {
        "text": "Lab"
    },
    {
        "text": "Graphviz"
    },
    {
        "text": "The Dockerfile"
    },
    {
        "text": "Dockerfile"
    },
    {
        "text": "Ubuntu"
    },
    {
        "text": "This Docker"
    },
    {
        "text": "Unfortunately I"
    },
    {
        "text": "Graphviz Docker"
    },
    {
        "text": "Specifically"
    },
    {
        "text": "Matplotlib"
    },
    {
        "text": "Scikit"
    },
    {
        "text": "Workflow Description Language"
    },
    {
        "text": "Dockstore"
    },
    {
        "text": "Bio"
    },
    {
        "text": "Cromwell"
    },
    {
        "text": "Mini"
    },
    {
        "text": "Inte"
    },
    {
        "text": "Ri"
    },
    {
        "text": "Sama"
    },
    {
        "text": "Blog"
    },
    {
        "text": "Memory"
    },
    {
        "text": "Catcher"
    },
    {
        "text": "Create New Genius"
    },
    {
        "text": "Subscription"
    },
    {
        "text": "Unlimited"
    },
    {
        "text": "Mo"
    },
    {
        "text": "Tus"
    },
    {
        "text": "Marketplace"
    },
    {
        "text": "Search"
    },
    {
        "text": "Lazarus"
    },
    {
        "text": "Trip Advisor"
    },
    {
        "text": "Stock Analyst"
    },
    {
        "text": "Genie"
    },
    {
        "text": "Product Hunter"
    },
    {
        "text": "Minda"
    },
    {
        "text": "Summa"
    },
    {
        "text": "Link"
    },
    {
        "text": "Youtube"
    },
    {
        "text": "Midjourney Helper"
    },
    {
        "text": "Midjourney"
    },
    {
        "text": "Kexin"
    },
    {
        "text": "Morty"
    },
    {
        "text": "Mindverse"
    },
    {
        "text": "Dream Interpreter"
    },
    {
        "text": "Rap God"
    },
    {
        "text": "Hub Trend Watcher"
    },
    {
        "text": "Wise"
    },
    {
        "text": "Buy Assistant"
    },
    {
        "text": "Amazon"
    },
    {
        "text": "Tutor"
    },
    {
        "text": "Movie Critique"
    },
    {
        "text": "Unnamed"
    },
    {
        "text": "Speak"
    },
    {
        "text": "Buddhism"
    },
    {
        "text": "Genious"
    },
    {
        "text": "Ask"
    },
    {
        "text": "Candy"
    },
    {
        "text": "Babe"
    },
    {
        "text": "Eulaw"
    },
    {
        "text": "Awwsum"
    },
    {
        "text": "Naval"
    },
    {
        "text": "Autism Aware"
    },
    {
        "text": "Thought"
    },
    {
        "text": "Zn"
    },
    {
        "text": "Bell"
    },
    {
        "text": "Crypto"
    },
    {
        "text": "I Genius"
    },
    {
        "text": "Knows U"
    },
    {
        "text": "I Design"
    },
    {
        "text": "P Support"
    },
    {
        "text": "Beer Awards"
    },
    {
        "text": "Genshin"
    },
    {
        "text": "Fan"
    },
    {
        "text": "C Legal Help"
    },
    {
        "text": "Allow Law Genuis"
    },
    {
        "text": "He"
    },
    {
        "text": "Lluvia"
    },
    {
        "text": "Sparrow"
    },
    {
        "text": "Professor"
    },
    {
        "text": "Ele"
    },
    {
        "text": "Guy"
    },
    {
        "text": "Knowall"
    },
    {
        "text": "Idan"
    },
    {
        "text": "Michaelim"
    },
    {
        "text": "The Defect Doctor"
    },
    {
        "text": "K Prints"
    },
    {
        "text": "K Prints Assitant"
    },
    {
        "text": "Congming Da"
    },
    {
        "text": "Game"
    },
    {
        "text": "Master"
    },
    {
        "text": "Dark Souls"
    },
    {
        "text": "Gs"
    },
    {
        "text": "Dr"
    },
    {
        "text": "Adeli"
    },
    {
        "text": "I Geniuses"
    },
    {
        "text": "Geniuses"
    },
    {
        "text": "Featured"
    },
    {
        "text": "Trending"
    },
    {
        "text": "Newest"
    },
    {
        "text": "My Geniuses"
    },
    {
        "text": "Industry Analyst"
    },
    {
        "text": "S Stock Analyst"
    },
    {
        "text": "Template"
    },
    {
        "text": "Persona"
    },
    {
        "text": "Knowledge"
    },
    {
        "text": "Skills"
    },
    {
        "text": "Autonomy"
    },
    {
        "text": "Wisebuy Assistant"
    },
    {
        "text": "I Copilots"
    },
    {
        "text": "Book"
    },
    {
        "text": "Jira"
    },
    {
        "text": "Book A"
    },
    {
        "text": "I Lens"
    },
    {
        "text": "Aktxn"
    },
    {
        "text": "Oh"
    },
    {
        "text": "Vt"
    },
    {
        "text": "S A"
    },
    {
        "text": "I Agent Engine"
    },
    {
        "text": "Enterprise"
    },
    {
        "text": "Pro"
    },
    {
        "text": "I Open"
    },
    {
        "text": "Socket"
    },
    {
        "text": "S Marketplace"
    },
    {
        "text": "I Copilot"
    },
    {
        "text": "Learned"
    },
    {
        "text": "Chat"
    },
    {
        "text": "Chatbot"
    },
    {
        "text": "Avatar"
    },
    {
        "text": "Ready"
    },
    {
        "text": "Player"
    },
    {
        "text": "Me"
    },
    {
        "text": "Picture"
    },
    {
        "text": "Learning Knowledge"
    },
    {
        "text": "Genius Updated"
    },
    {
        "text": "Learning A"
    },
    {
        "text": "Library"
    },
    {
        "text": "Validated"
    },
    {
        "text": "Google"
    },
    {
        "text": "Serper"
    },
    {
        "text": "From Library"
    },
    {
        "text": "Skill"
    },
    {
        "text": "Assistant"
    },
    {
        "text": "Tube"
    },
    {
        "text": "Get Started"
    },
    {
        "text": "Voice"
    },
    {
        "text": "Biography"
    },
    {
        "text": "Add Knowledge"
    },
    {
        "text": "View Knowledge"
    },
    {
        "text": "Edit"
    },
    {
        "text": "Books"
    },
    {
        "text": "Add Skills"
    },
    {
        "text": "View Skills"
    },
    {
        "text": "Google Books A"
    },
    {
        "text": "Content"
    },
    {
        "text": "Accept"
    },
    {
        "text": "Book Search"
    },
    {
        "text": "Authorization"
    },
    {
        "text": "Weather Search"
    },
    {
        "text": "Map"
    },
    {
        "text": "Workflow Book Search"
    },
    {
        "text": "Call A"
    },
    {
        "text": "I Book Search"
    },
    {
        "text": "Book Search Workflow"
    },
    {
        "text": "Else"
    },
    {
        "text": "Add Memory"
    },
    {
        "text": "View Memory"
    },
    {
        "text": "Harry Potter"
    },
    {
        "text": "Philosopher"
    },
    {
        "text": "Stone"
    },
    {
        "text": "The Lord"
    },
    {
        "text": "Rings"
    },
    {
        "text": "Benzinga"
    },
    {
        "text": "Virtual"
    },
    {
        "text": "Creation"
    },
    {
        "text": "Launch"
    },
    {
        "text": "Closed"
    },
    {
        "text": "Beta"
    },
    {
        "text": "D H"
    },
    {
        "text": "Load Data"
    },
    {
        "text": "Find Result"
    },
    {
        "text": "Marketpl"
    },
    {
        "text": "Mind A"
    },
    {
        "text": "Num"
    },
    {
        "text": "Spa"
    },
    {
        "text": "Cy"
    },
    {
        "text": "Twitter"
    },
    {
        "text": "Beautiful"
    },
    {
        "text": "Soup"
    },
    {
        "text": "Selenium"
    },
    {
        "text": "Telegram"
    },
    {
        "text": "Connecting Text"
    },
    {
        "text": "Images"
    },
    {
        "text": "Xiv"
    },
    {
        "text": "Contrastive Language"
    },
    {
        "text": "Image Pre"
    },
    {
        "text": "Image Pretraining"
    },
    {
        "text": "Image Encoder"
    },
    {
        "text": "Text Encoder"
    },
    {
        "text": "Res"
    },
    {
        "text": "Net"
    },
    {
        "text": "Guided Language"
    },
    {
        "text": "Image Diffusion"
    },
    {
        "text": "Generation"
    },
    {
        "text": "Editing"
    },
    {
        "text": "Diffusion"
    },
    {
        "text": "Score"
    },
    {
        "text": "Add Key"
    },
    {
        "text": "Input Keyscontent"
    },
    {
        "text": "Model Name"
    },
    {
        "text": "Turbo"
    },
    {
        "text": "Prompt Template"
    },
    {
        "text": "Iam"
    },
    {
        "text": "Then"
    },
    {
        "text": "Through Discord"
    },
    {
        "text": "Interact"
    },
    {
        "text": "Midjourney Bot"
    },
    {
        "text": "Discord"
    },
    {
        "text": "Command"
    },
    {
        "text": "Commands"
    },
    {
        "text": "The Midjourney Bot"
    },
    {
        "text": "Ratherthan"
    },
    {
        "text": "Show"
    },
    {
        "text": "California"
    },
    {
        "text": "Vibrant"
    },
    {
        "text": "Trial"
    },
    {
        "text": "Jobs"
    },
    {
        "text": "A Job"
    },
    {
        "text": "Fast Time Remaining"
    },
    {
        "text": "Prompt Length"
    },
    {
        "text": "Prompts"
    },
    {
        "text": "Single"
    },
    {
        "text": "Very"
    },
    {
        "text": "Concentrate"
    },
    {
        "text": "Grammar"
    },
    {
        "text": "More"
    },
    {
        "text": "Remove"
    },
    {
        "text": "Fewer"
    },
    {
        "text": "Usecommas"
    },
    {
        "text": "Midjourney Model Version"
    },
    {
        "text": "Want"
    },
    {
        "text": "Think About What Details Matter"
    },
    {
        "text": "Anything"
    },
    {
        "text": "Be"
    },
    {
        "text": "Try"
    },
    {
        "text": "Thinkabout"
    },
    {
        "text": "Subject"
    },
    {
        "text": "Medium"
    },
    {
        "text": "Environment"
    },
    {
        "text": "Narnia"
    },
    {
        "text": "Emerald"
    },
    {
        "text": "Lighting"
    },
    {
        "text": "Color"
    },
    {
        "text": "Mood"
    },
    {
        "text": "Sedate"
    },
    {
        "text": "Composition"
    },
    {
        "text": "Portrait"
    },
    {
        "text": "Use Collective Nouns"
    },
    {
        "text": "Plural"
    },
    {
        "text": "Collective"
    },
    {
        "text": "Parameters Available"
    },
    {
        "text": "Aspect Ratios"
    },
    {
        "text": "Change"
    },
    {
        "text": "Chaos"
    },
    {
        "text": "Higher"
    },
    {
        "text": "Negative"
    },
    {
        "text": "Quality"
    },
    {
        "text": "Repeat"
    },
    {
        "text": "Seed"
    },
    {
        "text": "The Midjourney"
    },
    {
        "text": "Stop"
    },
    {
        "text": "Stopping"
    },
    {
        "text": "Style"
    },
    {
        "text": "Niji Model Version"
    },
    {
        "text": "Stylize"
    },
    {
        "text": "Uplight"
    },
    {
        "text": "Upbeta"
    },
    {
        "text": "Different"
    },
    {
        "text": "Niji"
    },
    {
        "text": "An"
    },
    {
        "text": "Testp"
    },
    {
        "text": "Midjourneyalgorithm"
    },
    {
        "text": "Mid"
    },
    {
        "text": "Journey"
    },
    {
        "text": "Erlenmeyer Flask"
    },
    {
        "text": "Dreamy"
    },
    {
        "text": "Mamiya"
    },
    {
        "text": "Fujifilm Pro"
    },
    {
        "text": "Leica"
    },
    {
        "text": "Kodak"
    },
    {
        "text": "American"
    },
    {
        "text": "Mysteriousadventure"
    },
    {
        "text": "Plants"
    },
    {
        "text": "Fireflies"
    },
    {
        "text": "Pixar"
    },
    {
        "text": "Whatever I"
    },
    {
        "text": "Act"
    },
    {
        "text": "Another"
    },
    {
        "text": "Teenage"
    },
    {
        "text": "Tips"
    },
    {
        "text": "C Painting"
    },
    {
        "text": "Hide Display"
    },
    {
        "text": "Endpoint"
    },
    {
        "text": "Draw"
    },
    {
        "text": "Request Bodyprompt"
    },
    {
        "text": "Drawing"
    },
    {
        "text": "Dream Painting"
    },
    {
        "text": "Test Run"
    },
    {
        "text": "Exit"
    },
    {
        "text": "Io"
    },
    {
        "text": "Chamfer"
    },
    {
        "text": "Block"
    },
    {
        "text": "Blocknameparameterscontentfunctionsconnectconnections"
    },
    {
        "text": "Blockconnectconnections"
    },
    {
        "text": "8241"
    },
    {
        "text": "8252"
    },
    {
        "text": "8244"
    },
    {
        "text": "8245"
    },
    {
        "text": "8246"
    },
    {
        "text": "8250"
    },
    {
        "text": "8256"
    },
    {
        "text": "0"
    },
    {
        "text": "200"
    },
    {
        "text": "8249"
    },
    {
        "text": "8251"
    },
    {
        "text": "8253"
    },
    {
        "text": "8254"
    },
    {
        "text": "8255"
    },
    {
        "text": "8243"
    },
    {
        "text": "23"
    },
    {
        "text": "07"
    },
    {
        "text": "2023"
    },
    {
        "text": "80"
    },
    {
        "text": "82"
    },
    {
        "text": "85"
    },
    {
        "text": "8242"
    },
    {
        "text": "51"
    },
    {
        "text": "505"
    },
    {
        "text": "09"
    },
    {
        "text": "20230420005959"
    },
    {
        "text": "21"
    },
    {
        "text": "11179"
    },
    {
        "text": "2015"
    },
    {
        "text": "61932"
    },
    {
        "text": "20200821"
    },
    {
        "text": "00"
    },
    {
        "text": "104112"
    },
    {
        "text": "64"
    },
    {
        "text": "50"
    },
    {
        "text": "60"
    },
    {
        "text": "111"
    },
    {
        "text": "40"
    },
    {
        "text": "1234"
    },
    {
        "text": "12345"
    },
    {
        "text": "54321"
    },
    {
        "text": "4321"
    },
    {
        "text": "6789"
    },
    {
        "text": "30"
    },
    {
        "text": "20"
    },
    {
        "text": "42"
    },
    {
        "text": "9001"
    },
    {
        "text": "43"
    },
    {
        "text": "18"
    },
    {
        "text": "26"
    },
    {
        "text": "630"
    },
    {
        "text": "0192"
    },
    {
        "text": "0123"
    },
    {
        "text": "4567"
    },
    {
        "text": "8888"
    },
    {
        "text": "8910"
    },
    {
        "text": "8080"
    },
    {
        "text": "8601"
    },
    {
        "text": "15"
    },
    {
        "text": "25"
    },
    {
        "text": "55"
    },
    {
        "text": "5678"
    },
    {
        "text": "9910"
    },
    {
        "text": "2020"
    },
    {
        "text": "01"
    },
    {
        "text": "31"
    },
    {
        "text": "02"
    },
    {
        "text": "110"
    },
    {
        "text": "70"
    },
    {
        "text": "16"
    },
    {
        "text": "100"
    },
    {
        "text": "03"
    },
    {
        "text": "05"
    },
    {
        "text": "2019"
    },
    {
        "text": "45"
    },
    {
        "text": "2021"
    },
    {
        "text": "404"
    },
    {
        "text": "22"
    },
    {
        "text": "32"
    },
    {
        "text": "27"
    },
    {
        "text": "36"
    },
    {
        "text": "29"
    },
    {
        "text": "04"
    },
    {
        "text": "06"
    },
    {
        "text": "08"
    },
    {
        "text": "41"
    },
    {
        "text": "24"
    },
    {
        "text": "28"
    },
    {
        "text": "37"
    },
    {
        "text": "19"
    },
    {
        "text": "1000"
    },
    {
        "text": "8765"
    },
    {
        "text": "34"
    },
    {
        "text": "56"
    },
    {
        "text": "2022"
    },
    {
        "text": "1746675"
    },
    {
        "text": "8081"
    },
    {
        "text": "467431"
    },
    {
        "text": "216719"
    },
    {
        "text": "135215"
    },
    {
        "text": "11988"
    },
    {
        "text": "64712"
    },
    {
        "text": "7607"
    },
    {
        "text": "5398"
    },
    {
        "text": "40811"
    },
    {
        "text": "3088"
    },
    {
        "text": "2726"
    },
    {
        "text": "2784"
    },
    {
        "text": "1524"
    },
    {
        "text": "3482"
    },
    {
        "text": "2164"
    },
    {
        "text": "1693"
    },
    {
        "text": "663"
    },
    {
        "text": "1323"
    },
    {
        "text": "1103"
    },
    {
        "text": "672"
    },
    {
        "text": "912"
    },
    {
        "text": "1170"
    },
    {
        "text": "281"
    },
    {
        "text": "1099"
    },
    {
        "text": "1027549"
    },
    {
        "text": "99"
    },
    {
        "text": "49"
    },
    {
        "text": "1016053"
    },
    {
        "text": "8443"
    },
    {
        "text": "20230404005229"
    },
    {
        "text": "2201"
    },
    {
        "text": "11903"
    },
    {
        "text": "2302"
    },
    {
        "text": "08043"
    },
    {
        "text": "64903"
    },
    {
        "text": "64902"
    },
    {
        "text": "4294967295"
    },
    {
        "text": "911"
    },
    {
        "text": "800"
    },
    {
        "text": "900"
    },
    {
        "text": "64905"
    },
    {
        "text": "Extracting response text from JSON"
    },
    {
        "text": "Checking the quality of the response"
    },
    {
        "text": "Caching of frequent queries"
    },
    {
        "text": "Scaling to multiple nodes"
    },
    {
        "text": "Performance monitoring"
    },
    {
        "text": "Copy"
    },
    {
        "text": "The block type is \"code\""
    },
    {
        "text": "Unique identifier"
    },
    {
        "text": "Input parameter with selection from a list"
    },
    {
        "text": "Python code block"
    },
    {
        "text": "Output data description"
    },
    {
        "text": "Usage hint"
    },
    {
        "text": "This JSON can be imported into the diagram editor to create a code block"
    },
    {
        "text": "Moneybox"
    },
    {
        "text": "//"
    },
    {
        "text": "configuration as in a regular LLM"
    },
    {
        "text": "These blocks can be used as a basis for demo workflows"
    },
    {
        "text": "Workflow Build Process - DNAnexus Documentation - documentation for building workflows on the DNAnexus platform, which uses the same JSON format as the MindOS platform"
    },
    {
        "text": "Serverless Workflow Specification - GitHub - The standard on which the MindOS platform metadata specification is based"
    },
    {
        "text": "Workflow Builder error messages in the server log file - IBM - documentation on debugging workflow builder errors on the IBM platform, which may also be useful for the MindOS platform"
    },
    {
        "text": "1"
    },
    {
        "text": "github"
    },
    {
        "text": "com"
    },
    {
        "text": "2"
    },
    {
        "text": "documentation"
    },
    {
        "text": "dnanexus"
    },
    {
        "text": "com"
    },
    {
        "text": "3"
    },
    {
        "text": "ibm"
    },
    {
        "text": "com"
    },
    {
        "text": "The Serverless Workflow project defines a vendor-neutral and declarative workflow language,"
    },
    {
        "text": "targeting the Serverless computing technology domain"
    },
    {
        "text": "This document represents the current state of the specification"
    },
    {
        "text": "It includes all features so far released"
    },
    {
        "text": "as well as all features planned to be added in the next release"
    },
    {
        "text": "Workflows allow us to capture and organize business requirements in a unified manner"
    },
    {
        "text": "They can bridge the gap between how we express and model business logic"
    },
    {
        "text": "business logic and solutions"
    },
    {
        "text": "Selecting the appropriate workflow language for our business and technology domains is"
    },
    {
        "text": "a very important decision to be considered"
    },
    {
        "text": "Serverless Workflow focuses on defining a **vendor-neutral**, **platform-independent**, and **declarative** workflow"
    },
    {
        "text": "language that targets the serverless computing technology domain"
    },
    {
        "text": "It can be used to significantly bridge the gap between your unique business domain and the target technology domain"
    },
    {
        "text": "The lack of a common way to define and model workflows means that we must constantly re-learn"
    },
    {
        "text": "how to write them"
    },
    {
        "text": "This also limits the potential for common libraries, tooling and"
    },
    {
        "text": "infrastructure to aid workflow modeling and execution across different platforms"
    },
    {
        "text": "Portability as well as productivity that can be achieved from workflow orchestration is hindered overall"
    },
    {
        "text": "Serverless Workflow addresses the need for a community-driven, vendor-neutral and a platform-independent"
    },
    {
        "text": "workflow language specification that targets the serverless computing technology domain"
    },
    {
        "text": "Having and using a specification-based workflow language allows us to model our workflows once and deploy them"
    },
    {
        "text": "onto many different container/cloud platforms, expecting the same execution results"
    },
    {
        "text": "</p>"
    },
    {
        "text": "allow users to define additional, non-execution-related workflow information"
    },
    {
        "text": "This information can be used to improve"
    },
    {
        "text": "workflow performance"
    },
    {
        "text": "A workflow definition is a JSON or YAML file that conforms to the Serverless Workflow specification DSL"
    },
    {
        "text": "A business solution can be composed of any number of related workflow definitions"
    },
    {
        "text": "A workflow instance represents a single workflow execution corresponding to the instructions provided by a"
    },
    {
        "text": "workflow definition"
    },
    {
        "text": "A workflow instance can be short or long-running"
    },
    {
        "text": "A single workflow instance"
    },
    {
        "text": "should be isolated, meaning it should not share state and data with other workflow instances"
    },
    {
        "text": "Workflow instances should be able to communicate with each other via events"
    },
    {
        "text": "Depending on their workflow definition, workflow instances can be short-lived or"
    },
    {
        "text": "can execute for days, weeks, or years"
    },
    {
        "text": "Each workflow instances should have its unique identifier, which should remain"
    },
    {
        "text": "unchanged throughout its execution"
    },
    {
        "text": "Workflow instances can be started providing some data input"
    },
    {
        "text": "This is described in detail in the"
    },
    {
        "text": "Workflow instances can also wait for examples to start their execution, which is the case"
    },
    {
        "text": "The workflow definition also explicitly defines when a workflow instance should be completed"
    },
    {
        "text": "For long-running workflow-executions, you can utilize the `keepActive` workflow property which"
    },
    {
        "text": "provides more control as to when exactly to terminate workflow execution"
    },
    {
        "text": "In cases where a"
    },
    {
        "text": "workflow execution should be continued as a new one, the DSL also provides the `continueAs` property which is described"
    },
    {
        "text": "Data flow and execution logic go hand in hand, meaning as workflow execution follows the workflow definition"
    },
    {
        "text": "States can also consume events as well as invoke services"
    },
    {
        "text": "These event payloads and service invocation results"
    },
    {
        "text": "input and output, action inputs and results, and event payloads"
    },
    {
        "text": "Multiple filters can be combined to gain high level of control of your workflow state data"
    },
    {
        "text": "You can find an example of that in"
    },
    {
        "text": "Data from consumed events,and action execution results are added/merged"
    },
    {
        "text": "```json"
    },
    {
        "text": "When a state completes its execution, its data output is passed to the state's data input it transitions to"
    },
    {
        "text": "Each workflow execution should produce a data output"
    },
    {
        "text": "The workflow data output is the data output of the last executed workflow state"
    },
    {
        "text": "<details><summary><strong>Click to view example definition</strong></summary>"
    },
    {
        "text": "<p>"
    },
    {
        "text": "<table>"
    },
    {
        "text": "<tr>"
    },
    {
        "text": "<th>JSON</th>"
    },
    {
        "text": "<th>YAML</th>"
    },
    {
        "text": "</tr>"
    },
    {
        "text": "</td>"
    },
    {
        "text": "```yaml"
    },
    {
        "text": "</table>"
    },
    {
        "text": "</details>"
    },
    {
        "text": "The state data filters `input` property expression is applied when the workflow transitions to the current state and receives its data input"
    },
    {
        "text": "It can be used to select only data that is needed and disregard what is not needed"
    },
    {
        "text": "If `input` is not defined or does not select any parts of the state's data input, its data input is not filtered"
    },
    {
        "text": "The state data filter `output` property expression is applied right before the state transitions to the next state defined"
    },
    {
        "text": "It filters the state's data output to be passed as data input to the transitioning state"
    },
    {
        "text": "If the current state is the workflow end state, the filtered state's data output becomes the workflow data output"
    },
    {
        "text": "If `output` is not defined or does not select any parts of the state's data output, its data output is not filtered"
    },
    {
        "text": "Results of the `input` expression should become the state data input"
    },
    {
        "text": "Results of the `output` expression should become the state data output"
    },
    {
        "text": "For the first example, our state only cares about fruits data, and we want to disregard the vegetables"
    },
    {
        "text": "To do this"
    },
    {
        "text": "For our second example, let's say that we are interested in the only vegetable \"veggie-like\""
    },
    {
        "text": "Here we have two ways of filtering our data, depending on if actions within our state need access to all vegetables, or"
    },
    {
        "text": "only the ones that are \"veggie-like\""
    },
    {
        "text": "The states data input filter selects all the vegetables from the main data input"
    },
    {
        "text": "Once all actions have performed, before the state transition"
    },
    {
        "text": "* Filter the state data to select only the data that can be used within function definition arguments using its `fromStateData` property"
    },
    {
        "text": "* Filter the action results to select only the result data that should be added/merged back into the state data"
    },
    {
        "text": "using its `results` property"
    },
    {
        "text": "* Select the part of state data which the action data results should be added/merged to"
    },
    {
        "text": "using the `toStateData` property"
    },
    {
        "text": "To give an example, let's say we have an action which returns a list of breads and pasta types"
    },
    {
        "text": "For our workflow, we are only interested into breads and not the pasta"
    },
    {
        "text": "In this case, our `results` select the first bread and the second element of the pasta array"
    },
    {
        "text": "The `toStateData` expression then selects the `itemsToBuyAtStore` array of the state data to add/merge these results"
    },
    {
        "text": "In the case action results should not be added/merged to state data, we can set the `useResults` property to `false`"
    },
    {
        "text": "In this case, the `results` and `toStateData` properties should be ignored, and nothing is added/merged to state data"
    },
    {
        "text": "Event data filters can be used to filter consumed event payloads"
    },
    {
        "text": "* Filter the event payload to select only the data that should be added/merged into the state data"
    },
    {
        "text": "using its `data` property"
    },
    {
        "text": "* Select the part of state data into which the event payload should be added/merged into"
    },
    {
        "text": "Allows event data to be filtered and added to or merged with the state data"
    },
    {
        "text": "All events have to be in the CloudEvents format"
    },
    {
        "text": "In the case event data/payload should not be added/merged to state data, we can set the `useData` property to `false`"
    },
    {
        "text": "In this case, the `data` and `toStateData` properties should be ignored, and nothing is added/merged to state data"
    },
    {
        "text": "a workflow with a single event state and show how data filters can be combined"
    },
    {
        "text": "Here is a sample diagram showing our workflow, each numbered step on this diagram shows a certain defined point during"
    },
    {
        "text": "workflow execution at which data filters are invoked and correspond to the numbered items below"
    },
    {
        "text": "Workflow executes its starting state, namely the \"WaitForCustomerToArrive\" event state"
    },
    {
        "text": "The event state **stateDataFilter** is invoked to filter its data input"
    },
    {
        "text": "The filters \"input\" expression is evaluated and"
    },
    {
        "text": "selects only the \"greetings\" data"
    },
    {
        "text": "The rest of the state data input should be disregarded"
    },
    {
        "text": "Its \"data\" expression selects the \"customer\" object from the events data"
    },
    {
        "text": "The \"toStateData\" expression"
    },
    {
        "text": "says that we should add/merge this selected event data to the state data in its \"customerInfo\" property"
    },
    {
        "text": "If this property"
    },
    {
        "text": "exists it should be merged, if it does not exist, one should be created"
    },
    {
        "text": "Before the first action is executed, its actionDataFilter is invoked"
    },
    {
        "text": "Its \"fromStateData\" expression filters"
    },
    {
        "text": "the current state data to select from its data that should be available to action arguments"
    },
    {
        "text": "In this example"
    },
    {
        "text": "it selects the \"hello\" and \"customerInfo\" properties from the current state data"
    },
    {
        "text": "At this point the action is executed"
    },
    {
        "text": "The action filters \"toStateData\" expression then defines that we want to add/merge this action result to"
    },
    {
        "text": "state data under the \"finalCustomerGreeting\" element"
    },
    {
        "text": "When our event state finishes its execution, the states \"stateDataFilter\" \"output\" filter expression is executed"
    },
    {
        "text": "to filter the state data to create the final state data output"
    },
    {
        "text": "Event and action data filters can be used to give more details about this operation"
    },
    {
        "text": "to the state data"
    },
    {
        "text": "Merging should be applied to the entire state data JSON element"
    },
    {
        "text": "In case of event and action filters, their \"toStateData\" property can be defined to select a specific element"
    },
    {
        "text": "of the state data with which merging should be done against"
    },
    {
        "text": "If this element does not exist, a new one should"
    },
    {
        "text": "be created first"
    },
    {
        "text": "that you should not merge arrays with objects or objects with arrays etc"
    },
    {
        "text": "When merging elements of type object should be done by inserting all the key-value pairs from both objects into"
    },
    {
        "text": "a single combined object"
    },
    {
        "text": "If both objects contain a value for the same key, the object of the event data/action results"
    },
    {
        "text": "Merging array types should be done by concatenating them into a larger array including unique elements of both arrays"
    },
    {
        "text": "Merging number types should be done by overwriting the data from events data/action results into the merging element of the state data"
    },
    {
        "text": "We can define if functions are invoked sync or async"
    },
    {
        "text": "Reference"
    },
    {
        "text": "define when the service operations should be invoked during workflow execution, as well as the data parameters"
    },
    {
        "text": "passed to them if needed"
    },
    {
        "text": "Note that with Serverless Workflow, we can also define invocation of services which are triggered via an event"
    },
    {
        "text": "Because of an overall lack of a common way to describe different services and their operations,"
    },
    {
        "text": "many workflow languages typically chose to define custom function definitions"
    },
    {
        "text": "This approach, however, often runs into issues such as lack of portability, limited capabilities, as well as"
    },
    {
        "text": "forcing non-workflow-specific information, such as service authentication, to be added inside the workflow language"
    },
    {
        "text": "To avoid these issues, the Serverless Workflow specification mandates that details about"
    },
    {
        "text": "OpenAPI is a language-agnostic standard that describes discovery of RESTful services"
    },
    {
        "text": "This allows Serverless Workflow language to describe RESTful services in a portable"
    },
    {
        "text": "way, as well as workflow runtimes to utilize OpenAPI tooling and APIs to invoke service operations"
    },
    {
        "text": "It can, as previously mentioned be referenced during workflow execution when the invocation of this service is desired"
    },
    {
        "text": "```text"
    },
    {
        "text": "Also note that the referenced function definition type in this case must have the value `asyncapi`"
    },
    {
        "text": "Similar to defining invocations of operations on RESTful services, you can also use the workflow"
    },
    {
        "text": "a widely used RPC system"
    },
    {
        "text": "and the methods on those services that can be invoked"
    },
    {
        "text": "Let's look at an example of invoking a service method using RPC"
    },
    {
        "text": "For this example let's say we have the following"
    },
    {
        "text": "Note that the referenced function definition type in this case must be `rpc`"
    },
    {
        "text": "```graphql"
    },
    {
        "text": "Similar to defining invocations of operations on GraphQL services, you can also use workflow"
    },
    {
        "text": "In order to ensure compatibility of OData support across runtimes,"
    },
    {
        "text": "can also be used to define expressions that should be evaluated during workflow execution"
    },
    {
        "text": "Defining expressions as part of function definitions has the benefit of being able to reference"
    },
    {
        "text": "them by their logical name through workflow states where expression evaluation is required"
    },
    {
        "text": "Expression functions must declare their `type` parameter to be `expression`"
    },
    {
        "text": "Here we define two reusable expression functions"
    },
    {
        "text": "Expressions in Serverless Workflow"
    },
    {
        "text": "can be evaluated against the workflow, or workflow state data"
    },
    {
        "text": "Note that different data filters play a big role as to which parts of the"
    },
    {
        "text": "workflow data are being evaluated by the expressions"
    },
    {
        "text": "Reference the"
    },
    {
        "text": "This state defines an invocation of the \"Increment Count Function\" expression function defined in our workflow definition"
    },
    {
        "text": "This triggers the evaluation of the defined expression"
    },
    {
        "text": "The input of this expression is by default the current state data"
    },
    {
        "text": "Just like with \"rest\", and \"rpc\" type functions, expression functions also produce a result"
    },
    {
        "text": "In this case"
    },
    {
        "text": "the result of the expression is just the number 1"
    },
    {
        "text": "``` json"
    },
    {
        "text": "Note that the used function definition type in this case must be `expression`"
    },
    {
        "text": "the specification"
    },
    {
        "text": "Some runtime implementations might support additional function types that extend the ones"
    },
    {
        "text": "When a custom function type is specified, the operation property value has a **custom format**, meaning that"
    },
    {
        "text": "its format is controlled by the runtime which provides the custom function type"
    },
    {
        "text": "Note that different data filters play a big role as to which parts of the states data are to be used when the expression is"
    },
    {
        "text": "evaluated"
    },
    {
        "text": "Reference the"
    },
    {
        "text": "Serverless Workflow does not mandate the use of jq and it's possible to use an expression language"
    },
    {
        "text": "of your choice with the restriction that a single one must be used for all expressions"
    },
    {
        "text": "in a workflow definition"
    },
    {
        "text": "If a different expression language needs to be used, make sure to set the workflow"
    },
    {
        "text": "`expressionLang` property to identify it to runtime implementations"
    },
    {
        "text": "Note that using a non-default expression language could lower the portability of your workflow definitions"
    },
    {
        "text": "across multiple container/cloud platforms"
    },
    {
        "text": "are written using the default jq syntax"
    },
    {
        "text": "Where `expression` can be either an in-line expression, or a reference to a"
    },
    {
        "text": "Where `fn` is the namespace of the defined expression functions and"
    },
    {
        "text": "`myExprName` is the unique expression function name"
    },
    {
        "text": "We will get back to this function definition in just a bit, but now let's take a look at using"
    },
    {
        "text": "In this case our input parameter `applicantName` would be set to \"John Doe\""
    },
    {
        "text": "Expressions can also be used to select and manipulate state data, this is in particularly useful for"
    },
    {
        "text": "state data filters"
    },
    {
        "text": "As previously mentioned, expressions are evaluated against certain subsets of data"
    },
    {
        "text": "For example"
    },
    {
        "text": "which would set the workflow version to \"1"
    },
    {
        "text": "0"
    },
    {
        "text": "0\""
    },
    {
        "text": "Note that the workflow \"id\" property value is not allowed to use an expression"
    },
    {
        "text": "The workflow"
    },
    {
        "text": "definition \"id\" must be a constant value"
    },
    {
        "text": "Defines the top-level structure of a serverless workflow model"
    },
    {
        "text": "Following figure describes the main workflow definition blocks"
    },
    {
        "text": "The `id` property defines the unique, domain-specific workflow identifier, for example \"orders\", \"payment\", etc"
    },
    {
        "text": "The `key` property defines the unique, domain-specific workflow identifier"
    },
    {
        "text": "It can be used when the `id` property is auto-generated by a content-management system for example"
    },
    {
        "text": "In these cases, you can specify the `key` property to be the domain-specific identifier of the workflow definition"
    },
    {
        "text": "The `id` and `key` properties are mutually exclusive, meaning you cannot define both"
    },
    {
        "text": "The `name` property is the workflow logical name"
    },
    {
        "text": "The `description` property can be used to give further information about the workflow"
    },
    {
        "text": "The `annotations` property defines a list of helpful terms describing the workflows intended purpose, subject areas, or other important qualities,"
    },
    {
        "text": "The `dataInputSchema` and `dataOutputSchema` properties can be used to validate input and output data against a defined JSON Schema"
    },
    {
        "text": "The `failOnValidationErrors` property determines what should be done when the workflow output does not match the provided schema"
    },
    {
        "text": "If `failOnValidationErrors` is true, an error should be thrown"
    },
    {
        "text": "If executed within a subprocess, that error can be be handled by the parent workflow"
    },
    {
        "text": "If `failOnValidationErrors` is false, the error should not be propagated"
    },
    {
        "text": "It is up to the implementor to warn the user about that fact"
    },
    {
        "text": "For example, printing a log"
    },
    {
        "text": "Both properties can be expressed as object or string type"
    },
    {
        "text": "If using object type, their `schema` property might be an URI, which points to the JSON schema used to validate the workflow data input, or it might be the JSON schema object"
    },
    {
        "text": "`failOnValidationErrors` is optional, default value is `true`"
    },
    {
        "text": "If using string type, then the string value is the external schema URI and `failOnValidationErrors` default value of `true` is assumed"
    },
    {
        "text": "The `secrets` property allows you to use sensitive information such as passwords, OAuth tokens, ssh keys, etc"
    },
    {
        "text": "inside your"
    },
    {
        "text": "Workflow expressions"
    },
    {
        "text": "It has two possible types, `string` or `array`"
    },
    {
        "text": "If `string` type, it is an URI pointing to a JSON or YAML document"
    },
    {
        "text": "The `constants` property can be used to define Workflow constants values"
    },
    {
        "text": "It has two possible types, `string` or `object`"
    },
    {
        "text": "This property is not required"
    },
    {
        "text": "If not defined, the workflow starting state has to be"
    },
    {
        "text": "The `specVersion` property is used to set the Serverless Workflow specification release version"
    },
    {
        "text": "the workflow markup adheres to"
    },
    {
        "text": "its value should be set to `\"0"
    },
    {
        "text": "8\"`"
    },
    {
        "text": "The `expressionLang` property can be used to identify the expression language used for all expressions in"
    },
    {
        "text": "with an expression language / syntax other than the default"
    },
    {
        "text": "The `timeouts` property is used to define the default workflow timeouts for workflow, state, action, and branch"
    },
    {
        "text": "The `error` property is used to define checked errors that can be explicitly handled during workflow execution"
    },
    {
        "text": "Auth definitions can be used to define authentication that should be used to access"
    },
    {
        "text": "The `authRef` property is used to reference an authentication definition in"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "Referenced resource can be used by multiple workflow definitions"
    },
    {
        "text": "For more information about"
    },
    {
        "text": "The `keepActive` property allows you to change the default behavior of workflow instances"
    },
    {
        "text": "Setting the `keepActive` property to `true` allows you to change this default behavior in that a workflow instance"
    },
    {
        "text": "The `extensions` property can be used to define extensions for this workflow definition"
    },
    {
        "text": "Workflow states define building blocks of the workflow execution instructions"
    },
    {
        "text": "They define the"
    },
    {
        "text": "control flow logic instructions on what the workflow is supposed to do"
    },
    {
        "text": "Event states await one or more events and perform actions when they are received"
    },
    {
        "text": "If defined as the workflow starting state, the event state definition controls when the workflow"
    },
    {
        "text": "instances should be created"
    },
    {
        "text": "The `exclusive` property determines if the state should wait for any of the defined events in the `onEvents` array, or"
    },
    {
        "text": "If the Event state in this case is a workflow starting state, the occurrence of *any* of the defined events would start a new workflow instance"
    },
    {
        "text": "If the Event state in this case is a workflow starting state, the occurrence of *all* defined events would start a new"
    },
    {
        "text": "workflow instance"
    },
    {
        "text": "In order to consider only events that are related to each other, we need to set the `correlation` property in the workflow"
    },
    {
        "text": "extension context attributes"
    },
    {
        "text": "If the Event state is not a workflow starting state, the `timeout` property can be used to define the time duration from the"
    },
    {
        "text": "invocation of the event state"
    },
    {
        "text": "If the defined event, or events have not been received during this time,"
    },
    {
        "text": "The `timeouts` property can be used to define state specific timeout settings"
    },
    {
        "text": "Event states can define the"
    },
    {
        "text": "`stateExecTimeout`, `actionExecTimeout`, and `eventTimeout` properties"
    },
    {
        "text": "Note that `transition` and `end` properties are mutually exclusive, meaning that you cannot define both of them at the same time"
    },
    {
        "text": "Operation state defines a set of actions to be performed in sequence or in parallel"
    },
    {
        "text": "Once all actions have been performed, a transition to another state can occur"
    },
    {
        "text": "The `timeouts` property can be used to define state specific timeout settings"
    },
    {
        "text": "Operation states can define"
    },
    {
        "text": "the `stateExecTimeout` and `actionExecTimeout` settings"
    },
    {
        "text": "For more information on Workflow timeouts reference"
    },
    {
        "text": "At times multiple defined conditions can be evaluated to `true` by runtime implementations"
    },
    {
        "text": "Conditions defined first take precedence over conditions defined later"
    },
    {
        "text": "This is backed by the fact that arrays/sequences"
    },
    {
        "text": "Because A was defined first, its transition will be executed, not B's"
    },
    {
        "text": "In case of data-based conditions definition, switch state controls workflow transitions based on the states data"
    },
    {
        "text": "If no defined conditions can be matched, the state transitions is taken based on the `defaultCondition` property"
    },
    {
        "text": "This property can be either a `transition` to another workflow state, or an `end` definition meaning a workflow end"
    },
    {
        "text": "For event-based conditions, a switch state acts as a workflow wait state"
    },
    {
        "text": "It halts workflow execution"
    },
    {
        "text": "until one of the referenced events arrive, then making a transition depending on that event definition"
    },
    {
        "text": "If events defined in event-based conditions do not arrive before the states `eventTimeout` property expires,"
    },
    {
        "text": "state transitions are based on the defined `defaultCondition` property"
    },
    {
        "text": "The `timeouts` property can be used to define state specific timeout settings"
    },
    {
        "text": "Switch states can define the"
    },
    {
        "text": "`stateExecTimeout` setting"
    },
    {
        "text": "If `eventConditions` is defined, the switch state can also define the"
    },
    {
        "text": "Sleep state"
    },
    {
        "text": "suspends workflow execution for a given time duration"
    },
    {
        "text": "The delay is defined in its `duration` property using the ISO 8601"
    },
    {
        "text": "duration format"
    },
    {
        "text": "Parallel state defines a collection of `branches` that are executed in parallel"
    },
    {
        "text": "A parallel state can be seen a state which splits up the current workflow instance execution path"
    },
    {
        "text": "into multiple ones, one for each branch"
    },
    {
        "text": "These execution paths are performed in parallel"
    },
    {
        "text": "and are joined back into the current execution path depending on the defined `completionType` parameter value"
    },
    {
        "text": "specify the `numCompleted` property to define this number"
    },
    {
        "text": "The `timeouts` property can be used to set state specific timeout settings"
    },
    {
        "text": "Parallel states can define the"
    },
    {
        "text": "`stateExecTimeout` and `branchExecTimeout` timeout settings"
    },
    {
        "text": "For more information on workflow timeouts"
    },
    {
        "text": "Inject state can be used to inject static data into state data input"
    },
    {
        "text": "Inject state does not perform any actions"
    },
    {
        "text": "It is very useful for debugging, for example, as you can test/simulate workflow execution with pre-set data that would typically"
    },
    {
        "text": "The inject state `data` property allows you to statically define a JSON object which gets added to the states data input"
    },
    {
        "text": "You can use the filter property to control the states data output to the transition state"
    },
    {
        "text": "Here is a typical example of how to use the inject state to add static data into its states data input, which then is passed"
    },
    {
        "text": "```json"
    },
    {
        "text": "Concepts - elementary units of knowledge in the system"
    },
    {
        "text": "Predicates - statements about relations between concepts"
    },
    {
        "text": "Knowledge graph - graph data structure for storing concepts and predicates"
    },
    {
        "text": "vector representation - representation of concepts as vectors in a multidimensional space"
    },
    {
        "text": "Embedding - transformation of objects into vector representation"
    },
    {
        "text": "Attention mechanism - selection of currently relevant parts of the context"
    },
    {
        "text": "Logical inference - constructing new statements by applying inference rules"
    },
    {
        "text": "Planning - constructing a sequence of actions to achieve a goal"
    },
    {
        "text": "Analogies - transferring knowledge from one subject area to another by analogy"
    },
    {
        "text": "Skills - fixed work processes for solving certain tasks"
    },
    {
        "text": "Uses a graph data structure to represent AI knowledge"
    },
    {
        "text": "The nodes of the graph are concepts and the edges are the connections between them"
    },
    {
        "text": "Concepts are represented as vectors in a multi-dimensional vector space"
    },
    {
        "text": "This allows the semantic proximity of concepts to be measured using cosine distance"
    },
    {
        "text": "Transformer neural networks such as GPT-3 are used for natural language processing"
    },
    {
        "text": "They convert text into a vector representation"
    },
    {
        "text": "For logical inference, rules in the \"if-then\" format are used"
    },
    {
        "text": "They allow building chains of inferences based on available knowledge"
    },
    {
        "text": "There is an attention mechanism that focuses on currently relevant concepts and ignores others"
    },
    {
        "text": "Mechanisms of memory, planning, reasoning by analogy for solving various tasks are implemented"
    },
    {
        "text": "Define the nodes"
    },
    {
        "text": "Define the connections"
    },
    {
        "text": "Create the graph"
    },
    {
        "text": "Visualize the flowchart"
    },
    {
        "text": "Save or display the flowchart"
    },
    {
        "text": "Read 5 files"
    },
    {
        "text": "This creates a directed graph from the nodes and edges, generates a spring layout, draws the graph with the specified formatting, and saves/displays the flowchart"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Switch to enable PlantUML in the insert from text dialog"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "General timeout is 25 seconds"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Defines the maximum width for pasted text"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Specifies if PDF export should be done via print dialog"
    },
    {
        "text": "Default is"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Deprecated"
    },
    {
        "text": "Poorly defined, to be replaced with isExternalDataComms and other more granular flags"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Returns true if the given binary data is a Visio file that requires remote conversion"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Workaround for malformed xhtml meta element bug 07"
    },
    {
        "text": "08"
    },
    {
        "text": "16"
    },
    {
        "text": "The trailing slash was missing causing"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Some nodes must be extracted here to find the mxfile node"
    },
    {
        "text": "try"
    },
    {
        "text": "// Wraps page nodes"
    },
    {
        "text": "// Checks for invalid page names"
    },
    {
        "text": "else"
    },
    {
        "text": "// Creates tabbed file structure if enforced by URL"
    },
    {
        "text": "// Avoids scroll offset when switching page"
    },
    {
        "text": "// Avoids duplicate parsing of the XML stored in the node"
    },
    {
        "text": "// Removes old pages"
    },
    {
        "text": "finally"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Embed script only used if no redirect"
    },
    {
        "text": "// Adds embed attributes"
    },
    {
        "text": "// Hidden attributes"
    },
    {
        "text": "// Makes XHTML compatible"
    },
    {
        "text": "// Removes control chars in input for correct roundtrip check"
    },
    {
        "text": "// Double compression for mxfile not fixed since it may cause imcompatibilites with"
    },
    {
        "text": "// embed clients that rely on this format"
    },
    {
        "text": "HTML files and export use getHtml2"
    },
    {
        "text": "// Fallback to URI encoded XML for invalid compression"
    },
    {
        "text": "'</head>\\n<body' +"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Checks for parser errors"
    },
    {
        "text": "else"
    },
    {
        "text": "// Some nodes must be extracted here to find the mxfile node"
    },
    {
        "text": "// Wraps page nodes"
    },
    {
        "text": "// Adds page ID based on page order to match"
    },
    {
        "text": "// remote IDs given if IDs are missing here"
    },
    {
        "text": "// Checks for invalid page names"
    },
    {
        "text": "// Creates tabbed file structure if enforced by URL"
    },
    {
        "text": "// Avoids scroll offset when switching page"
    },
    {
        "text": "// Avoids duplicate parsing of the XML stored in the node"
    },
    {
        "text": "// Scrolls to current page"
    },
    {
        "text": "try"
    },
    {
        "text": "// handle layers visibility"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "is preprendended to the data returned from the given URL"
    },
    {
        "text": "// Installs updates"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Creates a hash value for the given object"
    },
    {
        "text": "Replacer returns the value of the"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Extracts the resource for the current language from the given multi language"
    },
    {
        "text": "are country codes and main defines the fallback if no resource for the current"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Checks for valid output"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "Image export in viewer is only allowed for same domain or hosted environments"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "Last 3 argument are optional and must only be used if the data can be stored as is on the client"
    },
    {
        "text": "side without requiring a server roundtrip"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Handles special case where background is null but transparent is false"
    },
    {
        "text": "// Sets or disables alternate text for foreignObjects"
    },
    {
        "text": "Disabling is needed"
    },
    {
        "text": "// because PhantomJS seems to ignore switch statements and paint all text"
    },
    {
        "text": "else"
    },
    {
        "text": "// Adds CSS"
    },
    {
        "text": "// Caches images"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "// Fallback to non-public URL for Drive files"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "// Cannot disable lightbox in iframes"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "include"
    },
    {
        "text": "checked, cb5"
    },
    {
        "text": "checked, borderInput"
    },
    {
        "text": "value, cb6"
    },
    {
        "text": "checked, false, linkSelect"
    },
    {
        "text": "value,"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Adds double click handling"
    },
    {
        "text": "else"
    },
    {
        "text": "// DOM node which is no longer in document with IE11"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Keeps hashtag links on same page"
    },
    {
        "text": "// Adds shadow filter"
    },
    {
        "text": "// SVG inside image tag"
    },
    {
        "text": "// Adds double click handling"
    },
    {
        "text": "// Images inside IMG don't seem to work so embed them all"
    },
    {
        "text": "else"
    },
    {
        "text": "// Adds double click handling"
    },
    {
        "text": "// Ignores link events"
    },
    {
        "text": "// Focus existing lightbox"
    },
    {
        "text": "// Message handling"
    },
    {
        "text": "// Opens lightbox window"
    },
    {
        "text": "// Adds responsive size"
    },
    {
        "text": "// Adds CSS"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Hack to decode XML into temp graph via editor"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "finally"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Exports PNG for given optional data"
    },
    {
        "text": "// Exports PNG for first page while other page is showing"
    },
    {
        "text": "try"
    },
    {
        "text": "// Removes temporary graph from DOM"
    },
    {
        "text": "/**"
    },
    {
        "text": "Returns the SVG of the diagram with embedded XML"
    },
    {
        "text": "If a callback function is"
    },
    {
        "text": "// Adds CSS"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Embeds font CSS as data URIs into the given svgRoot"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Caches images"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns true if the given URL is known to have CORS headers"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Handling drag and drop and import"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports the given XML into the existing diagram"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "// Adds pages"
    },
    {
        "text": "try"
    },
    {
        "text": "// Checks for mxfile with multiple pages"
    },
    {
        "text": "// Renames page if diagram has one blank page with default name"
    },
    {
        "text": "// Adds first page to current page if current page is only page and empty"
    },
    {
        "text": "// Imported pages must obtain a new ID and"
    },
    {
        "text": "// all links to pages must be updated below"
    },
    {
        "text": "// Checks for invalid page names"
    },
    {
        "text": "graph"
    },
    {
        "text": "defaultVertexStyle,"
    },
    {
        "text": "graph"
    },
    {
        "text": "defaultEdgeStyle,"
    },
    {
        "text": "finally"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Updates links to pages in shapes and labels"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Updates links to pages in shapes and labels"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore background image"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Updates links to pages in shapes and labels"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Updates links to pages in shapes and labels"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "// Ignore"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns true for VSD, VDX and VSS, VSX files"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports the given Visio file"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "//A reduced version of this code is used in conf/jira plugins, review that code whenever this function is changed"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Export the diagram to VSDX"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Async needed for showing spinner for longer exports"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports the given Lucidchart data"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "// Checks for signature method"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "else"
    },
    {
        "text": "//Lucid org chart requires orgChart layout, in production, it is part of the extemsions"
    },
    {
        "text": "min"
    },
    {
        "text": "js"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Async needed for selection"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Generates a Mermaid image"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Generates a Mermaid image"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Generates a Mermaid image"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Removes dashes in entries"
    },
    {
        "text": "// Removes indentiation for root element"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Generates a Mermaid image"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Removes occasional \"o\" on first line in response"
    },
    {
        "text": "// Various formats supported"
    },
    {
        "text": "// Removes occasional mermaid tag or other text on first line"
    },
    {
        "text": "// Validates diagram type on first line"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Removes all lines starting with %%"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Generates a Mermaid image"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "// Workaround for namespace errors in SVG output for IE"
    },
    {
        "text": "try"
    },
    {
        "text": "//Any size such that it shows up"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Generates a plant UML image"
    },
    {
        "text": "Possible types are svg, png and txt"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "// Workaround for 0 image size in IE11"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Inserts the given text as a preformatted HTML text"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "finally"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports the given XML into the existing diagram"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Handles special case for Gliffy data which requires async server-side for parsing"
    },
    {
        "text": "else"
    },
    {
        "text": "// Returns empty cells array as it is aysynchronous"
    },
    {
        "text": "// Handles special case of data URI which requires async loading for finding size"
    },
    {
        "text": "// Checks for embedded XML in PDF"
    },
    {
        "text": "// Checks for embedded XML in PNG"
    },
    {
        "text": "// Tries to extract embedded XML from SVG data URI"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "// Ignore"
    },
    {
        "text": "else"
    },
    {
        "text": "// Inserts invalid data URIs as text"
    },
    {
        "text": "try"
    },
    {
        "text": "finally"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "// Fires cellsInserted to apply the current style to the inserted text"
    },
    {
        "text": "// This requires the value to be empty when the event is fired"
    },
    {
        "text": "//TODO Refuse unsupported file types early as at this stage a lot of processing has beed done and time is wasted"
    },
    {
        "text": "//\t\tFor example, 5 MB PDF files is processed and then only 0"
    },
    {
        "text": "5 MB of meaningless text is added!"
    },
    {
        "text": "//Limit labels to maxTextBytes"
    },
    {
        "text": "// Apply value and updates the cell size to fit the text block"
    },
    {
        "text": "// Adds wrapping for large text blocks"
    },
    {
        "text": "// Adds spacing"
    },
    {
        "text": "finally"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Formats the given file size"
    },
    {
        "text": "*/"
    },
    {
        "text": "do"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports the given XML into the existing diagram"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Handles special case of data URI which needs to be rewritten"
    },
    {
        "text": "// to be used in a cell style to remove the semicolon"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns true for Gliffy data"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns true for Gliffy"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports a local file from the device or local storage"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Using null for position will disable crop of input file"
    },
    {
        "text": "else"
    },
    {
        "text": "// Closes dialog after open"
    },
    {
        "text": "// \"Not a UTF 8 file\" when opening VSDX in IE so this is never called"
    },
    {
        "text": "else"
    },
    {
        "text": "// Removes openFile if dialog is closed"
    },
    {
        "text": "// Extends dialog close to show splash screen"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports the given zip file"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports the given XML into the existing diagram"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Returns empty cells array as it is aysynchronous"
    },
    {
        "text": "else"
    },
    {
        "text": "//If importing as a zip file failed, just insert as text"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Checks if large images are imported"
    },
    {
        "text": "try"
    },
    {
        "text": "// Opens as diagram if current file is blank with no undoable changes"
    },
    {
        "text": "else"
    },
    {
        "text": "// Barrier waits for all files to be loaded asynchronously"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "finally"
    },
    {
        "text": "try"
    },
    {
        "text": "// Checks if SVG contains content attribute"
    },
    {
        "text": "else"
    },
    {
        "text": "// SVG needs special handling to add viewbox if missing and"
    },
    {
        "text": "try"
    },
    {
        "text": "// Parses SVG and find width and height"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Check if viewBox attribute already exists"
    },
    {
        "text": "// Uses width and height from viewbox for"
    },
    {
        "text": "// missing width and height attributes"
    },
    {
        "text": "// Hack to fix width and height asynchronously"
    },
    {
        "text": "// ignores any SVG parsing errors"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Checks if PNG+XML is available to bypass code below"
    },
    {
        "text": "// Additional asynchronous step for finding image size"
    },
    {
        "text": "// Cannot load local files in Chrome App"
    },
    {
        "text": "// Hides the dialog"
    },
    {
        "text": "// Redirects to import function"
    },
    {
        "text": "else"
    },
    {
        "text": "// Refuses to insert images above a certain size as they kill the app"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Ignores file parsing error"
    },
    {
        "text": "// Handles special cases"
    },
    {
        "text": "else"
    },
    {
        "text": "// Workaround for lost files array in async code"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns true if the current file is a blank diagram"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Parses the file using XHR2 via the server"
    },
    {
        "text": "File can be a blob or file object"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Parses the file using XHR2 via the server"
    },
    {
        "text": "File can be a blob or file object"
    },
    {
        "text": "*/"
    },
    {
        "text": "//TODO Use this version of the function instead of creating a Blob then read it again"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Resizes the given image if <maxImageBytes> is not null"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "// Uses new image if smaller"
    },
    {
        "text": "// Checks if the image is empty by comparing"
    },
    {
        "text": "// with an empty image of the same size"
    },
    {
        "text": "// ignores image scaling errors"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Extracts the XML from the compressed or non-compressed text chunk"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Loads the image from the given URI"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns the default value for sketch mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overridden to set sketch mode before UI is created"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Initializes the UI"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Stops panning while freehand is active"
    },
    {
        "text": "// Starts editing PlantUML data"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "finally"
    },
    {
        "text": "// Starts editing Mermaid data"
    },
    {
        "text": "try"
    },
    {
        "text": "finally"
    },
    {
        "text": "// Overrides function to add editing for Plant UML"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Redirects custom link title via UI for page links"
    },
    {
        "text": "// Redirects custom link via UI for page link handling"
    },
    {
        "text": "try"
    },
    {
        "text": "// Parses background page references"
    },
    {
        "text": "// Updates background page SVG"
    },
    {
        "text": "// Updates background to update placeholders for page title"
    },
    {
        "text": "// Updates background to update placeholders for page number"
    },
    {
        "text": "// Updates background image after remote changes to the referenced page"
    },
    {
        "text": "// Restores background page reference in output data or"
    },
    {
        "text": "// replaces dark mode page image with normal mode image"
    },
    {
        "text": "// Sets help link for placeholders"
    },
    {
        "text": "// Passes dev mode to new window"
    },
    {
        "text": "// For chromeless mode and lightbox mode in viewer"
    },
    {
        "text": "// Must be overridden before supercall to be applied"
    },
    {
        "text": "// in case of chromeless initialization"
    },
    {
        "text": "// For some reason, local argument override is not enough in this case"
    },
    {
        "text": "// Inserts zoomIn/zoomOut into popup menu"
    },
    {
        "text": "// Shows add to scratchpad option"
    },
    {
        "text": "// Inserts copyAsImage into popup menu"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Shows line submenu for edges"
    },
    {
        "text": "// Shows table cell options"
    },
    {
        "text": "// Overrides print dialog size"
    },
    {
        "text": "// Specifies the default filename"
    },
    {
        "text": "// Adds export for %page%, %pagenumber% and %pagecount% placeholders"
    },
    {
        "text": "// Adds %page%, %pagenumber% and %pagecount% placeholders"
    },
    {
        "text": "else"
    },
    {
        "text": "// Forces update of filename placeholder"
    },
    {
        "text": "// Active links are moved to the hint"
    },
    {
        "text": "// Resets rubberband after click on locked cell"
    },
    {
        "text": "else"
    },
    {
        "text": "// Overrides editor filename"
    },
    {
        "text": "// Disables print action for standalone apps on iOS"
    },
    {
        "text": "// because there is no way to close the new window"
    },
    {
        "text": "// Installs additional keyboard shortcuts for editor"
    },
    {
        "text": "// Defines additional hotkeys"
    },
    {
        "text": "// Updates realtime state icon"
    },
    {
        "text": "// Creates the spinner"
    },
    {
        "text": "// Installs drag and drop handler for rich text editor"
    },
    {
        "text": "// Setup the dnd listeners"
    },
    {
        "text": "// IE 10 does not implement pointer-events so it can't have a drop highlight"
    },
    {
        "text": "// Inserts image into current text box"
    },
    {
        "text": "// No post processing"
    },
    {
        "text": "// Handles only images"
    },
    {
        "text": "// Invokes elements of queue in order"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Adding mxRuler to editor"
    },
    {
        "text": "// Adds an element to edit the style in the footer in test mode"
    },
    {
        "text": "// Workaround for ignore right CSS property in FF"
    },
    {
        "text": "else"
    },
    {
        "text": "// Removes info text in page"
    },
    {
        "text": "// Installs drag and drop handler for files"
    },
    {
        "text": "// Enables dropping files"
    },
    {
        "text": "// Setup the dnd listeners"
    },
    {
        "text": "// IE 10 does not implement pointer-events so it can't have a drop highlight"
    },
    {
        "text": "// Closes current file if blank and no undoable changes"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// The default is based on the extension"
    },
    {
        "text": "// Extracts single image"
    },
    {
        "text": "// Handles special case where the src attribute has no valid extension"
    },
    {
        "text": "// in which case the text would be inserted as text with a link"
    },
    {
        "text": "else"
    },
    {
        "text": "// Extracts single link"
    },
    {
        "text": "else"
    },
    {
        "text": "// Extracts preformatted text"
    },
    {
        "text": "else"
    },
    {
        "text": "// Embedded mode"
    },
    {
        "text": "// Overrides mxWindow"
    },
    {
        "text": "fit to allow for embedViewport"
    },
    {
        "text": "else"
    },
    {
        "text": "// Activates scheme in UI"
    },
    {
        "text": "// Inline embed mode must be initialized after setting current theme"
    },
    {
        "text": "else"
    },
    {
        "text": "// Initial state of format panel"
    },
    {
        "text": "try"
    },
    {
        "text": "// Automatically updates theme when system setting changes"
    },
    {
        "text": "// Ignores object doesn't support addEventListener and disables auto dark mode"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Adapts the UI elements when the window size changes"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Initializes embed inline mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Overridden to avoid reset of scrollbars"
    },
    {
        "text": "// do nothing"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Installs handler for pasting image from clipboard"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "// Workaround for asynchronous paste event processing in textInput"
    },
    {
        "text": "// Inserts image into current text box"
    },
    {
        "text": "// No post processing"
    },
    {
        "text": "// Handles only images"
    },
    {
        "text": "// Invokes elements of queue in order"
    },
    {
        "text": "else"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Installs the native clipboard support"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Focused but invisible textarea during control or meta key events"
    },
    {
        "text": "// Disables built-in cut, copy and paste shortcuts"
    },
    {
        "text": "// Shows a textare when control/cmd is pressed to handle native clipboard actions"
    },
    {
        "text": "// No dialog visible"
    },
    {
        "text": "// Cannot use parentNode for check in IE"
    },
    {
        "text": "// Avoid autoscroll but allow handling of all pass-through ctrl shortcuts"
    },
    {
        "text": "// Workaround for Safari 16 scroll after CMD key press"
    },
    {
        "text": "// Clears input and restores focus and selection"
    },
    {
        "text": "// Workaround for asynchronous event read invalid in IE quirks mode"
    },
    {
        "text": "// Asynchronous workaround for scroll to origin after paste if the"
    },
    {
        "text": "// Ctrl-key is not pressed for long enough in FF on Windows"
    },
    {
        "text": "// Workaround for lost cursor in focused element"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "// Workaround for Safari 16 scroll after paste"
    },
    {
        "text": "// Needed for IE11"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Sets the current UI theme"
    },
    {
        "text": "Possible values are null, \"kennedy\" and \"sketch\""
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Changes the current UI theme"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Changes the current UI theme"
    },
    {
        "text": "*/"
    },
    {
        "text": "// From kennedy to simple or sketch or vice versa"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Saves scroll position"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Shows animated spinner while saving"
    },
    {
        "text": "// Checks size of container without status"
    },
    {
        "text": "// Hides container if empty and no status"
    },
    {
        "text": "// Shows status if container empty or status relevant"
    },
    {
        "text": "// Required for flex layout gaps to be applied correctly"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Removes containers before destroying windows"
    },
    {
        "text": "// Format window"
    },
    {
        "text": "// Shapes window"
    },
    {
        "text": "// Format window"
    },
    {
        "text": "// Shapes window"
    },
    {
        "text": "// Format panel close button"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Page menu only visible for multiple pages"
    },
    {
        "text": "else"
    },
    {
        "text": "// Page menu only visible for multiple pages"
    },
    {
        "text": "// Updates the label if the scale changes"
    },
    {
        "text": "// Adds shift+/alt+click on zoom label"
    },
    {
        "text": "// geItem is a dropdown menu, geMenuItem is a button in the toolbar"
    },
    {
        "text": "// Zoom Preview"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "this"
    },
    {
        "text": "diagramContainer"
    },
    {
        "text": "scrollTop + off"
    },
    {
        "text": "y, null, null, null, null,"
    },
    {
        "text": "else"
    },
    {
        "text": "// Thinner previews in simple toolbar"
    },
    {
        "text": "// Append sidebar elements"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Disables built-in pan and zoom on touch devices"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Moves menu away if picker overlaps"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Create toolbar button"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Prevents focus"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "// Sets initial state for format window"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "// On smaller screens this is set to 0"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Changes refresh to only update the diagram container in sketch mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Defined in native apps together with openLibrary"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Persist setting"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Dark mode styles"
    },
    {
        "text": "'html body"
    },
    {
        "text": "geToolbarContainer"
    },
    {
        "text": "geMenuItem, html body"
    },
    {
        "text": "geToolbarContainer"
    },
    {
        "text": "geToolbarButton, ' +"
    },
    {
        "text": "'html body"
    },
    {
        "text": "geMenubarContainer"
    },
    {
        "text": "geMenuItem"
    },
    {
        "text": "geMenuItem, html body"
    },
    {
        "text": "geMenubarContainer a"
    },
    {
        "text": "geMenuItem,' +"
    },
    {
        "text": "// Non-dark mode styles"
    },
    {
        "text": "'div"
    },
    {
        "text": "diagramContainer button"
    },
    {
        "text": "gePrimaryBtn,"
    },
    {
        "text": "mxWindow button"
    },
    {
        "text": "gePrimaryBtn,"
    },
    {
        "text": "geDialog button"
    },
    {
        "text": "gePrimaryBtn, html body"
    },
    {
        "text": "gePrimaryBtn ' +"
    },
    {
        "text": "// End of custom styles"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Sets dark mode and persists the setting"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Sets dark mode and persists the setting"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Shows dialog in new language"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns true if automatic dark mode is supported"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns the current state of the dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Creates dark mode style node"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Sets instance graph stylesheet"
    },
    {
        "text": "// Sets global vars"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "// Sets instance vars and graph stylesheet"
    },
    {
        "text": "// Destroys windows with code for dark mode"
    },
    {
        "text": "// Updates CSS"
    },
    {
        "text": "// Adds or removes link to CSS"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Changes Editor"
    },
    {
        "text": "pagesVisible"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Persist setting"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Changes Sidebar"
    },
    {
        "text": "sidebarTitles"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Persist setting"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Send request for fullscreen to parent"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Invokes to update the UI after a size change in inline embed mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "this"
    },
    {
        "text": "diagramContainer"
    },
    {
        "text": "style"
    },
    {
        "text": "left + ' ' + this"
    },
    {
        "text": "diagramContainer"
    },
    {
        "text": "style"
    },
    {
        "text": "width + ' ' +"
    },
    {
        "text": "else"
    },
    {
        "text": "this"
    },
    {
        "text": "diagramContainer"
    },
    {
        "text": "offsetWidth -"
    },
    {
        "text": "this"
    },
    {
        "text": "diagramContainer"
    },
    {
        "text": "offsetHeight -"
    },
    {
        "text": "this"
    },
    {
        "text": "diagramContainer"
    },
    {
        "text": "offsetWidth -"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "// Needs fallback for missing resource in case of viewer lightbox"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Creates the format panel and adds overrides"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Sets global switch for sketch mode"
    },
    {
        "text": "// Gets recent colors from settings"
    },
    {
        "text": "// Avoids overridden values for changes in"
    },
    {
        "text": "// multiple windows and updates shared values"
    },
    {
        "text": "try"
    },
    {
        "text": "// Updates values"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "// Updates UI to reflect current edge style"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Persists custom fonts"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Persists copy on connect switch"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Persists default page format"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Persists default grid color"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Persists autosave switch in Chrome app"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Shows scratchpad if never shown"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Saves app defaults for UI"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Copies the given cells and XML to the clipboard as an embedded image"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "null, null, null, 10, null, null, false, null,"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Copies the given cells and XML to the clipboard as an embedded image"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Creates the format panel and adds overrides"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Fixes cross-platform clipboard UTF8 issues by encoding as URI"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Disables copy on focused element"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Creates the format panel and adds overrides"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Creates the format panel and adds overrides"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "finally"
    },
    {
        "text": "else"
    },
    {
        "text": "// No offset for insert at mouse position"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Creates the format panel and adds overrides"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Workaround for paste from IE11 where the page is copied"
    },
    {
        "text": "// as HTML while the data is only available via text/plain"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "else"
    },
    {
        "text": "//Miro is using unkown encoding instead of BASE64 as before"
    },
    {
        "text": "else"
    },
    {
        "text": "// seems to paste the contents of index"
    },
    {
        "text": "html"
    },
    {
        "text": "// Workaround for junk after XML in VM"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "// Checks for embedded XML content"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore event no longer exists in async handler in IE8-"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Adds a file drop handler for opening local files"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Installs drag and drop handler for files"
    },
    {
        "text": "// Setup the dnd listeners"
    },
    {
        "text": "// IE 10 does not implement pointer-events so it can't have a drop highlight"
    },
    {
        "text": "// Never open files in embed mode"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Handles open special files via text drag and drop"
    },
    {
        "text": "// Tries additional and async parsing of text content such as HTML, Gliffy data"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Extracts single image"
    },
    {
        "text": "// Checks for embedded XML in PNG"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Highlights the given element"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Highlights the given element"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Opens the given files in the editor"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "// Creates new temporary file if library is dropped in splash screen"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Creates new temporary file if library is dropped in splash screen"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Opens the given files in the editor"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Shows the layers dialog if the graph has more than one layer"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns a list of all shapes used in the current file"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns a list of all shapes used in the current file"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Adds package names for markers in edges"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Shows the layers dialog if the graph has more than one layer"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Shows the layers dialog if the graph has more than one layer"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Creates temporary file for diff sync in embed mode"
    },
    {
        "text": "try"
    },
    {
        "text": "//Disable grid and page view"
    },
    {
        "text": "//Add sketch style and font to all cells"
    },
    {
        "text": "// Workaround for no initial focus in FF"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Shows the layers dialog if the graph has more than one layer"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Tries to find a public URL for the given file"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Adds the buttons for embedded mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Adds the buttons for embedded mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Adds the buttons for embedded mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Receives XML message from opener and puts it into the graph"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore compression errors and use empty data"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "// Ignore"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "// Workaround for status updated before modified applied"
    },
    {
        "text": "//If binary files are possible, we can get the file content using remote invokation, imported it, and send final mxFile back"
    },
    {
        "text": "//TODO Remove this message and use remote invokation instead"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "// Removes temporary graph from DOM"
    },
    {
        "text": "// Exports PNG for first/specific page while other page is visible by creating a graph"
    },
    {
        "text": "//If pageId info is incorrect"
    },
    {
        "text": "// Set visible layers based on message setting"
    },
    {
        "text": "// Uses optional XML from incoming message"
    },
    {
        "text": "else"
    },
    {
        "text": "// Data from server is base64 encoded to avoid binary XHR"
    },
    {
        "text": "// Double encoding for XML arg is needed for UTF8 encoding"
    },
    {
        "text": "// Temp graph was never created at this point so we can"
    },
    {
        "text": "// skip processUri since it already contains the XML"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Attaches incoming message"
    },
    {
        "text": "// Forces new HTML format if pages exists"
    },
    {
        "text": "else"
    },
    {
        "text": "// Creates a preview with no alt text for unsupported browsers"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// SVG is generated from graph so parse optional XML"
    },
    {
        "text": "// Waits for MathJax autoloading and rendering"
    },
    {
        "text": "else"
    },
    {
        "text": "// Inline min width and height"
    },
    {
        "text": "// Data is extracted diagram in async code"
    },
    {
        "text": "// Moves format window to top of graph"
    },
    {
        "text": "// Centers horizontally"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Unknown message must stop execution"
    },
    {
        "text": "try"
    },
    {
        "text": "// Some options trigger autosave"
    },
    {
        "text": "// Sends the bounds of the graph to the host after parsing"
    },
    {
        "text": "// Attaches XML to response"
    },
    {
        "text": "// Checks VND binary magic number in base64"
    },
    {
        "text": "else"
    },
    {
        "text": "// Asynchronous parsing via server"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Requests data from the sender"
    },
    {
        "text": "This is a workaround for not allowing"
    },
    {
        "text": "// the opener to listen for the onload event if not in the same origin"
    },
    {
        "text": "// Adds JSON event for opening links"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Adds the buttons for embedded mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Adds the buttons for embedded mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Loads orgchart layouts and executes the given function"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Loads orgchart layouts and executes the given function"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "// Internal lookup table"
    },
    {
        "text": "// Default values"
    },
    {
        "text": "// Delayed after optional layout"
    },
    {
        "text": "else"
    },
    {
        "text": "// Computes unscaled, untranslated graph bounds"
    },
    {
        "text": "// Default label value depends on column names"
    },
    {
        "text": "// Default layout to run"
    },
    {
        "text": "// Name of the attribute that contains the parent reference"
    },
    {
        "text": "// Name of the attribute that contains the references for creating edges"
    },
    {
        "text": "// Name of the column for hyperlinks"
    },
    {
        "text": "// String array of names to remove from metadata"
    },
    {
        "text": "// Read processing instructions first"
    },
    {
        "text": "// Processing instruction"
    },
    {
        "text": "// Converts identity and parent to index and validates XML attribute names"
    },
    {
        "text": "// Parse and validate input"
    },
    {
        "text": "try"
    },
    {
        "text": "// Bypasses update of cells inserted during this run"
    },
    {
        "text": "else"
    },
    {
        "text": "// Removes attribute"
    },
    {
        "text": "// Sets the geometry"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Process parents for autosize"
    },
    {
        "text": "// Adds additional edge labels"
    },
    {
        "text": "// Checks more entries"
    },
    {
        "text": "// Removes ignored attributes after processing above"
    },
    {
        "text": "// Aligns cells to grid and/or rounds positions"
    },
    {
        "text": "// Required for layouts to work with new cells"
    },
    {
        "text": "// Ignore other cells"
    },
    {
        "text": "// Required for layouts to work with new cells"
    },
    {
        "text": "// Required for layouts to work with new cells"
    },
    {
        "text": "// Workaround for flow layout moving cells to origin"
    },
    {
        "text": "// Required for layouts to work with new cells"
    },
    {
        "text": "// Ignore other cells"
    },
    {
        "text": "// Required for layouts to work with new cells"
    },
    {
        "text": "// Ignore other cells"
    },
    {
        "text": "finally"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Translates this point by the given vector"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns the URL for a copy of this editor with no state"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "// Removes template URL parameter for new blank diagram"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides link dialog"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns the number of storage options enabled"
    },
    {
        "text": "*/"
    },
    {
        "text": "serviceCount++"
    },
    {
        "text": "serviceCount++"
    },
    {
        "text": "serviceCount++"
    },
    {
        "text": "serviceCount++"
    },
    {
        "text": "serviceCount++"
    },
    {
        "text": "serviceCount++"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Updates action and menu states depending on the file"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Action states that only need update for new files"
    },
    {
        "text": "// Disables libraries and extras menu in embed mode"
    },
    {
        "text": "// while waiting for file data"
    },
    {
        "text": "// Disables actions in the toolbar"
    },
    {
        "text": "// Disables menus"
    },
    {
        "text": "// Disables connection drop downs in toolbar"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Hook for subclassers"
    },
    {
        "text": "*/"
    },
    {
        "text": "// do nothing"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Hook for subclassers"
    },
    {
        "text": "*/"
    },
    {
        "text": "// do nothing"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Hook for subclassers"
    },
    {
        "text": "*/"
    },
    {
        "text": "// do nothing"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Hook for subclassers"
    },
    {
        "text": "*/"
    },
    {
        "text": "// do nothing"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns true if a diagram is cative and editable"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Extends sidebar construction to add listeners for theme changes"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Extends sidebar construction to add listeners for theme changes"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Updates action states depending on the selection"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overridden to remove export dialog in chromeless lightbox"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides export dialog for using ui functions for save and setting global switches"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "//White-listed functions and some info about it"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "//Remote invoke are allowed to call functions in AC"
    },
    {
        "text": "//Confirm functionArgs are not null and is array, otherwise, discard it"
    },
    {
        "text": "//success"
    },
    {
        "text": "//error"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Opens the application keystore"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "// Version 1 is the first version of the database"
    },
    {
        "text": "// Version 2 introduces browser file storage"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "//Log error"
    },
    {
        "text": "try"
    },
    {
        "text": "//Log error"
    },
    {
        "text": "try"
    },
    {
        "text": "//Only accept messages from migration iframe"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "//Nothing in draw"
    },
    {
        "text": "io localStorage"
    },
    {
        "text": "else"
    },
    {
        "text": "//Add the file, then move to the next"
    },
    {
        "text": "else"
    },
    {
        "text": "//TODO Handle DB revision update while code is running"
    },
    {
        "text": "//\t\tSave open file and request a page reload before closing the DB"
    },
    {
        "text": "// Warn if error handler is not set"
    },
    {
        "text": "//TODO Use this when a new version is introduced"
    },
    {
        "text": "// there's another open connection to same database"
    },
    {
        "text": "// and it wasn't closed after db"
    },
    {
        "text": "onversionchange triggered for them"
    },
    {
        "text": "// Warn if error handler is not set"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Removes the item for the given key from the database"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns one item from the database"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns all items from the database"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns all item keys from the database"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "/**"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Are comments supported"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Show refresh button?"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Show save button?"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Get comments"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Add a comment"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Can add a reply to a reply"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Get a new comment object"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Does revisions history available"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Get revisions of current file"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Is revisions history enabled"
    },
    {
        "text": "*/"
    },
    {
        "text": "//Using a standard header with specific sequence"
    },
    {
        "text": "ignoreSelection, scale, transparentBackground, addShadow, converter, graph, border,"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Read 5 files"
    },
    {
        "text": "/**"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Defines EditorUi"
    },
    {
        "text": "VERSION"
    },
    {
        "text": "// Overrides compact UI setting"
    },
    {
        "text": "// Overrides default grid color for dark mode"
    },
    {
        "text": "// Specifies enableLogging switch"
    },
    {
        "text": "// Specifies drawHost and lightboxHost URLs"
    },
    {
        "text": "// Specifies lastErrorMessage"
    },
    {
        "text": "// Specifies ignoredAnonymizedChars"
    },
    {
        "text": "// Specifies templateFile URL"
    },
    {
        "text": "// Specifies cacheUrl"
    },
    {
        "text": "// Disables sync if no cacheUrl"
    },
    {
        "text": "// Specifies cacheTimeout"
    },
    {
        "text": "// Specifies enablePlantUml switch"
    },
    {
        "text": "// Checks if running in Electron app"
    },
    {
        "text": "// Shortcut for nativeFileSupport"
    },
    {
        "text": "// Specifies enableDrafts switch"
    },
    {
        "text": "// Specifies scratchpadHelpLink"
    },
    {
        "text": "// Specifies enableHtmlEditOption switch"
    },
    {
        "text": "// Specifies default mermaid config"
    },
    {
        "text": "This contains key configuration settings and constants used in EditorUi"
    },
    {
        "text": "Define the nodes"
    },
    {
        "text": "Define the connections"
    },
    {
        "text": "Create the graph"
    },
    {
        "text": "Visualize the flowchart"
    },
    {
        "text": "Save or display the flowchart"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441 \u0448\u0438\u0440\u0438\u043d\u043e\u0439 12 \u0438 \u0432\u044b\u0441\u043e\u0442\u043e\u0439 6 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u0417\u0430\u0434\u0430\u0435\u043c \u0446\u0432\u0435\u0442\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432"
    },
    {
        "text": "\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0433\u0440\u0443\u043f\u043f\u0443 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u0446\u0432\u0435\u0442\u043e\u043c"
    },
    {
        "text": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 \u0444\u0430\u0439\u043b"
    },
    {
        "text": "Read 5 files"
    },
    {
        "text": "The order matters since you are using nx first before plt"
    },
    {
        "text": "<svg>"
    },
    {
        "text": "</svg>"
    },
    {
        "text": "The JavaScript code needs to be at the top level, not indented"
    },
    {
        "text": "\u043f\u0435\u0440\u0435\u043f\u0438\u0448\u0438 \u0437\u0430\u043d\u043e\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e"
    },
    {
        "text": "Read 5 files"
    },
    {
        "text": "Import order of matplotlib and networkx"
    },
    {
        "text": "Also removed extra blank lines and fixed indentation"
    },
    {
        "text": "---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "text": "Sourcegraph logo"
    },
    {
        "text": "Cody AI"
    },
    {
        "text": "Install Cody locally"
    },
    {
        "text": "Cody Chat"
    },
    {
        "text": "Beta"
    },
    {
        "text": "Cody answers code questions and writes code for you by leveraging your entire codebase and the code graph"
    },
    {
        "text": "Chats"
    },
    {
        "text": "about 3 hours ago"
    },
    {
        "text": "Hello! I'm Cody"
    },
    {
        "text": "I can write code and answer questions for you"
    },
    {
        "text": "See Cody documentation for help and tips"
    },
    {
        "text": "By using Cody, you agree to its license and privacy statement"
    },
    {
        "text": "\u041f\u0440\u0438\u0432\u0435\u0442 \ud83d\udc4b!"
    },
    {
        "text": "\u041f\u0440\u0438\u0432\u0435\u0442! \u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u044f \u0433\u043e\u0432\u043e\u0440\u044e \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e-\u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438"
    },
    {
        "text": "\u041d\u043e \u044f \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u044e\u0441\u044c \u043f\u043e\u043c\u043e\u0447\u044c \u0432\u0430\u043c \u0441 \u0432\u043e\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435"
    },
    {
        "text": "Hello Joy,"
    },
    {
        "text": "I appreciate the invitation to chat"
    },
    {
        "text": "As you may have noticed, I'm not fluent in English"
    },
    {
        "text": "However, that doesn't prevent me from messaging"
    },
    {
        "text": "If we do need to have an online conversation, I can find a way to make it work"
    },
    {
        "text": "Perhaps I could suggest an approach - you could send me a list of questions you were planning to ask, to understand how to ally MindOS and Israel"
    },
    {
        "text": "And how I might help, not as a major investor, but as a platform user who wants to accelerate the project launch, apply it to my work, and promote it to my clients"
    },
    {
        "text": "If this proposal works for you, we could start right away"
    },
    {
        "text": "I'll respond as I'm able, so we can quickly gain some mutual understanding and make a plan of necessary actions"
    },
    {
        "text": "Until I see your questions, I can't say if I'll be of real help or not"
    },
    {
        "text": "PS - Thank you for the offer of credits, but I have an unlimited plan"
    },
    {
        "text": "It's likely better to give them to someone who needs them more"
    },
    {
        "text": "Hi Joy,"
    },
    {
        "text": "I'm happy to chat, though my English isn't fluent"
    },
    {
        "text": "That won't stop me from messaging, but if we need an online conversation, I can find a way"
    },
    {
        "text": "Maybe you could send me the questions you wanted to ask - to understand how to partner MindOS and Israel, and how I could help, not as an investor, but as a user who wants to speed up the launch, use it in my work, and promote it"
    },
    {
        "text": "If you like the idea, let's start now"
    },
    {
        "text": "I'll answer when I can, so we quickly gain mutual understanding and make an action plan"
    },
    {
        "text": "Until I see the questions, I can't say if I'll really help"
    },
    {
        "text": "PS - Thanks for the credit offer, but I have unlimited"
    },
    {
        "text": "It's better for someone who needs it"
    },
    {
        "text": "Hi Joy!"
    },
    {
        "text": "I'm happy to chat, though my English is limited"
    },
    {
        "text": "I can still message, but may need help with a live conversation"
    },
    {
        "text": "Perhaps you could send me your questions - to understand partnering MindOS and Israel, and how I can help as a user who wants to accelerate launch, use it myself, and promote to clients"
    },
    {
        "text": "It seems with the right conditions you have a chance at a top AI spot"
    },
    {
        "text": "But that takes more than a team"
    },
    {
        "text": "If you like the idea, let's start now"
    },
    {
        "text": "I'll answer when possible so we can understand each other and make a plan"
    },
    {
        "text": "Until I see the questions, I can't say if I'll really help"
    },
    {
        "text": "PS - Thanks for the credit offer, but I have unlimited"
    },
    {
        "text": "Better for someone who needs it"
    },
    {
        "text": "Define the nodes"
    },
    {
        "text": "Define the connections"
    },
    {
        "text": "Create the graph"
    },
    {
        "text": "Visualize the flowchart"
    },
    {
        "text": "Save or display the flowchart"
    },
    {
        "text": "Read 5 files"
    },
    {
        "text": "This creates a directed graph from the nodes and edges, generates a spring layout, draws the graph with the specified formatting, and saves/displays the flowchart"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Switch to enable PlantUML in the insert from text dialog"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "General timeout is 25 seconds"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Defines the maximum width for pasted text"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Specifies if PDF export should be done via print dialog"
    },
    {
        "text": "Default is"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Deprecated"
    },
    {
        "text": "Poorly defined, to be replaced with isExternalDataComms and other more granular flags"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Returns true if the given binary data is a Visio file that requires remote conversion"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Workaround for malformed xhtml meta element bug 07"
    },
    {
        "text": "08"
    },
    {
        "text": "16"
    },
    {
        "text": "The trailing slash was missing causing"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Some nodes must be extracted here to find the mxfile node"
    },
    {
        "text": "try"
    },
    {
        "text": "// Wraps page nodes"
    },
    {
        "text": "// Checks for invalid page names"
    },
    {
        "text": "else"
    },
    {
        "text": "// Creates tabbed file structure if enforced by URL"
    },
    {
        "text": "// Avoids scroll offset when switching page"
    },
    {
        "text": "// Avoids duplicate parsing of the XML stored in the node"
    },
    {
        "text": "// Removes old pages"
    },
    {
        "text": "finally"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Embed script only used if no redirect"
    },
    {
        "text": "// Adds embed attributes"
    },
    {
        "text": "// Hidden attributes"
    },
    {
        "text": "// Makes XHTML compatible"
    },
    {
        "text": "// Removes control chars in input for correct roundtrip check"
    },
    {
        "text": "// Double compression for mxfile not fixed since it may cause imcompatibilites with"
    },
    {
        "text": "// embed clients that rely on this format"
    },
    {
        "text": "HTML files and export use getHtml2"
    },
    {
        "text": "// Fallback to URI encoded XML for invalid compression"
    },
    {
        "text": "'</head>\\n<body' +"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Checks for parser errors"
    },
    {
        "text": "else"
    },
    {
        "text": "// Some nodes must be extracted here to find the mxfile node"
    },
    {
        "text": "// Wraps page nodes"
    },
    {
        "text": "// Adds page ID based on page order to match"
    },
    {
        "text": "// remote IDs given if IDs are missing here"
    },
    {
        "text": "// Checks for invalid page names"
    },
    {
        "text": "// Creates tabbed file structure if enforced by URL"
    },
    {
        "text": "// Avoids scroll offset when switching page"
    },
    {
        "text": "// Avoids duplicate parsing of the XML stored in the node"
    },
    {
        "text": "// Scrolls to current page"
    },
    {
        "text": "try"
    },
    {
        "text": "// handle layers visibility"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "is preprendended to the data returned from the given URL"
    },
    {
        "text": "// Installs updates"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Creates a hash value for the given object"
    },
    {
        "text": "Replacer returns the value of the"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Extracts the resource for the current language from the given multi language"
    },
    {
        "text": "are country codes and main defines the fallback if no resource for the current"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Checks for valid output"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "Image export in viewer is only allowed for same domain or hosted environments"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "Last 3 argument are optional and must only be used if the data can be stored as is on the client"
    },
    {
        "text": "side without requiring a server roundtrip"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Handles special case where background is null but transparent is false"
    },
    {
        "text": "// Sets or disables alternate text for foreignObjects"
    },
    {
        "text": "Disabling is needed"
    },
    {
        "text": "// because PhantomJS seems to ignore switch statements and paint all text"
    },
    {
        "text": "else"
    },
    {
        "text": "// Adds CSS"
    },
    {
        "text": "// Caches images"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "// Fallback to non-public URL for Drive files"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "// Cannot disable lightbox in iframes"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "include"
    },
    {
        "text": "checked, cb5"
    },
    {
        "text": "checked, borderInput"
    },
    {
        "text": "value, cb6"
    },
    {
        "text": "checked, false, linkSelect"
    },
    {
        "text": "value,"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Adds double click handling"
    },
    {
        "text": "else"
    },
    {
        "text": "// DOM node which is no longer in document with IE11"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Keeps hashtag links on same page"
    },
    {
        "text": "// Adds shadow filter"
    },
    {
        "text": "// SVG inside image tag"
    },
    {
        "text": "// Adds double click handling"
    },
    {
        "text": "// Images inside IMG don't seem to work so embed them all"
    },
    {
        "text": "else"
    },
    {
        "text": "// Adds double click handling"
    },
    {
        "text": "// Ignores link events"
    },
    {
        "text": "// Focus existing lightbox"
    },
    {
        "text": "// Message handling"
    },
    {
        "text": "// Opens lightbox window"
    },
    {
        "text": "// Adds responsive size"
    },
    {
        "text": "// Adds CSS"
    },
    {
        "text": "/**"
    },
    {
        "text": "Translates this point by the given vector"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Hack to decode XML into temp graph via editor"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "finally"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "// Exports PNG for given optional data"
    },
    {
        "text": "// Exports PNG for first page while other page is showing"
    },
    {
        "text": "try"
    },
    {
        "text": "// Removes temporary graph from DOM"
    },
    {
        "text": "/**"
    },
    {
        "text": "Returns the SVG of the diagram with embedded XML"
    },
    {
        "text": "If a callback function is"
    },
    {
        "text": "// Adds CSS"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Embeds font CSS as data URIs into the given svgRoot"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Caches images"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns true if the given URL is known to have CORS headers"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Handling drag and drop and import"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports the given XML into the existing diagram"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "// Adds pages"
    },
    {
        "text": "try"
    },
    {
        "text": "// Checks for mxfile with multiple pages"
    },
    {
        "text": "// Renames page if diagram has one blank page with default name"
    },
    {
        "text": "// Adds first page to current page if current page is only page and empty"
    },
    {
        "text": "// Imported pages must obtain a new ID and"
    },
    {
        "text": "// all links to pages must be updated below"
    },
    {
        "text": "// Checks for invalid page names"
    },
    {
        "text": "graph"
    },
    {
        "text": "defaultVertexStyle,"
    },
    {
        "text": "graph"
    },
    {
        "text": "defaultEdgeStyle,"
    },
    {
        "text": "finally"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Updates links to pages in shapes and labels"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Updates links to pages in shapes and labels"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore background image"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Updates links to pages in shapes and labels"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Updates links to pages in shapes and labels"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "// Ignore"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns true for VSD, VDX and VSS, VSX files"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports the given Visio file"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "//A reduced version of this code is used in conf/jira plugins, review that code whenever this function is changed"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Export the diagram to VSDX"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Async needed for showing spinner for longer exports"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports the given Lucidchart data"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "// Checks for signature method"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "else"
    },
    {
        "text": "//Lucid org chart requires orgChart layout, in production, it is part of the extemsions"
    },
    {
        "text": "min"
    },
    {
        "text": "js"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Async needed for selection"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Generates a Mermaid image"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Generates a Mermaid image"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Generates a Mermaid image"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Removes dashes in entries"
    },
    {
        "text": "// Removes indentiation for root element"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Generates a Mermaid image"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Removes occasional \"o\" on first line in response"
    },
    {
        "text": "// Various formats supported"
    },
    {
        "text": "// Removes occasional mermaid tag or other text on first line"
    },
    {
        "text": "// Validates diagram type on first line"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Removes all lines starting with %%"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Generates a Mermaid image"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "// Workaround for namespace errors in SVG output for IE"
    },
    {
        "text": "try"
    },
    {
        "text": "//Any size such that it shows up"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Generates a plant UML image"
    },
    {
        "text": "Possible types are svg, png and txt"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "// Workaround for 0 image size in IE11"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Inserts the given text as a preformatted HTML text"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "finally"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports the given XML into the existing diagram"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Handles special case for Gliffy data which requires async server-side for parsing"
    },
    {
        "text": "else"
    },
    {
        "text": "// Returns empty cells array as it is aysynchronous"
    },
    {
        "text": "// Handles special case of data URI which requires async loading for finding size"
    },
    {
        "text": "// Checks for embedded XML in PDF"
    },
    {
        "text": "// Checks for embedded XML in PNG"
    },
    {
        "text": "// Tries to extract embedded XML from SVG data URI"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "// Ignore"
    },
    {
        "text": "else"
    },
    {
        "text": "// Inserts invalid data URIs as text"
    },
    {
        "text": "try"
    },
    {
        "text": "finally"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "// Fires cellsInserted to apply the current style to the inserted text"
    },
    {
        "text": "// This requires the value to be empty when the event is fired"
    },
    {
        "text": "//TODO Refuse unsupported file types early as at this stage a lot of processing has beed done and time is wasted"
    },
    {
        "text": "//\t\tFor example, 5 MB PDF files is processed and then only 0"
    },
    {
        "text": "5 MB of meaningless text is added!"
    },
    {
        "text": "//Limit labels to maxTextBytes"
    },
    {
        "text": "// Apply value and updates the cell size to fit the text block"
    },
    {
        "text": "// Adds wrapping for large text blocks"
    },
    {
        "text": "// Adds spacing"
    },
    {
        "text": "finally"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Formats the given file size"
    },
    {
        "text": "*/"
    },
    {
        "text": "do"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports the given XML into the existing diagram"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Handles special case of data URI which needs to be rewritten"
    },
    {
        "text": "// to be used in a cell style to remove the semicolon"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns true for Gliffy data"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns true for Gliffy"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports a local file from the device or local storage"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Using null for position will disable crop of input file"
    },
    {
        "text": "else"
    },
    {
        "text": "// Closes dialog after open"
    },
    {
        "text": "// \"Not a UTF 8 file\" when opening VSDX in IE so this is never called"
    },
    {
        "text": "else"
    },
    {
        "text": "// Removes openFile if dialog is closed"
    },
    {
        "text": "// Extends dialog close to show splash screen"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports the given zip file"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Imports the given XML into the existing diagram"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Returns empty cells array as it is aysynchronous"
    },
    {
        "text": "else"
    },
    {
        "text": "//If importing as a zip file failed, just insert as text"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Checks if large images are imported"
    },
    {
        "text": "try"
    },
    {
        "text": "// Opens as diagram if current file is blank with no undoable changes"
    },
    {
        "text": "else"
    },
    {
        "text": "// Barrier waits for all files to be loaded asynchronously"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "finally"
    },
    {
        "text": "try"
    },
    {
        "text": "// Checks if SVG contains content attribute"
    },
    {
        "text": "else"
    },
    {
        "text": "// SVG needs special handling to add viewbox if missing and"
    },
    {
        "text": "try"
    },
    {
        "text": "// Parses SVG and find width and height"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Check if viewBox attribute already exists"
    },
    {
        "text": "// Uses width and height from viewbox for"
    },
    {
        "text": "// missing width and height attributes"
    },
    {
        "text": "// Hack to fix width and height asynchronously"
    },
    {
        "text": "// ignores any SVG parsing errors"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Checks if PNG+XML is available to bypass code below"
    },
    {
        "text": "// Additional asynchronous step for finding image size"
    },
    {
        "text": "// Cannot load local files in Chrome App"
    },
    {
        "text": "// Hides the dialog"
    },
    {
        "text": "// Redirects to import function"
    },
    {
        "text": "else"
    },
    {
        "text": "// Refuses to insert images above a certain size as they kill the app"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Ignores file parsing error"
    },
    {
        "text": "// Handles special cases"
    },
    {
        "text": "else"
    },
    {
        "text": "// Workaround for lost files array in async code"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns true if the current file is a blank diagram"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Parses the file using XHR2 via the server"
    },
    {
        "text": "File can be a blob or file object"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Parses the file using XHR2 via the server"
    },
    {
        "text": "File can be a blob or file object"
    },
    {
        "text": "*/"
    },
    {
        "text": "//TODO Use this version of the function instead of creating a Blob then read it again"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Resizes the given image if <maxImageBytes> is not null"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "// Uses new image if smaller"
    },
    {
        "text": "// Checks if the image is empty by comparing"
    },
    {
        "text": "// with an empty image of the same size"
    },
    {
        "text": "// ignores image scaling errors"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Extracts the XML from the compressed or non-compressed text chunk"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Loads the image from the given URI"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns the default value for sketch mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overridden to set sketch mode before UI is created"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Initializes the UI"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Stops panning while freehand is active"
    },
    {
        "text": "// Starts editing PlantUML data"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "finally"
    },
    {
        "text": "// Starts editing Mermaid data"
    },
    {
        "text": "try"
    },
    {
        "text": "finally"
    },
    {
        "text": "// Overrides function to add editing for Plant UML"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Redirects custom link title via UI for page links"
    },
    {
        "text": "// Redirects custom link via UI for page link handling"
    },
    {
        "text": "try"
    },
    {
        "text": "// Parses background page references"
    },
    {
        "text": "// Updates background page SVG"
    },
    {
        "text": "// Updates background to update placeholders for page title"
    },
    {
        "text": "// Updates background to update placeholders for page number"
    },
    {
        "text": "// Updates background image after remote changes to the referenced page"
    },
    {
        "text": "// Restores background page reference in output data or"
    },
    {
        "text": "// replaces dark mode page image with normal mode image"
    },
    {
        "text": "// Sets help link for placeholders"
    },
    {
        "text": "// Passes dev mode to new window"
    },
    {
        "text": "// For chromeless mode and lightbox mode in viewer"
    },
    {
        "text": "// Must be overridden before supercall to be applied"
    },
    {
        "text": "// in case of chromeless initialization"
    },
    {
        "text": "// For some reason, local argument override is not enough in this case"
    },
    {
        "text": "// Inserts zoomIn/zoomOut into popup menu"
    },
    {
        "text": "// Shows add to scratchpad option"
    },
    {
        "text": "// Inserts copyAsImage into popup menu"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Shows line submenu for edges"
    },
    {
        "text": "// Shows table cell options"
    },
    {
        "text": "// Overrides print dialog size"
    },
    {
        "text": "// Specifies the default filename"
    },
    {
        "text": "// Adds export for %page%, %pagenumber% and %pagecount% placeholders"
    },
    {
        "text": "// Adds %page%, %pagenumber% and %pagecount% placeholders"
    },
    {
        "text": "else"
    },
    {
        "text": "// Forces update of filename placeholder"
    },
    {
        "text": "// Active links are moved to the hint"
    },
    {
        "text": "// Resets rubberband after click on locked cell"
    },
    {
        "text": "else"
    },
    {
        "text": "// Overrides editor filename"
    },
    {
        "text": "// Disables print action for standalone apps on iOS"
    },
    {
        "text": "// because there is no way to close the new window"
    },
    {
        "text": "// Installs additional keyboard shortcuts for editor"
    },
    {
        "text": "// Defines additional hotkeys"
    },
    {
        "text": "// Updates realtime state icon"
    },
    {
        "text": "// Creates the spinner"
    },
    {
        "text": "// Installs drag and drop handler for rich text editor"
    },
    {
        "text": "// Setup the dnd listeners"
    },
    {
        "text": "// IE 10 does not implement pointer-events so it can't have a drop highlight"
    },
    {
        "text": "// Inserts image into current text box"
    },
    {
        "text": "// No post processing"
    },
    {
        "text": "// Handles only images"
    },
    {
        "text": "// Invokes elements of queue in order"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Adding mxRuler to editor"
    },
    {
        "text": "// Adds an element to edit the style in the footer in test mode"
    },
    {
        "text": "// Workaround for ignore right CSS property in FF"
    },
    {
        "text": "else"
    },
    {
        "text": "// Removes info text in page"
    },
    {
        "text": "// Installs drag and drop handler for files"
    },
    {
        "text": "// Enables dropping files"
    },
    {
        "text": "// Setup the dnd listeners"
    },
    {
        "text": "// IE 10 does not implement pointer-events so it can't have a drop highlight"
    },
    {
        "text": "// Closes current file if blank and no undoable changes"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// The default is based on the extension"
    },
    {
        "text": "// Extracts single image"
    },
    {
        "text": "// Handles special case where the src attribute has no valid extension"
    },
    {
        "text": "// in which case the text would be inserted as text with a link"
    },
    {
        "text": "else"
    },
    {
        "text": "// Extracts single link"
    },
    {
        "text": "else"
    },
    {
        "text": "// Extracts preformatted text"
    },
    {
        "text": "else"
    },
    {
        "text": "// Embedded mode"
    },
    {
        "text": "// Overrides mxWindow"
    },
    {
        "text": "fit to allow for embedViewport"
    },
    {
        "text": "else"
    },
    {
        "text": "// Activates scheme in UI"
    },
    {
        "text": "// Inline embed mode must be initialized after setting current theme"
    },
    {
        "text": "else"
    },
    {
        "text": "// Initial state of format panel"
    },
    {
        "text": "try"
    },
    {
        "text": "// Automatically updates theme when system setting changes"
    },
    {
        "text": "// Ignores object doesn't support addEventListener and disables auto dark mode"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Adapts the UI elements when the window size changes"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Initializes embed inline mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Overridden to avoid reset of scrollbars"
    },
    {
        "text": "// do nothing"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Installs handler for pasting image from clipboard"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "// Workaround for asynchronous paste event processing in textInput"
    },
    {
        "text": "// Inserts image into current text box"
    },
    {
        "text": "// No post processing"
    },
    {
        "text": "// Handles only images"
    },
    {
        "text": "// Invokes elements of queue in order"
    },
    {
        "text": "else"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Installs the native clipboard support"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Focused but invisible textarea during control or meta key events"
    },
    {
        "text": "// Disables built-in cut, copy and paste shortcuts"
    },
    {
        "text": "// Shows a textare when control/cmd is pressed to handle native clipboard actions"
    },
    {
        "text": "// No dialog visible"
    },
    {
        "text": "// Cannot use parentNode for check in IE"
    },
    {
        "text": "// Avoid autoscroll but allow handling of all pass-through ctrl shortcuts"
    },
    {
        "text": "// Workaround for Safari 16 scroll after CMD key press"
    },
    {
        "text": "// Clears input and restores focus and selection"
    },
    {
        "text": "// Workaround for asynchronous event read invalid in IE quirks mode"
    },
    {
        "text": "// Asynchronous workaround for scroll to origin after paste if the"
    },
    {
        "text": "// Ctrl-key is not pressed for long enough in FF on Windows"
    },
    {
        "text": "// Workaround for lost cursor in focused element"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "// Workaround for Safari 16 scroll after paste"
    },
    {
        "text": "// Needed for IE11"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Sets the current UI theme"
    },
    {
        "text": "Possible values are null, \"kennedy\" and \"sketch\""
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Changes the current UI theme"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Changes the current UI theme"
    },
    {
        "text": "*/"
    },
    {
        "text": "// From kennedy to simple or sketch or vice versa"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Saves scroll position"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Shows animated spinner while saving"
    },
    {
        "text": "// Checks size of container without status"
    },
    {
        "text": "// Hides container if empty and no status"
    },
    {
        "text": "// Shows status if container empty or status relevant"
    },
    {
        "text": "// Required for flex layout gaps to be applied correctly"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Removes containers before destroying windows"
    },
    {
        "text": "// Format window"
    },
    {
        "text": "// Shapes window"
    },
    {
        "text": "// Format window"
    },
    {
        "text": "// Shapes window"
    },
    {
        "text": "// Format panel close button"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Page menu only visible for multiple pages"
    },
    {
        "text": "else"
    },
    {
        "text": "// Page menu only visible for multiple pages"
    },
    {
        "text": "// Updates the label if the scale changes"
    },
    {
        "text": "// Adds shift+/alt+click on zoom label"
    },
    {
        "text": "// geItem is a dropdown menu, geMenuItem is a button in the toolbar"
    },
    {
        "text": "// Zoom Preview"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "this"
    },
    {
        "text": "diagramContainer"
    },
    {
        "text": "scrollTop + off"
    },
    {
        "text": "y, null, null, null, null,"
    },
    {
        "text": "else"
    },
    {
        "text": "// Thinner previews in simple toolbar"
    },
    {
        "text": "// Append sidebar elements"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Disables built-in pan and zoom on touch devices"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Moves menu away if picker overlaps"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Create toolbar button"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Prevents focus"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "// Sets initial state for format window"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "// On smaller screens this is set to 0"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Changes refresh to only update the diagram container in sketch mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Defined in native apps together with openLibrary"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Persist setting"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Dark mode styles"
    },
    {
        "text": "'html body"
    },
    {
        "text": "geToolbarContainer"
    },
    {
        "text": "geMenuItem, html body"
    },
    {
        "text": "geToolbarContainer"
    },
    {
        "text": "geToolbarButton, ' +"
    },
    {
        "text": "'html body"
    },
    {
        "text": "geMenubarContainer"
    },
    {
        "text": "geMenuItem"
    },
    {
        "text": "geMenuItem, html body"
    },
    {
        "text": "geMenubarContainer a"
    },
    {
        "text": "geMenuItem,' +"
    },
    {
        "text": "// Non-dark mode styles"
    },
    {
        "text": "'div"
    },
    {
        "text": "diagramContainer button"
    },
    {
        "text": "gePrimaryBtn,"
    },
    {
        "text": "mxWindow button"
    },
    {
        "text": "gePrimaryBtn,"
    },
    {
        "text": "geDialog button"
    },
    {
        "text": "gePrimaryBtn, html body"
    },
    {
        "text": "gePrimaryBtn ' +"
    },
    {
        "text": "// End of custom styles"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Sets dark mode and persists the setting"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Sets dark mode and persists the setting"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Shows dialog in new language"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns true if automatic dark mode is supported"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns the current state of the dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Creates dark mode style node"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Sets instance graph stylesheet"
    },
    {
        "text": "// Sets global vars"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "// Sets instance vars and graph stylesheet"
    },
    {
        "text": "// Destroys windows with code for dark mode"
    },
    {
        "text": "// Updates CSS"
    },
    {
        "text": "// Adds or removes link to CSS"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Changes Editor"
    },
    {
        "text": "pagesVisible"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Persist setting"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Changes Sidebar"
    },
    {
        "text": "sidebarTitles"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Persist setting"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Send request for fullscreen to parent"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Invokes to update the UI after a size change in inline embed mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "this"
    },
    {
        "text": "diagramContainer"
    },
    {
        "text": "style"
    },
    {
        "text": "left + ' ' + this"
    },
    {
        "text": "diagramContainer"
    },
    {
        "text": "style"
    },
    {
        "text": "width + ' ' +"
    },
    {
        "text": "else"
    },
    {
        "text": "this"
    },
    {
        "text": "diagramContainer"
    },
    {
        "text": "offsetWidth -"
    },
    {
        "text": "this"
    },
    {
        "text": "diagramContainer"
    },
    {
        "text": "offsetHeight -"
    },
    {
        "text": "this"
    },
    {
        "text": "diagramContainer"
    },
    {
        "text": "offsetWidth -"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Dynamic change of dark mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides image dialog to add image search and Google+"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "// Needs fallback for missing resource in case of viewer lightbox"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Creates the format panel and adds overrides"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Sets global switch for sketch mode"
    },
    {
        "text": "// Gets recent colors from settings"
    },
    {
        "text": "// Avoids overridden values for changes in"
    },
    {
        "text": "// multiple windows and updates shared values"
    },
    {
        "text": "try"
    },
    {
        "text": "// Updates values"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "// Updates UI to reflect current edge style"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Persists custom fonts"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Persists copy on connect switch"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Persists default page format"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Persists default grid color"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Persists autosave switch in Chrome app"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Shows scratchpad if never shown"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Saves app defaults for UI"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Copies the given cells and XML to the clipboard as an embedded image"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "null, null, null, 10, null, null, false, null,"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Copies the given cells and XML to the clipboard as an embedded image"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Creates the format panel and adds overrides"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Fixes cross-platform clipboard UTF8 issues by encoding as URI"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Disables copy on focused element"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Creates the format panel and adds overrides"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Creates the format panel and adds overrides"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "finally"
    },
    {
        "text": "else"
    },
    {
        "text": "// No offset for insert at mouse position"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Creates the format panel and adds overrides"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Workaround for paste from IE11 where the page is copied"
    },
    {
        "text": "// as HTML while the data is only available via text/plain"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "else"
    },
    {
        "text": "//Miro is using unkown encoding instead of BASE64 as before"
    },
    {
        "text": "else"
    },
    {
        "text": "// seems to paste the contents of index"
    },
    {
        "text": "html"
    },
    {
        "text": "// Workaround for junk after XML in VM"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "// Checks for embedded XML content"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore event no longer exists in async handler in IE8-"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Adds a file drop handler for opening local files"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Installs drag and drop handler for files"
    },
    {
        "text": "// Setup the dnd listeners"
    },
    {
        "text": "// IE 10 does not implement pointer-events so it can't have a drop highlight"
    },
    {
        "text": "// Never open files in embed mode"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Handles open special files via text drag and drop"
    },
    {
        "text": "// Tries additional and async parsing of text content such as HTML, Gliffy data"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Extracts single image"
    },
    {
        "text": "// Checks for embedded XML in PNG"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Highlights the given element"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Highlights the given element"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Opens the given files in the editor"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "// Creates new temporary file if library is dropped in splash screen"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Creates new temporary file if library is dropped in splash screen"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Opens the given files in the editor"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Shows the layers dialog if the graph has more than one layer"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns a list of all shapes used in the current file"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns a list of all shapes used in the current file"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Adds package names for markers in edges"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Shows the layers dialog if the graph has more than one layer"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Shows the layers dialog if the graph has more than one layer"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Creates temporary file for diff sync in embed mode"
    },
    {
        "text": "try"
    },
    {
        "text": "//Disable grid and page view"
    },
    {
        "text": "//Add sketch style and font to all cells"
    },
    {
        "text": "// Workaround for no initial focus in FF"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Shows the layers dialog if the graph has more than one layer"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Tries to find a public URL for the given file"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Adds the buttons for embedded mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Adds the buttons for embedded mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Adds the buttons for embedded mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Receives XML message from opener and puts it into the graph"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore compression errors and use empty data"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "// Ignore"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "// Workaround for status updated before modified applied"
    },
    {
        "text": "//If binary files are possible, we can get the file content using remote invokation, imported it, and send final mxFile back"
    },
    {
        "text": "//TODO Remove this message and use remote invokation instead"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "// ignore"
    },
    {
        "text": "// Removes temporary graph from DOM"
    },
    {
        "text": "// Exports PNG for first/specific page while other page is visible by creating a graph"
    },
    {
        "text": "//If pageId info is incorrect"
    },
    {
        "text": "// Set visible layers based on message setting"
    },
    {
        "text": "// Uses optional XML from incoming message"
    },
    {
        "text": "else"
    },
    {
        "text": "// Data from server is base64 encoded to avoid binary XHR"
    },
    {
        "text": "// Double encoding for XML arg is needed for UTF8 encoding"
    },
    {
        "text": "// Temp graph was never created at this point so we can"
    },
    {
        "text": "// skip processUri since it already contains the XML"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Attaches incoming message"
    },
    {
        "text": "// Forces new HTML format if pages exists"
    },
    {
        "text": "else"
    },
    {
        "text": "// Creates a preview with no alt text for unsupported browsers"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// SVG is generated from graph so parse optional XML"
    },
    {
        "text": "// Waits for MathJax autoloading and rendering"
    },
    {
        "text": "else"
    },
    {
        "text": "// Inline min width and height"
    },
    {
        "text": "// Data is extracted diagram in async code"
    },
    {
        "text": "// Moves format window to top of graph"
    },
    {
        "text": "// Centers horizontally"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Unknown message must stop execution"
    },
    {
        "text": "try"
    },
    {
        "text": "// Some options trigger autosave"
    },
    {
        "text": "// Sends the bounds of the graph to the host after parsing"
    },
    {
        "text": "// Attaches XML to response"
    },
    {
        "text": "// Checks VND binary magic number in base64"
    },
    {
        "text": "else"
    },
    {
        "text": "// Asynchronous parsing via server"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Requests data from the sender"
    },
    {
        "text": "This is a workaround for not allowing"
    },
    {
        "text": "// the opener to listen for the onload event if not in the same origin"
    },
    {
        "text": "// Adds JSON event for opening links"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Adds the buttons for embedded mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Adds the buttons for embedded mode"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Loads orgchart layouts and executes the given function"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Loads orgchart layouts and executes the given function"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "// Internal lookup table"
    },
    {
        "text": "// Default values"
    },
    {
        "text": "// Delayed after optional layout"
    },
    {
        "text": "else"
    },
    {
        "text": "// Computes unscaled, untranslated graph bounds"
    },
    {
        "text": "// Default label value depends on column names"
    },
    {
        "text": "// Default layout to run"
    },
    {
        "text": "// Name of the attribute that contains the parent reference"
    },
    {
        "text": "// Name of the attribute that contains the references for creating edges"
    },
    {
        "text": "// Name of the column for hyperlinks"
    },
    {
        "text": "// String array of names to remove from metadata"
    },
    {
        "text": "// Read processing instructions first"
    },
    {
        "text": "// Processing instruction"
    },
    {
        "text": "// Converts identity and parent to index and validates XML attribute names"
    },
    {
        "text": "// Parse and validate input"
    },
    {
        "text": "try"
    },
    {
        "text": "// Bypasses update of cells inserted during this run"
    },
    {
        "text": "else"
    },
    {
        "text": "// Removes attribute"
    },
    {
        "text": "// Sets the geometry"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "// Process parents for autosize"
    },
    {
        "text": "// Adds additional edge labels"
    },
    {
        "text": "// Checks more entries"
    },
    {
        "text": "// Removes ignored attributes after processing above"
    },
    {
        "text": "// Aligns cells to grid and/or rounds positions"
    },
    {
        "text": "// Required for layouts to work with new cells"
    },
    {
        "text": "// Ignore other cells"
    },
    {
        "text": "// Required for layouts to work with new cells"
    },
    {
        "text": "// Required for layouts to work with new cells"
    },
    {
        "text": "// Workaround for flow layout moving cells to origin"
    },
    {
        "text": "// Required for layouts to work with new cells"
    },
    {
        "text": "// Ignore other cells"
    },
    {
        "text": "// Required for layouts to work with new cells"
    },
    {
        "text": "// Ignore other cells"
    },
    {
        "text": "finally"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Translates this point by the given vector"
    },
    {
        "text": "*"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns the URL for a copy of this editor with no state"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "// Removes template URL parameter for new blank diagram"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides link dialog"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns the number of storage options enabled"
    },
    {
        "text": "*/"
    },
    {
        "text": "serviceCount++"
    },
    {
        "text": "serviceCount++"
    },
    {
        "text": "serviceCount++"
    },
    {
        "text": "serviceCount++"
    },
    {
        "text": "serviceCount++"
    },
    {
        "text": "serviceCount++"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Updates action and menu states depending on the file"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Action states that only need update for new files"
    },
    {
        "text": "// Disables libraries and extras menu in embed mode"
    },
    {
        "text": "// while waiting for file data"
    },
    {
        "text": "// Disables actions in the toolbar"
    },
    {
        "text": "// Disables menus"
    },
    {
        "text": "// Disables connection drop downs in toolbar"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Hook for subclassers"
    },
    {
        "text": "*/"
    },
    {
        "text": "// do nothing"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Hook for subclassers"
    },
    {
        "text": "*/"
    },
    {
        "text": "// do nothing"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Hook for subclassers"
    },
    {
        "text": "*/"
    },
    {
        "text": "// do nothing"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Hook for subclassers"
    },
    {
        "text": "*/"
    },
    {
        "text": "// do nothing"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns true if a diagram is cative and editable"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Extends sidebar construction to add listeners for theme changes"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Extends sidebar construction to add listeners for theme changes"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Updates action states depending on the selection"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overridden to remove export dialog in chromeless lightbox"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Overrides export dialog for using ui functions for save and setting global switches"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "//White-listed functions and some info about it"
    },
    {
        "text": "else"
    },
    {
        "text": "try"
    },
    {
        "text": "//Remote invoke are allowed to call functions in AC"
    },
    {
        "text": "//Confirm functionArgs are not null and is array, otherwise, discard it"
    },
    {
        "text": "//success"
    },
    {
        "text": "//error"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Opens the application keystore"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "// Version 1 is the first version of the database"
    },
    {
        "text": "// Version 2 introduces browser file storage"
    },
    {
        "text": "try"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "//Log error"
    },
    {
        "text": "try"
    },
    {
        "text": "//Log error"
    },
    {
        "text": "try"
    },
    {
        "text": "//Only accept messages from migration iframe"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "//Nothing in draw"
    },
    {
        "text": "io localStorage"
    },
    {
        "text": "else"
    },
    {
        "text": "//Add the file, then move to the next"
    },
    {
        "text": "else"
    },
    {
        "text": "//TODO Handle DB revision update while code is running"
    },
    {
        "text": "//\t\tSave open file and request a page reload before closing the DB"
    },
    {
        "text": "// Warn if error handler is not set"
    },
    {
        "text": "//TODO Use this when a new version is introduced"
    },
    {
        "text": "// there's another open connection to same database"
    },
    {
        "text": "// and it wasn't closed after db"
    },
    {
        "text": "onversionchange triggered for them"
    },
    {
        "text": "// Warn if error handler is not set"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Removes the item for the given key from the database"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns one item from the database"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns all items from the database"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Returns all item keys from the database"
    },
    {
        "text": "*/"
    },
    {
        "text": "try"
    },
    {
        "text": "/**"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Are comments supported"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Show refresh button?"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Show save button?"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Get comments"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Add a comment"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Can add a reply to a reply"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Get a new comment object"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Does revisions history available"
    },
    {
        "text": "*/"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Get revisions of current file"
    },
    {
        "text": "*/"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "* Is revisions history enabled"
    },
    {
        "text": "*/"
    },
    {
        "text": "//Using a standard header with specific sequence"
    },
    {
        "text": "ignoreSelection, scale, transparentBackground, addShadow, converter, graph, border,"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "else"
    },
    {
        "text": "else"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "/**"
    },
    {
        "text": "Read 5 files"
    },
    {
        "text": "/**"
    },
    {
        "text": "*/"
    },
    {
        "text": "// Defines EditorUi"
    },
    {
        "text": "VERSION"
    },
    {
        "text": "// Overrides compact UI setting"
    },
    {
        "text": "// Overrides default grid color for dark mode"
    },
    {
        "text": "// Specifies enableLogging switch"
    },
    {
        "text": "// Specifies drawHost and lightboxHost URLs"
    },
    {
        "text": "// Specifies lastErrorMessage"
    },
    {
        "text": "// Specifies ignoredAnonymizedChars"
    },
    {
        "text": "// Specifies templateFile URL"
    },
    {
        "text": "// Specifies cacheUrl"
    },
    {
        "text": "// Disables sync if no cacheUrl"
    },
    {
        "text": "// Specifies cacheTimeout"
    },
    {
        "text": "// Specifies enablePlantUml switch"
    },
    {
        "text": "// Checks if running in Electron app"
    },
    {
        "text": "// Shortcut for nativeFileSupport"
    },
    {
        "text": "// Specifies enableDrafts switch"
    },
    {
        "text": "// Specifies scratchpadHelpLink"
    },
    {
        "text": "// Specifies enableHtmlEditOption switch"
    },
    {
        "text": "// Specifies default mermaid config"
    },
    {
        "text": "This contains key configuration settings and constants used in EditorUi"
    },
    {
        "text": "Define the nodes"
    },
    {
        "text": "Define the connections"
    },
    {
        "text": "Create the graph"
    },
    {
        "text": "Visualize the flowchart"
    },
    {
        "text": "Save or display the flowchart"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441 \u0448\u0438\u0440\u0438\u043d\u043e\u0439 12 \u0438 \u0432\u044b\u0441\u043e\u0442\u043e\u0439 6 \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439"
    },
    {
        "text": "\u0417\u0430\u0434\u0430\u0435\u043c \u0446\u0432\u0435\u0442\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432"
    },
    {
        "text": "\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043a\u0430\u0436\u0434\u0443\u044e \u0433\u0440\u0443\u043f\u043f\u0443 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u0446\u0432\u0435\u0442\u043e\u043c"
    },
    {
        "text": "\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 \u0444\u0430\u0439\u043b"
    },
    {
        "text": "Read 5 files"
    },
    {
        "text": "The order matters since you are using nx first before plt"
    },
    {
        "text": "<svg>"
    },
    {
        "text": "</svg>"
    },
    {
        "text": "The JavaScript code needs to be at the top level, not indented"
    },
    {
        "text": "\u043f\u0435\u0440\u0435\u043f\u0438\u0448\u0438 \u0437\u0430\u043d\u043e\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e"
    },
    {
        "text": "Read 5 files"
    },
    {
        "text": "\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0438\u043c\u043f\u043e\u0440\u0442\u0430 matplotlib \u0438 networkx"
    },
    {
        "text": "\u0422\u0430\u043a\u0436\u0435 \u0443\u0431\u0440\u0430\u043d\u044b \u043b\u0438\u0448\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u0438\u043d\u0434\u0435\u043d\u0442\u0430\u0446\u0438\u044f"
    },
    {
        "text": "Read 5 files"
    },
    {
        "text": "MindOS - \u044d\u0442\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430, \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0435\u0439 Anthropic \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 AI"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0433\u0440\u0430\u0444\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u043d\u0438\u0439 \u0418\u0418"
    },
    {
        "text": "\u0423\u0437\u043b\u044b \u0433\u0440\u0430\u0444\u0430 - \u044d\u0442\u043e \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438, \u0430 \u0440\u0435\u0431\u0440\u0430 - \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438"
    },
    {
        "text": "\u041a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0432\u0438\u0434\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u0432 \u043c\u043d\u043e\u0433\u043e\u043c\u0435\u0440\u043d\u043e\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435"
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u0440\u044f\u0442\u044c \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0431\u043b\u0438\u0437\u043e\u0441\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0441\u0438\u043d\u0443\u0441\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f"
    },
    {
        "text": "\u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0435\u0440\u043e\u0432, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a GPT-3"
    },
    {
        "text": "\u041e\u043d\u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435"
    },
    {
        "text": "\u0414\u043b\u044f \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \"\u0435\u0441\u043b\u0438-\u0442\u043e\""
    },
    {
        "text": "\u041e\u043d\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u0443\u043c\u043e\u0437\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0437\u043d\u0430\u043d\u0438\u0439"
    },
    {
        "text": "\u0418\u043c\u0435\u0435\u0442\u0441\u044f \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0444\u043e\u043a\u0443\u0441\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044f\u0445 \u0438 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435"
    },
    {
        "text": "\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u044b \u043f\u0430\u043c\u044f\u0442\u0438, \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0440\u0430\u0441\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0439 \u043f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447"
    },
    {
        "text": "\u0412 \u0446\u0435\u043b\u043e\u043c, MindOS \u0441\u0442\u0440\u0435\u043c\u0438\u0442\u0441\u044f \u043a \u0433\u0438\u0431\u043a\u043e\u043c\u0443 \u0438 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u0437\u043d\u0430\u043d\u0438\u0439, \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0440\u0430\u0441\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f\u043c"
    },
    {
        "text": "\u0441\u043e\u0441\u0442\u0430\u0432\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0442\u0435\u0440\u043c\u0438\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0439 \u0441 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432 \u0432 \u044d\u0442\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435"
    },
    {
        "text": "Read 5 files"
    },
    {
        "text": "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0439"
    },
    {
        "text": "Read 5 files"
    },
    {
        "text": "\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u044bCertainly! Let's continue with the analysis"
    },
    {
        "text": "This is the content of Tab 3"
    },
    {
        "text": "Here you can add information about the person"
    },
    {
        "text": "Generate the output text"
    },
    {
        "text": "Autonomy Settings"
    },
    {
        "text": "About Us"
    },
    {
        "text": "Skills Settings"
    },
    {
        "text": "Data Output Block"
    },
    {
        "text": "This block imports the RE module for regular expression operations"
    },
    {
        "text": "Preprocessing Block"
    },
    {
        "text": "\u042f \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u043b\u0430\u0434\u0430\u044e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u043d\u0430\u0432\u044b\u043a\u043e\u043c \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u044f\u0440\u0430-\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u0430, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043c\u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u043d\u0442\u0435\u0440\u044c\u0435\u0440\u0430"
    },
    {
        "text": "Feature Extraction"
    },
    {
        "text": "Contact"
    },
    {
        "text": "Product Code"
    },
    {
        "text": "Services"
    },
    {
        "text": "Tab 2 Content"
    },
    {
        "text": "Tone Analysis"
    },
    {
        "text": "Home"
    },
    {
        "text": "Tab 3 Content"
    },
    {
        "text": "Result Prompt"
    },
    {
        "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
    },
    {
        "text": "Nullam auctor, nisl ac ultrices aliquet, nunc nunc tincidunt nunc, vitae lacinia nunc nisl id nunc"
    },
    {
        "text": "Contact"
    },
    {
        "text": "Start Block -> Data Input Block"
    },
    {
        "text": "Response Generation Block"
    },
    {
        "text": "\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!"
    },
    {
        "text": "Model Training"
    },
    {
        "text": "Greeting Tab"
    },
    {
        "text": "Result Oriented"
    },
    {
        "text": "Service 1"
    },
    {
        "text": "Get Image"
    },
    {
        "text": "Service 3"
    },
    {
        "text": "Evaluate the model"
    },
    {
        "text": "Template Settings"
    },
    {
        "text": "Train the classifier"
    },
    {
        "text": "Metadata"
    },
    {
        "text": "Computer VisionParameter VKnowledge Tab"
    },
    {
        "text": "Start"
    },
    {
        "text": "\u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u0430"
    },
    {
        "text": "Comments"
    },
    {
        "text": "Home"
    },
    {
        "text": "Save or display the flowchart"
    },
    {
        "text": "Retrieve the memory object"
    },
    {
        "text": "User can input a question like \"What is recursion in Python?\""
    },
    {
        "text": "Add modules to the workflow"
    },
    {
        "text": "Usage example"
    },
    {
        "text": "Make a request to a weather API to fetch the weather information for the given location"
    },
    {
        "text": "Contact"
    },
    {
        "text": "Citation IDs"
    },
    {
        "text": "Data Input Block -> Preprocessing Block"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u0439 \u0438\u043d\u0442\u0435\u0440\u044c\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u043f\u043e\u043c\u0435\u0449\u0435\u043d\u0438\u0439"
    },
    {
        "text": "Tags"
    },
    {
        "text": "Identify project tasks and milestones"
    },
    {
        "text": "\u0412\u044b\u0432\u043e\u0434 \u0441\u043f\u0438\u0441\u043a\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432"
    },
    {
        "text": "Knowledge"
    },
    {
        "text": "API Caching with Memory Nodes"
    },
    {
        "text": "LLM Identifier"
    },
    {
        "text": "Structural Parameters"
    },
    {
        "text": "Import the necessary libraries"
    },
    {
        "text": "Print the modules and the parameters that need to be added"
    },
    {
        "text": "This is the content of Tab 2"
    },
    {
        "text": "User Survey Loop"
    },
    {
        "text": "Code Examples"
    },
    {
        "text": "Welcome to My Website"
    },
    {
        "text": "Node Connection"
    },
    {
        "text": "Generate a prompt based on the task description"
    },
    {
        "text": "Reverse Engineering Skill Workflow"
    },
    {
        "text": "Define the model architecture"
    },
    {
        "text": "Image Recognition Workflow"
    },
    {
        "text": "This tab allows you to define how your AI assistant makes decisions and takes actions autonomously"
    },
    {
        "text": "Ensure a diverse and representative training dataset for better performance"
    },
    {
        "text": "Furniture Cost Estimation"
    },
    {
        "text": "Tab 1 Content"
    },
    {
        "text": "Autonomy Tab"
    },
    {
        "text": "About"
    },
    {
        "text": "About"
    },
    {
        "text": "This is a sample paragraph"
    },
    {
        "text": "\u0420\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435"
    },
    {
        "text": "Parse the response and extract the relevant weather information"
    },
    {
        "text": "Start Identifier"
    },
    {
        "text": "AI Assistant Development Workflow"
    },
    {
        "text": "Single Knowledge Entry"
    },
    {
        "text": "\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445"
    },
    {
        "text": "This tab provides options for publishing and sharing your AI assistant with others"
    },
    {
        "text": "\u0414\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432"
    },
    {
        "text": "To set the number of workers, you can access the config attribute of the model and assign the desired value to the num_workers property"
    },
    {
        "text": "This query instructs SlyAI to create a channel in the \"Publish\" section and use a copy or imitation of the specified page"
    },
    {
        "text": "The page can be described or provided as a URL"
    },
    {
        "text": "Setting the copy_or_imitation parameter to true indicates that you want to use a copy or imitation of the page"
    },
    {
        "text": "\u041e\u0431\u0437\u043e\u0440"
    },
    {
        "text": "\u041f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u044b \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430"
    },
    {
        "text": "\u041e\u0441\u043e\u0431\u043e\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0443\u0434\u0435\u043b\u0435\u043d\u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043e\u043a, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438 \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0439 \u043d\u0430 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u044f\u0437\u044b\u043a\u0435"
    },
    {
        "text": "\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c ASCII-\u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u0438 HTML-\u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0434\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"
    },
    {
        "text": "\u041f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u0438 \u0432\u0432\u043e\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043c\u0435\u043d\u044b \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"
    },
    {
        "text": "\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f"
    },
    {
        "text": "\u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0442\u0438\u043f\u0430 GPT"
    },
    {
        "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0432 \u0432\u0438\u0434\u0435 ASCII-\u0433\u0440\u0430\u0444\u0438\u043a\u0438 \u0438 HTML-\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432"
    },
    {
        "text": "\u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0443\u0434\u043e\u0431\u043d\u0443\u044e \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044e \u0438 \u043e\u0442\u043c\u0435\u043d\u0443 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439"
    },
    {
        "text": "\u041b\u043e\u0433\u0438\u043a\u0430 \u043d\u0430\u0432\u044b\u043a\u043e\u0432"
    },
    {
        "text": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0446\u0435\u043b\u0438, \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438, \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0430\u0432\u044b\u043a\u0438 \u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430"
    },
    {
        "text": "\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 \u0438 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0442\u044c \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u044f, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0438 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b"
    },
    {
        "text": "\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f"
    },
    {
        "text": "\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f"
    },
    {
        "text": "\u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432"
    },
    {
        "text": "\u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0440\u0430\u0431\u043e\u0442\u044b"
    },
    {
        "text": "\u0412 \u0446\u0435\u043b\u043e\u043c, \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u043f\u0438\u0440\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c, \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u0438 \u0438 \u043e\u0442\u043c\u0435\u043d\u0443 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e"
    },
    {
        "text": "\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a\u0430"
    },
    {
        "text": "\u0440\u0430\u0437\u0434\u0435\u043b\u0438 \u0432\u0435\u0441\u044c \u0442\u0435\u043a\u0441\u0442 \u043d\u0430 10 \u0440\u0430\u0432\u043d\u044b\u0445 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043e\u0432 ,\u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0438 \u0432\u0441\u0435 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a ,\u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0439 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0447\u0442\u043e\u0431\u044b \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0447\u0430\u0442\u0431\u043e\u0442 \u0441\u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u0432"
    },
    {
        "text": "Microsoft Visio - diagramming and vector graphics software"
    },
    {
        "text": "Can create block diagrams using pre-made shapes"
    },
    {
        "text": "Lucidchart - online diagramming tool"
    },
    {
        "text": "Has block diagram templates and shape library"
    },
    {
        "text": "Draw"
    },
    {
        "text": "io - free online diagram software"
    },
    {
        "text": "Allows drag and drop block diagram design"
    },
    {
        "text": "SmartDraw - visual diagramming software with block diagram templates"
    },
    {
        "text": "OmniGraffle - diagramming and illustration software for macOS"
    },
    {
        "text": "Has tools to design block diagrams"
    },
    {
        "text": "ConceptDraw - diagramming platform with vector graphic tools for block diagrams"
    },
    {
        "text": "Let me know if you need any clarification or have a preference for a specific tool or software feature for creating block diagrams"
    },
    {
        "text": "I can provide more details on any of these options"
    },
    {
        "text": "// Load YAML component"
    },
    {
        "text": "// Define workflow in YAML string"
    },
    {
        "text": "// Parse YAML string into array"
    },
    {
        "text": "// Output workflow details"
    },
    {
        "text": "Use shorter/cleaner variable names"
    },
    {
        "text": "Consistent indentation"
    },
    {
        "text": "Output using string interpolation instead of concatenation"
    },
    {
        "text": "Added comments for clarity"
    },
    {
        "text": "Removed unnecessary echo statements"
    },
    {
        "text": "Let me know if you have any other questions!"
    },
    {
        "text": "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0439"
    },
    {
        "text": "Use a class for better structure"
    },
    {
        "text": "// Print workflow details"
    },
    {
        "text": "// Create workflow object from YAML"
    },
    {
        "text": "// Output details"
    },
    {
        "text": "This encapsulates the workflow data nicely"
    },
    {
        "text": "Validate input data"
    },
    {
        "text": "// Validate structure"
    },
    {
        "text": "// Parse if valid"
    },
    {
        "text": "Abstract YAML parsing"
    },
    {
        "text": "// Validate"
    },
    {
        "text": "// Parse YAML"
    },
    {
        "text": "This separates concerns"
    },
    {
        "text": "Let me know if you would like me to expand on any of these suggestions!"
    }
]